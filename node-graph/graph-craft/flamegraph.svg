<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2182" onload="init(evt)" viewBox="0 0 1200 2182" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="2182" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="2165.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="2165.00"> </text><svg id="frames" x="10" width="1180" total_samples="26627"><g><title>.gnuplot-wrappe (9 samples, 0.03%)</title><rect x="0.0000%" y="2117" width="0.0338%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="9"/><text x="0.2500%" y="2127.50"></text></g><g><title>_start (9 samples, 0.03%)</title><rect x="0.0000%" y="2101" width="0.0338%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="9"/><text x="0.2500%" y="2111.50"></text></g><g><title>_dl_start (9 samples, 0.03%)</title><rect x="0.0000%" y="2085" width="0.0338%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="9"/><text x="0.2500%" y="2095.50"></text></g><g><title>_dl_sysdep_start (9 samples, 0.03%)</title><rect x="0.0000%" y="2069" width="0.0338%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="9"/><text x="0.2500%" y="2079.50"></text></g><g><title>dl_main (9 samples, 0.03%)</title><rect x="0.0000%" y="2053" width="0.0338%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="9"/><text x="0.2500%" y="2063.50"></text></g><g><title>_dl_relocate_object (8 samples, 0.03%)</title><rect x="0.0038%" y="2037" width="0.0300%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="8"/><text x="0.2538%" y="2047.50"></text></g><g><title>_dl_lookup_symbol_x (7 samples, 0.03%)</title><rect x="0.0075%" y="2021" width="0.0263%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="7"/><text x="0.2575%" y="2031.50"></text></g><g><title>do_lookup_x (5 samples, 0.02%)</title><rect x="0.0150%" y="2005" width="0.0188%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="5"/><text x="0.2650%" y="2015.50"></text></g><g><title>_RINvXsb_Csa0IlSW1QlMd_13serde_ignoredINtB6_11TrackedSeedINtNtCs7jW5nqjkTDq_4core6marker11PhantomDataINtNtBX_6option6OptionINtNtNtNtCs2M6EiDrnkss_5alloc11collections5btree3map8BTreeMapNtNtB25_6string6StringNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest12TomlPlatformEEENCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0ENtNtCs2bM0XC020qF_5serde2de15DeserializeSeed11deserializeNtNtNtCs981e1fb3vc_9toml_edit2de5value17ValueDeserializerEB4r_ (4 samples, 0.02%)</title><rect x="0.0413%" y="2085" width="0.0150%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="4"/><text x="0.2913%" y="2095.50"></text></g><g><title>_RINvXNtNtCs981e1fb3vc_9toml_edit2de5tableNtB3_17TableDeserializerNtNtCs2bM0XC020qF_5serde2de12Deserializer15deserialize_anyINtCsa0IlSW1QlMd_13serde_ignored4WrapINtNvXs3d_NtB13_5implsINtNtNtNtCs2M6EiDrnkss_5alloc11collections5btree3map8BTreeMapppENtB13_11Deserialize11deserialize10MapVisitorNtNtB33_6string6StringNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest12TomlPlatformENCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0EEB68_ (4 samples, 0.02%)</title><rect x="0.0413%" y="2069" width="0.0150%" height="15" fill="rgb(220,122,19)" fg:x="11" fg:w="4"/><text x="0.2913%" y="2079.50"></text></g><g><title>_RINvXNtNtCs981e1fb3vc_9toml_edit2de5tableNtB3_17TableDeserializerNtNtCs2bM0XC020qF_5serde2de12Deserializer15deserialize_anyINtCsa0IlSW1QlMd_13serde_ignored4WrapNtNvXNvNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifestsv_1__NtB2F_12TomlPlatformNtB13_11Deserialize11deserialize9___VisitorNCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0EEB4D_ (4 samples, 0.02%)</title><rect x="0.0413%" y="2053" width="0.0150%" height="15" fill="rgb(250,228,42)" fg:x="11" fg:w="4"/><text x="0.2913%" y="2063.50"></text></g><g><title>_RINvYINtCsa0IlSW1QlMd_13serde_ignored9MapAccessNtNtNtCs981e1fb3vc_9toml_edit2de5table14TableMapAccessNCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0ENtNtCs2bM0XC020qF_5serde2de9MapAccess10next_valueINtNtCs7jW5nqjkTDq_4core6option6OptionINtNtNtNtCs2M6EiDrnkss_5alloc11collections5btree3map8BTreeMapNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest11PackageNameNtB4X_21InheritableDependencyEEEB1J_ (4 samples, 0.02%)</title><rect x="0.0413%" y="2037" width="0.0150%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="4"/><text x="0.2913%" y="2047.50"></text></g><g><title>_RINvXsb_Csa0IlSW1QlMd_13serde_ignoredINtB6_11TrackedSeedINtNtCs7jW5nqjkTDq_4core6marker11PhantomDataINtNtBX_6option6OptionINtNtNtNtCs2M6EiDrnkss_5alloc11collections5btree3map8BTreeMapNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest11PackageNameNtB2X_21InheritableDependencyEEENCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0ENtNtCs2bM0XC020qF_5serde2de15DeserializeSeed11deserializeNtNtNtCs981e1fb3vc_9toml_edit2de5value17ValueDeserializerEB4x_ (4 samples, 0.02%)</title><rect x="0.0413%" y="2021" width="0.0150%" height="15" fill="rgb(216,20,37)" fg:x="11" fg:w="4"/><text x="0.2913%" y="2031.50"></text></g><g><title>_RINvXNtNtCs981e1fb3vc_9toml_edit2de5tableNtB3_17TableDeserializerNtNtCs2bM0XC020qF_5serde2de12Deserializer15deserialize_anyINtCsa0IlSW1QlMd_13serde_ignored4WrapINtNvXs3d_NtB13_5implsINtNtNtNtCs2M6EiDrnkss_5alloc11collections5btree3map8BTreeMapppENtB13_11Deserialize11deserialize10MapVisitorNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest11PackageNameNtB4G_21InheritableDependencyENCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0EEB6e_ (4 samples, 0.02%)</title><rect x="0.0413%" y="2005" width="0.0150%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="4"/><text x="0.2913%" y="2015.50"></text></g><g><title>_RINvXs0_NvXNvNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest1__NtBb_12TomlManifestNtNtCs2bM0XC020qF_5serde2de11Deserialize11deserializeNtB6_9___VisitorNtB1i_7Visitor9visit_mapINtCsa0IlSW1QlMd_13serde_ignored9MapAccessNtNtNtCs981e1fb3vc_9toml_edit2de5table14TableMapAccessNCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0EEB4r_ (5 samples, 0.02%)</title><rect x="0.0413%" y="2101" width="0.0188%" height="15" fill="rgb(217,207,13)" fg:x="11" fg:w="5"/><text x="0.2913%" y="2111.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeNtNtNtCs53RBGocdZ5C_5cargo3ops7resolve16WorkspaceResolveEBM_ (5 samples, 0.02%)</title><rect x="0.0601%" y="2037" width="0.0188%" height="15" fill="rgb(231,73,38)" fg:x="16" fg:w="5"/><text x="0.3101%" y="2047.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeNtNtNtCs53RBGocdZ5C_5cargo4core7package10PackageSetEBM_ (5 samples, 0.02%)</title><rect x="0.0601%" y="2021" width="0.0188%" height="15" fill="rgb(225,20,46)" fg:x="16" fg:w="5"/><text x="0.3101%" y="2031.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeTNtNtNtCs53RBGocdZ5C_5cargo4core10package_id9PackageIdINtCs8KHtNtxYdHB_8lazycell8LazyCellNtNtBL_7package7PackageEEEBN_ (4 samples, 0.02%)</title><rect x="0.0638%" y="2005" width="0.0150%" height="15" fill="rgb(210,31,41)" fg:x="17" fg:w="4"/><text x="0.3138%" y="2015.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeNtNtNtCs53RBGocdZ5C_5cargo4core8manifest8ManifestEBM_ (4 samples, 0.02%)</title><rect x="0.0638%" y="1989" width="0.0150%" height="15" fill="rgb(221,200,47)" fg:x="17" fg:w="4"/><text x="0.3138%" y="1999.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest12TomlManifestECs53RBGocdZ5C_5cargo (3 samples, 0.01%)</title><rect x="0.0676%" y="1973" width="0.0113%" height="15" fill="rgb(226,26,5)" fg:x="18" fg:w="3"/><text x="0.3176%" y="1983.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops21cargo_output_metadata21build_resolve_graph_r (4 samples, 0.02%)</title><rect x="0.0789%" y="2037" width="0.0150%" height="15" fill="rgb(249,33,26)" fg:x="21" fg:w="4"/><text x="0.3289%" y="2047.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops21cargo_output_metadata21build_resolve_graph_r (4 samples, 0.02%)</title><rect x="0.0789%" y="2021" width="0.0150%" height="15" fill="rgb(235,183,28)" fg:x="21" fg:w="4"/><text x="0.3289%" y="2031.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops21cargo_output_metadata21build_resolve_graph_r (4 samples, 0.02%)</title><rect x="0.0789%" y="2005" width="0.0150%" height="15" fill="rgb(221,5,38)" fg:x="21" fg:w="4"/><text x="0.3289%" y="2015.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops21cargo_output_metadata21build_resolve_graph_r (3 samples, 0.01%)</title><rect x="0.0826%" y="1989" width="0.0113%" height="15" fill="rgb(247,18,42)" fg:x="22" fg:w="3"/><text x="0.3326%" y="1999.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops21cargo_output_metadata21build_resolve_graph_r (3 samples, 0.01%)</title><rect x="0.0826%" y="1973" width="0.0113%" height="15" fill="rgb(241,131,45)" fg:x="22" fg:w="3"/><text x="0.3326%" y="1983.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver12activate_pkg (4 samples, 0.02%)</title><rect x="0.0939%" y="1989" width="0.0150%" height="15" fill="rgb(249,31,29)" fg:x="25" fg:w="4"/><text x="0.3439%" y="1999.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver7resolve (5 samples, 0.02%)</title><rect x="0.0939%" y="2021" width="0.0188%" height="15" fill="rgb(225,111,53)" fg:x="25" fg:w="5"/><text x="0.3439%" y="2031.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver12activate_pkg (5 samples, 0.02%)</title><rect x="0.0939%" y="2005" width="0.0188%" height="15" fill="rgb(238,160,17)" fg:x="25" fg:w="5"/><text x="0.3439%" y="2015.50"></text></g><g><title>_RNvMs1_NtNtCs53RBGocdZ5C_5cargo4core20global_cache_trackerNtB5_21DeferredGlobalLastUse13save_no_error (3 samples, 0.01%)</title><rect x="0.1127%" y="2005" width="0.0113%" height="15" fill="rgb(214,148,48)" fg:x="30" fg:w="3"/><text x="0.3627%" y="2015.50"></text></g><g><title>_RNvMs1_NtNtCs53RBGocdZ5C_5cargo4core20global_cache_trackerNtB5_21DeferredGlobalLastUse4save (3 samples, 0.01%)</title><rect x="0.1127%" y="1989" width="0.0113%" height="15" fill="rgb(232,36,49)" fg:x="30" fg:w="3"/><text x="0.3627%" y="1999.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeNtNtNtCs53RBGocdZ5C_5cargo4core8manifest16ManifestMetadataEBM_ (5 samples, 0.02%)</title><rect x="0.1277%" y="1893" width="0.0188%" height="15" fill="rgb(209,103,24)" fg:x="34" fg:w="5"/><text x="0.3777%" y="1903.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeINtNtNtNtCs2M6EiDrnkss_5alloc11collections5btree3map8BTreeMapNtNtBP_6string6StringIBH_B1F_B1F_EEECs53RBGocdZ5C_5cargo (5 samples, 0.02%)</title><rect x="0.1277%" y="1877" width="0.0188%" height="15" fill="rgb(229,88,8)" fg:x="34" fg:w="5"/><text x="0.3777%" y="1887.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.02%)</title><rect x="0.1277%" y="1861" width="0.0188%" height="15" fill="rgb(213,181,19)" fg:x="34" fg:w="5"/><text x="0.3777%" y="1871.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeNtNtNtCs53RBGocdZ5C_5cargo7sources4path10PathSourceEBM_ (7 samples, 0.03%)</title><rect x="0.1239%" y="1925" width="0.0263%" height="15" fill="rgb(254,191,54)" fg:x="33" fg:w="7"/><text x="0.3739%" y="1935.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeNtNtNtCs53RBGocdZ5C_5cargo4core8manifest8ManifestEBM_ (6 samples, 0.02%)</title><rect x="0.1277%" y="1909" width="0.0225%" height="15" fill="rgb(241,83,37)" fg:x="34" fg:w="6"/><text x="0.3777%" y="1919.50"></text></g><g><title>std::fs::File::open (5 samples, 0.02%)</title><rect x="0.1502%" y="1909" width="0.0188%" height="15" fill="rgb(233,36,39)" fg:x="40" fg:w="5"/><text x="0.4002%" y="1919.50"></text></g><g><title>std::fs::OpenOptions::open (5 samples, 0.02%)</title><rect x="0.1502%" y="1893" width="0.0188%" height="15" fill="rgb(226,3,54)" fg:x="40" fg:w="5"/><text x="0.4002%" y="1903.50"></text></g><g><title>std::fs::OpenOptions::_open (5 samples, 0.02%)</title><rect x="0.1502%" y="1877" width="0.0188%" height="15" fill="rgb(245,192,40)" fg:x="40" fg:w="5"/><text x="0.4002%" y="1887.50"></text></g><g><title>std::fs::read_to_string::inner (6 samples, 0.02%)</title><rect x="0.1502%" y="1925" width="0.0225%" height="15" fill="rgb(238,167,29)" fg:x="40" fg:w="6"/><text x="0.4002%" y="1935.50"></text></g><g><title>_RNvMNtNtCs53RBGocdZ5C_5cargo7sources8registryNtB2_14RegistrySource7get_pkg (14 samples, 0.05%)</title><rect x="0.1239%" y="1941" width="0.0526%" height="15" fill="rgb(232,182,51)" fg:x="33" fg:w="14"/><text x="0.3739%" y="1951.50"></text></g><g><title>_RNvMs6_NtNtCs53RBGocdZ5C_5cargo4core7packageNtB5_10PackageSet19download_accessible (22 samples, 0.08%)</title><rect x="0.1127%" y="2021" width="0.0826%" height="15" fill="rgb(231,60,39)" fg:x="30" fg:w="22"/><text x="0.3627%" y="2031.50"></text></g><g><title>_RNvMs7_NtNtCs53RBGocdZ5C_5cargo4core7packageNtB5_9Downloads5start (19 samples, 0.07%)</title><rect x="0.1239%" y="2005" width="0.0714%" height="15" fill="rgb(208,69,12)" fg:x="33" fg:w="19"/><text x="0.3739%" y="2015.50"></text></g><g><title>_RNvMs7_NtNtCs53RBGocdZ5C_5cargo4core7packageNtB5_9Downloads11start_inner (19 samples, 0.07%)</title><rect x="0.1239%" y="1989" width="0.0714%" height="15" fill="rgb(235,93,37)" fg:x="33" fg:w="19"/><text x="0.3739%" y="1999.50"></text></g><g><title>_RNvXs_NtNtCs53RBGocdZ5C_5cargo7sources8replacedNtB4_14ReplacedSourceNtNtB6_6source6Source8download (19 samples, 0.07%)</title><rect x="0.1239%" y="1973" width="0.0714%" height="15" fill="rgb(213,116,39)" fg:x="33" fg:w="19"/><text x="0.3739%" y="1983.50"></text></g><g><title>_RNvXs_NtNtCs53RBGocdZ5C_5cargo7sources8registryNtB4_14RegistrySourceNtNtB6_6source6Source8download (19 samples, 0.07%)</title><rect x="0.1239%" y="1957" width="0.0714%" height="15" fill="rgb(222,207,29)" fg:x="33" fg:w="19"/><text x="0.3739%" y="1967.50"></text></g><g><title>_RNvXs_NtNtNtCs53RBGocdZ5C_5cargo7sources8registry11http_remoteNtB4_12HttpRegistryNtB6_12RegistryData8download (4 samples, 0.02%)</title><rect x="0.1803%" y="1941" width="0.0150%" height="15" fill="rgb(206,96,30)" fg:x="48" fg:w="4"/><text x="0.4303%" y="1951.50"></text></g><g><title>_RNvNtNtNtCs53RBGocdZ5C_5cargo7sources8registry8download8download (3 samples, 0.01%)</title><rect x="0.1840%" y="1925" width="0.0113%" height="15" fill="rgb(218,138,4)" fg:x="49" fg:w="3"/><text x="0.4340%" y="1935.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops7resolve20resolve_ws_with_opts (33 samples, 0.12%)</title><rect x="0.0939%" y="2037" width="0.1239%" height="15" fill="rgb(250,191,14)" fg:x="25" fg:w="33"/><text x="0.3439%" y="2047.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops7resolve21resolve_with_registry (3 samples, 0.01%)</title><rect x="0.2066%" y="2021" width="0.0113%" height="15" fill="rgb(239,60,40)" fg:x="55" fg:w="3"/><text x="0.4566%" y="2031.50"></text></g><g><title>_RNvCskDO5sfoSJXP_5cargo4main (47 samples, 0.18%)</title><rect x="0.0601%" y="2101" width="0.1765%" height="15" fill="rgb(206,27,48)" fg:x="16" fg:w="47"/><text x="0.3101%" y="2111.50"></text></g><g><title>_RNvMNtCskDO5sfoSJXP_5cargo3cliNtB2_4Exec4exec (47 samples, 0.18%)</title><rect x="0.0601%" y="2085" width="0.1765%" height="15" fill="rgb(225,35,8)" fg:x="16" fg:w="47"/><text x="0.3101%" y="2095.50"></text></g><g><title>_RNvNtNtCskDO5sfoSJXP_5cargo8commands8metadata4exec (47 samples, 0.18%)</title><rect x="0.0601%" y="2069" width="0.1765%" height="15" fill="rgb(250,213,24)" fg:x="16" fg:w="47"/><text x="0.3101%" y="2079.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops21cargo_output_metadata15output_metadata (47 samples, 0.18%)</title><rect x="0.0601%" y="2053" width="0.1765%" height="15" fill="rgb(247,123,22)" fg:x="16" fg:w="47"/><text x="0.3101%" y="2063.50"></text></g><g><title>_RNvXs0_NtNtNtCs7jW5nqjkTDq_4core4iter8adapters3mapINtB5_3MapINtNtB7_10filter_map9FilterMapINtNtNtNtCs2M6EiDrnkss_5alloc11collections5btree3map8IntoIterNtNtNtCs53RBGocdZ5C_5cargo4core10package_id9PackageIdNtNtB2t_7package7PackageENCNvNtNtB2v_3ops21cargo_output_metadata19build_resolve_graphs_0ENCB3H_s0_0ENtNtNtB9_6traits8iterator8Iterator4nextB2v_ (5 samples, 0.02%)</title><rect x="0.2178%" y="2037" width="0.0188%" height="15" fill="rgb(231,138,38)" fg:x="58" fg:w="5"/><text x="0.4678%" y="2047.50"></text></g><g><title>_RNvMs0_NtNtCs53RBGocdZ5C_5cargo4core7packageNtB5_7Package10serialized (5 samples, 0.02%)</title><rect x="0.2178%" y="2021" width="0.0188%" height="15" fill="rgb(231,145,46)" fg:x="58" fg:w="5"/><text x="0.4678%" y="2031.50"></text></g><g><title>_RNvMNtNtCs53RBGocdZ5C_5cargo4util5graphINtB2_5GraphNtNtNtB6_4core10package_id9PackageIdINtNtNtNtCsbFEG7PYiVdS_3std11collections4hash3set7HashSetNtNtBR_10dependency10DependencyEE4linkB6_ (3 samples, 0.01%)</title><rect x="0.2441%" y="2101" width="0.0113%" height="15" fill="rgb(251,118,11)" fg:x="65" fg:w="3"/><text x="0.4941%" y="2111.50"></text></g><g><title>_RNCNCNvNtNtCs981e1fb3vc_9toml_edit6parser8document8document0s_0Cs53RBGocdZ5C_5cargo (4 samples, 0.02%)</title><rect x="0.2854%" y="2053" width="0.0150%" height="15" fill="rgb(217,147,25)" fg:x="76" fg:w="4"/><text x="0.5354%" y="2063.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="0.2892%" y="2037" width="0.0113%" height="15" fill="rgb(247,81,37)" fg:x="77" fg:w="3"/><text x="0.5392%" y="2047.50"></text></g><g><title>_RNvYNCNvNtNtCs981e1fb3vc_9toml_edit6parser8document8document0INtNtCsjFodfiBsjxb_6winnow6parser6ParserINtNtB12_6stream8StatefulINtB1E_7LocatedRNtB1E_4BStrENtNtB8_7prelude14RecursionCheckEuNtNtB12_5error12ContextErrorE5parseCs53RBGocdZ5C_5cargo (5 samples, 0.02%)</title><rect x="0.2854%" y="2069" width="0.0188%" height="15" fill="rgb(209,12,38)" fg:x="76" fg:w="5"/><text x="0.5354%" y="2079.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops19cargo_read_manifest12read_package (14 samples, 0.05%)</title><rect x="0.2742%" y="2101" width="0.0526%" height="15" fill="rgb(227,1,9)" fg:x="73" fg:w="14"/><text x="0.5242%" y="2111.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo4util4toml13read_manifest (14 samples, 0.05%)</title><rect x="0.2742%" y="2085" width="0.0526%" height="15" fill="rgb(248,47,43)" fg:x="73" fg:w="14"/><text x="0.5242%" y="2095.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.02%)</title><rect x="0.3080%" y="2069" width="0.0188%" height="15" fill="rgb(221,10,30)" fg:x="82" fg:w="5"/><text x="0.5580%" y="2079.50"></text></g><g><title>_int_free_merge_chunk (5 samples, 0.02%)</title><rect x="0.3080%" y="2053" width="0.0188%" height="15" fill="rgb(210,229,1)" fg:x="82" fg:w="5"/><text x="0.5580%" y="2063.50"></text></g><g><title>_int_free_create_chunk (5 samples, 0.02%)</title><rect x="0.3080%" y="2037" width="0.0188%" height="15" fill="rgb(222,148,37)" fg:x="82" fg:w="5"/><text x="0.5580%" y="2047.50"></text></g><g><title>unlink_chunk.isra.0 (3 samples, 0.01%)</title><rect x="0.3155%" y="2021" width="0.0113%" height="15" fill="rgb(234,67,33)" fg:x="84" fg:w="3"/><text x="0.5655%" y="2031.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver11activate_fv (4 samples, 0.02%)</title><rect x="0.3305%" y="2021" width="0.0150%" height="15" fill="rgb(247,98,35)" fg:x="88" fg:w="4"/><text x="0.5805%" y="2031.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver12activate_rec (4 samples, 0.02%)</title><rect x="0.3305%" y="2005" width="0.0150%" height="15" fill="rgb(247,138,52)" fg:x="88" fg:w="4"/><text x="0.5805%" y="2015.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver11activate_fv (4 samples, 0.02%)</title><rect x="0.3305%" y="1989" width="0.0150%" height="15" fill="rgb(213,79,30)" fg:x="88" fg:w="4"/><text x="0.5805%" y="1999.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver12activate_rec (3 samples, 0.01%)</title><rect x="0.3342%" y="1973" width="0.0113%" height="15" fill="rgb(246,177,23)" fg:x="89" fg:w="3"/><text x="0.5842%" y="1983.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver11activate_fv (3 samples, 0.01%)</title><rect x="0.3342%" y="1957" width="0.0113%" height="15" fill="rgb(230,62,27)" fg:x="89" fg:w="3"/><text x="0.5842%" y="1967.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver12activate_rec (3 samples, 0.01%)</title><rect x="0.3342%" y="1941" width="0.0113%" height="15" fill="rgb(216,154,8)" fg:x="89" fg:w="3"/><text x="0.5842%" y="1951.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver11activate_fv (3 samples, 0.01%)</title><rect x="0.3342%" y="1925" width="0.0113%" height="15" fill="rgb(244,35,45)" fg:x="89" fg:w="3"/><text x="0.5842%" y="1935.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver12activate_rec (3 samples, 0.01%)</title><rect x="0.3342%" y="1909" width="0.0113%" height="15" fill="rgb(251,115,12)" fg:x="89" fg:w="3"/><text x="0.5842%" y="1919.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver11activate_fv (3 samples, 0.01%)</title><rect x="0.3342%" y="1893" width="0.0113%" height="15" fill="rgb(240,54,50)" fg:x="89" fg:w="3"/><text x="0.5842%" y="1903.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver7resolve (9 samples, 0.03%)</title><rect x="0.3267%" y="2069" width="0.0338%" height="15" fill="rgb(233,84,52)" fg:x="87" fg:w="9"/><text x="0.5767%" y="2079.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver12activate_pkg (9 samples, 0.03%)</title><rect x="0.3267%" y="2053" width="0.0338%" height="15" fill="rgb(207,117,47)" fg:x="87" fg:w="9"/><text x="0.5767%" y="2063.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver12activate_pkg (8 samples, 0.03%)</title><rect x="0.3305%" y="2037" width="0.0300%" height="15" fill="rgb(249,43,39)" fg:x="88" fg:w="8"/><text x="0.5805%" y="2047.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver12activate_pkg (4 samples, 0.02%)</title><rect x="0.3455%" y="2021" width="0.0150%" height="15" fill="rgb(209,38,44)" fg:x="92" fg:w="4"/><text x="0.5955%" y="2031.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver8featuresNtB5_15FeatureResolver12activate_pkg (3 samples, 0.01%)</title><rect x="0.3493%" y="2005" width="0.0113%" height="15" fill="rgb(236,212,23)" fg:x="93" fg:w="3"/><text x="0.5993%" y="2015.50"></text></g><g><title>_RNvMs6_NtNtCs53RBGocdZ5C_5cargo4core7packageNtB5_10PackageSet19download_accessible (3 samples, 0.01%)</title><rect x="0.3605%" y="2069" width="0.0113%" height="15" fill="rgb(242,79,21)" fg:x="96" fg:w="3"/><text x="0.6105%" y="2079.50"></text></g><g><title>_RNvMs7_NtNtCs53RBGocdZ5C_5cargo4core7packageNtB5_9Downloads5start (3 samples, 0.01%)</title><rect x="0.3605%" y="2053" width="0.0113%" height="15" fill="rgb(211,96,35)" fg:x="96" fg:w="3"/><text x="0.6105%" y="2063.50"></text></g><g><title>_RNvMs7_NtNtCs53RBGocdZ5C_5cargo4core7packageNtB5_9Downloads11start_inner (3 samples, 0.01%)</title><rect x="0.3605%" y="2037" width="0.0113%" height="15" fill="rgb(253,215,40)" fg:x="96" fg:w="3"/><text x="0.6105%" y="2047.50"></text></g><g><title>_RNvXs_NtNtCs53RBGocdZ5C_5cargo7sources8replacedNtB4_14ReplacedSourceNtNtB6_6source6Source8download (3 samples, 0.01%)</title><rect x="0.3605%" y="2021" width="0.0113%" height="15" fill="rgb(211,81,21)" fg:x="96" fg:w="3"/><text x="0.6105%" y="2031.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops7resolve21resolve_with_previous (6 samples, 0.02%)</title><rect x="0.3718%" y="2053" width="0.0225%" height="15" fill="rgb(208,190,38)" fg:x="99" fg:w="6"/><text x="0.6218%" y="2063.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo4core8resolver7resolve (6 samples, 0.02%)</title><rect x="0.3718%" y="2037" width="0.0225%" height="15" fill="rgb(235,213,38)" fg:x="99" fg:w="6"/><text x="0.6218%" y="2047.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops21cargo_output_metadata15output_metadata (21 samples, 0.08%)</title><rect x="0.3267%" y="2101" width="0.0789%" height="15" fill="rgb(237,122,38)" fg:x="87" fg:w="21"/><text x="0.5767%" y="2111.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops7resolve20resolve_ws_with_opts (21 samples, 0.08%)</title><rect x="0.3267%" y="2085" width="0.0789%" height="15" fill="rgb(244,218,35)" fg:x="87" fg:w="21"/><text x="0.5767%" y="2095.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops7resolve21resolve_with_registry (9 samples, 0.03%)</title><rect x="0.3718%" y="2069" width="0.0338%" height="15" fill="rgb(240,68,47)" fg:x="99" fg:w="9"/><text x="0.6218%" y="2079.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops8lockfile17load_pkg_lockfile (3 samples, 0.01%)</title><rect x="0.3943%" y="2053" width="0.0113%" height="15" fill="rgb(210,16,53)" fg:x="105" fg:w="3"/><text x="0.6443%" y="2063.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops7resolve20resolve_ws_with_opts (7 samples, 0.03%)</title><rect x="0.4056%" y="2101" width="0.0263%" height="15" fill="rgb(235,124,12)" fg:x="108" fg:w="7"/><text x="0.6556%" y="2111.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops7resolve21resolve_with_registry (3 samples, 0.01%)</title><rect x="0.4206%" y="2085" width="0.0113%" height="15" fill="rgb(224,169,11)" fg:x="112" fg:w="3"/><text x="0.6706%" y="2095.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops8lockfile17load_pkg_lockfile (3 samples, 0.01%)</title><rect x="0.4206%" y="2069" width="0.0113%" height="15" fill="rgb(250,166,2)" fg:x="112" fg:w="3"/><text x="0.6706%" y="2079.50"></text></g><g><title>_RINvXs3_NtCshLqyzFuLa99_4toml2deNtB6_12DeserializerNtNtCs2bM0XC020qF_5serde2de12Deserializer18deserialize_structNtNvXNvNtNtNtCs53RBGocdZ5C_5cargo4core8resolver6encodes_1__NtB1T_16EncodableResolveNtBP_11Deserialize11deserialize9___VisitorEB1Z_ (3 samples, 0.01%)</title><rect x="0.4206%" y="2053" width="0.0113%" height="15" fill="rgb(242,216,29)" fg:x="112" fg:w="3"/><text x="0.6706%" y="2063.50"></text></g><g><title>_RINvMs2_NtNtCs6mWtNbo7E18_5im_rc3ord3mapINtB6_6OrdMapNtNtNtCs53RBGocdZ5C_5cargo4core10package_id9PackageIdIBD_BP_INtNtNtBa_4hash3set7HashSetNtNtBT_10dependency10DependencyEEE7get_mutBP_EBV_ (3 samples, 0.01%)</title><rect x="0.4469%" y="2069" width="0.0113%" height="15" fill="rgb(230,116,27)" fg:x="119" fg:w="3"/><text x="0.6969%" y="2079.50"></text></g><g><title>_RNvXsg_NtNtCs53RBGocdZ5C_5cargo4core10package_idNtB5_14PackageIdInnerNtNtCs7jW5nqjkTDq_4core3cmp3Ord3cmp (3 samples, 0.01%)</title><rect x="0.4469%" y="2053" width="0.0113%" height="15" fill="rgb(228,99,48)" fg:x="119" fg:w="3"/><text x="0.6969%" y="2063.50"></text></g><g><title>_RNvMs0_NtNtNtCs53RBGocdZ5C_5cargo4core8resolver7contextNtB5_15ResolverContext14flag_activated (3 samples, 0.01%)</title><rect x="0.4770%" y="2069" width="0.0113%" height="15" fill="rgb(253,11,6)" fg:x="127" fg:w="3"/><text x="0.7270%" y="2079.50"></text></g><g><title>_RINvMs6_NtCsitXdId53imk_9hashbrown3rawINtB6_8RawTableTTNtNtNtCs53RBGocdZ5C_5cargo4core10dependency10DependencyINtNtCs7jW5nqjkTDq_4core6option6OptionNtNtNtBV_8resolver13version_prefs15VersionOrderingEEINtNtNtB1P_4task4poll4PollINtNtCs2M6EiDrnkss_5alloc2rc2RcINtNtB3H_3vec3VecNtNtBV_7summary7SummaryEEEEE14reserve_rehashNCINvNtB8_3map11make_hasherBQ_B3c_NtNtNtCsbFEG7PYiVdS_3std4hash6random11RandomStateE0EBX_ (3 samples, 0.01%)</title><rect x="0.5070%" y="2021" width="0.0113%" height="15" fill="rgb(247,143,39)" fg:x="135" fg:w="3"/><text x="0.7570%" y="2031.50"></text></g><g><title>_RINvYNtNtNtCsbFEG7PYiVdS_3std4hash6random11RandomStateNtNtCs7jW5nqjkTDq_4core4hash11BuildHasher8hash_oneRTNtNtNtCs53RBGocdZ5C_5cargo4core10dependency10DependencyINtNtBU_6option6OptionNtNtNtB1K_8resolver13version_prefs15VersionOrderingEEEB1M_ (3 samples, 0.01%)</title><rect x="0.5070%" y="2005" width="0.0113%" height="15" fill="rgb(236,97,10)" fg:x="135" fg:w="3"/><text x="0.7570%" y="2015.50"></text></g><g><title>_RNvMs1_NtCsitXdId53imk_9hashbrown3mapINtB5_7HashMapTNtNtNtCs53RBGocdZ5C_5cargo4core10dependency10DependencyINtNtCs7jW5nqjkTDq_4core6option6OptionNtNtNtBS_8resolver13version_prefs15VersionOrderingEEINtNtNtB1M_4task4poll4PollINtNtCs2M6EiDrnkss_5alloc2rc2RcINtNtB3E_3vec3VecNtNtBS_7summary7SummaryEEENtNtNtCsbFEG7PYiVdS_3std4hash6random11RandomStateE6insertBU_ (4 samples, 0.02%)</title><rect x="0.5070%" y="2037" width="0.0150%" height="15" fill="rgb(233,208,19)" fg:x="135" fg:w="4"/><text x="0.7570%" y="2047.50"></text></g><g><title>_RNvMNtNtCs53RBGocdZ5C_5cargo4core8registryNtB2_15PackageRegistry13ensure_loaded (4 samples, 0.02%)</title><rect x="0.5258%" y="2021" width="0.0150%" height="15" fill="rgb(216,164,2)" fg:x="140" fg:w="4"/><text x="0.7758%" y="2031.50"></text></g><g><title>_RNvXs_NtNtCs53RBGocdZ5C_5cargo4core8registryNtB4_15PackageRegistryNtB4_8Registry17block_until_ready (3 samples, 0.01%)</title><rect x="0.5295%" y="2005" width="0.0113%" height="15" fill="rgb(220,129,5)" fg:x="141" fg:w="3"/><text x="0.7795%" y="2015.50"></text></g><g><title>_RNvXs3_NtNtNtCs53RBGocdZ5C_5cargo7sources3git6sourceNtB5_9GitSourceNtNtB9_6source6Source17block_until_ready (3 samples, 0.01%)</title><rect x="0.5295%" y="1989" width="0.0113%" height="15" fill="rgb(242,17,10)" fg:x="141" fg:w="3"/><text x="0.7795%" y="1999.50"></text></g><g><title>_RNCNvXs_NtNtCs53RBGocdZ5C_5cargo7sources8registryNtB6_14RegistrySourceNtNtB8_6source6Source5querys1_0Ba_ (6 samples, 0.02%)</title><rect x="0.5633%" y="1973" width="0.0225%" height="15" fill="rgb(242,107,0)" fg:x="150" fg:w="6"/><text x="0.8133%" y="1983.50"></text></g><g><title>_RNCNvXs_NtNtCs53RBGocdZ5C_5cargo7sources8replacedNtB6_14ReplacedSourceNtNtB8_6source6Source5query0Ba_ (6 samples, 0.02%)</title><rect x="0.5633%" y="1957" width="0.0225%" height="15" fill="rgb(251,28,31)" fg:x="150" fg:w="6"/><text x="0.8133%" y="1967.50"></text></g><g><title>_RNvMs0_NtNtCs53RBGocdZ5C_5cargo4core7summaryNtB5_7Summary10map_source (4 samples, 0.02%)</title><rect x="0.5708%" y="1941" width="0.0150%" height="15" fill="rgb(233,223,10)" fg:x="152" fg:w="4"/><text x="0.8208%" y="1951.50"></text></g><g><title>_RNvMs1_NtNtCs53RBGocdZ5C_5cargo4core10dependencyNtB5_10Dependency10map_source (4 samples, 0.02%)</title><rect x="0.5708%" y="1925" width="0.0150%" height="15" fill="rgb(215,21,27)" fg:x="152" fg:w="4"/><text x="0.8208%" y="1935.50"></text></g><g><title>_RNvMsw_NtCs2M6EiDrnkss_5alloc4syncINtB5_3ArcNtNtNtCs53RBGocdZ5C_5cargo4core10dependency5InnerE8make_mutBM_ (4 samples, 0.02%)</title><rect x="0.5708%" y="1909" width="0.0150%" height="15" fill="rgb(232,23,21)" fg:x="152" fg:w="4"/><text x="0.8208%" y="1919.50"></text></g><g><title>_RNvMs1_NtCsitXdId53imk_9hashbrown3mapINtB5_7HashMapNtCsVDqNAMCll7_6semver7VersionNtNtNtNtCs53RBGocdZ5C_5cargo7sources8registry5index17MaybeIndexSummaryNtNtNtCsbFEG7PYiVdS_3std4hash6random11RandomStateE6insertB1p_ (5 samples, 0.02%)</title><rect x="0.5859%" y="1957" width="0.0188%" height="15" fill="rgb(244,5,23)" fg:x="156" fg:w="5"/><text x="0.8359%" y="1967.50"></text></g><g><title>_RINvMs6_NtCsitXdId53imk_9hashbrown3rawINtB6_8RawTableTNtCsVDqNAMCll7_6semver7VersionNtNtNtNtCs53RBGocdZ5C_5cargo7sources8registry5index17MaybeIndexSummaryEE14reserve_rehashNCINvNtB8_3map11make_hasherBQ_B1k_NtNtNtCsbFEG7PYiVdS_3std4hash6random11RandomStateE0EB1s_ (3 samples, 0.01%)</title><rect x="0.5934%" y="1941" width="0.0113%" height="15" fill="rgb(226,81,46)" fg:x="158" fg:w="3"/><text x="0.8434%" y="1951.50"></text></g><g><title>_RNvXNtNtCs7jW5nqjkTDq_4core4iter8adaptersINtB2_12GenericShuntINtNtB2_10filter_map9FilterMapINtNtNtCs2M6EiDrnkss_5alloc3vec9into_iter8IntoIterTNtNtNtCs53RBGocdZ5C_5cargo4core10dependency10DependencyINtNtB1y_2rc2RcINtNtNtNtB1y_11collections5btree3set8BTreeSetNtNtNtB2m_4util9interning14InternedStringEEEENCNvMNtNtB2k_8resolver9dep_cacheNtB4V_15RegistryQueryer10build_deps0EINtNtB6_6result6ResultNtNtB6_7convert10InfallibleNtCs7T8CpW946ob_6anyhow5ErrorEENtNtNtB4_6traits8iterator8Iterator4nextB2m_ (30 samples, 0.11%)</title><rect x="0.4995%" y="2069" width="0.1127%" height="15" fill="rgb(247,70,30)" fg:x="133" fg:w="30"/><text x="0.7495%" y="2079.50"></text></g><g><title>_RNvMNtNtNtCs53RBGocdZ5C_5cargo4core8resolver9dep_cacheNtB2_15RegistryQueryer5query (30 samples, 0.11%)</title><rect x="0.4995%" y="2053" width="0.1127%" height="15" fill="rgb(212,68,19)" fg:x="133" fg:w="30"/><text x="0.7495%" y="2063.50"></text></g><g><title>_RNvXs_NtNtCs53RBGocdZ5C_5cargo4core8registryNtB4_15PackageRegistryNtB4_8Registry5query (24 samples, 0.09%)</title><rect x="0.5220%" y="2037" width="0.0901%" height="15" fill="rgb(240,187,13)" fg:x="139" fg:w="24"/><text x="0.7720%" y="2047.50"></text></g><g><title>_RNvXs_NtNtCs53RBGocdZ5C_5cargo7sources8replacedNtB4_14ReplacedSourceNtNtB6_6source6Source5query (18 samples, 0.07%)</title><rect x="0.5446%" y="2021" width="0.0676%" height="15" fill="rgb(223,113,26)" fg:x="145" fg:w="18"/><text x="0.7946%" y="2031.50"></text></g><g><title>_RNvXs_NtNtCs53RBGocdZ5C_5cargo7sources8registryNtB4_14RegistrySourceNtNtB6_6source6Source5query (17 samples, 0.06%)</title><rect x="0.5483%" y="2005" width="0.0638%" height="15" fill="rgb(206,192,2)" fg:x="146" fg:w="17"/><text x="0.7983%" y="2015.50"></text></g><g><title>_RNvMs_NtNtNtCs53RBGocdZ5C_5cargo7sources8registry5indexNtB4_13RegistryIndex23query_inner_with_online (17 samples, 0.06%)</title><rect x="0.5483%" y="1989" width="0.0638%" height="15" fill="rgb(241,108,4)" fg:x="146" fg:w="17"/><text x="0.7983%" y="1999.50"></text></g><g><title>_RNvMs_NtNtNtCs53RBGocdZ5C_5cargo7sources8registry5indexNtB4_13RegistryIndex14load_summaries (7 samples, 0.03%)</title><rect x="0.5859%" y="1973" width="0.0263%" height="15" fill="rgb(247,173,49)" fg:x="156" fg:w="7"/><text x="0.8359%" y="1983.50"></text></g><g><title>_RNvXsg_NtNtCs53RBGocdZ5C_5cargo4core10package_idNtB5_14PackageIdInnerNtNtCs7jW5nqjkTDq_4core3cmp3Ord3cmp (4 samples, 0.02%)</title><rect x="0.6122%" y="2069" width="0.0150%" height="15" fill="rgb(224,114,35)" fg:x="163" fg:w="4"/><text x="0.8622%" y="2079.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo4core8resolver18activate_deps_loop (52 samples, 0.20%)</title><rect x="0.4356%" y="2101" width="0.1953%" height="15" fill="rgb(245,159,27)" fg:x="116" fg:w="52"/><text x="0.6856%" y="2111.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo4core8resolver8activate (52 samples, 0.20%)</title><rect x="0.4356%" y="2085" width="0.1953%" height="15" fill="rgb(245,172,44)" fg:x="116" fg:w="52"/><text x="0.6856%" y="2095.50"></text></g><g><title>_RNvMNtNtCs53RBGocdZ5C_5cargo4core8registryNtB2_15PackageRegistry13ensure_loaded (3 samples, 0.01%)</title><rect x="0.6422%" y="2037" width="0.0113%" height="15" fill="rgb(236,23,11)" fg:x="171" fg:w="3"/><text x="0.8922%" y="2047.50"></text></g><g><title>_RNvXs_NtNtCs53RBGocdZ5C_5cargo4core8registryNtB4_15PackageRegistryNtB4_8Registry17block_until_ready (3 samples, 0.01%)</title><rect x="0.6422%" y="2021" width="0.0113%" height="15" fill="rgb(205,117,38)" fg:x="171" fg:w="3"/><text x="0.8922%" y="2031.50"></text></g><g><title>_RNvXs3_NtNtNtCs53RBGocdZ5C_5cargo7sources3git6sourceNtB5_9GitSourceNtNtB9_6source6Source17block_until_ready (3 samples, 0.01%)</title><rect x="0.6422%" y="2005" width="0.0113%" height="15" fill="rgb(237,72,25)" fg:x="171" fg:w="3"/><text x="0.8922%" y="2015.50"></text></g><g><title>_RINvXsh_NtNtCs53RBGocdZ5C_5cargo4util9interningNtB6_14InternedStringNtNtCs2bM0XC020qF_5serde2de11Deserialize11deserializeQINtNtCs4lrypAzPzaG_10serde_json2de12DeserializerNtNtB21_4read9SliceReadEEBa_ (3 samples, 0.01%)</title><rect x="0.6610%" y="1909" width="0.0113%" height="15" fill="rgb(244,70,9)" fg:x="176" fg:w="3"/><text x="0.9110%" y="1919.50"></text></g><g><title>_RINvXs_Cs5TQOdTZR01k_14serde_untaggedINtB5_19UntaggedEnumVisitorNtNtNtCs53RBGocdZ5C_5cargo4util9interning14InternedStringENtNtCs2bM0XC020qF_5serde2de7Visitor18visit_borrowed_strNtNtCs4lrypAzPzaG_10serde_json5error5ErrorEB16_ (3 samples, 0.01%)</title><rect x="0.6610%" y="1893" width="0.0113%" height="15" fill="rgb(217,125,39)" fg:x="176" fg:w="3"/><text x="0.9110%" y="1903.50"></text></g><g><title>_RINvXs3_NtCs2bM0XC020qF_5serde2deINtNtCs7jW5nqjkTDq_4core6marker11PhantomDataINtNtCs2M6EiDrnkss_5alloc3vec3VecNtNtNtNtCs53RBGocdZ5C_5cargo7sources8registry5index18RegistryDependencyEENtB6_15DeserializeSeed11deserializeQINtNtCs4lrypAzPzaG_10serde_json2de12DeserializerNtNtB3A_4read9SliceReadEEB1S_ (6 samples, 0.02%)</title><rect x="0.6535%" y="1941" width="0.0225%" height="15" fill="rgb(235,36,10)" fg:x="174" fg:w="6"/><text x="0.9035%" y="1951.50"></text></g><g><title>_RINvXs7_NtCs4lrypAzPzaG_10serde_json2deINtB6_9SeqAccessNtNtB8_4read9SliceReadENtNtCs2bM0XC020qF_5serde2de9SeqAccess17next_element_seedINtNtCs7jW5nqjkTDq_4core6marker11PhantomDataNtNtNtNtCs53RBGocdZ5C_5cargo7sources8registry5index18RegistryDependencyEEB2Y_ (6 samples, 0.02%)</title><rect x="0.6535%" y="1925" width="0.0225%" height="15" fill="rgb(251,123,47)" fg:x="174" fg:w="6"/><text x="0.9035%" y="1935.50"></text></g><g><title>_RINvYINtNtCs4lrypAzPzaG_10serde_json2de9SeqAccessNtNtB8_4read9SliceReadENtNtCs2bM0XC020qF_5serde2de9SeqAccess12next_elementNtNtNtCs53RBGocdZ5C_5cargo4util9interning14InternedStringEB23_ (3 samples, 0.01%)</title><rect x="0.6835%" y="1909" width="0.0113%" height="15" fill="rgb(221,13,13)" fg:x="182" fg:w="3"/><text x="0.9335%" y="1919.50"></text></g><g><title>_RINvXsh_NtNtCs53RBGocdZ5C_5cargo4util9interningNtB6_14InternedStringNtNtCs2bM0XC020qF_5serde2de11Deserialize11deserializeQINtNtCs4lrypAzPzaG_10serde_json2de12DeserializerNtNtB21_4read9SliceReadEEBa_ (3 samples, 0.01%)</title><rect x="0.6835%" y="1893" width="0.0113%" height="15" fill="rgb(238,131,9)" fg:x="182" fg:w="3"/><text x="0.9335%" y="1903.50"></text></g><g><title>_RINvXs3_NtCs2bM0XC020qF_5serde2deINtNtCs7jW5nqjkTDq_4core6marker11PhantomDataINtNtCs2M6EiDrnkss_5alloc3vec3VecNtNtNtCs53RBGocdZ5C_5cargo4util9interning14InternedStringEENtB6_15DeserializeSeed11deserializeQINtNtCs4lrypAzPzaG_10serde_json2de12DeserializerNtNtB3m_4read9SliceReadEEB1Q_ (8 samples, 0.03%)</title><rect x="0.6835%" y="1925" width="0.0300%" height="15" fill="rgb(211,50,8)" fg:x="182" fg:w="8"/><text x="0.9335%" y="1935.50"></text></g><g><title>_RNvMs0_NtCs2M6EiDrnkss_5alloc7raw_vecINtB5_6RawVecINtNtNtCs6mWtNbo7E18_5im_rc5nodes5btree8IterItemTNtNtNtCs53RBGocdZ5C_5cargo4core10package_id9PackageIdINtNtNtBT_3ord3map6OrdMapB1z_INtNtNtNtCsbFEG7PYiVdS_3std11collections4hash3set7HashSetNtNtB1D_10dependency10DependencyEEEEE8grow_oneB1F_ (5 samples, 0.02%)</title><rect x="0.6948%" y="1909" width="0.0188%" height="15" fill="rgb(245,182,24)" fg:x="185" fg:w="5"/><text x="0.9448%" y="1919.50"></text></g><g><title>_RINvXs_Cs5TQOdTZR01k_14serde_untaggedINtB5_19UntaggedEnumVisitorNtNtNtCs53RBGocdZ5C_5cargo4util9interning14InternedStringENtNtCs2bM0XC020qF_5serde2de7Visitor18visit_borrowed_strNtNtCs4lrypAzPzaG_10serde_json5error5ErrorEB16_ (3 samples, 0.01%)</title><rect x="0.7136%" y="1925" width="0.0113%" height="15" fill="rgb(242,14,37)" fg:x="190" fg:w="3"/><text x="0.9636%" y="1935.50"></text></g><g><title>_RINvXs_Cs5TQOdTZR01k_14serde_untaggedINtB5_19UntaggedEnumVisitorNtNtNtCs53RBGocdZ5C_5cargo4util9interning14InternedStringENtNtCs2bM0XC020qF_5serde2de7Visitor9visit_strNtNtCs4lrypAzPzaG_10serde_json5error5ErrorEB16_ (3 samples, 0.01%)</title><rect x="0.7136%" y="1909" width="0.0113%" height="15" fill="rgb(246,228,12)" fg:x="190" fg:w="3"/><text x="0.9636%" y="1919.50"></text></g><g><title>_RNSNvYNCINvXsh_NtNtCs53RBGocdZ5C_5cargo4util9interningNtBd_14InternedStringNtNtCs2bM0XC020qF_5serde2de11Deserialize11deserializeINtNtCs4lrypAzPzaG_10serde_json2de6MapKeyNtNtB27_4read9SliceReadEE0INtNtNtCs7jW5nqjkTDq_4core3ops8function6FnOnceTReEE9call_once6vtableBh_ (3 samples, 0.01%)</title><rect x="0.7136%" y="1893" width="0.0113%" height="15" fill="rgb(213,55,15)" fg:x="190" fg:w="3"/><text x="0.9636%" y="1903.50"></text></g><g><title>_RNvMs5_NtNtCs53RBGocdZ5C_5cargo4util9interningNtB5_14InternedString3new (3 samples, 0.01%)</title><rect x="0.7136%" y="1877" width="0.0113%" height="15" fill="rgb(209,9,3)" fg:x="190" fg:w="3"/><text x="0.9636%" y="1887.50"></text></g><g><title>_RNvMs1_NtCsitXdId53imk_9hashbrown3mapINtB5_7HashMapReuNtNtNtCsbFEG7PYiVdS_3std4hash6random11RandomStateE6insertCs53RBGocdZ5C_5cargo (3 samples, 0.01%)</title><rect x="0.7136%" y="1861" width="0.0113%" height="15" fill="rgb(230,59,30)" fg:x="190" fg:w="3"/><text x="0.9636%" y="1871.50"></text></g><g><title>_RINvXs3d_NtNtCs2bM0XC020qF_5serde2de5implsINtNtNtNtCs2M6EiDrnkss_5alloc11collections5btree3map8BTreeMapNtNtNtCs53RBGocdZ5C_5cargo4util9interning14InternedStringINtNtBN_3vec3VecB1D_EENtB9_11Deserialize11deserializeQINtNtCs4lrypAzPzaG_10serde_json2de12DeserializerNtNtB3v_4read9SliceReadEEB1J_ (15 samples, 0.06%)</title><rect x="0.6760%" y="1941" width="0.0563%" height="15" fill="rgb(209,121,21)" fg:x="180" fg:w="15"/><text x="0.9260%" y="1951.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo4core8resolver8activate (29 samples, 0.11%)</title><rect x="0.6347%" y="2101" width="0.1089%" height="15" fill="rgb(220,109,13)" fg:x="169" fg:w="29"/><text x="0.8847%" y="2111.50"></text></g><g><title>_RNvXNtNtCs7jW5nqjkTDq_4core4iter8adaptersINtB2_12GenericShuntINtNtB2_10filter_map9FilterMapINtNtNtCs2M6EiDrnkss_5alloc3vec9into_iter8IntoIterTNtNtNtCs53RBGocdZ5C_5cargo4core10dependency10DependencyINtNtB1y_2rc2RcINtNtNtNtB1y_11collections5btree3set8BTreeSetNtNtNtB2m_4util9interning14InternedStringEEEENCNvMNtNtB2k_8resolver9dep_cacheNtB4V_15RegistryQueryer10build_deps0EINtNtB6_6result6ResultNtNtB6_7convert10InfallibleNtCs7T8CpW946ob_6anyhow5ErrorEENtNtNtB4_6traits8iterator8Iterator4nextB2m_ (27 samples, 0.10%)</title><rect x="0.6422%" y="2085" width="0.1014%" height="15" fill="rgb(232,18,1)" fg:x="171" fg:w="27"/><text x="0.8922%" y="2095.50"></text></g><g><title>_RNvMNtNtNtCs53RBGocdZ5C_5cargo4core8resolver9dep_cacheNtB2_15RegistryQueryer5query (27 samples, 0.10%)</title><rect x="0.6422%" y="2069" width="0.1014%" height="15" fill="rgb(215,41,42)" fg:x="171" fg:w="27"/><text x="0.8922%" y="2079.50"></text></g><g><title>_RNvXs_NtNtCs53RBGocdZ5C_5cargo4core8registryNtB4_15PackageRegistryNtB4_8Registry5query (27 samples, 0.10%)</title><rect x="0.6422%" y="2053" width="0.1014%" height="15" fill="rgb(224,123,36)" fg:x="171" fg:w="27"/><text x="0.8922%" y="2063.50"></text></g><g><title>_RNvXs_NtNtCs53RBGocdZ5C_5cargo7sources8replacedNtB4_14ReplacedSourceNtNtB6_6source6Source5query (24 samples, 0.09%)</title><rect x="0.6535%" y="2037" width="0.0901%" height="15" fill="rgb(240,125,3)" fg:x="174" fg:w="24"/><text x="0.9035%" y="2047.50"></text></g><g><title>_RNvXs_NtNtCs53RBGocdZ5C_5cargo7sources8registryNtB4_14RegistrySourceNtNtB6_6source6Source5query (24 samples, 0.09%)</title><rect x="0.6535%" y="2021" width="0.0901%" height="15" fill="rgb(205,98,50)" fg:x="174" fg:w="24"/><text x="0.9035%" y="2031.50"></text></g><g><title>_RNvMs_NtNtNtCs53RBGocdZ5C_5cargo7sources8registry5indexNtB4_13RegistryIndex23query_inner_with_online (24 samples, 0.09%)</title><rect x="0.6535%" y="2005" width="0.0901%" height="15" fill="rgb(205,185,37)" fg:x="174" fg:w="24"/><text x="0.9035%" y="2015.50"></text></g><g><title>_RNCNvMs_NtNtNtCs53RBGocdZ5C_5cargo7sources8registry5indexNtB6_13RegistryIndex9summariess_0Bc_ (24 samples, 0.09%)</title><rect x="0.6535%" y="1989" width="0.0901%" height="15" fill="rgb(238,207,15)" fg:x="174" fg:w="24"/><text x="0.9035%" y="1999.50"></text></g><g><title>_RNvMs1_NtNtNtCs53RBGocdZ5C_5cargo7sources8registry5indexNtB5_17MaybeIndexSummary5parse (24 samples, 0.09%)</title><rect x="0.6535%" y="1973" width="0.0901%" height="15" fill="rgb(213,199,42)" fg:x="174" fg:w="24"/><text x="0.9035%" y="1983.50"></text></g><g><title>_RNvMs3_NtNtNtCs53RBGocdZ5C_5cargo7sources8registry5indexNtB5_12IndexSummary5parse (24 samples, 0.09%)</title><rect x="0.6535%" y="1957" width="0.0901%" height="15" fill="rgb(235,201,11)" fg:x="174" fg:w="24"/><text x="0.9035%" y="1967.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo4core7summary17build_feature_map (3 samples, 0.01%)</title><rect x="0.7323%" y="1941" width="0.0113%" height="15" fill="rgb(207,46,11)" fg:x="195" fg:w="3"/><text x="0.9823%" y="1951.50"></text></g><g><title>_RINvXsb_Csa0IlSW1QlMd_13serde_ignoredINtB6_11TrackedSeedINtNtCs7jW5nqjkTDq_4core6marker11PhantomDataINtNtBX_6option6OptionINtNtNtNtCs2M6EiDrnkss_5alloc11collections5btree3map8BTreeMapNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest11FeatureNameINtNtB25_3vec3VecNtNtB25_6string6StringEEEENCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0ENtNtCs2bM0XC020qF_5serde2de15DeserializeSeed11deserializeNtNtNtCs981e1fb3vc_9toml_edit2de5value17ValueDeserializerEB4I_ (6 samples, 0.02%)</title><rect x="0.7436%" y="2069" width="0.0225%" height="15" fill="rgb(241,35,35)" fg:x="198" fg:w="6"/><text x="0.9936%" y="2079.50"></text></g><g><title>_RINvXNtNtCs981e1fb3vc_9toml_edit2de5tableNtB3_17TableDeserializerNtNtCs2bM0XC020qF_5serde2de12Deserializer15deserialize_anyINtCsa0IlSW1QlMd_13serde_ignored4WrapINtNvXs3d_NtB13_5implsINtNtNtNtCs2M6EiDrnkss_5alloc11collections5btree3map8BTreeMapppENtB13_11Deserialize11deserialize10MapVisitorNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest11FeatureNameINtNtB33_3vec3VecNtNtB33_6string6StringEENCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0EEB6p_ (6 samples, 0.02%)</title><rect x="0.7436%" y="2053" width="0.0225%" height="15" fill="rgb(243,32,47)" fg:x="198" fg:w="6"/><text x="0.9936%" y="2063.50"></text></g><g><title>_RINvYINtCsa0IlSW1QlMd_13serde_ignored9MapAccessNtNtNtCs981e1fb3vc_9toml_edit2de5table14TableMapAccessNCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0ENtNtCs2bM0XC020qF_5serde2de9MapAccess10next_valueINtNtCs7jW5nqjkTDq_4core6option6OptionINtNtCs2M6EiDrnkss_5alloc5boxed3BoxNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest11TomlPackageEEEB1J_ (4 samples, 0.02%)</title><rect x="0.7849%" y="2069" width="0.0150%" height="15" fill="rgb(247,202,23)" fg:x="209" fg:w="4"/><text x="1.0349%" y="2079.50"></text></g><g><title>_RINvXsb_Csa0IlSW1QlMd_13serde_ignoredINtB6_11TrackedSeedINtNtCs7jW5nqjkTDq_4core6marker11PhantomDataINtNtBX_6option6OptionINtNtCs2M6EiDrnkss_5alloc5boxed3BoxNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest11TomlPackageEEENCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0ENtNtCs2bM0XC020qF_5serde2de15DeserializeSeed11deserializeNtNtNtCs981e1fb3vc_9toml_edit2de5value17ValueDeserializerEB3E_ (4 samples, 0.02%)</title><rect x="0.7849%" y="2053" width="0.0150%" height="15" fill="rgb(219,102,11)" fg:x="209" fg:w="4"/><text x="1.0349%" y="2063.50"></text></g><g><title>_RINvXs0_NvXNvNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifests4_1__NtBb_11TomlPackageNtNtCs2bM0XC020qF_5serde2de11Deserialize11deserializeNtB6_9___VisitorNtB1k_7Visitor9visit_mapINtCsa0IlSW1QlMd_13serde_ignored9MapAccessNtNtNtCs981e1fb3vc_9toml_edit2de5table14TableMapAccessNCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0EEB4t_ (4 samples, 0.02%)</title><rect x="0.7849%" y="2037" width="0.0150%" height="15" fill="rgb(243,110,44)" fg:x="209" fg:w="4"/><text x="1.0349%" y="2047.50"></text></g><g><title>_RINvXs0_Csa0IlSW1QlMd_13serde_ignoredINtB6_12DeserializerNtNtNtCs981e1fb3vc_9toml_edit2de5value17ValueDeserializerNCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0ENtNtCs2bM0XC020qF_5serde2de12Deserializer15deserialize_anyNtNtCslRS6m3Xn2P0_11serde_value2de12ValueVisitorEB1W_ (3 samples, 0.01%)</title><rect x="0.7999%" y="2021" width="0.0113%" height="15" fill="rgb(222,74,54)" fg:x="213" fg:w="3"/><text x="1.0499%" y="2031.50"></text></g><g><title>_RINvXs0_NvXNvNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest1__NtBb_12TomlManifestNtNtCs2bM0XC020qF_5serde2de11Deserialize11deserializeNtB6_9___VisitorNtB1i_7Visitor9visit_mapINtCsa0IlSW1QlMd_13serde_ignored9MapAccessNtNtNtCs981e1fb3vc_9toml_edit2de5table14TableMapAccessNCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0EEB4r_ (24 samples, 0.09%)</title><rect x="0.7436%" y="2085" width="0.0901%" height="15" fill="rgb(216,99,12)" fg:x="198" fg:w="24"/><text x="0.9936%" y="2095.50"></text></g><g><title>_RINvYINtCsa0IlSW1QlMd_13serde_ignored9MapAccessNtNtNtCs981e1fb3vc_9toml_edit2de5table14TableMapAccessNCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0ENtNtCs2bM0XC020qF_5serde2de9MapAccess10next_valueINtNtCs7jW5nqjkTDq_4core6option6OptionINtNtNtNtCs2M6EiDrnkss_5alloc11collections5btree3map8BTreeMapNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest11PackageNameNtB4X_21InheritableDependencyEEEB1J_ (9 samples, 0.03%)</title><rect x="0.7999%" y="2069" width="0.0338%" height="15" fill="rgb(226,22,26)" fg:x="213" fg:w="9"/><text x="1.0499%" y="2079.50"></text></g><g><title>_RINvXsb_Csa0IlSW1QlMd_13serde_ignoredINtB6_11TrackedSeedINtNtCs7jW5nqjkTDq_4core6marker11PhantomDataINtNtBX_6option6OptionINtNtNtNtCs2M6EiDrnkss_5alloc11collections5btree3map8BTreeMapNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest11PackageNameNtB2X_21InheritableDependencyEEENCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0ENtNtCs2bM0XC020qF_5serde2de15DeserializeSeed11deserializeNtNtNtCs981e1fb3vc_9toml_edit2de5value17ValueDeserializerEB4x_ (9 samples, 0.03%)</title><rect x="0.7999%" y="2053" width="0.0338%" height="15" fill="rgb(217,163,10)" fg:x="213" fg:w="9"/><text x="1.0499%" y="2063.50"></text></g><g><title>_RINvXNtNtCs981e1fb3vc_9toml_edit2de5tableNtB3_17TableDeserializerNtNtCs2bM0XC020qF_5serde2de12Deserializer15deserialize_anyINtCsa0IlSW1QlMd_13serde_ignored4WrapINtNvXs3d_NtB13_5implsINtNtNtNtCs2M6EiDrnkss_5alloc11collections5btree3map8BTreeMapppENtB13_11Deserialize11deserialize10MapVisitorNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest11PackageNameNtB4G_21InheritableDependencyENCNvNtNtCs53RBGocdZ5C_5cargo4util4toml16deserialize_toml0EEB6e_ (9 samples, 0.03%)</title><rect x="0.7999%" y="2037" width="0.0338%" height="15" fill="rgb(213,25,53)" fg:x="213" fg:w="9"/><text x="1.0499%" y="2047.50"></text></g><g><title>_RINvXs5_NtNtNtCsbFEG7PYiVdS_3std11collections4hash3setINtB6_7HashSetReEINtNtNtNtCs7jW5nqjkTDq_4core4iter6traits7collect12FromIteratorB14_E9from_iterINtNtNtB1e_8adapters10filter_map9FilterMapINtNtB2r_7flatten7FlattenINtNtNtNtCs2M6EiDrnkss_5alloc11collections5btree3map6ValuesNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest11FeatureNameINtNtB3A_3vec3VecNtNtB3A_6string6StringEEENCNCNvNtNtCs53RBGocdZ5C_5cargo4util4toml14normalize_tomls0_00EEB6c_ (3 samples, 0.01%)</title><rect x="0.8375%" y="2069" width="0.0113%" height="15" fill="rgb(252,105,26)" fg:x="223" fg:w="3"/><text x="1.0875%" y="2079.50"></text></g><g><title>_RNvMs5_NtNtCs53RBGocdZ5C_5cargo4util9interningNtB5_14InternedString3new (3 samples, 0.01%)</title><rect x="0.8375%" y="2053" width="0.0113%" height="15" fill="rgb(220,39,43)" fg:x="223" fg:w="3"/><text x="1.0875%" y="2063.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo4util4toml22normalize_dependencies (6 samples, 0.02%)</title><rect x="0.8488%" y="2069" width="0.0225%" height="15" fill="rgb(229,68,48)" fg:x="226" fg:w="6"/><text x="1.0988%" y="2079.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo4util4toml22normalize_package_toml (3 samples, 0.01%)</title><rect x="0.8713%" y="2069" width="0.0113%" height="15" fill="rgb(252,8,32)" fg:x="232" fg:w="3"/><text x="1.1213%" y="2079.50"></text></g><g><title>_RNvNtNtNtCs53RBGocdZ5C_5cargo4util4toml7targets15normalize_tests (4 samples, 0.02%)</title><rect x="0.8826%" y="2069" width="0.0150%" height="15" fill="rgb(223,20,43)" fg:x="235" fg:w="4"/><text x="1.1326%" y="2079.50"></text></g><g><title>_RNvNtNtNtCs53RBGocdZ5C_5cargo4util4toml7targets34normalize_targets_with_legacy_path (4 samples, 0.02%)</title><rect x="0.8826%" y="2053" width="0.0150%" height="15" fill="rgb(229,81,49)" fg:x="235" fg:w="4"/><text x="1.1326%" y="2063.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo4util4toml14normalize_toml (20 samples, 0.08%)</title><rect x="0.8337%" y="2085" width="0.0751%" height="15" fill="rgb(236,28,36)" fg:x="222" fg:w="20"/><text x="1.0837%" y="2095.50"></text></g><g><title>_RINvMs0_NtNtCs53RBGocdZ5C_5cargo4core7summaryNtB6_7Summary3newReEBa_ (3 samples, 0.01%)</title><rect x="0.9239%" y="2069" width="0.0113%" height="15" fill="rgb(249,185,26)" fg:x="246" fg:w="3"/><text x="1.1739%" y="2079.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo4core7summary17build_feature_map (3 samples, 0.01%)</title><rect x="0.9239%" y="2053" width="0.0113%" height="15" fill="rgb(249,174,33)" fg:x="246" fg:w="3"/><text x="1.1739%" y="2063.50"></text></g><g><title>_RINvMs1_NtNtCs53RBGocdZ5C_5cargo4core10dependencyNtB6_10Dependency5parseReEBa_ (5 samples, 0.02%)</title><rect x="0.9389%" y="2037" width="0.0188%" height="15" fill="rgb(233,201,37)" fg:x="250" fg:w="5"/><text x="1.1889%" y="2047.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo4util4toml19gather_dependencies (6 samples, 0.02%)</title><rect x="0.9389%" y="2069" width="0.0225%" height="15" fill="rgb(221,78,26)" fg:x="250" fg:w="6"/><text x="1.1889%" y="2079.50"></text></g><g><title>_RINvNtNtCs53RBGocdZ5C_5cargo4util4toml26detailed_dep_to_dependencyNtNtCs2M6EiDrnkss_5alloc6string6StringEB6_ (6 samples, 0.02%)</title><rect x="0.9389%" y="2053" width="0.0225%" height="15" fill="rgb(250,127,30)" fg:x="250" fg:w="6"/><text x="1.1889%" y="2063.50"></text></g><g><title>_RNvNtNtNtCs53RBGocdZ5C_5cargo4util4toml7targets9configure (3 samples, 0.01%)</title><rect x="0.9802%" y="2053" width="0.0113%" height="15" fill="rgb(230,49,44)" fg:x="261" fg:w="3"/><text x="1.2302%" y="2063.50"></text></g><g><title>_RNvMsw_NtCs2M6EiDrnkss_5alloc4syncINtB5_3ArcNtNtNtCs53RBGocdZ5C_5cargo4core8manifest11TargetInnerE8make_mutBM_ (3 samples, 0.01%)</title><rect x="0.9802%" y="2037" width="0.0113%" height="15" fill="rgb(229,67,23)" fg:x="261" fg:w="3"/><text x="1.2302%" y="2047.50"></text></g><g><title>_RNvNtNtNtCs53RBGocdZ5C_5cargo4util4toml7targets10to_targets (6 samples, 0.02%)</title><rect x="0.9727%" y="2069" width="0.0225%" height="15" fill="rgb(249,83,47)" fg:x="259" fg:w="6"/><text x="1.2227%" y="2079.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo4util4toml16to_real_manifest (25 samples, 0.09%)</title><rect x="0.9089%" y="2085" width="0.0939%" height="15" fill="rgb(215,43,3)" fg:x="242" fg:w="25"/><text x="1.1589%" y="2095.50"></text></g><g><title>_RNvXNtNtCsfEWMfBGH8gp_8indexmap3map4coreINtB2_12IndexMapCoreNtNtCs981e1fb3vc_9toml_edit15internal_string14InternalStringNtNtB10_5table13TableKeyValueENtNtCs7jW5nqjkTDq_4core5clone5Clone10clone_fromB10_ (6 samples, 0.02%)</title><rect x="1.0027%" y="2021" width="0.0225%" height="15" fill="rgb(238,154,13)" fg:x="267" fg:w="6"/><text x="1.2527%" y="2031.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="1.0140%" y="2005" width="0.0113%" height="15" fill="rgb(219,56,2)" fg:x="270" fg:w="3"/><text x="1.2640%" y="2015.50"></text></g><g><title>_RNvXse_NtCs981e1fb3vc_9toml_edit8documentINtB5_10ImDocumentNtNtCs2M6EiDrnkss_5alloc6string6StringENtNtCs7jW5nqjkTDq_4core5clone5Clone5cloneCs53RBGocdZ5C_5cargo (8 samples, 0.03%)</title><rect x="1.0027%" y="2085" width="0.0300%" height="15" fill="rgb(233,0,4)" fg:x="267" fg:w="8"/><text x="1.2527%" y="2095.50"></text></g><g><title>_RNvXs0_NtCs981e1fb3vc_9toml_edit4itemNtB5_4ItemNtNtCs7jW5nqjkTDq_4core5clone5Clone5clone (8 samples, 0.03%)</title><rect x="1.0027%" y="2069" width="0.0300%" height="15" fill="rgb(235,30,7)" fg:x="267" fg:w="8"/><text x="1.2527%" y="2079.50"></text></g><g><title>_RNvXNtNtCsfEWMfBGH8gp_8indexmap3map4coreINtB2_12IndexMapCoreNtNtCs981e1fb3vc_9toml_edit15internal_string14InternalStringNtNtB10_5table13TableKeyValueENtNtCs7jW5nqjkTDq_4core5clone5Clone10clone_fromB10_ (8 samples, 0.03%)</title><rect x="1.0027%" y="2053" width="0.0300%" height="15" fill="rgb(250,79,13)" fg:x="267" fg:w="8"/><text x="1.2527%" y="2063.50"></text></g><g><title>_RNvXs0_NtCs981e1fb3vc_9toml_edit4itemNtB5_4ItemNtNtCs7jW5nqjkTDq_4core5clone5Clone5clone (8 samples, 0.03%)</title><rect x="1.0027%" y="2037" width="0.0300%" height="15" fill="rgb(211,146,34)" fg:x="267" fg:w="8"/><text x="1.2527%" y="2047.50"></text></g><g><title>_RNvMNtNtCs981e1fb3vc_9toml_edit6parser5stateNtB2_10ParseState13on_std_header (3 samples, 0.01%)</title><rect x="1.0328%" y="2053" width="0.0113%" height="15" fill="rgb(228,22,38)" fg:x="275" fg:w="3"/><text x="1.2828%" y="2063.50"></text></g><g><title>_RNvMNtNtCs981e1fb3vc_9toml_edit6parser5stateNtB2_10ParseState14finalize_table (3 samples, 0.01%)</title><rect x="1.0328%" y="2037" width="0.0113%" height="15" fill="rgb(235,168,5)" fg:x="275" fg:w="3"/><text x="1.2828%" y="2047.50"></text></g><g><title>_RNvMNtNtCs981e1fb3vc_9toml_edit6parser5stateNtB2_10ParseState9on_keyval (7 samples, 0.03%)</title><rect x="1.0478%" y="2053" width="0.0263%" height="15" fill="rgb(221,155,16)" fg:x="279" fg:w="7"/><text x="1.2978%" y="2063.50"></text></g><g><title>_RNvMs3_NtNtNtCsfEWMfBGH8gp_8indexmap3map4core5entryINtB5_11VacantEntryNtNtCs981e1fb3vc_9toml_edit15internal_string14InternalStringNtNtB1a_5table13TableKeyValueE6insertB1a_ (5 samples, 0.02%)</title><rect x="1.0553%" y="2037" width="0.0188%" height="15" fill="rgb(215,215,53)" fg:x="281" fg:w="5"/><text x="1.3053%" y="2047.50"></text></g><g><title>_RNvMs0_NtNtCsfEWMfBGH8gp_8indexmap3map4coreINtB5_12IndexMapCoreNtNtCs981e1fb3vc_9toml_edit15internal_string14InternalStringNtNtB13_5table13TableKeyValueE10push_entryB13_ (4 samples, 0.02%)</title><rect x="1.0591%" y="2021" width="0.0150%" height="15" fill="rgb(223,4,10)" fg:x="282" fg:w="4"/><text x="1.3091%" y="2031.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="1.0591%" y="2005" width="0.0150%" height="15" fill="rgb(234,103,6)" fg:x="282" fg:w="4"/><text x="1.3091%" y="2015.50"></text></g><g><title>_RNvXs1_NtNtCsjFodfiBsjxb_6winnow10combinator6parserINtB5_3MapTINtB5_4SpanNvNtNtCs981e1fb3vc_9toml_edit6parser6trivia2wsINtNtB9_6stream8StatefulINtB1W_7LocatedRNtB1W_4BStrENtNtB1d_7prelude14RecursionCheckEReNtNtB9_5error12ContextErrorENvNtB1d_3key10simple_keyBY_ENCNvB3M_3key0B1T_TINtNtNtCs7jW5nqjkTDq_4core3ops5range5RangejETNtNtB1f_10raw_string9RawStringNtNtB1f_15internal_string14InternalStringEB4u_ENtNtB1f_3key3KeyB3i_EINtNtB9_6parser6ParserB1T_B6s_B3i_E10parse_nextB1f_ (6 samples, 0.02%)</title><rect x="1.0966%" y="2021" width="0.0225%" height="15" fill="rgb(227,97,0)" fg:x="292" fg:w="6"/><text x="1.3466%" y="2031.50"></text></g><g><title>_RNvYNvNtNtCs981e1fb3vc_9toml_edit6parser3key10simple_keyINtNtNtCs7jW5nqjkTDq_4core3ops8function5FnMutTQINtNtCsjFodfiBsjxb_6winnow6stream8StatefulINtB1G_7LocatedRNtB1G_4BStrENtNtB6_7prelude14RecursionCheckEEE8call_mutB8_ (3 samples, 0.01%)</title><rect x="1.1079%" y="2005" width="0.0113%" height="15" fill="rgb(234,150,53)" fg:x="295" fg:w="3"/><text x="1.3579%" y="2015.50"></text></g><g><title>_RNvNtNtCs981e1fb3vc_9toml_edit6parser3key3key (9 samples, 0.03%)</title><rect x="1.0891%" y="2037" width="0.0338%" height="15" fill="rgb(228,201,54)" fg:x="290" fg:w="9"/><text x="1.3391%" y="2047.50"></text></g><g><title>_RNvYNvNtNtCs981e1fb3vc_9toml_edit6parser5array11array_valueINtNtNtCs7jW5nqjkTDq_4core3ops8function5FnMutTQINtNtCsjFodfiBsjxb_6winnow6stream8StatefulINtB1J_7LocatedRNtB1J_4BStrENtNtB6_7prelude14RecursionCheckEEE8call_mutB8_ (4 samples, 0.02%)</title><rect x="1.1304%" y="2021" width="0.0150%" height="15" fill="rgb(222,22,37)" fg:x="301" fg:w="4"/><text x="1.3804%" y="2031.50"></text></g><g><title>_RNvYNvNtNtCs981e1fb3vc_9toml_edit6parser5value5valueINtNtNtCs7jW5nqjkTDq_4core3ops8function5FnMutTQINtNtCsjFodfiBsjxb_6winnow6stream8StatefulINtB1C_7LocatedRNtB1C_4BStrENtNtB6_7prelude14RecursionCheckEEE8call_mutB8_ (8 samples, 0.03%)</title><rect x="1.1229%" y="2037" width="0.0300%" height="15" fill="rgb(237,53,32)" fg:x="299" fg:w="8"/><text x="1.3729%" y="2047.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo4util4toml13read_manifest (112 samples, 0.42%)</title><rect x="0.7436%" y="2101" width="0.4206%" height="15" fill="rgb(233,25,53)" fg:x="198" fg:w="112"/><text x="0.9936%" y="2111.50"></text></g><g><title>_RNvYNCNvNtNtCs981e1fb3vc_9toml_edit6parser8document8document0INtNtCsjFodfiBsjxb_6winnow6parser6ParserINtNtB12_6stream8StatefulINtB1E_7LocatedRNtB1E_4BStrENtNtB8_7prelude14RecursionCheckEuNtNtB12_5error12ContextErrorE5parseCs53RBGocdZ5C_5cargo (35 samples, 0.13%)</title><rect x="1.0328%" y="2085" width="0.1314%" height="15" fill="rgb(210,40,34)" fg:x="275" fg:w="35"/><text x="1.2828%" y="2095.50"></text></g><g><title>_RNCNCNvNtNtCs981e1fb3vc_9toml_edit6parser8document8document0s_0Cs53RBGocdZ5C_5cargo (35 samples, 0.13%)</title><rect x="1.0328%" y="2069" width="0.1314%" height="15" fill="rgb(241,220,44)" fg:x="275" fg:w="35"/><text x="1.2828%" y="2079.50"></text></g><g><title>_RNvNtNtCs981e1fb3vc_9toml_edit6parser8document12parse_keyval (22 samples, 0.08%)</title><rect x="1.0816%" y="2053" width="0.0826%" height="15" fill="rgb(235,28,35)" fg:x="288" fg:w="22"/><text x="1.3316%" y="2063.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="1.1530%" y="2037" width="0.0113%" height="15" fill="rgb(210,56,17)" fg:x="307" fg:w="3"/><text x="1.4030%" y="2047.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops7resolve21resolve_with_previous (7 samples, 0.03%)</title><rect x="1.1793%" y="2053" width="0.0263%" height="15" fill="rgb(224,130,29)" fg:x="314" fg:w="7"/><text x="1.4293%" y="2063.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo4core8resolver7resolve (7 samples, 0.03%)</title><rect x="1.1793%" y="2037" width="0.0263%" height="15" fill="rgb(235,212,8)" fg:x="314" fg:w="7"/><text x="1.4293%" y="2047.50"></text></g><g><title>_RNvNtNtCskDO5sfoSJXP_5cargo8commands8metadata4exec (15 samples, 0.06%)</title><rect x="1.1680%" y="2101" width="0.0563%" height="15" fill="rgb(223,33,50)" fg:x="311" fg:w="15"/><text x="1.4180%" y="2111.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops21cargo_output_metadata15output_metadata (15 samples, 0.06%)</title><rect x="1.1680%" y="2085" width="0.0563%" height="15" fill="rgb(219,149,13)" fg:x="311" fg:w="15"/><text x="1.4180%" y="2095.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops7resolve20resolve_ws_with_opts (14 samples, 0.05%)</title><rect x="1.1717%" y="2069" width="0.0526%" height="15" fill="rgb(250,156,29)" fg:x="312" fg:w="14"/><text x="1.4217%" y="2079.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops7resolve21resolve_with_registry (5 samples, 0.02%)</title><rect x="1.2055%" y="2053" width="0.0188%" height="15" fill="rgb(216,193,19)" fg:x="321" fg:w="5"/><text x="1.4555%" y="2063.50"></text></g><g><title>__libc_start_call_main (3 samples, 0.01%)</title><rect x="1.2243%" y="2101" width="0.0113%" height="15" fill="rgb(216,135,14)" fg:x="326" fg:w="3"/><text x="1.4743%" y="2111.50"></text></g><g><title>main (3 samples, 0.01%)</title><rect x="1.2243%" y="2085" width="0.0113%" height="15" fill="rgb(241,47,5)" fg:x="326" fg:w="3"/><text x="1.4743%" y="2095.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.01%)</title><rect x="1.2243%" y="2069" width="0.0113%" height="15" fill="rgb(233,42,35)" fg:x="326" fg:w="3"/><text x="1.4743%" y="2079.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.01%)</title><rect x="1.2243%" y="2053" width="0.0113%" height="15" fill="rgb(231,13,6)" fg:x="326" fg:w="3"/><text x="1.4743%" y="2063.50"></text></g><g><title>std::panicking::try (3 samples, 0.01%)</title><rect x="1.2243%" y="2037" width="0.0113%" height="15" fill="rgb(207,181,40)" fg:x="326" fg:w="3"/><text x="1.4743%" y="2047.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.01%)</title><rect x="1.2243%" y="2021" width="0.0113%" height="15" fill="rgb(254,173,49)" fg:x="326" fg:w="3"/><text x="1.4743%" y="2031.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (3 samples, 0.01%)</title><rect x="1.2243%" y="2005" width="0.0113%" height="15" fill="rgb(221,1,38)" fg:x="326" fg:w="3"/><text x="1.4743%" y="2015.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.01%)</title><rect x="1.2243%" y="1989" width="0.0113%" height="15" fill="rgb(206,124,46)" fg:x="326" fg:w="3"/><text x="1.4743%" y="1999.50"></text></g><g><title>std::panicking::try (3 samples, 0.01%)</title><rect x="1.2243%" y="1973" width="0.0113%" height="15" fill="rgb(249,21,11)" fg:x="326" fg:w="3"/><text x="1.4743%" y="1983.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.01%)</title><rect x="1.2243%" y="1957" width="0.0113%" height="15" fill="rgb(222,201,40)" fg:x="326" fg:w="3"/><text x="1.4743%" y="1967.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.01%)</title><rect x="1.2243%" y="1941" width="0.0113%" height="15" fill="rgb(235,61,29)" fg:x="326" fg:w="3"/><text x="1.4743%" y="1951.50"></text></g><g><title>_RNCINvNtCsbFEG7PYiVdS_3std2rt10lang_startuE0CskDO5sfoSJXP_5cargo (3 samples, 0.01%)</title><rect x="1.2243%" y="1925" width="0.0113%" height="15" fill="rgb(219,207,3)" fg:x="326" fg:w="3"/><text x="1.4743%" y="1935.50"></text></g><g><title>_RINvNtNtCsbFEG7PYiVdS_3std3sys9backtrace28___rust_begin_short_backtraceFEuuECskDO5sfoSJXP_5cargo (3 samples, 0.01%)</title><rect x="1.2243%" y="1909" width="0.0113%" height="15" fill="rgb(222,56,46)" fg:x="326" fg:w="3"/><text x="1.4743%" y="1919.50"></text></g><g><title>_RNvCskDO5sfoSJXP_5cargo4main (3 samples, 0.01%)</title><rect x="1.2243%" y="1893" width="0.0113%" height="15" fill="rgb(239,76,54)" fg:x="326" fg:w="3"/><text x="1.4743%" y="1903.50"></text></g><g><title>_RNvMNtCskDO5sfoSJXP_5cargo3cliNtB2_4Exec4exec (3 samples, 0.01%)</title><rect x="1.2243%" y="1877" width="0.0113%" height="15" fill="rgb(231,124,27)" fg:x="326" fg:w="3"/><text x="1.4743%" y="1887.50"></text></g><g><title>_RNvNtNtCskDO5sfoSJXP_5cargo8commands8metadata4exec (3 samples, 0.01%)</title><rect x="1.2243%" y="1861" width="0.0113%" height="15" fill="rgb(249,195,6)" fg:x="326" fg:w="3"/><text x="1.4743%" y="1871.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops21cargo_output_metadata15output_metadata (3 samples, 0.01%)</title><rect x="1.2243%" y="1845" width="0.0113%" height="15" fill="rgb(237,174,47)" fg:x="326" fg:w="3"/><text x="1.4743%" y="1855.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeNtNtNtCs53RBGocdZ5C_5cargo3ops7resolve16WorkspaceResolveEBM_ (3 samples, 0.01%)</title><rect x="1.2243%" y="1829" width="0.0113%" height="15" fill="rgb(206,201,31)" fg:x="326" fg:w="3"/><text x="1.4743%" y="1839.50"></text></g><g><title>asn1_item_embed_d2i (3 samples, 0.01%)</title><rect x="1.2581%" y="1589" width="0.0113%" height="15" fill="rgb(231,57,52)" fg:x="335" fg:w="3"/><text x="1.5081%" y="1599.50"></text></g><g><title>x509_pubkey_ex_d2i_ex (3 samples, 0.01%)</title><rect x="1.2581%" y="1573" width="0.0113%" height="15" fill="rgb(248,177,22)" fg:x="335" fg:w="3"/><text x="1.5081%" y="1583.50"></text></g><g><title>ASN1_item_d2i_ex (5 samples, 0.02%)</title><rect x="1.2544%" y="1669" width="0.0188%" height="15" fill="rgb(215,211,37)" fg:x="334" fg:w="5"/><text x="1.5044%" y="1679.50"></text></g><g><title>asn1_item_embed_d2i (5 samples, 0.02%)</title><rect x="1.2544%" y="1653" width="0.0188%" height="15" fill="rgb(241,128,51)" fg:x="334" fg:w="5"/><text x="1.5044%" y="1663.50"></text></g><g><title>asn1_template_noexp_d2i (5 samples, 0.02%)</title><rect x="1.2544%" y="1637" width="0.0188%" height="15" fill="rgb(227,165,31)" fg:x="334" fg:w="5"/><text x="1.5044%" y="1647.50"></text></g><g><title>asn1_item_embed_d2i (5 samples, 0.02%)</title><rect x="1.2544%" y="1621" width="0.0188%" height="15" fill="rgb(228,167,24)" fg:x="334" fg:w="5"/><text x="1.5044%" y="1631.50"></text></g><g><title>asn1_template_noexp_d2i (4 samples, 0.02%)</title><rect x="1.2581%" y="1605" width="0.0150%" height="15" fill="rgb(228,143,12)" fg:x="335" fg:w="4"/><text x="1.5081%" y="1615.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (10 samples, 0.04%)</title><rect x="1.2544%" y="1685" width="0.0376%" height="15" fill="rgb(249,149,8)" fg:x="334" fg:w="10"/><text x="1.5044%" y="1695.50"></text></g><g><title>d2i_X509_AUX (4 samples, 0.02%)</title><rect x="1.2769%" y="1669" width="0.0150%" height="15" fill="rgb(243,35,44)" fg:x="340" fg:w="4"/><text x="1.5269%" y="1679.50"></text></g><g><title>ASN1_item_d2i_ex (4 samples, 0.02%)</title><rect x="1.2769%" y="1653" width="0.0150%" height="15" fill="rgb(246,89,9)" fg:x="340" fg:w="4"/><text x="1.5269%" y="1663.50"></text></g><g><title>asn1_item_embed_d2i (4 samples, 0.02%)</title><rect x="1.2769%" y="1637" width="0.0150%" height="15" fill="rgb(233,213,13)" fg:x="340" fg:w="4"/><text x="1.5269%" y="1647.50"></text></g><g><title>asn1_template_noexp_d2i (4 samples, 0.02%)</title><rect x="1.2769%" y="1621" width="0.0150%" height="15" fill="rgb(233,141,41)" fg:x="340" fg:w="4"/><text x="1.5269%" y="1631.50"></text></g><g><title>asn1_item_embed_d2i (4 samples, 0.02%)</title><rect x="1.2769%" y="1605" width="0.0150%" height="15" fill="rgb(239,167,4)" fg:x="340" fg:w="4"/><text x="1.5269%" y="1615.50"></text></g><g><title>asn1_template_noexp_d2i (4 samples, 0.02%)</title><rect x="1.2769%" y="1589" width="0.0150%" height="15" fill="rgb(209,217,16)" fg:x="340" fg:w="4"/><text x="1.5269%" y="1599.50"></text></g><g><title>_RNvCskDO5sfoSJXP_5cargo8init_git (14 samples, 0.05%)</title><rect x="1.2431%" y="1845" width="0.0526%" height="15" fill="rgb(219,88,35)" fg:x="331" fg:w="14"/><text x="1.4931%" y="1855.50"></text></g><g><title>_RNvNtCs5OqCnfXnaW9_4git24opts27set_verify_owner_validation (14 samples, 0.05%)</title><rect x="1.2431%" y="1829" width="0.0526%" height="15" fill="rgb(220,193,23)" fg:x="331" fg:w="14"/><text x="1.4931%" y="1839.50"></text></g><g><title>_RNvCsjHdzEgVkFaK_11libgit2_sys4init (14 samples, 0.05%)</title><rect x="1.2431%" y="1813" width="0.0526%" height="15" fill="rgb(230,90,52)" fg:x="331" fg:w="14"/><text x="1.4931%" y="1823.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (14 samples, 0.05%)</title><rect x="1.2431%" y="1797" width="0.0526%" height="15" fill="rgb(252,106,19)" fg:x="331" fg:w="14"/><text x="1.4931%" y="1807.50"></text></g><g><title>_RNCINvMs0_NtNtCsbFEG7PYiVdS_3std4sync4onceNtB8_4Once9call_onceNCNvCsjHdzEgVkFaK_11libgit2_sys4init0E0B12_ (14 samples, 0.05%)</title><rect x="1.2431%" y="1781" width="0.0526%" height="15" fill="rgb(206,74,20)" fg:x="331" fg:w="14"/><text x="1.4931%" y="1791.50"></text></g><g><title>git_runtime_init (14 samples, 0.05%)</title><rect x="1.2431%" y="1765" width="0.0526%" height="15" fill="rgb(230,138,44)" fg:x="331" fg:w="14"/><text x="1.4931%" y="1775.50"></text></g><g><title>git_openssl_stream_global_init (14 samples, 0.05%)</title><rect x="1.2431%" y="1749" width="0.0526%" height="15" fill="rgb(235,182,43)" fg:x="331" fg:w="14"/><text x="1.4931%" y="1759.50"></text></g><g><title>X509_STORE_set_default_paths_ex (11 samples, 0.04%)</title><rect x="1.2544%" y="1733" width="0.0413%" height="15" fill="rgb(242,16,51)" fg:x="334" fg:w="11"/><text x="1.5044%" y="1743.50"></text></g><g><title>by_file_ctrl_ex (11 samples, 0.04%)</title><rect x="1.2544%" y="1717" width="0.0413%" height="15" fill="rgb(248,9,4)" fg:x="334" fg:w="11"/><text x="1.5044%" y="1727.50"></text></g><g><title>X509_load_cert_crl_file_ex (11 samples, 0.04%)</title><rect x="1.2544%" y="1701" width="0.0413%" height="15" fill="rgb(210,31,22)" fg:x="334" fg:w="11"/><text x="1.5044%" y="1711.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeNtNtNtCs53RBGocdZ5C_5cargo3ops21cargo_output_metadata10ExportInfoECskDO5sfoSJXP_5cargo (4 samples, 0.02%)</title><rect x="1.2957%" y="1813" width="0.0150%" height="15" fill="rgb(239,54,39)" fg:x="345" fg:w="4"/><text x="1.5457%" y="1823.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeNtNtNtCs53RBGocdZ5C_5cargo4core7package17SerializedPackageECskDO5sfoSJXP_5cargo (3 samples, 0.01%)</title><rect x="1.2994%" y="1797" width="0.0113%" height="15" fill="rgb(230,99,41)" fg:x="346" fg:w="3"/><text x="1.5494%" y="1807.50"></text></g><g><title>_RINvXs7_NtCs4lrypAzPzaG_10serde_json3serINtB6_8CompoundQINtNtCs2M6EiDrnkss_5alloc3vec3VechENtB6_16CompactFormatterENtNtCs2bM0XC020qF_5serde3ser15SerializeStruct15serialize_fieldIBT_NtNtNtCs53RBGocdZ5C_5cargo4core10dependency10DependencyEECskDO5sfoSJXP_5cargo (4 samples, 0.02%)</title><rect x="1.3257%" y="1797" width="0.0150%" height="15" fill="rgb(253,106,12)" fg:x="353" fg:w="4"/><text x="1.5757%" y="1807.50"></text></g><g><title>_RINvXs1H_NtNtCs2bM0XC020qF_5serde3ser5implsRNtNtNtCs53RBGocdZ5C_5cargo4core7package17SerializedPackageNtB9_9Serialize9serializeQINtNtCs4lrypAzPzaG_10serde_json3ser10SerializerQINtNtCs2M6EiDrnkss_5alloc3vec3VechEEECskDO5sfoSJXP_5cargo (7 samples, 0.03%)</title><rect x="1.3220%" y="1813" width="0.0263%" height="15" fill="rgb(213,46,41)" fg:x="352" fg:w="7"/><text x="1.5720%" y="1823.50"></text></g><g><title>_RNvMNtCskDO5sfoSJXP_5cargo3cliNtB2_4Exec4exec (18 samples, 0.07%)</title><rect x="1.2957%" y="1845" width="0.0676%" height="15" fill="rgb(215,133,35)" fg:x="345" fg:w="18"/><text x="1.5457%" y="1855.50"></text></g><g><title>_RNvNtNtCskDO5sfoSJXP_5cargo8commands8metadata4exec (18 samples, 0.07%)</title><rect x="1.2957%" y="1829" width="0.0676%" height="15" fill="rgb(213,28,5)" fg:x="345" fg:w="18"/><text x="1.5457%" y="1839.50"></text></g><g><title>_RNvXs1_NtCs1N5GExJ5O9Q_8anstream4autoINtB5_10AutoStreamNtNtNtCsbFEG7PYiVdS_3std2io5stdio6StdoutENtBV_5Write9write_fmtCs53RBGocdZ5C_5cargo (3 samples, 0.01%)</title><rect x="1.3520%" y="1813" width="0.0113%" height="15" fill="rgb(215,77,49)" fg:x="360" fg:w="3"/><text x="1.6020%" y="1823.50"></text></g><g><title>_RNvNtCs1N5GExJ5O9Q_8anstream5strip9write_fmt (3 samples, 0.01%)</title><rect x="1.3520%" y="1797" width="0.0113%" height="15" fill="rgb(248,100,22)" fg:x="360" fg:w="3"/><text x="1.6020%" y="1807.50"></text></g><g><title>core::fmt::write (3 samples, 0.01%)</title><rect x="1.3520%" y="1781" width="0.0113%" height="15" fill="rgb(208,67,9)" fg:x="360" fg:w="3"/><text x="1.6020%" y="1791.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.01%)</title><rect x="1.3520%" y="1765" width="0.0113%" height="15" fill="rgb(219,133,21)" fg:x="360" fg:w="3"/><text x="1.6020%" y="1775.50"></text></g><g><title>_RNvXs_NtCs1N5GExJ5O9Q_8anstream3fmtINtB4_7AdapterNCNvNtB6_5strip9write_fmt0ENtNtCs7jW5nqjkTDq_4core3fmt5Write9write_strB6_ (3 samples, 0.01%)</title><rect x="1.3520%" y="1749" width="0.0113%" height="15" fill="rgb(246,46,29)" fg:x="360" fg:w="3"/><text x="1.6020%" y="1759.50"></text></g><g><title>_RNvNtNtCs1N5GExJ5O9Q_8anstream7adapter5strip10next_bytes (3 samples, 0.01%)</title><rect x="1.3520%" y="1733" width="0.0113%" height="15" fill="rgb(246,185,52)" fg:x="360" fg:w="3"/><text x="1.6020%" y="1743.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (34 samples, 0.13%)</title><rect x="1.2393%" y="2085" width="0.1277%" height="15" fill="rgb(252,136,11)" fg:x="330" fg:w="34"/><text x="1.4893%" y="2095.50"></text></g><g><title>__libc_start_call_main (33 samples, 0.12%)</title><rect x="1.2431%" y="2069" width="0.1239%" height="15" fill="rgb(219,138,53)" fg:x="331" fg:w="33"/><text x="1.4931%" y="2079.50"></text></g><g><title>main (33 samples, 0.12%)</title><rect x="1.2431%" y="2053" width="0.1239%" height="15" fill="rgb(211,51,23)" fg:x="331" fg:w="33"/><text x="1.4931%" y="2063.50"></text></g><g><title>std::rt::lang_start_internal (33 samples, 0.12%)</title><rect x="1.2431%" y="2037" width="0.1239%" height="15" fill="rgb(247,221,28)" fg:x="331" fg:w="33"/><text x="1.4931%" y="2047.50"></text></g><g><title>std::panic::catch_unwind (33 samples, 0.12%)</title><rect x="1.2431%" y="2021" width="0.1239%" height="15" fill="rgb(251,222,45)" fg:x="331" fg:w="33"/><text x="1.4931%" y="2031.50"></text></g><g><title>std::panicking::try (33 samples, 0.12%)</title><rect x="1.2431%" y="2005" width="0.1239%" height="15" fill="rgb(217,162,53)" fg:x="331" fg:w="33"/><text x="1.4931%" y="2015.50"></text></g><g><title>std::panicking::try::do_call (33 samples, 0.12%)</title><rect x="1.2431%" y="1989" width="0.1239%" height="15" fill="rgb(229,93,14)" fg:x="331" fg:w="33"/><text x="1.4931%" y="1999.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (33 samples, 0.12%)</title><rect x="1.2431%" y="1973" width="0.1239%" height="15" fill="rgb(209,67,49)" fg:x="331" fg:w="33"/><text x="1.4931%" y="1983.50"></text></g><g><title>std::panic::catch_unwind (33 samples, 0.12%)</title><rect x="1.2431%" y="1957" width="0.1239%" height="15" fill="rgb(213,87,29)" fg:x="331" fg:w="33"/><text x="1.4931%" y="1967.50"></text></g><g><title>std::panicking::try (33 samples, 0.12%)</title><rect x="1.2431%" y="1941" width="0.1239%" height="15" fill="rgb(205,151,52)" fg:x="331" fg:w="33"/><text x="1.4931%" y="1951.50"></text></g><g><title>std::panicking::try::do_call (33 samples, 0.12%)</title><rect x="1.2431%" y="1925" width="0.1239%" height="15" fill="rgb(253,215,39)" fg:x="331" fg:w="33"/><text x="1.4931%" y="1935.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (33 samples, 0.12%)</title><rect x="1.2431%" y="1909" width="0.1239%" height="15" fill="rgb(221,220,41)" fg:x="331" fg:w="33"/><text x="1.4931%" y="1919.50"></text></g><g><title>_RNCINvNtCsbFEG7PYiVdS_3std2rt10lang_startuE0CskDO5sfoSJXP_5cargo (33 samples, 0.12%)</title><rect x="1.2431%" y="1893" width="0.1239%" height="15" fill="rgb(218,133,21)" fg:x="331" fg:w="33"/><text x="1.4931%" y="1903.50"></text></g><g><title>_RINvNtNtCsbFEG7PYiVdS_3std3sys9backtrace28___rust_begin_short_backtraceFEuuECskDO5sfoSJXP_5cargo (33 samples, 0.12%)</title><rect x="1.2431%" y="1877" width="0.1239%" height="15" fill="rgb(221,193,43)" fg:x="331" fg:w="33"/><text x="1.4931%" y="1887.50"></text></g><g><title>_RNvCskDO5sfoSJXP_5cargo4main (33 samples, 0.12%)</title><rect x="1.2431%" y="1861" width="0.1239%" height="15" fill="rgb(240,128,52)" fg:x="331" fg:w="33"/><text x="1.4931%" y="1871.50"></text></g><g><title>_start (37 samples, 0.14%)</title><rect x="1.2393%" y="2101" width="0.1390%" height="15" fill="rgb(253,114,12)" fg:x="330" fg:w="37"/><text x="1.4893%" y="2111.50"></text></g><g><title>_dl_start (3 samples, 0.01%)</title><rect x="1.3670%" y="2085" width="0.0113%" height="15" fill="rgb(215,223,47)" fg:x="364" fg:w="3"/><text x="1.6170%" y="2095.50"></text></g><g><title>_dl_sysdep_start (3 samples, 0.01%)</title><rect x="1.3670%" y="2069" width="0.0113%" height="15" fill="rgb(248,225,23)" fg:x="364" fg:w="3"/><text x="1.6170%" y="2079.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeINtNtCs981e1fb3vc_9toml_edit8document10ImDocumentNtNtCs2M6EiDrnkss_5alloc6string6StringEECs53RBGocdZ5C_5cargo (8 samples, 0.03%)</title><rect x="1.3858%" y="1797" width="0.0300%" height="15" fill="rgb(250,108,0)" fg:x="369" fg:w="8"/><text x="1.6358%" y="1807.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeINtNtCs2M6EiDrnkss_5alloc3vec3VecINtCsfEWMfBGH8gp_8indexmap6BucketNtNtCs981e1fb3vc_9toml_edit15internal_string14InternalStringNtNtB1O_5table13TableKeyValueEEECs53RBGocdZ5C_5cargo (8 samples, 0.03%)</title><rect x="1.3858%" y="1781" width="0.0300%" height="15" fill="rgb(228,208,7)" fg:x="369" fg:w="8"/><text x="1.6358%" y="1791.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeSINtCsfEWMfBGH8gp_8indexmap6BucketNtNtCs981e1fb3vc_9toml_edit15internal_string14InternalStringNtNtB1i_5table13TableKeyValueEECs53RBGocdZ5C_5cargo (8 samples, 0.03%)</title><rect x="1.3858%" y="1765" width="0.0300%" height="15" fill="rgb(244,45,10)" fg:x="369" fg:w="8"/><text x="1.6358%" y="1775.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeINtNtCs2M6EiDrnkss_5alloc3vec3VecINtCsfEWMfBGH8gp_8indexmap6BucketNtNtCs981e1fb3vc_9toml_edit15internal_string14InternalStringNtNtB1O_5table13TableKeyValueEEECs53RBGocdZ5C_5cargo (8 samples, 0.03%)</title><rect x="1.3858%" y="1749" width="0.0300%" height="15" fill="rgb(207,125,25)" fg:x="369" fg:w="8"/><text x="1.6358%" y="1759.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeSINtCsfEWMfBGH8gp_8indexmap6BucketNtNtCs981e1fb3vc_9toml_edit15internal_string14InternalStringNtNtB1i_5table13TableKeyValueEECs53RBGocdZ5C_5cargo (8 samples, 0.03%)</title><rect x="1.3858%" y="1733" width="0.0300%" height="15" fill="rgb(210,195,18)" fg:x="369" fg:w="8"/><text x="1.6358%" y="1743.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeNtNtNtCs53RBGocdZ5C_5cargo4core7package10PackageSetEBM_ (13 samples, 0.05%)</title><rect x="1.3821%" y="1845" width="0.0488%" height="15" fill="rgb(249,80,12)" fg:x="368" fg:w="13"/><text x="1.6321%" y="1855.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeTNtNtNtCs53RBGocdZ5C_5cargo4core10package_id9PackageIdINtCs8KHtNtxYdHB_8lazycell8LazyCellNtNtBL_7package7PackageEEEBN_ (12 samples, 0.05%)</title><rect x="1.3858%" y="1829" width="0.0451%" height="15" fill="rgb(221,65,9)" fg:x="369" fg:w="12"/><text x="1.6358%" y="1839.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeNtNtNtCs53RBGocdZ5C_5cargo4core8manifest8ManifestEBM_ (12 samples, 0.05%)</title><rect x="1.3858%" y="1813" width="0.0451%" height="15" fill="rgb(235,49,36)" fg:x="369" fg:w="12"/><text x="1.6358%" y="1823.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeNtNtCsgMVJ5BNXFtS_18cargo_util_schemas8manifest12TomlManifestECs53RBGocdZ5C_5cargo (4 samples, 0.02%)</title><rect x="1.4159%" y="1797" width="0.0150%" height="15" fill="rgb(225,32,20)" fg:x="377" fg:w="4"/><text x="1.6659%" y="1807.50"></text></g><g><title>_RINvNtCs7jW5nqjkTDq_4core3ptr13drop_in_placeNtNtNtCs53RBGocdZ5C_5cargo3ops7resolve16WorkspaceResolveEBM_ (14 samples, 0.05%)</title><rect x="1.3821%" y="1861" width="0.0526%" height="15" fill="rgb(215,141,46)" fg:x="368" fg:w="14"/><text x="1.6321%" y="1871.50"></text></g><g><title>cargo (374 samples, 1.40%)</title><rect x="0.0338%" y="2117" width="1.4046%" height="15" fill="rgb(250,160,47)" fg:x="9" fg:w="374"/><text x="0.2838%" y="2127.50"></text></g><g><title>std::rt::lang_start_internal (15 samples, 0.06%)</title><rect x="1.3821%" y="2101" width="0.0563%" height="15" fill="rgb(216,222,40)" fg:x="368" fg:w="15"/><text x="1.6321%" y="2111.50"></text></g><g><title>std::panic::catch_unwind (15 samples, 0.06%)</title><rect x="1.3821%" y="2085" width="0.0563%" height="15" fill="rgb(234,217,39)" fg:x="368" fg:w="15"/><text x="1.6321%" y="2095.50"></text></g><g><title>std::panicking::try (15 samples, 0.06%)</title><rect x="1.3821%" y="2069" width="0.0563%" height="15" fill="rgb(207,178,40)" fg:x="368" fg:w="15"/><text x="1.6321%" y="2079.50"></text></g><g><title>std::panicking::try::do_call (15 samples, 0.06%)</title><rect x="1.3821%" y="2053" width="0.0563%" height="15" fill="rgb(221,136,13)" fg:x="368" fg:w="15"/><text x="1.6321%" y="2063.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (15 samples, 0.06%)</title><rect x="1.3821%" y="2037" width="0.0563%" height="15" fill="rgb(249,199,10)" fg:x="368" fg:w="15"/><text x="1.6321%" y="2047.50"></text></g><g><title>std::panic::catch_unwind (15 samples, 0.06%)</title><rect x="1.3821%" y="2021" width="0.0563%" height="15" fill="rgb(249,222,13)" fg:x="368" fg:w="15"/><text x="1.6321%" y="2031.50"></text></g><g><title>std::panicking::try (15 samples, 0.06%)</title><rect x="1.3821%" y="2005" width="0.0563%" height="15" fill="rgb(244,185,38)" fg:x="368" fg:w="15"/><text x="1.6321%" y="2015.50"></text></g><g><title>std::panicking::try::do_call (15 samples, 0.06%)</title><rect x="1.3821%" y="1989" width="0.0563%" height="15" fill="rgb(236,202,9)" fg:x="368" fg:w="15"/><text x="1.6321%" y="1999.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (15 samples, 0.06%)</title><rect x="1.3821%" y="1973" width="0.0563%" height="15" fill="rgb(250,229,37)" fg:x="368" fg:w="15"/><text x="1.6321%" y="1983.50"></text></g><g><title>_RNCINvNtCsbFEG7PYiVdS_3std2rt10lang_startuE0CskDO5sfoSJXP_5cargo (15 samples, 0.06%)</title><rect x="1.3821%" y="1957" width="0.0563%" height="15" fill="rgb(206,174,23)" fg:x="368" fg:w="15"/><text x="1.6321%" y="1967.50"></text></g><g><title>_RINvNtNtCsbFEG7PYiVdS_3std3sys9backtrace28___rust_begin_short_backtraceFEuuECskDO5sfoSJXP_5cargo (15 samples, 0.06%)</title><rect x="1.3821%" y="1941" width="0.0563%" height="15" fill="rgb(211,33,43)" fg:x="368" fg:w="15"/><text x="1.6321%" y="1951.50"></text></g><g><title>_RNvCskDO5sfoSJXP_5cargo4main (15 samples, 0.06%)</title><rect x="1.3821%" y="1925" width="0.0563%" height="15" fill="rgb(245,58,50)" fg:x="368" fg:w="15"/><text x="1.6321%" y="1935.50"></text></g><g><title>_RNvMNtCskDO5sfoSJXP_5cargo3cliNtB2_4Exec4exec (15 samples, 0.06%)</title><rect x="1.3821%" y="1909" width="0.0563%" height="15" fill="rgb(244,68,36)" fg:x="368" fg:w="15"/><text x="1.6321%" y="1919.50"></text></g><g><title>_RNvNtNtCskDO5sfoSJXP_5cargo8commands8metadata4exec (15 samples, 0.06%)</title><rect x="1.3821%" y="1893" width="0.0563%" height="15" fill="rgb(232,229,15)" fg:x="368" fg:w="15"/><text x="1.6321%" y="1903.50"></text></g><g><title>_RNvNtNtCs53RBGocdZ5C_5cargo3ops21cargo_output_metadata15output_metadata (15 samples, 0.06%)</title><rect x="1.3821%" y="1877" width="0.0563%" height="15" fill="rgb(254,30,23)" fg:x="368" fg:w="15"/><text x="1.6321%" y="1887.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (38 samples, 0.14%)</title><rect x="1.4459%" y="1621" width="0.1427%" height="15" fill="rgb(235,160,14)" fg:x="385" fg:w="38"/><text x="1.6959%" y="1631.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (38 samples, 0.14%)</title><rect x="1.4459%" y="1605" width="0.1427%" height="15" fill="rgb(212,155,44)" fg:x="385" fg:w="38"/><text x="1.6959%" y="1615.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (38 samples, 0.14%)</title><rect x="1.4459%" y="1589" width="0.1427%" height="15" fill="rgb(226,2,50)" fg:x="385" fg:w="38"/><text x="1.6959%" y="1599.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (9 samples, 0.03%)</title><rect x="1.5548%" y="1573" width="0.0338%" height="15" fill="rgb(234,177,6)" fg:x="414" fg:w="9"/><text x="1.8048%" y="1583.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (9 samples, 0.03%)</title><rect x="1.5548%" y="1557" width="0.0338%" height="15" fill="rgb(217,24,9)" fg:x="414" fg:w="9"/><text x="1.8048%" y="1567.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (34 samples, 0.13%)</title><rect x="1.5886%" y="1605" width="0.1277%" height="15" fill="rgb(220,13,46)" fg:x="423" fg:w="34"/><text x="1.8386%" y="1615.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (34 samples, 0.13%)</title><rect x="1.5886%" y="1589" width="0.1277%" height="15" fill="rgb(239,221,27)" fg:x="423" fg:w="34"/><text x="1.8386%" y="1599.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (34 samples, 0.13%)</title><rect x="1.5886%" y="1573" width="0.1277%" height="15" fill="rgb(222,198,25)" fg:x="423" fg:w="34"/><text x="1.8386%" y="1583.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (8 samples, 0.03%)</title><rect x="1.6863%" y="1557" width="0.0300%" height="15" fill="rgb(211,99,13)" fg:x="449" fg:w="8"/><text x="1.9363%" y="1567.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (8 samples, 0.03%)</title><rect x="1.6863%" y="1541" width="0.0300%" height="15" fill="rgb(232,111,31)" fg:x="449" fg:w="8"/><text x="1.9363%" y="1551.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (29 samples, 0.11%)</title><rect x="1.7201%" y="1589" width="0.1089%" height="15" fill="rgb(245,82,37)" fg:x="458" fg:w="29"/><text x="1.9701%" y="1599.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (29 samples, 0.11%)</title><rect x="1.7201%" y="1573" width="0.1089%" height="15" fill="rgb(227,149,46)" fg:x="458" fg:w="29"/><text x="1.9701%" y="1583.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (29 samples, 0.11%)</title><rect x="1.7201%" y="1557" width="0.1089%" height="15" fill="rgb(218,36,50)" fg:x="458" fg:w="29"/><text x="1.9701%" y="1567.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (4 samples, 0.02%)</title><rect x="1.8139%" y="1541" width="0.0150%" height="15" fill="rgb(226,80,48)" fg:x="483" fg:w="4"/><text x="2.0639%" y="1551.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (4 samples, 0.02%)</title><rect x="1.8139%" y="1525" width="0.0150%" height="15" fill="rgb(238,224,15)" fg:x="483" fg:w="4"/><text x="2.0639%" y="1535.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (31 samples, 0.12%)</title><rect x="1.8365%" y="1573" width="0.1164%" height="15" fill="rgb(241,136,10)" fg:x="489" fg:w="31"/><text x="2.0865%" y="1583.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (31 samples, 0.12%)</title><rect x="1.8365%" y="1557" width="0.1164%" height="15" fill="rgb(208,32,45)" fg:x="489" fg:w="31"/><text x="2.0865%" y="1567.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (31 samples, 0.12%)</title><rect x="1.8365%" y="1541" width="0.1164%" height="15" fill="rgb(207,135,9)" fg:x="489" fg:w="31"/><text x="2.0865%" y="1551.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (8 samples, 0.03%)</title><rect x="1.9229%" y="1525" width="0.0300%" height="15" fill="rgb(206,86,44)" fg:x="512" fg:w="8"/><text x="2.1729%" y="1535.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (8 samples, 0.03%)</title><rect x="1.9229%" y="1509" width="0.0300%" height="15" fill="rgb(245,177,15)" fg:x="512" fg:w="8"/><text x="2.1729%" y="1519.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (24 samples, 0.09%)</title><rect x="1.9604%" y="1557" width="0.0901%" height="15" fill="rgb(206,64,50)" fg:x="522" fg:w="24"/><text x="2.2104%" y="1567.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (24 samples, 0.09%)</title><rect x="1.9604%" y="1541" width="0.0901%" height="15" fill="rgb(234,36,40)" fg:x="522" fg:w="24"/><text x="2.2104%" y="1551.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (24 samples, 0.09%)</title><rect x="1.9604%" y="1525" width="0.0901%" height="15" fill="rgb(213,64,8)" fg:x="522" fg:w="24"/><text x="2.2104%" y="1535.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (6 samples, 0.02%)</title><rect x="2.0280%" y="1509" width="0.0225%" height="15" fill="rgb(210,75,36)" fg:x="540" fg:w="6"/><text x="2.2780%" y="1519.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (6 samples, 0.02%)</title><rect x="2.0280%" y="1493" width="0.0225%" height="15" fill="rgb(229,88,21)" fg:x="540" fg:w="6"/><text x="2.2780%" y="1503.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (4 samples, 0.02%)</title><rect x="2.1144%" y="1493" width="0.0150%" height="15" fill="rgb(252,204,47)" fg:x="563" fg:w="4"/><text x="2.3644%" y="1503.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (4 samples, 0.02%)</title><rect x="2.1144%" y="1477" width="0.0150%" height="15" fill="rgb(208,77,27)" fg:x="563" fg:w="4"/><text x="2.3644%" y="1487.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (21 samples, 0.08%)</title><rect x="2.0543%" y="1541" width="0.0789%" height="15" fill="rgb(221,76,26)" fg:x="547" fg:w="21"/><text x="2.3043%" y="1551.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (21 samples, 0.08%)</title><rect x="2.0543%" y="1525" width="0.0789%" height="15" fill="rgb(225,139,18)" fg:x="547" fg:w="21"/><text x="2.3043%" y="1535.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (21 samples, 0.08%)</title><rect x="2.0543%" y="1509" width="0.0789%" height="15" fill="rgb(230,137,11)" fg:x="547" fg:w="21"/><text x="2.3043%" y="1519.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (27 samples, 0.10%)</title><rect x="2.0506%" y="1557" width="0.1014%" height="15" fill="rgb(212,28,1)" fg:x="546" fg:w="27"/><text x="2.3006%" y="1567.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.01%)</title><rect x="2.1520%" y="1557" width="0.0113%" height="15" fill="rgb(248,164,17)" fg:x="573" fg:w="3"/><text x="2.4020%" y="1567.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.01%)</title><rect x="2.1520%" y="1541" width="0.0113%" height="15" fill="rgb(222,171,42)" fg:x="573" fg:w="3"/><text x="2.4020%" y="1551.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="2.1520%" y="1525" width="0.0113%" height="15" fill="rgb(243,84,45)" fg:x="573" fg:w="3"/><text x="2.4020%" y="1535.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (60 samples, 0.23%)</title><rect x="1.9529%" y="1573" width="0.2253%" height="15" fill="rgb(252,49,23)" fg:x="520" fg:w="60"/><text x="2.2029%" y="1583.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (99 samples, 0.37%)</title><rect x="1.8290%" y="1589" width="0.3718%" height="15" fill="rgb(215,19,7)" fg:x="487" fg:w="99"/><text x="2.0790%" y="1599.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="2.2008%" y="1541" width="0.0113%" height="15" fill="rgb(238,81,41)" fg:x="586" fg:w="3"/><text x="2.4508%" y="1551.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="2.2008%" y="1525" width="0.0113%" height="15" fill="rgb(210,199,37)" fg:x="586" fg:w="3"/><text x="2.4508%" y="1535.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 0.02%)</title><rect x="2.2008%" y="1589" width="0.0188%" height="15" fill="rgb(244,192,49)" fg:x="586" fg:w="5"/><text x="2.4508%" y="1599.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 0.02%)</title><rect x="2.2008%" y="1573" width="0.0188%" height="15" fill="rgb(226,211,11)" fg:x="586" fg:w="5"/><text x="2.4508%" y="1583.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.02%)</title><rect x="2.2008%" y="1557" width="0.0188%" height="15" fill="rgb(236,162,54)" fg:x="586" fg:w="5"/><text x="2.4508%" y="1567.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (4 samples, 0.02%)</title><rect x="2.2196%" y="1589" width="0.0150%" height="15" fill="rgb(220,229,9)" fg:x="591" fg:w="4"/><text x="2.4696%" y="1599.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (4 samples, 0.02%)</title><rect x="2.2196%" y="1573" width="0.0150%" height="15" fill="rgb(250,87,22)" fg:x="591" fg:w="4"/><text x="2.4696%" y="1583.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (4 samples, 0.02%)</title><rect x="2.2196%" y="1557" width="0.0150%" height="15" fill="rgb(239,43,17)" fg:x="591" fg:w="4"/><text x="2.4696%" y="1567.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.02%)</title><rect x="2.2196%" y="1541" width="0.0150%" height="15" fill="rgb(231,177,25)" fg:x="591" fg:w="4"/><text x="2.4696%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (142 samples, 0.53%)</title><rect x="1.7163%" y="1605" width="0.5333%" height="15" fill="rgb(219,179,1)" fg:x="457" fg:w="142"/><text x="1.9663%" y="1615.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="2.2609%" y="1541" width="0.0113%" height="15" fill="rgb(238,219,53)" fg:x="602" fg:w="3"/><text x="2.5109%" y="1551.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="2.2609%" y="1525" width="0.0113%" height="15" fill="rgb(232,167,36)" fg:x="602" fg:w="3"/><text x="2.5109%" y="1535.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (5 samples, 0.02%)</title><rect x="2.2571%" y="1605" width="0.0188%" height="15" fill="rgb(244,19,51)" fg:x="601" fg:w="5"/><text x="2.5071%" y="1615.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (5 samples, 0.02%)</title><rect x="2.2571%" y="1589" width="0.0188%" height="15" fill="rgb(224,6,22)" fg:x="601" fg:w="5"/><text x="2.5071%" y="1599.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (5 samples, 0.02%)</title><rect x="2.2571%" y="1573" width="0.0188%" height="15" fill="rgb(224,145,5)" fg:x="601" fg:w="5"/><text x="2.5071%" y="1583.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.02%)</title><rect x="2.2571%" y="1557" width="0.0188%" height="15" fill="rgb(234,130,49)" fg:x="601" fg:w="5"/><text x="2.5071%" y="1567.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (187 samples, 0.70%)</title><rect x="1.5886%" y="1621" width="0.7023%" height="15" fill="rgb(254,6,2)" fg:x="423" fg:w="187"/><text x="1.8386%" y="1631.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (3 samples, 0.01%)</title><rect x="2.2796%" y="1605" width="0.0113%" height="15" fill="rgb(208,96,46)" fg:x="607" fg:w="3"/><text x="2.5296%" y="1615.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (3 samples, 0.01%)</title><rect x="2.2796%" y="1589" width="0.0113%" height="15" fill="rgb(239,3,39)" fg:x="607" fg:w="3"/><text x="2.5296%" y="1599.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (3 samples, 0.01%)</title><rect x="2.2796%" y="1573" width="0.0113%" height="15" fill="rgb(233,210,1)" fg:x="607" fg:w="3"/><text x="2.5296%" y="1583.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (3 samples, 0.01%)</title><rect x="2.2796%" y="1557" width="0.0113%" height="15" fill="rgb(244,137,37)" fg:x="607" fg:w="3"/><text x="2.5296%" y="1567.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="2.2984%" y="1557" width="0.0113%" height="15" fill="rgb(240,136,2)" fg:x="612" fg:w="3"/><text x="2.5484%" y="1567.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="2.2984%" y="1541" width="0.0113%" height="15" fill="rgb(239,18,37)" fg:x="612" fg:w="3"/><text x="2.5484%" y="1551.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (5 samples, 0.02%)</title><rect x="2.2947%" y="1621" width="0.0188%" height="15" fill="rgb(218,185,22)" fg:x="611" fg:w="5"/><text x="2.5447%" y="1631.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (5 samples, 0.02%)</title><rect x="2.2947%" y="1605" width="0.0188%" height="15" fill="rgb(225,218,4)" fg:x="611" fg:w="5"/><text x="2.5447%" y="1615.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (5 samples, 0.02%)</title><rect x="2.2947%" y="1589" width="0.0188%" height="15" fill="rgb(230,182,32)" fg:x="611" fg:w="5"/><text x="2.5447%" y="1599.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.02%)</title><rect x="2.2947%" y="1573" width="0.0188%" height="15" fill="rgb(242,56,43)" fg:x="611" fg:w="5"/><text x="2.5447%" y="1583.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (236 samples, 0.89%)</title><rect x="1.4384%" y="2101" width="0.8863%" height="15" fill="rgb(233,99,24)" fg:x="383" fg:w="236"/><text x="1.6884%" y="2111.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (236 samples, 0.89%)</title><rect x="1.4384%" y="2085" width="0.8863%" height="15" fill="rgb(234,209,42)" fg:x="383" fg:w="236"/><text x="1.6884%" y="2095.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (236 samples, 0.89%)</title><rect x="1.4384%" y="2069" width="0.8863%" height="15" fill="rgb(227,7,12)" fg:x="383" fg:w="236"/><text x="1.6884%" y="2079.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (236 samples, 0.89%)</title><rect x="1.4384%" y="2053" width="0.8863%" height="15" fill="rgb(245,203,43)" fg:x="383" fg:w="236"/><text x="1.6884%" y="2063.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (236 samples, 0.89%)</title><rect x="1.4384%" y="2037" width="0.8863%" height="15" fill="rgb(238,205,33)" fg:x="383" fg:w="236"/><text x="1.6884%" y="2047.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (236 samples, 0.89%)</title><rect x="1.4384%" y="2021" width="0.8863%" height="15" fill="rgb(231,56,7)" fg:x="383" fg:w="236"/><text x="1.6884%" y="2031.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (236 samples, 0.89%)</title><rect x="1.4384%" y="2005" width="0.8863%" height="15" fill="rgb(244,186,29)" fg:x="383" fg:w="236"/><text x="1.6884%" y="2015.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1989" width="0.8863%" height="15" fill="rgb(234,111,31)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1999.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1973" width="0.8863%" height="15" fill="rgb(241,149,10)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1983.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1957" width="0.8863%" height="15" fill="rgb(249,206,44)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1967.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1941" width="0.8863%" height="15" fill="rgb(251,153,30)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1951.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1925" width="0.8863%" height="15" fill="rgb(239,152,38)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1935.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1909" width="0.8863%" height="15" fill="rgb(249,139,47)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1919.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1893" width="0.8863%" height="15" fill="rgb(244,64,35)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1903.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1877" width="0.8863%" height="15" fill="rgb(216,46,15)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1887.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1861" width="0.8863%" height="15" fill="rgb(250,74,19)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1871.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1845" width="0.8863%" height="15" fill="rgb(249,42,33)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1855.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1829" width="0.8863%" height="15" fill="rgb(242,149,17)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1839.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1813" width="0.8863%" height="15" fill="rgb(244,29,21)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1823.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1797" width="0.8863%" height="15" fill="rgb(220,130,37)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1807.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1781" width="0.8863%" height="15" fill="rgb(211,67,2)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1791.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1765" width="0.8863%" height="15" fill="rgb(235,68,52)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1775.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1749" width="0.8863%" height="15" fill="rgb(246,142,3)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1759.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1733" width="0.8863%" height="15" fill="rgb(241,25,7)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1743.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1717" width="0.8863%" height="15" fill="rgb(242,119,39)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1727.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1701" width="0.8863%" height="15" fill="rgb(241,98,45)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1711.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1685" width="0.8863%" height="15" fill="rgb(254,28,30)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1695.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1669" width="0.8863%" height="15" fill="rgb(241,142,54)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1679.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1653" width="0.8863%" height="15" fill="rgb(222,85,15)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1663.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (236 samples, 0.89%)</title><rect x="1.4384%" y="1637" width="0.8863%" height="15" fill="rgb(210,85,47)" fg:x="383" fg:w="236"/><text x="1.6884%" y="1647.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (43 samples, 0.16%)</title><rect x="2.3397%" y="1365" width="0.1615%" height="15" fill="rgb(224,206,25)" fg:x="623" fg:w="43"/><text x="2.5897%" y="1375.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (43 samples, 0.16%)</title><rect x="2.3397%" y="1349" width="0.1615%" height="15" fill="rgb(243,201,19)" fg:x="623" fg:w="43"/><text x="2.5897%" y="1359.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (43 samples, 0.16%)</title><rect x="2.3397%" y="1333" width="0.1615%" height="15" fill="rgb(236,59,4)" fg:x="623" fg:w="43"/><text x="2.5897%" y="1343.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (6 samples, 0.02%)</title><rect x="2.4787%" y="1317" width="0.0225%" height="15" fill="rgb(254,179,45)" fg:x="660" fg:w="6"/><text x="2.7287%" y="1327.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (6 samples, 0.02%)</title><rect x="2.4787%" y="1301" width="0.0225%" height="15" fill="rgb(226,14,10)" fg:x="660" fg:w="6"/><text x="2.7287%" y="1311.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.02%)</title><rect x="2.5012%" y="1365" width="0.0150%" height="15" fill="rgb(244,27,41)" fg:x="666" fg:w="4"/><text x="2.7512%" y="1375.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4 samples, 0.02%)</title><rect x="2.5012%" y="1349" width="0.0150%" height="15" fill="rgb(235,35,32)" fg:x="666" fg:w="4"/><text x="2.7512%" y="1359.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.02%)</title><rect x="2.5012%" y="1333" width="0.0150%" height="15" fill="rgb(218,68,31)" fg:x="666" fg:w="4"/><text x="2.7512%" y="1343.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4 samples, 0.02%)</title><rect x="2.5012%" y="1317" width="0.0150%" height="15" fill="rgb(207,120,37)" fg:x="666" fg:w="4"/><text x="2.7512%" y="1327.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.02%)</title><rect x="2.5012%" y="1301" width="0.0150%" height="15" fill="rgb(227,98,0)" fg:x="666" fg:w="4"/><text x="2.7512%" y="1311.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.02%)</title><rect x="2.5012%" y="1285" width="0.0150%" height="15" fill="rgb(207,7,3)" fg:x="666" fg:w="4"/><text x="2.7512%" y="1295.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.01%)</title><rect x="2.5050%" y="1269" width="0.0113%" height="15" fill="rgb(206,98,19)" fg:x="667" fg:w="3"/><text x="2.7550%" y="1279.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (56 samples, 0.21%)</title><rect x="2.3285%" y="1381" width="0.2103%" height="15" fill="rgb(217,5,26)" fg:x="620" fg:w="56"/><text x="2.5785%" y="1391.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (62 samples, 0.23%)</title><rect x="2.3247%" y="2101" width="0.2328%" height="15" fill="rgb(235,190,38)" fg:x="619" fg:w="62"/><text x="2.5747%" y="2111.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (62 samples, 0.23%)</title><rect x="2.3247%" y="2085" width="0.2328%" height="15" fill="rgb(247,86,24)" fg:x="619" fg:w="62"/><text x="2.5747%" y="2095.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (62 samples, 0.23%)</title><rect x="2.3247%" y="2069" width="0.2328%" height="15" fill="rgb(205,101,16)" fg:x="619" fg:w="62"/><text x="2.5747%" y="2079.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (62 samples, 0.23%)</title><rect x="2.3247%" y="2053" width="0.2328%" height="15" fill="rgb(246,168,33)" fg:x="619" fg:w="62"/><text x="2.5747%" y="2063.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (62 samples, 0.23%)</title><rect x="2.3247%" y="2037" width="0.2328%" height="15" fill="rgb(231,114,1)" fg:x="619" fg:w="62"/><text x="2.5747%" y="2047.50"></text></g><g><title>compile_demo_art::compile (62 samples, 0.23%)</title><rect x="2.3247%" y="2021" width="0.2328%" height="15" fill="rgb(207,184,53)" fg:x="619" fg:w="62"/><text x="2.5747%" y="2031.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (62 samples, 0.23%)</title><rect x="2.3247%" y="2005" width="0.2328%" height="15" fill="rgb(224,95,51)" fg:x="619" fg:w="62"/><text x="2.5747%" y="2015.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (62 samples, 0.23%)</title><rect x="2.3247%" y="1989" width="0.2328%" height="15" fill="rgb(212,188,45)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1999.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (62 samples, 0.23%)</title><rect x="2.3247%" y="1973" width="0.2328%" height="15" fill="rgb(223,154,38)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1983.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (62 samples, 0.23%)</title><rect x="2.3247%" y="1957" width="0.2328%" height="15" fill="rgb(251,22,52)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1967.50"></text></g><g><title>core::iter::adapters::try_process (62 samples, 0.23%)</title><rect x="2.3247%" y="1941" width="0.2328%" height="15" fill="rgb(229,209,22)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1951.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (62 samples, 0.23%)</title><rect x="2.3247%" y="1925" width="0.2328%" height="15" fill="rgb(234,138,34)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1935.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (62 samples, 0.23%)</title><rect x="2.3247%" y="1909" width="0.2328%" height="15" fill="rgb(212,95,11)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1919.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (62 samples, 0.23%)</title><rect x="2.3247%" y="1893" width="0.2328%" height="15" fill="rgb(240,179,47)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1903.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (62 samples, 0.23%)</title><rect x="2.3247%" y="1877" width="0.2328%" height="15" fill="rgb(240,163,11)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1887.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (62 samples, 0.23%)</title><rect x="2.3247%" y="1861" width="0.2328%" height="15" fill="rgb(236,37,12)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1871.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.23%)</title><rect x="2.3247%" y="1845" width="0.2328%" height="15" fill="rgb(232,164,16)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1855.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (62 samples, 0.23%)</title><rect x="2.3247%" y="1829" width="0.2328%" height="15" fill="rgb(244,205,15)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1839.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (62 samples, 0.23%)</title><rect x="2.3247%" y="1813" width="0.2328%" height="15" fill="rgb(223,117,47)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1823.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (62 samples, 0.23%)</title><rect x="2.3247%" y="1797" width="0.2328%" height="15" fill="rgb(244,107,35)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1807.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (62 samples, 0.23%)</title><rect x="2.3247%" y="1781" width="0.2328%" height="15" fill="rgb(205,140,8)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1791.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (62 samples, 0.23%)</title><rect x="2.3247%" y="1765" width="0.2328%" height="15" fill="rgb(228,84,46)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1775.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (62 samples, 0.23%)</title><rect x="2.3247%" y="1749" width="0.2328%" height="15" fill="rgb(254,188,9)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1759.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (62 samples, 0.23%)</title><rect x="2.3247%" y="1733" width="0.2328%" height="15" fill="rgb(206,112,54)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1743.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (62 samples, 0.23%)</title><rect x="2.3247%" y="1717" width="0.2328%" height="15" fill="rgb(216,84,49)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1727.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (62 samples, 0.23%)</title><rect x="2.3247%" y="1701" width="0.2328%" height="15" fill="rgb(214,194,35)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1711.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (62 samples, 0.23%)</title><rect x="2.3247%" y="1685" width="0.2328%" height="15" fill="rgb(249,28,3)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1695.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (62 samples, 0.23%)</title><rect x="2.3247%" y="1669" width="0.2328%" height="15" fill="rgb(222,56,52)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1679.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1653" width="0.2328%" height="15" fill="rgb(245,217,50)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1663.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1637" width="0.2328%" height="15" fill="rgb(213,201,24)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1647.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1621" width="0.2328%" height="15" fill="rgb(248,116,28)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1631.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1605" width="0.2328%" height="15" fill="rgb(219,72,43)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1615.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1589" width="0.2328%" height="15" fill="rgb(209,138,14)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1599.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1573" width="0.2328%" height="15" fill="rgb(222,18,33)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1583.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1557" width="0.2328%" height="15" fill="rgb(213,199,7)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1567.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1541" width="0.2328%" height="15" fill="rgb(250,110,10)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1525" width="0.2328%" height="15" fill="rgb(248,123,6)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1535.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1509" width="0.2328%" height="15" fill="rgb(206,91,31)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1519.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1493" width="0.2328%" height="15" fill="rgb(211,154,13)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1503.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1477" width="0.2328%" height="15" fill="rgb(225,148,7)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1487.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1461" width="0.2328%" height="15" fill="rgb(220,160,43)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1471.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1445" width="0.2328%" height="15" fill="rgb(213,52,39)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1455.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1429" width="0.2328%" height="15" fill="rgb(243,137,7)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1439.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (62 samples, 0.23%)</title><rect x="2.3247%" y="1413" width="0.2328%" height="15" fill="rgb(230,79,13)" fg:x="619" fg:w="62"/><text x="2.5747%" y="1423.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (61 samples, 0.23%)</title><rect x="2.3285%" y="1397" width="0.2291%" height="15" fill="rgb(247,105,23)" fg:x="620" fg:w="61"/><text x="2.5785%" y="1407.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.01%)</title><rect x="2.5463%" y="1381" width="0.0113%" height="15" fill="rgb(223,179,41)" fg:x="678" fg:w="3"/><text x="2.7963%" y="1391.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.01%)</title><rect x="2.5463%" y="1365" width="0.0113%" height="15" fill="rgb(218,9,34)" fg:x="678" fg:w="3"/><text x="2.7963%" y="1375.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.01%)</title><rect x="2.5463%" y="1349" width="0.0113%" height="15" fill="rgb(222,106,8)" fg:x="678" fg:w="3"/><text x="2.7963%" y="1359.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="2.5463%" y="1333" width="0.0113%" height="15" fill="rgb(211,220,0)" fg:x="678" fg:w="3"/><text x="2.7963%" y="1343.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="2.5463%" y="1317" width="0.0113%" height="15" fill="rgb(229,52,16)" fg:x="678" fg:w="3"/><text x="2.7963%" y="1327.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="2.5463%" y="1301" width="0.0113%" height="15" fill="rgb(212,155,18)" fg:x="678" fg:w="3"/><text x="2.7963%" y="1311.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="2.5463%" y="1285" width="0.0113%" height="15" fill="rgb(242,21,14)" fg:x="678" fg:w="3"/><text x="2.7963%" y="1295.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="2.5463%" y="1269" width="0.0113%" height="15" fill="rgb(222,19,48)" fg:x="678" fg:w="3"/><text x="2.7963%" y="1279.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="2.5463%" y="1253" width="0.0113%" height="15" fill="rgb(232,45,27)" fg:x="678" fg:w="3"/><text x="2.7963%" y="1263.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="2.5726%" y="2101" width="0.0188%" height="15" fill="rgb(249,103,42)" fg:x="685" fg:w="5"/><text x="2.8226%" y="2111.50"></text></g><g><title>__libc_start_call_main (3 samples, 0.01%)</title><rect x="2.5914%" y="2101" width="0.0113%" height="15" fill="rgb(246,81,33)" fg:x="690" fg:w="3"/><text x="2.8414%" y="2111.50"></text></g><g><title>main (3 samples, 0.01%)</title><rect x="2.5914%" y="2085" width="0.0113%" height="15" fill="rgb(252,33,42)" fg:x="690" fg:w="3"/><text x="2.8414%" y="2095.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.01%)</title><rect x="2.5914%" y="2069" width="0.0113%" height="15" fill="rgb(209,212,41)" fg:x="690" fg:w="3"/><text x="2.8414%" y="2079.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.01%)</title><rect x="2.5914%" y="2053" width="0.0113%" height="15" fill="rgb(207,154,6)" fg:x="690" fg:w="3"/><text x="2.8414%" y="2063.50"></text></g><g><title>std::panicking::try (3 samples, 0.01%)</title><rect x="2.5914%" y="2037" width="0.0113%" height="15" fill="rgb(223,64,47)" fg:x="690" fg:w="3"/><text x="2.8414%" y="2047.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.01%)</title><rect x="2.5914%" y="2021" width="0.0113%" height="15" fill="rgb(211,161,38)" fg:x="690" fg:w="3"/><text x="2.8414%" y="2031.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (3 samples, 0.01%)</title><rect x="2.5914%" y="2005" width="0.0113%" height="15" fill="rgb(219,138,40)" fg:x="690" fg:w="3"/><text x="2.8414%" y="2015.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.01%)</title><rect x="2.5914%" y="1989" width="0.0113%" height="15" fill="rgb(241,228,46)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1999.50"></text></g><g><title>std::panicking::try (3 samples, 0.01%)</title><rect x="2.5914%" y="1973" width="0.0113%" height="15" fill="rgb(223,209,38)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1983.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.01%)</title><rect x="2.5914%" y="1957" width="0.0113%" height="15" fill="rgb(236,164,45)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1967.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.01%)</title><rect x="2.5914%" y="1941" width="0.0113%" height="15" fill="rgb(231,15,5)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1951.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.01%)</title><rect x="2.5914%" y="1925" width="0.0113%" height="15" fill="rgb(252,35,15)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1935.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3 samples, 0.01%)</title><rect x="2.5914%" y="1909" width="0.0113%" height="15" fill="rgb(248,181,18)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1919.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.01%)</title><rect x="2.5914%" y="1893" width="0.0113%" height="15" fill="rgb(233,39,42)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1903.50"></text></g><g><title>compile_demo_art::main (3 samples, 0.01%)</title><rect x="2.5914%" y="1877" width="0.0113%" height="15" fill="rgb(238,110,33)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1887.50"></text></g><g><title>compile_demo_art::benches (3 samples, 0.01%)</title><rect x="2.5914%" y="1861" width="0.0113%" height="15" fill="rgb(233,195,10)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1871.50"></text></g><g><title>compile_demo_art::compile_to_proto (3 samples, 0.01%)</title><rect x="2.5914%" y="1845" width="0.0113%" height="15" fill="rgb(254,105,3)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1855.50"></text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (3 samples, 0.01%)</title><rect x="2.5914%" y="1829" width="0.0113%" height="15" fill="rgb(221,225,9)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1839.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (3 samples, 0.01%)</title><rect x="2.5914%" y="1813" width="0.0113%" height="15" fill="rgb(224,227,45)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1823.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (3 samples, 0.01%)</title><rect x="2.5914%" y="1797" width="0.0113%" height="15" fill="rgb(229,198,43)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1807.50"></text></g><g><title>criterion::routine::Routine::profile (3 samples, 0.01%)</title><rect x="2.5914%" y="1781" width="0.0113%" height="15" fill="rgb(206,209,35)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1791.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (3 samples, 0.01%)</title><rect x="2.5914%" y="1765" width="0.0113%" height="15" fill="rgb(245,195,53)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1775.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.01%)</title><rect x="2.5914%" y="1749" width="0.0113%" height="15" fill="rgb(240,92,26)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1759.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="2.5914%" y="1733" width="0.0113%" height="15" fill="rgb(207,40,23)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1743.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="2.5914%" y="1717" width="0.0113%" height="15" fill="rgb(223,111,35)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1727.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="2.5914%" y="1701" width="0.0113%" height="15" fill="rgb(229,147,28)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1711.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.01%)</title><rect x="2.5914%" y="1685" width="0.0113%" height="15" fill="rgb(211,29,28)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1695.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3 samples, 0.01%)</title><rect x="2.5914%" y="1669" width="0.0113%" height="15" fill="rgb(228,72,33)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1679.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.01%)</title><rect x="2.5914%" y="1653" width="0.0113%" height="15" fill="rgb(205,214,31)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1663.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="2.5914%" y="1637" width="0.0113%" height="15" fill="rgb(224,111,15)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1647.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="2.5914%" y="1621" width="0.0113%" height="15" fill="rgb(253,21,26)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1631.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (3 samples, 0.01%)</title><rect x="2.5914%" y="1605" width="0.0113%" height="15" fill="rgb(245,139,43)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1615.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure}} (3 samples, 0.01%)</title><rect x="2.5914%" y="1589" width="0.0113%" height="15" fill="rgb(252,170,7)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1599.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (3 samples, 0.01%)</title><rect x="2.5914%" y="1573" width="0.0113%" height="15" fill="rgb(231,118,14)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1583.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}} (3 samples, 0.01%)</title><rect x="2.5914%" y="1557" width="0.0113%" height="15" fill="rgb(238,83,0)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1567.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (3 samples, 0.01%)</title><rect x="2.5914%" y="1541" width="0.0113%" height="15" fill="rgb(221,39,39)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (3 samples, 0.01%)</title><rect x="2.5914%" y="1525" width="0.0113%" height="15" fill="rgb(222,119,46)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1535.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.01%)</title><rect x="2.5914%" y="1509" width="0.0113%" height="15" fill="rgb(222,165,49)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1519.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3 samples, 0.01%)</title><rect x="2.5914%" y="1493" width="0.0113%" height="15" fill="rgb(219,113,52)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1503.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.01%)</title><rect x="2.5914%" y="1477" width="0.0113%" height="15" fill="rgb(214,7,15)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="2.5914%" y="1461" width="0.0113%" height="15" fill="rgb(235,32,4)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1471.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="2.5914%" y="1445" width="0.0113%" height="15" fill="rgb(238,90,54)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1455.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (3 samples, 0.01%)</title><rect x="2.5914%" y="1429" width="0.0113%" height="15" fill="rgb(213,208,19)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1439.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.01%)</title><rect x="2.5914%" y="1413" width="0.0113%" height="15" fill="rgb(233,156,4)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1423.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (3 samples, 0.01%)</title><rect x="2.5914%" y="1397" width="0.0113%" height="15" fill="rgb(207,194,5)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1407.50"></text></g><g><title>compile_demo_art::compile (3 samples, 0.01%)</title><rect x="2.5914%" y="1381" width="0.0113%" height="15" fill="rgb(206,111,30)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1391.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (3 samples, 0.01%)</title><rect x="2.5914%" y="1365" width="0.0113%" height="15" fill="rgb(243,70,54)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1375.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (3 samples, 0.01%)</title><rect x="2.5914%" y="1349" width="0.0113%" height="15" fill="rgb(242,28,8)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1359.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.01%)</title><rect x="2.5914%" y="1333" width="0.0113%" height="15" fill="rgb(219,106,18)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1343.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="2.5914%" y="1317" width="0.0113%" height="15" fill="rgb(244,222,10)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1327.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.01%)</title><rect x="2.5914%" y="1301" width="0.0113%" height="15" fill="rgb(236,179,52)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1311.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (3 samples, 0.01%)</title><rect x="2.5914%" y="1285" width="0.0113%" height="15" fill="rgb(213,23,39)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1295.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.01%)</title><rect x="2.5914%" y="1269" width="0.0113%" height="15" fill="rgb(238,48,10)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="2.5914%" y="1253" width="0.0113%" height="15" fill="rgb(251,196,23)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1263.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="2.5914%" y="1237" width="0.0113%" height="15" fill="rgb(250,152,24)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1247.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="2.5914%" y="1221" width="0.0113%" height="15" fill="rgb(209,150,17)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1231.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="2.5914%" y="1205" width="0.0113%" height="15" fill="rgb(234,202,34)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1215.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (3 samples, 0.01%)</title><rect x="2.5914%" y="1189" width="0.0113%" height="15" fill="rgb(253,148,53)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1199.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.01%)</title><rect x="2.5914%" y="1173" width="0.0113%" height="15" fill="rgb(218,129,16)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1183.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.01%)</title><rect x="2.5914%" y="1157" width="0.0113%" height="15" fill="rgb(216,85,19)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1167.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.01%)</title><rect x="2.5914%" y="1141" width="0.0113%" height="15" fill="rgb(235,228,7)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1151.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.01%)</title><rect x="2.5914%" y="1125" width="0.0113%" height="15" fill="rgb(245,175,0)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1135.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (3 samples, 0.01%)</title><rect x="2.5914%" y="1109" width="0.0113%" height="15" fill="rgb(208,168,36)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1119.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (3 samples, 0.01%)</title><rect x="2.5914%" y="1093" width="0.0113%" height="15" fill="rgb(246,171,24)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1103.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (3 samples, 0.01%)</title><rect x="2.5914%" y="1077" width="0.0113%" height="15" fill="rgb(215,142,24)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1087.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (3 samples, 0.01%)</title><rect x="2.5914%" y="1061" width="0.0113%" height="15" fill="rgb(250,187,7)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1071.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (3 samples, 0.01%)</title><rect x="2.5914%" y="1045" width="0.0113%" height="15" fill="rgb(228,66,33)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1055.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (3 samples, 0.01%)</title><rect x="2.5914%" y="1029" width="0.0113%" height="15" fill="rgb(234,215,21)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1039.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="2.5914%" y="1013" width="0.0113%" height="15" fill="rgb(222,191,20)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1023.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="2.5914%" y="997" width="0.0113%" height="15" fill="rgb(245,79,54)" fg:x="690" fg:w="3"/><text x="2.8414%" y="1007.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="2.5914%" y="981" width="0.0113%" height="15" fill="rgb(240,10,37)" fg:x="690" fg:w="3"/><text x="2.8414%" y="991.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="2.5914%" y="965" width="0.0113%" height="15" fill="rgb(214,192,32)" fg:x="690" fg:w="3"/><text x="2.8414%" y="975.50"></text></g><g><title>__spawni_child (4 samples, 0.02%)</title><rect x="2.6064%" y="2101" width="0.0150%" height="15" fill="rgb(209,36,54)" fg:x="694" fg:w="4"/><text x="2.8564%" y="2111.50"></text></g><g><title>&lt;criterion::DEFAULT_OUTPUT_DIRECTORY as core::ops::deref::Deref&gt;::deref (7 samples, 0.03%)</title><rect x="2.6289%" y="1797" width="0.0263%" height="15" fill="rgb(220,10,11)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1807.50"></text></g><g><title>&lt;criterion::DEFAULT_OUTPUT_DIRECTORY as core::ops::deref::Deref&gt;::deref::__stability (7 samples, 0.03%)</title><rect x="2.6289%" y="1781" width="0.0263%" height="15" fill="rgb(221,106,17)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1791.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (7 samples, 0.03%)</title><rect x="2.6289%" y="1765" width="0.0263%" height="15" fill="rgb(251,142,44)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1775.50"></text></g><g><title>std::sync::once::Once::call_once (7 samples, 0.03%)</title><rect x="2.6289%" y="1749" width="0.0263%" height="15" fill="rgb(238,13,15)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1759.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (7 samples, 0.03%)</title><rect x="2.6289%" y="1733" width="0.0263%" height="15" fill="rgb(208,107,27)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1743.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (7 samples, 0.03%)</title><rect x="2.6289%" y="1717" width="0.0263%" height="15" fill="rgb(205,136,37)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1727.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::_{{closure}} (7 samples, 0.03%)</title><rect x="2.6289%" y="1701" width="0.0263%" height="15" fill="rgb(250,205,27)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1711.50"></text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 0.03%)</title><rect x="2.6289%" y="1685" width="0.0263%" height="15" fill="rgb(210,80,43)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1695.50"></text></g><g><title>&lt;criterion::DEFAULT_OUTPUT_DIRECTORY as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (7 samples, 0.03%)</title><rect x="2.6289%" y="1669" width="0.0263%" height="15" fill="rgb(247,160,36)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1679.50"></text></g><g><title>criterion::cargo_target_directory (7 samples, 0.03%)</title><rect x="2.6289%" y="1653" width="0.0263%" height="15" fill="rgb(234,13,49)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1663.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (7 samples, 0.03%)</title><rect x="2.6289%" y="1637" width="0.0263%" height="15" fill="rgb(234,122,0)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1647.50"></text></g><g><title>criterion::cargo_target_directory::_{{closure}} (7 samples, 0.03%)</title><rect x="2.6289%" y="1621" width="0.0263%" height="15" fill="rgb(207,146,38)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1631.50"></text></g><g><title>serde_json::de::from_slice (7 samples, 0.03%)</title><rect x="2.6289%" y="1605" width="0.0263%" height="15" fill="rgb(207,177,25)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1615.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.03%)</title><rect x="2.6289%" y="1589" width="0.0263%" height="15" fill="rgb(211,178,42)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1599.50"></text></g><g><title>criterion::cargo_target_directory::_::&lt;impl serde::de::Deserialize for criterion::cargo_target_directory::Metadata&gt;::deserialize (7 samples, 0.03%)</title><rect x="2.6289%" y="1573" width="0.0263%" height="15" fill="rgb(230,69,54)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1583.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (7 samples, 0.03%)</title><rect x="2.6289%" y="1557" width="0.0263%" height="15" fill="rgb(214,135,41)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1567.50"></text></g><g><title>&lt;criterion::cargo_target_directory::_::&lt;impl serde::de::Deserialize for criterion::cargo_target_directory::Metadata&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.03%)</title><rect x="2.6289%" y="1541" width="0.0263%" height="15" fill="rgb(237,67,25)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1551.50"></text></g><g><title>serde::de::MapAccess::next_value (7 samples, 0.03%)</title><rect x="2.6289%" y="1525" width="0.0263%" height="15" fill="rgb(222,189,50)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1535.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (7 samples, 0.03%)</title><rect x="2.6289%" y="1509" width="0.0263%" height="15" fill="rgb(245,148,34)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1519.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.03%)</title><rect x="2.6289%" y="1493" width="0.0263%" height="15" fill="rgb(222,29,6)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1503.50"></text></g><g><title>&lt;serde::de::ignored_any::IgnoredAny as serde::de::Deserialize&gt;::deserialize (7 samples, 0.03%)</title><rect x="2.6289%" y="1477" width="0.0263%" height="15" fill="rgb(221,189,43)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1487.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_ignored_any (7 samples, 0.03%)</title><rect x="2.6289%" y="1461" width="0.0263%" height="15" fill="rgb(207,36,27)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1471.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_value (7 samples, 0.03%)</title><rect x="2.6289%" y="1445" width="0.0263%" height="15" fill="rgb(217,90,24)" fg:x="700" fg:w="7"/><text x="2.8789%" y="1455.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (6 samples, 0.02%)</title><rect x="2.6327%" y="1429" width="0.0225%" height="15" fill="rgb(224,66,35)" fg:x="701" fg:w="6"/><text x="2.8827%" y="1439.50"></text></g><g><title>&lt;criterion::Criterion as core::default::Default&gt;::default (13 samples, 0.05%)</title><rect x="2.6289%" y="1813" width="0.0488%" height="15" fill="rgb(221,13,50)" fg:x="700" fg:w="13"/><text x="2.8789%" y="1823.50"></text></g><g><title>&lt;criterion::DEFAULT_PLOTTING_BACKEND as core::ops::deref::Deref&gt;::deref (6 samples, 0.02%)</title><rect x="2.6552%" y="1797" width="0.0225%" height="15" fill="rgb(236,68,49)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1807.50"></text></g><g><title>&lt;criterion::DEFAULT_PLOTTING_BACKEND as core::ops::deref::Deref&gt;::deref::__stability (6 samples, 0.02%)</title><rect x="2.6552%" y="1781" width="0.0225%" height="15" fill="rgb(229,146,28)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1791.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (6 samples, 0.02%)</title><rect x="2.6552%" y="1765" width="0.0225%" height="15" fill="rgb(225,31,38)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1775.50"></text></g><g><title>std::sync::once::Once::call_once (6 samples, 0.02%)</title><rect x="2.6552%" y="1749" width="0.0225%" height="15" fill="rgb(250,208,3)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1759.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (6 samples, 0.02%)</title><rect x="2.6552%" y="1733" width="0.0225%" height="15" fill="rgb(246,54,23)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1743.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (6 samples, 0.02%)</title><rect x="2.6552%" y="1717" width="0.0225%" height="15" fill="rgb(243,76,11)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1727.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::_{{closure}} (6 samples, 0.02%)</title><rect x="2.6552%" y="1701" width="0.0225%" height="15" fill="rgb(245,21,50)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1711.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6 samples, 0.02%)</title><rect x="2.6552%" y="1685" width="0.0225%" height="15" fill="rgb(228,9,43)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1695.50"></text></g><g><title>&lt;criterion::DEFAULT_PLOTTING_BACKEND as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (6 samples, 0.02%)</title><rect x="2.6552%" y="1669" width="0.0225%" height="15" fill="rgb(208,100,47)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1679.50"></text></g><g><title>&lt;criterion::GNUPLOT_VERSION as core::ops::deref::Deref&gt;::deref (6 samples, 0.02%)</title><rect x="2.6552%" y="1653" width="0.0225%" height="15" fill="rgb(232,26,8)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1663.50"></text></g><g><title>&lt;criterion::GNUPLOT_VERSION as core::ops::deref::Deref&gt;::deref::__stability (6 samples, 0.02%)</title><rect x="2.6552%" y="1637" width="0.0225%" height="15" fill="rgb(216,166,38)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1647.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (6 samples, 0.02%)</title><rect x="2.6552%" y="1621" width="0.0225%" height="15" fill="rgb(251,202,51)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1631.50"></text></g><g><title>std::sync::once::Once::call_once (6 samples, 0.02%)</title><rect x="2.6552%" y="1605" width="0.0225%" height="15" fill="rgb(254,216,34)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1615.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (6 samples, 0.02%)</title><rect x="2.6552%" y="1589" width="0.0225%" height="15" fill="rgb(251,32,27)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1599.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (6 samples, 0.02%)</title><rect x="2.6552%" y="1573" width="0.0225%" height="15" fill="rgb(208,127,28)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1583.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::_{{closure}} (6 samples, 0.02%)</title><rect x="2.6552%" y="1557" width="0.0225%" height="15" fill="rgb(224,137,22)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1567.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6 samples, 0.02%)</title><rect x="2.6552%" y="1541" width="0.0225%" height="15" fill="rgb(254,70,32)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1551.50"></text></g><g><title>&lt;criterion::GNUPLOT_VERSION as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (6 samples, 0.02%)</title><rect x="2.6552%" y="1525" width="0.0225%" height="15" fill="rgb(229,75,37)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1535.50"></text></g><g><title>criterion_plot::version (6 samples, 0.02%)</title><rect x="2.6552%" y="1509" width="0.0225%" height="15" fill="rgb(252,64,23)" fg:x="707" fg:w="6"/><text x="2.9052%" y="1519.50"></text></g><g><title>std::process::Command::output (5 samples, 0.02%)</title><rect x="2.6590%" y="1493" width="0.0188%" height="15" fill="rgb(232,162,48)" fg:x="708" fg:w="5"/><text x="2.9090%" y="1503.50"></text></g><g><title>std::sys::pal::unix::process::process_inner::&lt;impl std::sys::pal::unix::process::process_common::Command&gt;::output (5 samples, 0.02%)</title><rect x="2.6590%" y="1477" width="0.0188%" height="15" fill="rgb(246,160,12)" fg:x="708" fg:w="5"/><text x="2.9090%" y="1487.50"></text></g><g><title>std::sys_common::process::wait_with_output (5 samples, 0.02%)</title><rect x="2.6590%" y="1461" width="0.0188%" height="15" fill="rgb(247,166,0)" fg:x="708" fg:w="5"/><text x="2.9090%" y="1471.50"></text></g><g><title>std::sys::pal::unix::pipe::read2 (5 samples, 0.02%)</title><rect x="2.6590%" y="1445" width="0.0188%" height="15" fill="rgb(249,219,21)" fg:x="708" fg:w="5"/><text x="2.9090%" y="1455.50"></text></g><g><title>std::sys::pal::unix::pipe::read2::read (3 samples, 0.01%)</title><rect x="2.6665%" y="1429" width="0.0113%" height="15" fill="rgb(205,209,3)" fg:x="710" fg:w="3"/><text x="2.9165%" y="1439.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_to_end (3 samples, 0.01%)</title><rect x="2.6665%" y="1413" width="0.0113%" height="15" fill="rgb(243,44,1)" fg:x="710" fg:w="3"/><text x="2.9165%" y="1423.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.6777%" y="1285" width="0.0150%" height="15" fill="rgb(206,159,16)" fg:x="713" fg:w="4"/><text x="2.9277%" y="1295.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.6777%" y="1269" width="0.0150%" height="15" fill="rgb(244,77,30)" fg:x="713" fg:w="4"/><text x="2.9277%" y="1279.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.6777%" y="1253" width="0.0150%" height="15" fill="rgb(218,69,12)" fg:x="713" fg:w="4"/><text x="2.9277%" y="1263.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.02%)</title><rect x="2.6777%" y="1237" width="0.0150%" height="15" fill="rgb(212,87,7)" fg:x="713" fg:w="4"/><text x="2.9277%" y="1247.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.6777%" y="1221" width="0.0150%" height="15" fill="rgb(245,114,25)" fg:x="713" fg:w="4"/><text x="2.9277%" y="1231.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.6777%" y="1205" width="0.0150%" height="15" fill="rgb(210,61,42)" fg:x="713" fg:w="4"/><text x="2.9277%" y="1215.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.6777%" y="1189" width="0.0150%" height="15" fill="rgb(211,52,33)" fg:x="713" fg:w="4"/><text x="2.9277%" y="1199.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.02%)</title><rect x="2.6777%" y="1173" width="0.0150%" height="15" fill="rgb(234,58,33)" fg:x="713" fg:w="4"/><text x="2.9277%" y="1183.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="2.6815%" y="1157" width="0.0113%" height="15" fill="rgb(220,115,36)" fg:x="714" fg:w="3"/><text x="2.9315%" y="1167.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="2.6777%" y="1477" width="0.0188%" height="15" fill="rgb(243,153,54)" fg:x="713" fg:w="5"/><text x="2.9277%" y="1487.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.02%)</title><rect x="2.6777%" y="1461" width="0.0188%" height="15" fill="rgb(251,47,18)" fg:x="713" fg:w="5"/><text x="2.9277%" y="1471.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.02%)</title><rect x="2.6777%" y="1445" width="0.0188%" height="15" fill="rgb(242,102,42)" fg:x="713" fg:w="5"/><text x="2.9277%" y="1455.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.02%)</title><rect x="2.6777%" y="1429" width="0.0188%" height="15" fill="rgb(234,31,38)" fg:x="713" fg:w="5"/><text x="2.9277%" y="1439.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="2.6777%" y="1413" width="0.0188%" height="15" fill="rgb(221,117,51)" fg:x="713" fg:w="5"/><text x="2.9277%" y="1423.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="2.6777%" y="1397" width="0.0188%" height="15" fill="rgb(212,20,18)" fg:x="713" fg:w="5"/><text x="2.9277%" y="1407.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="2.6777%" y="1381" width="0.0188%" height="15" fill="rgb(245,133,36)" fg:x="713" fg:w="5"/><text x="2.9277%" y="1391.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.02%)</title><rect x="2.6777%" y="1365" width="0.0188%" height="15" fill="rgb(212,6,19)" fg:x="713" fg:w="5"/><text x="2.9277%" y="1375.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="2.6777%" y="1349" width="0.0188%" height="15" fill="rgb(218,1,36)" fg:x="713" fg:w="5"/><text x="2.9277%" y="1359.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="2.6777%" y="1333" width="0.0188%" height="15" fill="rgb(246,84,54)" fg:x="713" fg:w="5"/><text x="2.9277%" y="1343.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="2.6777%" y="1317" width="0.0188%" height="15" fill="rgb(242,110,6)" fg:x="713" fg:w="5"/><text x="2.9277%" y="1327.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.02%)</title><rect x="2.6777%" y="1301" width="0.0188%" height="15" fill="rgb(214,47,5)" fg:x="713" fg:w="5"/><text x="2.9277%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.7003%" y="1125" width="0.0150%" height="15" fill="rgb(218,159,25)" fg:x="719" fg:w="4"/><text x="2.9503%" y="1135.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.02%)</title><rect x="2.7003%" y="1109" width="0.0150%" height="15" fill="rgb(215,211,28)" fg:x="719" fg:w="4"/><text x="2.9503%" y="1119.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.02%)</title><rect x="2.7003%" y="1093" width="0.0150%" height="15" fill="rgb(238,59,32)" fg:x="719" fg:w="4"/><text x="2.9503%" y="1103.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.02%)</title><rect x="2.7003%" y="1077" width="0.0150%" height="15" fill="rgb(226,82,3)" fg:x="719" fg:w="4"/><text x="2.9503%" y="1087.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.7003%" y="1061" width="0.0150%" height="15" fill="rgb(240,164,32)" fg:x="719" fg:w="4"/><text x="2.9503%" y="1071.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.7003%" y="1045" width="0.0150%" height="15" fill="rgb(232,46,7)" fg:x="719" fg:w="4"/><text x="2.9503%" y="1055.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.7003%" y="1029" width="0.0150%" height="15" fill="rgb(229,129,53)" fg:x="719" fg:w="4"/><text x="2.9503%" y="1039.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.02%)</title><rect x="2.7003%" y="1013" width="0.0150%" height="15" fill="rgb(234,188,29)" fg:x="719" fg:w="4"/><text x="2.9503%" y="1023.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.7003%" y="997" width="0.0150%" height="15" fill="rgb(246,141,4)" fg:x="719" fg:w="4"/><text x="2.9503%" y="1007.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.7003%" y="981" width="0.0150%" height="15" fill="rgb(229,23,39)" fg:x="719" fg:w="4"/><text x="2.9503%" y="991.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.7003%" y="965" width="0.0150%" height="15" fill="rgb(206,12,3)" fg:x="719" fg:w="4"/><text x="2.9503%" y="975.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.02%)</title><rect x="2.7003%" y="949" width="0.0150%" height="15" fill="rgb(252,226,20)" fg:x="719" fg:w="4"/><text x="2.9503%" y="959.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="2.7040%" y="933" width="0.0113%" height="15" fill="rgb(216,123,35)" fg:x="720" fg:w="3"/><text x="2.9540%" y="943.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="2.7040%" y="917" width="0.0113%" height="15" fill="rgb(212,68,40)" fg:x="720" fg:w="3"/><text x="2.9540%" y="927.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="2.7040%" y="901" width="0.0113%" height="15" fill="rgb(254,125,32)" fg:x="720" fg:w="3"/><text x="2.9540%" y="911.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.01%)</title><rect x="2.7040%" y="885" width="0.0113%" height="15" fill="rgb(253,97,22)" fg:x="720" fg:w="3"/><text x="2.9540%" y="895.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="2.6777%" y="1781" width="0.0526%" height="15" fill="rgb(241,101,14)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1791.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="2.6777%" y="1765" width="0.0526%" height="15" fill="rgb(238,103,29)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1775.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="2.6777%" y="1749" width="0.0526%" height="15" fill="rgb(233,195,47)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1759.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (14 samples, 0.05%)</title><rect x="2.6777%" y="1733" width="0.0526%" height="15" fill="rgb(246,218,30)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1743.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="2.6777%" y="1717" width="0.0526%" height="15" fill="rgb(219,145,47)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1727.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="2.6777%" y="1701" width="0.0526%" height="15" fill="rgb(243,12,26)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1711.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14 samples, 0.05%)</title><rect x="2.6777%" y="1685" width="0.0526%" height="15" fill="rgb(214,87,16)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1695.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.05%)</title><rect x="2.6777%" y="1669" width="0.0526%" height="15" fill="rgb(208,99,42)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1679.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14 samples, 0.05%)</title><rect x="2.6777%" y="1653" width="0.0526%" height="15" fill="rgb(253,99,2)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1663.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="2.6777%" y="1637" width="0.0526%" height="15" fill="rgb(220,168,23)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1647.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="2.6777%" y="1621" width="0.0526%" height="15" fill="rgb(242,38,24)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1631.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14 samples, 0.05%)</title><rect x="2.6777%" y="1605" width="0.0526%" height="15" fill="rgb(225,182,9)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1615.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.05%)</title><rect x="2.6777%" y="1589" width="0.0526%" height="15" fill="rgb(243,178,37)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1599.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14 samples, 0.05%)</title><rect x="2.6777%" y="1573" width="0.0526%" height="15" fill="rgb(232,139,19)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1583.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="2.6777%" y="1557" width="0.0526%" height="15" fill="rgb(225,201,24)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1567.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="2.6777%" y="1541" width="0.0526%" height="15" fill="rgb(221,47,46)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1551.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="2.6777%" y="1525" width="0.0526%" height="15" fill="rgb(249,23,13)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1535.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (14 samples, 0.05%)</title><rect x="2.6777%" y="1509" width="0.0526%" height="15" fill="rgb(219,9,5)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1519.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="2.6777%" y="1493" width="0.0526%" height="15" fill="rgb(254,171,16)" fg:x="713" fg:w="14"/><text x="2.9277%" y="1503.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="2.6965%" y="1477" width="0.0338%" height="15" fill="rgb(230,171,20)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1487.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="2.6965%" y="1461" width="0.0338%" height="15" fill="rgb(210,71,41)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1471.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (9 samples, 0.03%)</title><rect x="2.6965%" y="1445" width="0.0338%" height="15" fill="rgb(206,173,20)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1455.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="2.6965%" y="1429" width="0.0338%" height="15" fill="rgb(233,88,34)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1439.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="2.6965%" y="1413" width="0.0338%" height="15" fill="rgb(223,209,46)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1423.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="2.6965%" y="1397" width="0.0338%" height="15" fill="rgb(250,43,18)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1407.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (9 samples, 0.03%)</title><rect x="2.6965%" y="1381" width="0.0338%" height="15" fill="rgb(208,13,10)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1391.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="2.6965%" y="1365" width="0.0338%" height="15" fill="rgb(212,200,36)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1375.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="2.6965%" y="1349" width="0.0338%" height="15" fill="rgb(225,90,30)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1359.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.03%)</title><rect x="2.6965%" y="1333" width="0.0338%" height="15" fill="rgb(236,182,39)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1343.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.03%)</title><rect x="2.6965%" y="1317" width="0.0338%" height="15" fill="rgb(212,144,35)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1327.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.03%)</title><rect x="2.6965%" y="1301" width="0.0338%" height="15" fill="rgb(228,63,44)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1311.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="2.6965%" y="1285" width="0.0338%" height="15" fill="rgb(228,109,6)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="2.6965%" y="1269" width="0.0338%" height="15" fill="rgb(238,117,24)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1279.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.03%)</title><rect x="2.6965%" y="1253" width="0.0338%" height="15" fill="rgb(242,26,26)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1263.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.03%)</title><rect x="2.6965%" y="1237" width="0.0338%" height="15" fill="rgb(221,92,48)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1247.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.03%)</title><rect x="2.6965%" y="1221" width="0.0338%" height="15" fill="rgb(209,209,32)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1231.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="2.6965%" y="1205" width="0.0338%" height="15" fill="rgb(221,70,22)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1215.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="2.6965%" y="1189" width="0.0338%" height="15" fill="rgb(248,145,5)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1199.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="2.6965%" y="1173" width="0.0338%" height="15" fill="rgb(226,116,26)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1183.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (9 samples, 0.03%)</title><rect x="2.6965%" y="1157" width="0.0338%" height="15" fill="rgb(244,5,17)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1167.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="2.6965%" y="1141" width="0.0338%" height="15" fill="rgb(252,159,33)" fg:x="718" fg:w="9"/><text x="2.9465%" y="1151.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.7153%" y="1125" width="0.0150%" height="15" fill="rgb(206,71,0)" fg:x="723" fg:w="4"/><text x="2.9653%" y="1135.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="2.7153%" y="1109" width="0.0150%" height="15" fill="rgb(233,118,54)" fg:x="723" fg:w="4"/><text x="2.9653%" y="1119.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.02%)</title><rect x="2.7153%" y="1093" width="0.0150%" height="15" fill="rgb(234,83,48)" fg:x="723" fg:w="4"/><text x="2.9653%" y="1103.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="2.7190%" y="1077" width="0.0113%" height="15" fill="rgb(228,3,54)" fg:x="724" fg:w="3"/><text x="2.9690%" y="1087.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="2.7190%" y="1061" width="0.0113%" height="15" fill="rgb(226,155,13)" fg:x="724" fg:w="3"/><text x="2.9690%" y="1071.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="2.7190%" y="1045" width="0.0113%" height="15" fill="rgb(241,28,37)" fg:x="724" fg:w="3"/><text x="2.9690%" y="1055.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.01%)</title><rect x="2.7190%" y="1029" width="0.0113%" height="15" fill="rgb(233,93,10)" fg:x="724" fg:w="3"/><text x="2.9690%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7303%" y="1061" width="0.0113%" height="15" fill="rgb(225,113,19)" fg:x="727" fg:w="3"/><text x="2.9803%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7303%" y="1045" width="0.0113%" height="15" fill="rgb(241,2,18)" fg:x="727" fg:w="3"/><text x="2.9803%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.01%)</title><rect x="2.7303%" y="1029" width="0.0113%" height="15" fill="rgb(228,207,21)" fg:x="727" fg:w="3"/><text x="2.9803%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.01%)</title><rect x="2.7303%" y="1013" width="0.0113%" height="15" fill="rgb(213,211,35)" fg:x="727" fg:w="3"/><text x="2.9803%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7303%" y="997" width="0.0113%" height="15" fill="rgb(209,83,10)" fg:x="727" fg:w="3"/><text x="2.9803%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7303%" y="981" width="0.0113%" height="15" fill="rgb(209,164,1)" fg:x="727" fg:w="3"/><text x="2.9803%" y="991.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7303%" y="965" width="0.0113%" height="15" fill="rgb(213,184,43)" fg:x="727" fg:w="3"/><text x="2.9803%" y="975.50"></text></g><g><title>core::mem::drop (3 samples, 0.01%)</title><rect x="2.7303%" y="949" width="0.0113%" height="15" fill="rgb(231,61,34)" fg:x="727" fg:w="3"/><text x="2.9803%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7303%" y="933" width="0.0113%" height="15" fill="rgb(235,75,3)" fg:x="727" fg:w="3"/><text x="2.9803%" y="943.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7303%" y="917" width="0.0113%" height="15" fill="rgb(220,106,47)" fg:x="727" fg:w="3"/><text x="2.9803%" y="927.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (3 samples, 0.01%)</title><rect x="2.7303%" y="901" width="0.0113%" height="15" fill="rgb(210,196,33)" fg:x="727" fg:w="3"/><text x="2.9803%" y="911.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (3 samples, 0.01%)</title><rect x="2.7303%" y="885" width="0.0113%" height="15" fill="rgb(229,154,42)" fg:x="727" fg:w="3"/><text x="2.9803%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.01%)</title><rect x="2.7303%" y="869" width="0.0113%" height="15" fill="rgb(228,114,26)" fg:x="727" fg:w="3"/><text x="2.9803%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7303%" y="853" width="0.0113%" height="15" fill="rgb(208,144,1)" fg:x="727" fg:w="3"/><text x="2.9803%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7303%" y="837" width="0.0113%" height="15" fill="rgb(239,112,37)" fg:x="727" fg:w="3"/><text x="2.9803%" y="847.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7303%" y="821" width="0.0113%" height="15" fill="rgb(210,96,50)" fg:x="727" fg:w="3"/><text x="2.9803%" y="831.50"></text></g><g><title>core::mem::drop (3 samples, 0.01%)</title><rect x="2.7303%" y="805" width="0.0113%" height="15" fill="rgb(222,178,2)" fg:x="727" fg:w="3"/><text x="2.9803%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7303%" y="789" width="0.0113%" height="15" fill="rgb(226,74,18)" fg:x="727" fg:w="3"/><text x="2.9803%" y="799.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7303%" y="773" width="0.0113%" height="15" fill="rgb(225,67,54)" fg:x="727" fg:w="3"/><text x="2.9803%" y="783.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (3 samples, 0.01%)</title><rect x="2.7303%" y="757" width="0.0113%" height="15" fill="rgb(251,92,32)" fg:x="727" fg:w="3"/><text x="2.9803%" y="767.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (3 samples, 0.01%)</title><rect x="2.7303%" y="741" width="0.0113%" height="15" fill="rgb(228,149,22)" fg:x="727" fg:w="3"/><text x="2.9803%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (9 samples, 0.03%)</title><rect x="2.7303%" y="1333" width="0.0338%" height="15" fill="rgb(243,54,13)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="2.7303%" y="1317" width="0.0338%" height="15" fill="rgb(243,180,28)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (9 samples, 0.03%)</title><rect x="2.7303%" y="1301" width="0.0338%" height="15" fill="rgb(208,167,24)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.03%)</title><rect x="2.7303%" y="1285" width="0.0338%" height="15" fill="rgb(245,73,45)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (9 samples, 0.03%)</title><rect x="2.7303%" y="1269" width="0.0338%" height="15" fill="rgb(237,203,48)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="2.7303%" y="1253" width="0.0338%" height="15" fill="rgb(211,197,16)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (9 samples, 0.03%)</title><rect x="2.7303%" y="1237" width="0.0338%" height="15" fill="rgb(243,99,51)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.03%)</title><rect x="2.7303%" y="1221" width="0.0338%" height="15" fill="rgb(215,123,29)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.03%)</title><rect x="2.7303%" y="1205" width="0.0338%" height="15" fill="rgb(239,186,37)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.03%)</title><rect x="2.7303%" y="1189" width="0.0338%" height="15" fill="rgb(252,136,39)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1199.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="2.7303%" y="1173" width="0.0338%" height="15" fill="rgb(223,213,32)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1183.50"></text></g><g><title>core::mem::drop (9 samples, 0.03%)</title><rect x="2.7303%" y="1157" width="0.0338%" height="15" fill="rgb(233,115,5)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.03%)</title><rect x="2.7303%" y="1141" width="0.0338%" height="15" fill="rgb(207,226,44)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1151.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="2.7303%" y="1125" width="0.0338%" height="15" fill="rgb(208,126,0)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1135.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (9 samples, 0.03%)</title><rect x="2.7303%" y="1109" width="0.0338%" height="15" fill="rgb(244,66,21)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1119.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (9 samples, 0.03%)</title><rect x="2.7303%" y="1093" width="0.0338%" height="15" fill="rgb(222,97,12)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.03%)</title><rect x="2.7303%" y="1077" width="0.0338%" height="15" fill="rgb(219,213,19)" fg:x="727" fg:w="9"/><text x="2.9803%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.02%)</title><rect x="2.7416%" y="1061" width="0.0225%" height="15" fill="rgb(252,169,30)" fg:x="730" fg:w="6"/><text x="2.9916%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.02%)</title><rect x="2.7416%" y="1045" width="0.0225%" height="15" fill="rgb(206,32,51)" fg:x="730" fg:w="6"/><text x="2.9916%" y="1055.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="2.7416%" y="1029" width="0.0225%" height="15" fill="rgb(250,172,42)" fg:x="730" fg:w="6"/><text x="2.9916%" y="1039.50"></text></g><g><title>core::mem::drop (6 samples, 0.02%)</title><rect x="2.7416%" y="1013" width="0.0225%" height="15" fill="rgb(209,34,43)" fg:x="730" fg:w="6"/><text x="2.9916%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.02%)</title><rect x="2.7416%" y="997" width="0.0225%" height="15" fill="rgb(223,11,35)" fg:x="730" fg:w="6"/><text x="2.9916%" y="1007.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="2.7416%" y="981" width="0.0225%" height="15" fill="rgb(251,219,26)" fg:x="730" fg:w="6"/><text x="2.9916%" y="991.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (6 samples, 0.02%)</title><rect x="2.7416%" y="965" width="0.0225%" height="15" fill="rgb(231,119,3)" fg:x="730" fg:w="6"/><text x="2.9916%" y="975.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (6 samples, 0.02%)</title><rect x="2.7416%" y="949" width="0.0225%" height="15" fill="rgb(216,97,11)" fg:x="730" fg:w="6"/><text x="2.9916%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.02%)</title><rect x="2.7416%" y="933" width="0.0225%" height="15" fill="rgb(223,59,9)" fg:x="730" fg:w="6"/><text x="2.9916%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.02%)</title><rect x="2.7416%" y="917" width="0.0225%" height="15" fill="rgb(233,93,31)" fg:x="730" fg:w="6"/><text x="2.9916%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.02%)</title><rect x="2.7416%" y="901" width="0.0225%" height="15" fill="rgb(239,81,33)" fg:x="730" fg:w="6"/><text x="2.9916%" y="911.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="2.7416%" y="885" width="0.0225%" height="15" fill="rgb(213,120,34)" fg:x="730" fg:w="6"/><text x="2.9916%" y="895.50"></text></g><g><title>core::mem::drop (6 samples, 0.02%)</title><rect x="2.7416%" y="869" width="0.0225%" height="15" fill="rgb(243,49,53)" fg:x="730" fg:w="6"/><text x="2.9916%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.02%)</title><rect x="2.7416%" y="853" width="0.0225%" height="15" fill="rgb(247,216,33)" fg:x="730" fg:w="6"/><text x="2.9916%" y="863.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="2.7416%" y="837" width="0.0225%" height="15" fill="rgb(226,26,14)" fg:x="730" fg:w="6"/><text x="2.9916%" y="847.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (6 samples, 0.02%)</title><rect x="2.7416%" y="821" width="0.0225%" height="15" fill="rgb(215,49,53)" fg:x="730" fg:w="6"/><text x="2.9916%" y="831.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (6 samples, 0.02%)</title><rect x="2.7416%" y="805" width="0.0225%" height="15" fill="rgb(245,162,40)" fg:x="730" fg:w="6"/><text x="2.9916%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.02%)</title><rect x="2.7453%" y="789" width="0.0188%" height="15" fill="rgb(229,68,17)" fg:x="731" fg:w="5"/><text x="2.9953%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (5 samples, 0.02%)</title><rect x="2.7453%" y="773" width="0.0188%" height="15" fill="rgb(213,182,10)" fg:x="731" fg:w="5"/><text x="2.9953%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="2.7453%" y="757" width="0.0188%" height="15" fill="rgb(245,125,30)" fg:x="731" fg:w="5"/><text x="2.9953%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (5 samples, 0.02%)</title><rect x="2.7453%" y="741" width="0.0188%" height="15" fill="rgb(232,202,2)" fg:x="731" fg:w="5"/><text x="2.9953%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.02%)</title><rect x="2.7453%" y="725" width="0.0188%" height="15" fill="rgb(237,140,51)" fg:x="731" fg:w="5"/><text x="2.9953%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7491%" y="709" width="0.0150%" height="15" fill="rgb(236,157,25)" fg:x="732" fg:w="4"/><text x="2.9991%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="2.7491%" y="693" width="0.0150%" height="15" fill="rgb(219,209,0)" fg:x="732" fg:w="4"/><text x="2.9991%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4 samples, 0.02%)</title><rect x="2.7491%" y="677" width="0.0150%" height="15" fill="rgb(240,116,54)" fg:x="732" fg:w="4"/><text x="2.9991%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.02%)</title><rect x="2.7491%" y="661" width="0.0150%" height="15" fill="rgb(216,10,36)" fg:x="732" fg:w="4"/><text x="2.9991%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7491%" y="645" width="0.0150%" height="15" fill="rgb(222,72,44)" fg:x="732" fg:w="4"/><text x="2.9991%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7491%" y="629" width="0.0150%" height="15" fill="rgb(232,159,9)" fg:x="732" fg:w="4"/><text x="2.9991%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="2.7491%" y="613" width="0.0150%" height="15" fill="rgb(210,39,32)" fg:x="732" fg:w="4"/><text x="2.9991%" y="623.50"></text></g><g><title>core::mem::drop (4 samples, 0.02%)</title><rect x="2.7491%" y="597" width="0.0150%" height="15" fill="rgb(216,194,45)" fg:x="732" fg:w="4"/><text x="2.9991%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7491%" y="581" width="0.0150%" height="15" fill="rgb(218,18,35)" fg:x="732" fg:w="4"/><text x="2.9991%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="2.7491%" y="565" width="0.0150%" height="15" fill="rgb(207,83,51)" fg:x="732" fg:w="4"/><text x="2.9991%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4 samples, 0.02%)</title><rect x="2.7491%" y="549" width="0.0150%" height="15" fill="rgb(225,63,43)" fg:x="732" fg:w="4"/><text x="2.9991%" y="559.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4 samples, 0.02%)</title><rect x="2.7491%" y="533" width="0.0150%" height="15" fill="rgb(207,57,36)" fg:x="732" fg:w="4"/><text x="2.9991%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.01%)</title><rect x="2.7528%" y="517" width="0.0113%" height="15" fill="rgb(216,99,33)" fg:x="733" fg:w="3"/><text x="3.0028%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 0.05%)</title><rect x="2.7303%" y="1781" width="0.0488%" height="15" fill="rgb(225,42,16)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1791.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 0.05%)</title><rect x="2.7303%" y="1765" width="0.0488%" height="15" fill="rgb(220,201,45)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 0.05%)</title><rect x="2.7303%" y="1749" width="0.0488%" height="15" fill="rgb(225,33,4)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1759.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.05%)</title><rect x="2.7303%" y="1733" width="0.0488%" height="15" fill="rgb(224,33,50)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1743.50"></text></g><g><title>core::mem::drop (13 samples, 0.05%)</title><rect x="2.7303%" y="1717" width="0.0488%" height="15" fill="rgb(246,198,51)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 0.05%)</title><rect x="2.7303%" y="1701" width="0.0488%" height="15" fill="rgb(205,22,4)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1711.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.05%)</title><rect x="2.7303%" y="1685" width="0.0488%" height="15" fill="rgb(206,3,8)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1695.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (13 samples, 0.05%)</title><rect x="2.7303%" y="1669" width="0.0488%" height="15" fill="rgb(251,23,15)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1679.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (13 samples, 0.05%)</title><rect x="2.7303%" y="1653" width="0.0488%" height="15" fill="rgb(252,88,28)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1663.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 0.05%)</title><rect x="2.7303%" y="1637" width="0.0488%" height="15" fill="rgb(212,127,14)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 0.05%)</title><rect x="2.7303%" y="1621" width="0.0488%" height="15" fill="rgb(247,145,37)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 0.05%)</title><rect x="2.7303%" y="1605" width="0.0488%" height="15" fill="rgb(209,117,53)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1615.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.05%)</title><rect x="2.7303%" y="1589" width="0.0488%" height="15" fill="rgb(212,90,42)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1599.50"></text></g><g><title>core::mem::drop (13 samples, 0.05%)</title><rect x="2.7303%" y="1573" width="0.0488%" height="15" fill="rgb(218,164,37)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 0.05%)</title><rect x="2.7303%" y="1557" width="0.0488%" height="15" fill="rgb(246,65,34)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1567.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.05%)</title><rect x="2.7303%" y="1541" width="0.0488%" height="15" fill="rgb(231,100,33)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1551.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (13 samples, 0.05%)</title><rect x="2.7303%" y="1525" width="0.0488%" height="15" fill="rgb(228,126,14)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1535.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (13 samples, 0.05%)</title><rect x="2.7303%" y="1509" width="0.0488%" height="15" fill="rgb(215,173,21)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 0.05%)</title><rect x="2.7303%" y="1493" width="0.0488%" height="15" fill="rgb(210,6,40)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 0.05%)</title><rect x="2.7303%" y="1477" width="0.0488%" height="15" fill="rgb(212,48,18)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 0.05%)</title><rect x="2.7303%" y="1461" width="0.0488%" height="15" fill="rgb(230,214,11)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1471.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.05%)</title><rect x="2.7303%" y="1445" width="0.0488%" height="15" fill="rgb(254,105,39)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1455.50"></text></g><g><title>core::mem::drop (13 samples, 0.05%)</title><rect x="2.7303%" y="1429" width="0.0488%" height="15" fill="rgb(245,158,5)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 0.05%)</title><rect x="2.7303%" y="1413" width="0.0488%" height="15" fill="rgb(249,208,11)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1423.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.05%)</title><rect x="2.7303%" y="1397" width="0.0488%" height="15" fill="rgb(210,39,28)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1407.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (13 samples, 0.05%)</title><rect x="2.7303%" y="1381" width="0.0488%" height="15" fill="rgb(211,56,53)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1391.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (13 samples, 0.05%)</title><rect x="2.7303%" y="1365" width="0.0488%" height="15" fill="rgb(226,201,30)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 0.05%)</title><rect x="2.7303%" y="1349" width="0.0488%" height="15" fill="rgb(239,101,34)" fg:x="727" fg:w="13"/><text x="2.9803%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="1333" width="0.0150%" height="15" fill="rgb(226,209,5)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="1317" width="0.0150%" height="15" fill="rgb(250,105,47)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1327.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="2.7641%" y="1301" width="0.0150%" height="15" fill="rgb(230,72,3)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1311.50"></text></g><g><title>core::mem::drop (4 samples, 0.02%)</title><rect x="2.7641%" y="1285" width="0.0150%" height="15" fill="rgb(232,218,39)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="1269" width="0.0150%" height="15" fill="rgb(248,166,6)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1279.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="2.7641%" y="1253" width="0.0150%" height="15" fill="rgb(247,89,20)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1263.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4 samples, 0.02%)</title><rect x="2.7641%" y="1237" width="0.0150%" height="15" fill="rgb(248,130,54)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1247.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4 samples, 0.02%)</title><rect x="2.7641%" y="1221" width="0.0150%" height="15" fill="rgb(234,196,4)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="1205" width="0.0150%" height="15" fill="rgb(250,143,31)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="1189" width="0.0150%" height="15" fill="rgb(211,110,34)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1199.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="2.7641%" y="1173" width="0.0150%" height="15" fill="rgb(215,124,48)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="1157" width="0.0150%" height="15" fill="rgb(216,46,13)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="1141" width="0.0150%" height="15" fill="rgb(205,184,25)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="1125" width="0.0150%" height="15" fill="rgb(228,1,10)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="2.7641%" y="1109" width="0.0150%" height="15" fill="rgb(213,116,27)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="1093" width="0.0150%" height="15" fill="rgb(241,95,50)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="1077" width="0.0150%" height="15" fill="rgb(238,48,32)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="1061" width="0.0150%" height="15" fill="rgb(235,113,49)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="1045" width="0.0150%" height="15" fill="rgb(205,127,43)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1055.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="2.7641%" y="1029" width="0.0150%" height="15" fill="rgb(250,162,2)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1039.50"></text></g><g><title>core::mem::drop (4 samples, 0.02%)</title><rect x="2.7641%" y="1013" width="0.0150%" height="15" fill="rgb(220,13,41)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="997" width="0.0150%" height="15" fill="rgb(249,221,25)" fg:x="736" fg:w="4"/><text x="3.0141%" y="1007.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="2.7641%" y="981" width="0.0150%" height="15" fill="rgb(215,208,19)" fg:x="736" fg:w="4"/><text x="3.0141%" y="991.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4 samples, 0.02%)</title><rect x="2.7641%" y="965" width="0.0150%" height="15" fill="rgb(236,175,2)" fg:x="736" fg:w="4"/><text x="3.0141%" y="975.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4 samples, 0.02%)</title><rect x="2.7641%" y="949" width="0.0150%" height="15" fill="rgb(241,52,2)" fg:x="736" fg:w="4"/><text x="3.0141%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="933" width="0.0150%" height="15" fill="rgb(248,140,14)" fg:x="736" fg:w="4"/><text x="3.0141%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="917" width="0.0150%" height="15" fill="rgb(253,22,42)" fg:x="736" fg:w="4"/><text x="3.0141%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="901" width="0.0150%" height="15" fill="rgb(234,61,47)" fg:x="736" fg:w="4"/><text x="3.0141%" y="911.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="2.7641%" y="885" width="0.0150%" height="15" fill="rgb(208,226,15)" fg:x="736" fg:w="4"/><text x="3.0141%" y="895.50"></text></g><g><title>core::mem::drop (4 samples, 0.02%)</title><rect x="2.7641%" y="869" width="0.0150%" height="15" fill="rgb(217,221,4)" fg:x="736" fg:w="4"/><text x="3.0141%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.02%)</title><rect x="2.7641%" y="853" width="0.0150%" height="15" fill="rgb(212,174,34)" fg:x="736" fg:w="4"/><text x="3.0141%" y="863.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="2.7641%" y="837" width="0.0150%" height="15" fill="rgb(253,83,4)" fg:x="736" fg:w="4"/><text x="3.0141%" y="847.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4 samples, 0.02%)</title><rect x="2.7641%" y="821" width="0.0150%" height="15" fill="rgb(250,195,49)" fg:x="736" fg:w="4"/><text x="3.0141%" y="831.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4 samples, 0.02%)</title><rect x="2.7641%" y="805" width="0.0150%" height="15" fill="rgb(241,192,25)" fg:x="736" fg:w="4"/><text x="3.0141%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="789" width="0.0113%" height="15" fill="rgb(208,124,10)" fg:x="737" fg:w="3"/><text x="3.0179%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="773" width="0.0113%" height="15" fill="rgb(222,33,0)" fg:x="737" fg:w="3"/><text x="3.0179%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="757" width="0.0113%" height="15" fill="rgb(234,209,28)" fg:x="737" fg:w="3"/><text x="3.0179%" y="767.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7679%" y="741" width="0.0113%" height="15" fill="rgb(224,11,23)" fg:x="737" fg:w="3"/><text x="3.0179%" y="751.50"></text></g><g><title>core::mem::drop (3 samples, 0.01%)</title><rect x="2.7679%" y="725" width="0.0113%" height="15" fill="rgb(232,99,1)" fg:x="737" fg:w="3"/><text x="3.0179%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="709" width="0.0113%" height="15" fill="rgb(237,95,45)" fg:x="737" fg:w="3"/><text x="3.0179%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7679%" y="693" width="0.0113%" height="15" fill="rgb(208,109,11)" fg:x="737" fg:w="3"/><text x="3.0179%" y="703.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (3 samples, 0.01%)</title><rect x="2.7679%" y="677" width="0.0113%" height="15" fill="rgb(216,190,48)" fg:x="737" fg:w="3"/><text x="3.0179%" y="687.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (3 samples, 0.01%)</title><rect x="2.7679%" y="661" width="0.0113%" height="15" fill="rgb(251,171,36)" fg:x="737" fg:w="3"/><text x="3.0179%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="645" width="0.0113%" height="15" fill="rgb(230,62,22)" fg:x="737" fg:w="3"/><text x="3.0179%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="629" width="0.0113%" height="15" fill="rgb(225,114,35)" fg:x="737" fg:w="3"/><text x="3.0179%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="613" width="0.0113%" height="15" fill="rgb(215,118,42)" fg:x="737" fg:w="3"/><text x="3.0179%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7679%" y="597" width="0.0113%" height="15" fill="rgb(243,119,21)" fg:x="737" fg:w="3"/><text x="3.0179%" y="607.50"></text></g><g><title>core::mem::drop (3 samples, 0.01%)</title><rect x="2.7679%" y="581" width="0.0113%" height="15" fill="rgb(252,177,53)" fg:x="737" fg:w="3"/><text x="3.0179%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="565" width="0.0113%" height="15" fill="rgb(237,209,29)" fg:x="737" fg:w="3"/><text x="3.0179%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7679%" y="549" width="0.0113%" height="15" fill="rgb(212,65,23)" fg:x="737" fg:w="3"/><text x="3.0179%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (3 samples, 0.01%)</title><rect x="2.7679%" y="533" width="0.0113%" height="15" fill="rgb(230,222,46)" fg:x="737" fg:w="3"/><text x="3.0179%" y="543.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (3 samples, 0.01%)</title><rect x="2.7679%" y="517" width="0.0113%" height="15" fill="rgb(215,135,32)" fg:x="737" fg:w="3"/><text x="3.0179%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="501" width="0.0113%" height="15" fill="rgb(246,101,22)" fg:x="737" fg:w="3"/><text x="3.0179%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="485" width="0.0113%" height="15" fill="rgb(206,107,13)" fg:x="737" fg:w="3"/><text x="3.0179%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7679%" y="469" width="0.0113%" height="15" fill="rgb(250,100,44)" fg:x="737" fg:w="3"/><text x="3.0179%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="453" width="0.0113%" height="15" fill="rgb(231,147,38)" fg:x="737" fg:w="3"/><text x="3.0179%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="437" width="0.0113%" height="15" fill="rgb(229,8,40)" fg:x="737" fg:w="3"/><text x="3.0179%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="421" width="0.0113%" height="15" fill="rgb(221,135,30)" fg:x="737" fg:w="3"/><text x="3.0179%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7679%" y="405" width="0.0113%" height="15" fill="rgb(249,193,18)" fg:x="737" fg:w="3"/><text x="3.0179%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="389" width="0.0113%" height="15" fill="rgb(209,133,39)" fg:x="737" fg:w="3"/><text x="3.0179%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="373" width="0.0113%" height="15" fill="rgb(232,100,14)" fg:x="737" fg:w="3"/><text x="3.0179%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="357" width="0.0113%" height="15" fill="rgb(224,185,1)" fg:x="737" fg:w="3"/><text x="3.0179%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="341" width="0.0113%" height="15" fill="rgb(223,139,8)" fg:x="737" fg:w="3"/><text x="3.0179%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7679%" y="325" width="0.0113%" height="15" fill="rgb(232,213,38)" fg:x="737" fg:w="3"/><text x="3.0179%" y="335.50"></text></g><g><title>core::mem::drop (3 samples, 0.01%)</title><rect x="2.7679%" y="309" width="0.0113%" height="15" fill="rgb(207,94,22)" fg:x="737" fg:w="3"/><text x="3.0179%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="293" width="0.0113%" height="15" fill="rgb(219,183,54)" fg:x="737" fg:w="3"/><text x="3.0179%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7679%" y="277" width="0.0113%" height="15" fill="rgb(216,185,54)" fg:x="737" fg:w="3"/><text x="3.0179%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (3 samples, 0.01%)</title><rect x="2.7679%" y="261" width="0.0113%" height="15" fill="rgb(254,217,39)" fg:x="737" fg:w="3"/><text x="3.0179%" y="271.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (3 samples, 0.01%)</title><rect x="2.7679%" y="245" width="0.0113%" height="15" fill="rgb(240,178,23)" fg:x="737" fg:w="3"/><text x="3.0179%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="229" width="0.0113%" height="15" fill="rgb(218,11,47)" fg:x="737" fg:w="3"/><text x="3.0179%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="213" width="0.0113%" height="15" fill="rgb(218,51,51)" fg:x="737" fg:w="3"/><text x="3.0179%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="197" width="0.0113%" height="15" fill="rgb(238,126,27)" fg:x="737" fg:w="3"/><text x="3.0179%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7679%" y="181" width="0.0113%" height="15" fill="rgb(249,202,22)" fg:x="737" fg:w="3"/><text x="3.0179%" y="191.50"></text></g><g><title>core::mem::drop (3 samples, 0.01%)</title><rect x="2.7679%" y="165" width="0.0113%" height="15" fill="rgb(254,195,49)" fg:x="737" fg:w="3"/><text x="3.0179%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.01%)</title><rect x="2.7679%" y="149" width="0.0113%" height="15" fill="rgb(208,123,14)" fg:x="737" fg:w="3"/><text x="3.0179%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="2.7679%" y="133" width="0.0113%" height="15" fill="rgb(224,200,8)" fg:x="737" fg:w="3"/><text x="3.0179%" y="143.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.01%)</title><rect x="2.7942%" y="389" width="0.0113%" height="15" fill="rgb(217,61,36)" fg:x="744" fg:w="3"/><text x="3.0442%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.01%)</title><rect x="2.7942%" y="373" width="0.0113%" height="15" fill="rgb(206,35,45)" fg:x="744" fg:w="3"/><text x="3.0442%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (3 samples, 0.01%)</title><rect x="2.7942%" y="357" width="0.0113%" height="15" fill="rgb(217,65,33)" fg:x="744" fg:w="3"/><text x="3.0442%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (3 samples, 0.01%)</title><rect x="2.7942%" y="341" width="0.0113%" height="15" fill="rgb(222,158,48)" fg:x="744" fg:w="3"/><text x="3.0442%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.01%)</title><rect x="2.7942%" y="325" width="0.0113%" height="15" fill="rgb(254,2,54)" fg:x="744" fg:w="3"/><text x="3.0442%" y="335.50"></text></g><g><title>serde::de::MapAccess::next_entry (6 samples, 0.02%)</title><rect x="2.7904%" y="421" width="0.0225%" height="15" fill="rgb(250,143,38)" fg:x="743" fg:w="6"/><text x="3.0404%" y="431.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (6 samples, 0.02%)</title><rect x="2.7904%" y="405" width="0.0225%" height="15" fill="rgb(248,25,0)" fg:x="743" fg:w="6"/><text x="3.0404%" y="415.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.03%)</title><rect x="2.7866%" y="581" width="0.0300%" height="15" fill="rgb(206,152,27)" fg:x="742" fg:w="8"/><text x="3.0366%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (8 samples, 0.03%)</title><rect x="2.7866%" y="565" width="0.0300%" height="15" fill="rgb(240,77,30)" fg:x="742" fg:w="8"/><text x="3.0366%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.03%)</title><rect x="2.7866%" y="549" width="0.0300%" height="15" fill="rgb(231,5,3)" fg:x="742" fg:w="8"/><text x="3.0366%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.03%)</title><rect x="2.7866%" y="533" width="0.0300%" height="15" fill="rgb(207,226,32)" fg:x="742" fg:w="8"/><text x="3.0366%" y="543.50"></text></g><g><title>serde::de::MapAccess::next_value (8 samples, 0.03%)</title><rect x="2.7866%" y="517" width="0.0300%" height="15" fill="rgb(222,207,47)" fg:x="742" fg:w="8"/><text x="3.0366%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (8 samples, 0.03%)</title><rect x="2.7866%" y="501" width="0.0300%" height="15" fill="rgb(229,115,45)" fg:x="742" fg:w="8"/><text x="3.0366%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.03%)</title><rect x="2.7866%" y="485" width="0.0300%" height="15" fill="rgb(224,191,6)" fg:x="742" fg:w="8"/><text x="3.0366%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (8 samples, 0.03%)</title><rect x="2.7866%" y="469" width="0.0300%" height="15" fill="rgb(230,227,24)" fg:x="742" fg:w="8"/><text x="3.0366%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.03%)</title><rect x="2.7866%" y="453" width="0.0300%" height="15" fill="rgb(228,80,19)" fg:x="742" fg:w="8"/><text x="3.0366%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.03%)</title><rect x="2.7866%" y="437" width="0.0300%" height="15" fill="rgb(247,229,0)" fg:x="742" fg:w="8"/><text x="3.0366%" y="447.50"></text></g><g><title>serde::de::MapAccess::next_entry (11 samples, 0.04%)</title><rect x="2.7791%" y="1605" width="0.0413%" height="15" fill="rgb(237,194,15)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1615.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (11 samples, 0.04%)</title><rect x="2.7791%" y="1589" width="0.0413%" height="15" fill="rgb(219,203,20)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1599.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (11 samples, 0.04%)</title><rect x="2.7791%" y="1573" width="0.0413%" height="15" fill="rgb(234,128,8)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1583.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="1557" width="0.0413%" height="15" fill="rgb(248,202,8)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1567.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="1541" width="0.0413%" height="15" fill="rgb(206,104,37)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1551.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.04%)</title><rect x="2.7791%" y="1525" width="0.0413%" height="15" fill="rgb(223,8,27)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1535.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.04%)</title><rect x="2.7791%" y="1509" width="0.0413%" height="15" fill="rgb(216,217,28)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1519.50"></text></g><g><title>serde::de::MapAccess::next_value (11 samples, 0.04%)</title><rect x="2.7791%" y="1493" width="0.0413%" height="15" fill="rgb(249,199,1)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1503.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (11 samples, 0.04%)</title><rect x="2.7791%" y="1477" width="0.0413%" height="15" fill="rgb(240,85,17)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1487.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="1461" width="0.0413%" height="15" fill="rgb(206,108,45)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1471.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="1445" width="0.0413%" height="15" fill="rgb(245,210,41)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1455.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.04%)</title><rect x="2.7791%" y="1429" width="0.0413%" height="15" fill="rgb(206,13,37)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1439.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.04%)</title><rect x="2.7791%" y="1413" width="0.0413%" height="15" fill="rgb(250,61,18)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1423.50"></text></g><g><title>serde::de::MapAccess::next_value (11 samples, 0.04%)</title><rect x="2.7791%" y="1397" width="0.0413%" height="15" fill="rgb(235,172,48)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1407.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (11 samples, 0.04%)</title><rect x="2.7791%" y="1381" width="0.0413%" height="15" fill="rgb(249,201,17)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1391.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="1365" width="0.0413%" height="15" fill="rgb(219,208,6)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1375.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="1349" width="0.0413%" height="15" fill="rgb(248,31,23)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1359.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.04%)</title><rect x="2.7791%" y="1333" width="0.0413%" height="15" fill="rgb(245,15,42)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1343.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (11 samples, 0.04%)</title><rect x="2.7791%" y="1317" width="0.0413%" height="15" fill="rgb(222,217,39)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1327.50"></text></g><g><title>serde::de::SeqAccess::next_element (11 samples, 0.04%)</title><rect x="2.7791%" y="1301" width="0.0413%" height="15" fill="rgb(210,219,27)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1311.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (11 samples, 0.04%)</title><rect x="2.7791%" y="1285" width="0.0413%" height="15" fill="rgb(252,166,36)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1295.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="1269" width="0.0413%" height="15" fill="rgb(245,132,34)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1279.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="1253" width="0.0413%" height="15" fill="rgb(236,54,3)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1263.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.04%)</title><rect x="2.7791%" y="1237" width="0.0413%" height="15" fill="rgb(241,173,43)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1247.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (11 samples, 0.04%)</title><rect x="2.7791%" y="1221" width="0.0413%" height="15" fill="rgb(215,190,9)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1231.50"></text></g><g><title>serde::de::SeqAccess::next_element (11 samples, 0.04%)</title><rect x="2.7791%" y="1205" width="0.0413%" height="15" fill="rgb(242,101,16)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1215.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (11 samples, 0.04%)</title><rect x="2.7791%" y="1189" width="0.0413%" height="15" fill="rgb(223,190,21)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1199.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="1173" width="0.0413%" height="15" fill="rgb(215,228,25)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1183.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="1157" width="0.0413%" height="15" fill="rgb(225,36,22)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1167.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.04%)</title><rect x="2.7791%" y="1141" width="0.0413%" height="15" fill="rgb(251,106,46)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1151.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.04%)</title><rect x="2.7791%" y="1125" width="0.0413%" height="15" fill="rgb(208,90,1)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1135.50"></text></g><g><title>serde::de::MapAccess::next_value (11 samples, 0.04%)</title><rect x="2.7791%" y="1109" width="0.0413%" height="15" fill="rgb(243,10,4)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1119.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (11 samples, 0.04%)</title><rect x="2.7791%" y="1093" width="0.0413%" height="15" fill="rgb(212,137,27)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1103.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="1077" width="0.0413%" height="15" fill="rgb(231,220,49)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1087.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="1061" width="0.0413%" height="15" fill="rgb(237,96,20)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1071.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.04%)</title><rect x="2.7791%" y="1045" width="0.0413%" height="15" fill="rgb(239,229,30)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1055.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.04%)</title><rect x="2.7791%" y="1029" width="0.0413%" height="15" fill="rgb(219,65,33)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1039.50"></text></g><g><title>serde::de::MapAccess::next_entry (11 samples, 0.04%)</title><rect x="2.7791%" y="1013" width="0.0413%" height="15" fill="rgb(243,134,7)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1023.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (11 samples, 0.04%)</title><rect x="2.7791%" y="997" width="0.0413%" height="15" fill="rgb(216,177,54)" fg:x="740" fg:w="11"/><text x="3.0291%" y="1007.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (11 samples, 0.04%)</title><rect x="2.7791%" y="981" width="0.0413%" height="15" fill="rgb(211,160,20)" fg:x="740" fg:w="11"/><text x="3.0291%" y="991.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="965" width="0.0413%" height="15" fill="rgb(239,85,39)" fg:x="740" fg:w="11"/><text x="3.0291%" y="975.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="949" width="0.0413%" height="15" fill="rgb(232,125,22)" fg:x="740" fg:w="11"/><text x="3.0291%" y="959.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.04%)</title><rect x="2.7791%" y="933" width="0.0413%" height="15" fill="rgb(244,57,34)" fg:x="740" fg:w="11"/><text x="3.0291%" y="943.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.04%)</title><rect x="2.7791%" y="917" width="0.0413%" height="15" fill="rgb(214,203,32)" fg:x="740" fg:w="11"/><text x="3.0291%" y="927.50"></text></g><g><title>serde::de::MapAccess::next_value (11 samples, 0.04%)</title><rect x="2.7791%" y="901" width="0.0413%" height="15" fill="rgb(207,58,43)" fg:x="740" fg:w="11"/><text x="3.0291%" y="911.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (11 samples, 0.04%)</title><rect x="2.7791%" y="885" width="0.0413%" height="15" fill="rgb(215,193,15)" fg:x="740" fg:w="11"/><text x="3.0291%" y="895.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="869" width="0.0413%" height="15" fill="rgb(232,15,44)" fg:x="740" fg:w="11"/><text x="3.0291%" y="879.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (11 samples, 0.04%)</title><rect x="2.7791%" y="853" width="0.0413%" height="15" fill="rgb(212,3,48)" fg:x="740" fg:w="11"/><text x="3.0291%" y="863.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.04%)</title><rect x="2.7791%" y="837" width="0.0413%" height="15" fill="rgb(218,128,7)" fg:x="740" fg:w="11"/><text x="3.0291%" y="847.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.04%)</title><rect x="2.7791%" y="821" width="0.0413%" height="15" fill="rgb(226,216,39)" fg:x="740" fg:w="11"/><text x="3.0291%" y="831.50"></text></g><g><title>serde::de::MapAccess::next_value (9 samples, 0.03%)</title><rect x="2.7866%" y="805" width="0.0338%" height="15" fill="rgb(243,47,51)" fg:x="742" fg:w="9"/><text x="3.0366%" y="815.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (9 samples, 0.03%)</title><rect x="2.7866%" y="789" width="0.0338%" height="15" fill="rgb(241,183,40)" fg:x="742" fg:w="9"/><text x="3.0366%" y="799.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.7866%" y="773" width="0.0338%" height="15" fill="rgb(231,217,32)" fg:x="742" fg:w="9"/><text x="3.0366%" y="783.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.7866%" y="757" width="0.0338%" height="15" fill="rgb(229,61,38)" fg:x="742" fg:w="9"/><text x="3.0366%" y="767.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.03%)</title><rect x="2.7866%" y="741" width="0.0338%" height="15" fill="rgb(225,210,5)" fg:x="742" fg:w="9"/><text x="3.0366%" y="751.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (9 samples, 0.03%)</title><rect x="2.7866%" y="725" width="0.0338%" height="15" fill="rgb(231,79,45)" fg:x="742" fg:w="9"/><text x="3.0366%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (9 samples, 0.03%)</title><rect x="2.7866%" y="709" width="0.0338%" height="15" fill="rgb(224,100,7)" fg:x="742" fg:w="9"/><text x="3.0366%" y="719.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.03%)</title><rect x="2.7866%" y="693" width="0.0338%" height="15" fill="rgb(241,198,18)" fg:x="742" fg:w="9"/><text x="3.0366%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.7866%" y="677" width="0.0338%" height="15" fill="rgb(252,97,53)" fg:x="742" fg:w="9"/><text x="3.0366%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.7866%" y="661" width="0.0338%" height="15" fill="rgb(220,88,7)" fg:x="742" fg:w="9"/><text x="3.0366%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.03%)</title><rect x="2.7866%" y="645" width="0.0338%" height="15" fill="rgb(213,176,14)" fg:x="742" fg:w="9"/><text x="3.0366%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (9 samples, 0.03%)</title><rect x="2.7866%" y="629" width="0.0338%" height="15" fill="rgb(246,73,7)" fg:x="742" fg:w="9"/><text x="3.0366%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (9 samples, 0.03%)</title><rect x="2.7866%" y="613" width="0.0338%" height="15" fill="rgb(245,64,36)" fg:x="742" fg:w="9"/><text x="3.0366%" y="623.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.03%)</title><rect x="2.7866%" y="597" width="0.0338%" height="15" fill="rgb(245,80,10)" fg:x="742" fg:w="9"/><text x="3.0366%" y="607.50"></text></g><g><title>serde::de::MapAccess::next_entry (6 samples, 0.02%)</title><rect x="2.8204%" y="1205" width="0.0225%" height="15" fill="rgb(232,107,50)" fg:x="751" fg:w="6"/><text x="3.0704%" y="1215.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (6 samples, 0.02%)</title><rect x="2.8204%" y="1189" width="0.0225%" height="15" fill="rgb(253,3,0)" fg:x="751" fg:w="6"/><text x="3.0704%" y="1199.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (6 samples, 0.02%)</title><rect x="2.8204%" y="1173" width="0.0225%" height="15" fill="rgb(212,99,53)" fg:x="751" fg:w="6"/><text x="3.0704%" y="1183.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.8204%" y="1157" width="0.0225%" height="15" fill="rgb(249,111,54)" fg:x="751" fg:w="6"/><text x="3.0704%" y="1167.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.8204%" y="1141" width="0.0225%" height="15" fill="rgb(249,55,30)" fg:x="751" fg:w="6"/><text x="3.0704%" y="1151.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.02%)</title><rect x="2.8204%" y="1125" width="0.0225%" height="15" fill="rgb(237,47,42)" fg:x="751" fg:w="6"/><text x="3.0704%" y="1135.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.02%)</title><rect x="2.8204%" y="1109" width="0.0225%" height="15" fill="rgb(211,20,18)" fg:x="751" fg:w="6"/><text x="3.0704%" y="1119.50"></text></g><g><title>serde::de::MapAccess::next_value (6 samples, 0.02%)</title><rect x="2.8204%" y="1093" width="0.0225%" height="15" fill="rgb(231,203,46)" fg:x="751" fg:w="6"/><text x="3.0704%" y="1103.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (6 samples, 0.02%)</title><rect x="2.8204%" y="1077" width="0.0225%" height="15" fill="rgb(237,142,3)" fg:x="751" fg:w="6"/><text x="3.0704%" y="1087.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.8204%" y="1061" width="0.0225%" height="15" fill="rgb(241,107,1)" fg:x="751" fg:w="6"/><text x="3.0704%" y="1071.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.8204%" y="1045" width="0.0225%" height="15" fill="rgb(229,83,13)" fg:x="751" fg:w="6"/><text x="3.0704%" y="1055.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.02%)</title><rect x="2.8204%" y="1029" width="0.0225%" height="15" fill="rgb(241,91,40)" fg:x="751" fg:w="6"/><text x="3.0704%" y="1039.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.02%)</title><rect x="2.8204%" y="1013" width="0.0225%" height="15" fill="rgb(225,3,45)" fg:x="751" fg:w="6"/><text x="3.0704%" y="1023.50"></text></g><g><title>serde::de::MapAccess::next_entry (6 samples, 0.02%)</title><rect x="2.8204%" y="997" width="0.0225%" height="15" fill="rgb(244,223,14)" fg:x="751" fg:w="6"/><text x="3.0704%" y="1007.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (6 samples, 0.02%)</title><rect x="2.8204%" y="981" width="0.0225%" height="15" fill="rgb(224,124,37)" fg:x="751" fg:w="6"/><text x="3.0704%" y="991.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (6 samples, 0.02%)</title><rect x="2.8204%" y="965" width="0.0225%" height="15" fill="rgb(251,171,30)" fg:x="751" fg:w="6"/><text x="3.0704%" y="975.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.8204%" y="949" width="0.0225%" height="15" fill="rgb(236,46,54)" fg:x="751" fg:w="6"/><text x="3.0704%" y="959.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.8204%" y="933" width="0.0225%" height="15" fill="rgb(245,213,5)" fg:x="751" fg:w="6"/><text x="3.0704%" y="943.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.02%)</title><rect x="2.8204%" y="917" width="0.0225%" height="15" fill="rgb(230,144,27)" fg:x="751" fg:w="6"/><text x="3.0704%" y="927.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (6 samples, 0.02%)</title><rect x="2.8204%" y="901" width="0.0225%" height="15" fill="rgb(220,86,6)" fg:x="751" fg:w="6"/><text x="3.0704%" y="911.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.02%)</title><rect x="2.8204%" y="885" width="0.0225%" height="15" fill="rgb(240,20,13)" fg:x="751" fg:w="6"/><text x="3.0704%" y="895.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.02%)</title><rect x="2.8204%" y="869" width="0.0225%" height="15" fill="rgb(217,89,34)" fg:x="751" fg:w="6"/><text x="3.0704%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.8204%" y="853" width="0.0225%" height="15" fill="rgb(229,13,5)" fg:x="751" fg:w="6"/><text x="3.0704%" y="863.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.8204%" y="837" width="0.0225%" height="15" fill="rgb(244,67,35)" fg:x="751" fg:w="6"/><text x="3.0704%" y="847.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.02%)</title><rect x="2.8204%" y="821" width="0.0225%" height="15" fill="rgb(221,40,2)" fg:x="751" fg:w="6"/><text x="3.0704%" y="831.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (6 samples, 0.02%)</title><rect x="2.8204%" y="805" width="0.0225%" height="15" fill="rgb(237,157,21)" fg:x="751" fg:w="6"/><text x="3.0704%" y="815.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.02%)</title><rect x="2.8204%" y="789" width="0.0225%" height="15" fill="rgb(222,94,11)" fg:x="751" fg:w="6"/><text x="3.0704%" y="799.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.02%)</title><rect x="2.8204%" y="773" width="0.0225%" height="15" fill="rgb(249,113,6)" fg:x="751" fg:w="6"/><text x="3.0704%" y="783.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.8204%" y="757" width="0.0225%" height="15" fill="rgb(238,137,36)" fg:x="751" fg:w="6"/><text x="3.0704%" y="767.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.8204%" y="741" width="0.0225%" height="15" fill="rgb(210,102,26)" fg:x="751" fg:w="6"/><text x="3.0704%" y="751.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.02%)</title><rect x="2.8204%" y="725" width="0.0225%" height="15" fill="rgb(218,30,30)" fg:x="751" fg:w="6"/><text x="3.0704%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.02%)</title><rect x="2.8204%" y="709" width="0.0225%" height="15" fill="rgb(214,67,26)" fg:x="751" fg:w="6"/><text x="3.0704%" y="719.50"></text></g><g><title>serde::de::MapAccess::next_value (4 samples, 0.02%)</title><rect x="2.8280%" y="693" width="0.0150%" height="15" fill="rgb(251,9,53)" fg:x="753" fg:w="4"/><text x="3.0780%" y="703.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (4 samples, 0.02%)</title><rect x="2.8280%" y="677" width="0.0150%" height="15" fill="rgb(228,204,25)" fg:x="753" fg:w="4"/><text x="3.0780%" y="687.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.02%)</title><rect x="2.8280%" y="661" width="0.0150%" height="15" fill="rgb(207,153,8)" fg:x="753" fg:w="4"/><text x="3.0780%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.02%)</title><rect x="2.8280%" y="645" width="0.0150%" height="15" fill="rgb(242,9,16)" fg:x="753" fg:w="4"/><text x="3.0780%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.02%)</title><rect x="2.8280%" y="629" width="0.0150%" height="15" fill="rgb(217,211,10)" fg:x="753" fg:w="4"/><text x="3.0780%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.02%)</title><rect x="2.8280%" y="613" width="0.0150%" height="15" fill="rgb(219,228,52)" fg:x="753" fg:w="4"/><text x="3.0780%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.01%)</title><rect x="2.8317%" y="597" width="0.0113%" height="15" fill="rgb(231,92,29)" fg:x="754" fg:w="3"/><text x="3.0817%" y="607.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.01%)</title><rect x="2.8317%" y="581" width="0.0113%" height="15" fill="rgb(232,8,23)" fg:x="754" fg:w="3"/><text x="3.0817%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.01%)</title><rect x="2.8317%" y="565" width="0.0113%" height="15" fill="rgb(216,211,34)" fg:x="754" fg:w="3"/><text x="3.0817%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.01%)</title><rect x="2.8317%" y="549" width="0.0113%" height="15" fill="rgb(236,151,0)" fg:x="754" fg:w="3"/><text x="3.0817%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.01%)</title><rect x="2.8317%" y="533" width="0.0113%" height="15" fill="rgb(209,168,3)" fg:x="754" fg:w="3"/><text x="3.0817%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.01%)</title><rect x="2.8317%" y="517" width="0.0113%" height="15" fill="rgb(208,129,28)" fg:x="754" fg:w="3"/><text x="3.0817%" y="527.50"></text></g><g><title>serde::de::MapAccess::next_value (3 samples, 0.01%)</title><rect x="2.8317%" y="501" width="0.0113%" height="15" fill="rgb(229,78,22)" fg:x="754" fg:w="3"/><text x="3.0817%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.01%)</title><rect x="2.8317%" y="485" width="0.0113%" height="15" fill="rgb(228,187,13)" fg:x="754" fg:w="3"/><text x="3.0817%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.01%)</title><rect x="2.8317%" y="469" width="0.0113%" height="15" fill="rgb(240,119,24)" fg:x="754" fg:w="3"/><text x="3.0817%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.01%)</title><rect x="2.8317%" y="453" width="0.0113%" height="15" fill="rgb(209,194,42)" fg:x="754" fg:w="3"/><text x="3.0817%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.01%)</title><rect x="2.8317%" y="437" width="0.0113%" height="15" fill="rgb(247,200,46)" fg:x="754" fg:w="3"/><text x="3.0817%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.01%)</title><rect x="2.8317%" y="421" width="0.0113%" height="15" fill="rgb(218,76,16)" fg:x="754" fg:w="3"/><text x="3.0817%" y="431.50"></text></g><g><title>serde::de::MapAccess::next_entry (4 samples, 0.02%)</title><rect x="2.8467%" y="613" width="0.0150%" height="15" fill="rgb(225,21,48)" fg:x="758" fg:w="4"/><text x="3.0967%" y="623.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (4 samples, 0.02%)</title><rect x="2.8467%" y="597" width="0.0150%" height="15" fill="rgb(239,223,50)" fg:x="758" fg:w="4"/><text x="3.0967%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.01%)</title><rect x="2.8505%" y="581" width="0.0113%" height="15" fill="rgb(244,45,21)" fg:x="759" fg:w="3"/><text x="3.1005%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.01%)</title><rect x="2.8505%" y="565" width="0.0113%" height="15" fill="rgb(232,33,43)" fg:x="759" fg:w="3"/><text x="3.1005%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.01%)</title><rect x="2.8505%" y="549" width="0.0113%" height="15" fill="rgb(209,8,3)" fg:x="759" fg:w="3"/><text x="3.1005%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.01%)</title><rect x="2.8505%" y="533" width="0.0113%" height="15" fill="rgb(214,25,53)" fg:x="759" fg:w="3"/><text x="3.1005%" y="543.50"></text></g><g><title>serde::de::MapAccess::next_entry (6 samples, 0.02%)</title><rect x="2.8467%" y="725" width="0.0225%" height="15" fill="rgb(254,186,54)" fg:x="758" fg:w="6"/><text x="3.0967%" y="735.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (6 samples, 0.02%)</title><rect x="2.8467%" y="709" width="0.0225%" height="15" fill="rgb(208,174,49)" fg:x="758" fg:w="6"/><text x="3.0967%" y="719.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (6 samples, 0.02%)</title><rect x="2.8467%" y="693" width="0.0225%" height="15" fill="rgb(233,191,51)" fg:x="758" fg:w="6"/><text x="3.0967%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.8467%" y="677" width="0.0225%" height="15" fill="rgb(222,134,10)" fg:x="758" fg:w="6"/><text x="3.0967%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.8467%" y="661" width="0.0225%" height="15" fill="rgb(230,226,20)" fg:x="758" fg:w="6"/><text x="3.0967%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.02%)</title><rect x="2.8467%" y="645" width="0.0225%" height="15" fill="rgb(251,111,25)" fg:x="758" fg:w="6"/><text x="3.0967%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.02%)</title><rect x="2.8467%" y="629" width="0.0225%" height="15" fill="rgb(224,40,46)" fg:x="758" fg:w="6"/><text x="3.0967%" y="639.50"></text></g><g><title>serde::de::MapAccess::next_value (9 samples, 0.03%)</title><rect x="2.8430%" y="1205" width="0.0338%" height="15" fill="rgb(236,108,47)" fg:x="757" fg:w="9"/><text x="3.0930%" y="1215.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (9 samples, 0.03%)</title><rect x="2.8430%" y="1189" width="0.0338%" height="15" fill="rgb(234,93,0)" fg:x="757" fg:w="9"/><text x="3.0930%" y="1199.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.8430%" y="1173" width="0.0338%" height="15" fill="rgb(224,213,32)" fg:x="757" fg:w="9"/><text x="3.0930%" y="1183.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.8430%" y="1157" width="0.0338%" height="15" fill="rgb(251,11,48)" fg:x="757" fg:w="9"/><text x="3.0930%" y="1167.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.03%)</title><rect x="2.8430%" y="1141" width="0.0338%" height="15" fill="rgb(236,173,5)" fg:x="757" fg:w="9"/><text x="3.0930%" y="1151.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (9 samples, 0.03%)</title><rect x="2.8430%" y="1125" width="0.0338%" height="15" fill="rgb(230,95,12)" fg:x="757" fg:w="9"/><text x="3.0930%" y="1135.50"></text></g><g><title>serde::de::SeqAccess::next_element (9 samples, 0.03%)</title><rect x="2.8430%" y="1109" width="0.0338%" height="15" fill="rgb(232,209,1)" fg:x="757" fg:w="9"/><text x="3.0930%" y="1119.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.03%)</title><rect x="2.8430%" y="1093" width="0.0338%" height="15" fill="rgb(232,6,1)" fg:x="757" fg:w="9"/><text x="3.0930%" y="1103.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.8430%" y="1077" width="0.0338%" height="15" fill="rgb(210,224,50)" fg:x="757" fg:w="9"/><text x="3.0930%" y="1087.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.8430%" y="1061" width="0.0338%" height="15" fill="rgb(228,127,35)" fg:x="757" fg:w="9"/><text x="3.0930%" y="1071.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.03%)</title><rect x="2.8430%" y="1045" width="0.0338%" height="15" fill="rgb(245,102,45)" fg:x="757" fg:w="9"/><text x="3.0930%" y="1055.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.03%)</title><rect x="2.8430%" y="1029" width="0.0338%" height="15" fill="rgb(214,1,49)" fg:x="757" fg:w="9"/><text x="3.0930%" y="1039.50"></text></g><g><title>serde::de::MapAccess::next_value (9 samples, 0.03%)</title><rect x="2.8430%" y="1013" width="0.0338%" height="15" fill="rgb(226,163,40)" fg:x="757" fg:w="9"/><text x="3.0930%" y="1023.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (9 samples, 0.03%)</title><rect x="2.8430%" y="997" width="0.0338%" height="15" fill="rgb(239,212,28)" fg:x="757" fg:w="9"/><text x="3.0930%" y="1007.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.8430%" y="981" width="0.0338%" height="15" fill="rgb(220,20,13)" fg:x="757" fg:w="9"/><text x="3.0930%" y="991.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.8430%" y="965" width="0.0338%" height="15" fill="rgb(210,164,35)" fg:x="757" fg:w="9"/><text x="3.0930%" y="975.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.03%)</title><rect x="2.8430%" y="949" width="0.0338%" height="15" fill="rgb(248,109,41)" fg:x="757" fg:w="9"/><text x="3.0930%" y="959.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.03%)</title><rect x="2.8430%" y="933" width="0.0338%" height="15" fill="rgb(238,23,50)" fg:x="757" fg:w="9"/><text x="3.0930%" y="943.50"></text></g><g><title>serde::de::MapAccess::next_value (9 samples, 0.03%)</title><rect x="2.8430%" y="917" width="0.0338%" height="15" fill="rgb(211,48,49)" fg:x="757" fg:w="9"/><text x="3.0930%" y="927.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (9 samples, 0.03%)</title><rect x="2.8430%" y="901" width="0.0338%" height="15" fill="rgb(223,36,21)" fg:x="757" fg:w="9"/><text x="3.0930%" y="911.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.8430%" y="885" width="0.0338%" height="15" fill="rgb(207,123,46)" fg:x="757" fg:w="9"/><text x="3.0930%" y="895.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.8430%" y="869" width="0.0338%" height="15" fill="rgb(240,218,32)" fg:x="757" fg:w="9"/><text x="3.0930%" y="879.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.03%)</title><rect x="2.8430%" y="853" width="0.0338%" height="15" fill="rgb(252,5,43)" fg:x="757" fg:w="9"/><text x="3.0930%" y="863.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.03%)</title><rect x="2.8430%" y="837" width="0.0338%" height="15" fill="rgb(252,84,19)" fg:x="757" fg:w="9"/><text x="3.0930%" y="847.50"></text></g><g><title>serde::de::MapAccess::next_value (8 samples, 0.03%)</title><rect x="2.8467%" y="821" width="0.0300%" height="15" fill="rgb(243,152,39)" fg:x="758" fg:w="8"/><text x="3.0967%" y="831.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (8 samples, 0.03%)</title><rect x="2.8467%" y="805" width="0.0300%" height="15" fill="rgb(234,160,15)" fg:x="758" fg:w="8"/><text x="3.0967%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.03%)</title><rect x="2.8467%" y="789" width="0.0300%" height="15" fill="rgb(237,34,20)" fg:x="758" fg:w="8"/><text x="3.0967%" y="799.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (8 samples, 0.03%)</title><rect x="2.8467%" y="773" width="0.0300%" height="15" fill="rgb(229,97,13)" fg:x="758" fg:w="8"/><text x="3.0967%" y="783.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.03%)</title><rect x="2.8467%" y="757" width="0.0300%" height="15" fill="rgb(234,71,50)" fg:x="758" fg:w="8"/><text x="3.0967%" y="767.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.03%)</title><rect x="2.8467%" y="741" width="0.0300%" height="15" fill="rgb(253,155,4)" fg:x="758" fg:w="8"/><text x="3.0967%" y="751.50"></text></g><g><title>serde_json::de::from_str (27 samples, 0.10%)</title><rect x="2.7791%" y="1781" width="0.1014%" height="15" fill="rgb(222,185,37)" fg:x="740" fg:w="27"/><text x="3.0291%" y="1791.50"></text></g><g><title>serde_json::de::from_trait (27 samples, 0.10%)</title><rect x="2.7791%" y="1765" width="0.1014%" height="15" fill="rgb(251,177,13)" fg:x="740" fg:w="27"/><text x="3.0291%" y="1775.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (27 samples, 0.10%)</title><rect x="2.7791%" y="1749" width="0.1014%" height="15" fill="rgb(250,179,40)" fg:x="740" fg:w="27"/><text x="3.0291%" y="1759.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (27 samples, 0.10%)</title><rect x="2.7791%" y="1733" width="0.1014%" height="15" fill="rgb(242,44,2)" fg:x="740" fg:w="27"/><text x="3.0291%" y="1743.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (27 samples, 0.10%)</title><rect x="2.7791%" y="1717" width="0.1014%" height="15" fill="rgb(216,177,13)" fg:x="740" fg:w="27"/><text x="3.0291%" y="1727.50"></text></g><g><title>serde::de::MapAccess::next_value (27 samples, 0.10%)</title><rect x="2.7791%" y="1701" width="0.1014%" height="15" fill="rgb(216,106,43)" fg:x="740" fg:w="27"/><text x="3.0291%" y="1711.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (27 samples, 0.10%)</title><rect x="2.7791%" y="1685" width="0.1014%" height="15" fill="rgb(216,183,2)" fg:x="740" fg:w="27"/><text x="3.0291%" y="1695.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (27 samples, 0.10%)</title><rect x="2.7791%" y="1669" width="0.1014%" height="15" fill="rgb(249,75,3)" fg:x="740" fg:w="27"/><text x="3.0291%" y="1679.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (27 samples, 0.10%)</title><rect x="2.7791%" y="1653" width="0.1014%" height="15" fill="rgb(219,67,39)" fg:x="740" fg:w="27"/><text x="3.0291%" y="1663.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (27 samples, 0.10%)</title><rect x="2.7791%" y="1637" width="0.1014%" height="15" fill="rgb(253,228,2)" fg:x="740" fg:w="27"/><text x="3.0291%" y="1647.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (27 samples, 0.10%)</title><rect x="2.7791%" y="1621" width="0.1014%" height="15" fill="rgb(235,138,27)" fg:x="740" fg:w="27"/><text x="3.0291%" y="1631.50"></text></g><g><title>serde::de::MapAccess::next_value (16 samples, 0.06%)</title><rect x="2.8204%" y="1605" width="0.0601%" height="15" fill="rgb(236,97,51)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1615.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (16 samples, 0.06%)</title><rect x="2.8204%" y="1589" width="0.0601%" height="15" fill="rgb(240,80,30)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1599.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8204%" y="1573" width="0.0601%" height="15" fill="rgb(230,178,19)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1583.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8204%" y="1557" width="0.0601%" height="15" fill="rgb(210,190,27)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1567.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 0.06%)</title><rect x="2.8204%" y="1541" width="0.0601%" height="15" fill="rgb(222,107,31)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1551.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (16 samples, 0.06%)</title><rect x="2.8204%" y="1525" width="0.0601%" height="15" fill="rgb(216,127,34)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1535.50"></text></g><g><title>serde::de::MapAccess::next_entry (16 samples, 0.06%)</title><rect x="2.8204%" y="1509" width="0.0601%" height="15" fill="rgb(234,116,52)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1519.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (16 samples, 0.06%)</title><rect x="2.8204%" y="1493" width="0.0601%" height="15" fill="rgb(222,124,15)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1503.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (16 samples, 0.06%)</title><rect x="2.8204%" y="1477" width="0.0601%" height="15" fill="rgb(231,179,28)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1487.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8204%" y="1461" width="0.0601%" height="15" fill="rgb(226,93,45)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1471.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8204%" y="1445" width="0.0601%" height="15" fill="rgb(215,8,51)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1455.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 0.06%)</title><rect x="2.8204%" y="1429" width="0.0601%" height="15" fill="rgb(223,106,5)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1439.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (16 samples, 0.06%)</title><rect x="2.8204%" y="1413" width="0.0601%" height="15" fill="rgb(250,191,5)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1423.50"></text></g><g><title>serde::de::SeqAccess::next_element (16 samples, 0.06%)</title><rect x="2.8204%" y="1397" width="0.0601%" height="15" fill="rgb(242,132,44)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1407.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (16 samples, 0.06%)</title><rect x="2.8204%" y="1381" width="0.0601%" height="15" fill="rgb(251,152,29)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1391.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8204%" y="1365" width="0.0601%" height="15" fill="rgb(218,179,5)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1375.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8204%" y="1349" width="0.0601%" height="15" fill="rgb(227,67,19)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1359.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 0.06%)</title><rect x="2.8204%" y="1333" width="0.0601%" height="15" fill="rgb(233,119,31)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1343.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (16 samples, 0.06%)</title><rect x="2.8204%" y="1317" width="0.0601%" height="15" fill="rgb(241,120,22)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1327.50"></text></g><g><title>serde::de::SeqAccess::next_element (16 samples, 0.06%)</title><rect x="2.8204%" y="1301" width="0.0601%" height="15" fill="rgb(224,102,30)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1311.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (16 samples, 0.06%)</title><rect x="2.8204%" y="1285" width="0.0601%" height="15" fill="rgb(210,164,37)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1295.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8204%" y="1269" width="0.0601%" height="15" fill="rgb(226,191,16)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1279.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8204%" y="1253" width="0.0601%" height="15" fill="rgb(214,40,45)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1263.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 0.06%)</title><rect x="2.8204%" y="1237" width="0.0601%" height="15" fill="rgb(244,29,26)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1247.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (16 samples, 0.06%)</title><rect x="2.8204%" y="1221" width="0.0601%" height="15" fill="rgb(216,16,5)" fg:x="751" fg:w="16"/><text x="3.0704%" y="1231.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.02%)</title><rect x="2.8918%" y="501" width="0.0150%" height="15" fill="rgb(249,76,35)" fg:x="770" fg:w="4"/><text x="3.1418%" y="511.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_entry (4 samples, 0.02%)</title><rect x="2.8918%" y="485" width="0.0150%" height="15" fill="rgb(207,11,44)" fg:x="770" fg:w="4"/><text x="3.1418%" y="495.50"></text></g><g><title>serde::de::MapAccess::next_entry (4 samples, 0.02%)</title><rect x="2.8918%" y="469" width="0.0150%" height="15" fill="rgb(228,190,49)" fg:x="770" fg:w="4"/><text x="3.1418%" y="479.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (4 samples, 0.02%)</title><rect x="2.8918%" y="453" width="0.0150%" height="15" fill="rgb(214,173,12)" fg:x="770" fg:w="4"/><text x="3.1418%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (4 samples, 0.02%)</title><rect x="2.8918%" y="437" width="0.0150%" height="15" fill="rgb(218,26,35)" fg:x="770" fg:w="4"/><text x="3.1418%" y="447.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.02%)</title><rect x="2.8918%" y="421" width="0.0150%" height="15" fill="rgb(220,200,19)" fg:x="770" fg:w="4"/><text x="3.1418%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (4 samples, 0.02%)</title><rect x="2.8918%" y="405" width="0.0150%" height="15" fill="rgb(239,95,49)" fg:x="770" fg:w="4"/><text x="3.1418%" y="415.50"></text></g><g><title>serde::de::Deserializer::__deserialize_content (4 samples, 0.02%)</title><rect x="2.8918%" y="389" width="0.0150%" height="15" fill="rgb(235,85,53)" fg:x="770" fg:w="4"/><text x="3.1418%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_any (4 samples, 0.02%)</title><rect x="2.8918%" y="373" width="0.0150%" height="15" fill="rgb(233,133,31)" fg:x="770" fg:w="4"/><text x="3.1418%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.01%)</title><rect x="2.8956%" y="357" width="0.0113%" height="15" fill="rgb(218,25,20)" fg:x="771" fg:w="3"/><text x="3.1456%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.01%)</title><rect x="2.8956%" y="341" width="0.0113%" height="15" fill="rgb(252,210,38)" fg:x="771" fg:w="3"/><text x="3.1456%" y="351.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_entry (3 samples, 0.01%)</title><rect x="2.8956%" y="325" width="0.0113%" height="15" fill="rgb(242,134,21)" fg:x="771" fg:w="3"/><text x="3.1456%" y="335.50"></text></g><g><title>serde::de::MapAccess::next_entry (3 samples, 0.01%)</title><rect x="2.8956%" y="309" width="0.0113%" height="15" fill="rgb(213,28,48)" fg:x="771" fg:w="3"/><text x="3.1456%" y="319.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (3 samples, 0.01%)</title><rect x="2.8956%" y="293" width="0.0113%" height="15" fill="rgb(250,196,2)" fg:x="771" fg:w="3"/><text x="3.1456%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.01%)</title><rect x="2.8956%" y="277" width="0.0113%" height="15" fill="rgb(227,5,17)" fg:x="771" fg:w="3"/><text x="3.1456%" y="287.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.01%)</title><rect x="2.8956%" y="261" width="0.0113%" height="15" fill="rgb(221,226,24)" fg:x="771" fg:w="3"/><text x="3.1456%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (3 samples, 0.01%)</title><rect x="2.8956%" y="245" width="0.0113%" height="15" fill="rgb(211,5,48)" fg:x="771" fg:w="3"/><text x="3.1456%" y="255.50"></text></g><g><title>serde::de::Deserializer::__deserialize_content (3 samples, 0.01%)</title><rect x="2.8956%" y="229" width="0.0113%" height="15" fill="rgb(219,150,6)" fg:x="771" fg:w="3"/><text x="3.1456%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_any (3 samples, 0.01%)</title><rect x="2.8956%" y="213" width="0.0113%" height="15" fill="rgb(251,46,16)" fg:x="771" fg:w="3"/><text x="3.1456%" y="223.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.01%)</title><rect x="2.8956%" y="197" width="0.0113%" height="15" fill="rgb(220,204,40)" fg:x="771" fg:w="3"/><text x="3.1456%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.01%)</title><rect x="2.8956%" y="181" width="0.0113%" height="15" fill="rgb(211,85,2)" fg:x="771" fg:w="3"/><text x="3.1456%" y="191.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (3 samples, 0.01%)</title><rect x="2.8956%" y="165" width="0.0113%" height="15" fill="rgb(229,17,7)" fg:x="771" fg:w="3"/><text x="3.1456%" y="175.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.01%)</title><rect x="2.8956%" y="149" width="0.0113%" height="15" fill="rgb(239,72,28)" fg:x="771" fg:w="3"/><text x="3.1456%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::SeqDeserializer as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.01%)</title><rect x="2.8956%" y="133" width="0.0113%" height="15" fill="rgb(230,47,54)" fg:x="771" fg:w="3"/><text x="3.1456%" y="143.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.01%)</title><rect x="2.8956%" y="117" width="0.0113%" height="15" fill="rgb(214,50,8)" fg:x="771" fg:w="3"/><text x="3.1456%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (3 samples, 0.01%)</title><rect x="2.8956%" y="101" width="0.0113%" height="15" fill="rgb(216,198,43)" fg:x="771" fg:w="3"/><text x="3.1456%" y="111.50"></text></g><g><title>serde::de::Deserializer::__deserialize_content (3 samples, 0.01%)</title><rect x="2.8956%" y="85" width="0.0113%" height="15" fill="rgb(234,20,35)" fg:x="771" fg:w="3"/><text x="3.1456%" y="95.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_any (3 samples, 0.01%)</title><rect x="2.8956%" y="69" width="0.0113%" height="15" fill="rgb(254,45,19)" fg:x="771" fg:w="3"/><text x="3.1456%" y="79.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.01%)</title><rect x="2.8956%" y="53" width="0.0113%" height="15" fill="rgb(219,14,44)" fg:x="771" fg:w="3"/><text x="3.1456%" y="63.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.01%)</title><rect x="2.8956%" y="37" width="0.0113%" height="15" fill="rgb(217,220,26)" fg:x="771" fg:w="3"/><text x="3.1456%" y="47.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_entry (5 samples, 0.02%)</title><rect x="2.8918%" y="805" width="0.0188%" height="15" fill="rgb(213,158,28)" fg:x="770" fg:w="5"/><text x="3.1418%" y="815.50"></text></g><g><title>serde::de::MapAccess::next_entry (5 samples, 0.02%)</title><rect x="2.8918%" y="789" width="0.0188%" height="15" fill="rgb(252,51,52)" fg:x="770" fg:w="5"/><text x="3.1418%" y="799.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (5 samples, 0.02%)</title><rect x="2.8918%" y="773" width="0.0188%" height="15" fill="rgb(246,89,16)" fg:x="770" fg:w="5"/><text x="3.1418%" y="783.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (5 samples, 0.02%)</title><rect x="2.8918%" y="757" width="0.0188%" height="15" fill="rgb(216,158,49)" fg:x="770" fg:w="5"/><text x="3.1418%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.02%)</title><rect x="2.8918%" y="741" width="0.0188%" height="15" fill="rgb(236,107,19)" fg:x="770" fg:w="5"/><text x="3.1418%" y="751.50"></text></g><g><title>&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (5 samples, 0.02%)</title><rect x="2.8918%" y="725" width="0.0188%" height="15" fill="rgb(228,185,30)" fg:x="770" fg:w="5"/><text x="3.1418%" y="735.50"></text></g><g><title>serde::de::Deserializer::__deserialize_content (5 samples, 0.02%)</title><rect x="2.8918%" y="709" width="0.0188%" height="15" fill="rgb(246,134,8)" fg:x="770" fg:w="5"/><text x="3.1418%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_any (5 samples, 0.02%)</title><rect x="2.8918%" y="693" width="0.0188%" height="15" fill="rgb(214,143,50)" fg:x="770" fg:w="5"/><text x="3.1418%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.02%)</title><rect x="2.8918%" y="677" width="0.0188%" height="15" fill="rgb(228,75,8)" fg:x="770" fg:w="5"/><text x="3.1418%" y="687.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.02%)</title><rect x="2.8918%" y="661" width="0.0188%" height="15" fill="rgb(207,175,4)" fg:x="770" fg:w="5"/><text x="3.1418%" y="671.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_entry (5 samples, 0.02%)</title><rect x="2.8918%" y="645" width="0.0188%" height="15" fill="rgb(205,108,24)" fg:x="770" fg:w="5"/><text x="3.1418%" y="655.50"></text></g><g><title>serde::de::MapAccess::next_entry (5 samples, 0.02%)</title><rect x="2.8918%" y="629" width="0.0188%" height="15" fill="rgb(244,120,49)" fg:x="770" fg:w="5"/><text x="3.1418%" y="639.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (5 samples, 0.02%)</title><rect x="2.8918%" y="613" width="0.0188%" height="15" fill="rgb(223,47,38)" fg:x="770" fg:w="5"/><text x="3.1418%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (5 samples, 0.02%)</title><rect x="2.8918%" y="597" width="0.0188%" height="15" fill="rgb(229,179,11)" fg:x="770" fg:w="5"/><text x="3.1418%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.02%)</title><rect x="2.8918%" y="581" width="0.0188%" height="15" fill="rgb(231,122,1)" fg:x="770" fg:w="5"/><text x="3.1418%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (5 samples, 0.02%)</title><rect x="2.8918%" y="565" width="0.0188%" height="15" fill="rgb(245,119,9)" fg:x="770" fg:w="5"/><text x="3.1418%" y="575.50"></text></g><g><title>serde::de::Deserializer::__deserialize_content (5 samples, 0.02%)</title><rect x="2.8918%" y="549" width="0.0188%" height="15" fill="rgb(241,163,25)" fg:x="770" fg:w="5"/><text x="3.1418%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_any (5 samples, 0.02%)</title><rect x="2.8918%" y="533" width="0.0188%" height="15" fill="rgb(217,214,3)" fg:x="770" fg:w="5"/><text x="3.1418%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.02%)</title><rect x="2.8918%" y="517" width="0.0188%" height="15" fill="rgb(240,86,28)" fg:x="770" fg:w="5"/><text x="3.1418%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.02%)</title><rect x="2.8918%" y="821" width="0.0225%" height="15" fill="rgb(215,47,9)" fg:x="770" fg:w="6"/><text x="3.1418%" y="831.50"></text></g><g><title>&lt;&lt;graph_craft::document::_::&lt;impl serde::de::Deserialize for graph_craft::document::DocumentNode&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::__DeserializeWith as serde::de::Deserialize&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.8843%" y="1221" width="0.0338%" height="15" fill="rgb(252,25,45)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1231.50"></text></g><g><title>graph_craft::document::deserialize_inputs (9 samples, 0.03%)</title><rect x="2.8843%" y="1205" width="0.0338%" height="15" fill="rgb(251,164,9)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1215.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.8843%" y="1189" width="0.0338%" height="15" fill="rgb(233,194,0)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1199.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (9 samples, 0.03%)</title><rect x="2.8843%" y="1173" width="0.0338%" height="15" fill="rgb(249,111,24)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1183.50"></text></g><g><title>serde_json::value::de::visit_array (9 samples, 0.03%)</title><rect x="2.8843%" y="1157" width="0.0338%" height="15" fill="rgb(250,223,3)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1167.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (9 samples, 0.03%)</title><rect x="2.8843%" y="1141" width="0.0338%" height="15" fill="rgb(236,178,37)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1151.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (9 samples, 0.03%)</title><rect x="2.8843%" y="1125" width="0.0338%" height="15" fill="rgb(241,158,50)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1135.50"></text></g><g><title>serde::de::SeqAccess::next_element (9 samples, 0.03%)</title><rect x="2.8843%" y="1109" width="0.0338%" height="15" fill="rgb(213,121,41)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1119.50"></text></g><g><title>&lt;serde_json::value::de::SeqDeserializer as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.03%)</title><rect x="2.8843%" y="1093" width="0.0338%" height="15" fill="rgb(240,92,3)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1103.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.8843%" y="1077" width="0.0338%" height="15" fill="rgb(205,123,3)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1087.50"></text></g><g><title>graph_craft::document::_::&lt;impl serde::de::Deserialize for graph_craft::document::NodeInputVersions&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.8843%" y="1061" width="0.0338%" height="15" fill="rgb(205,97,47)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1071.50"></text></g><g><title>&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (9 samples, 0.03%)</title><rect x="2.8843%" y="1045" width="0.0338%" height="15" fill="rgb(247,152,14)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1055.50"></text></g><g><title>serde::de::Deserializer::__deserialize_content (9 samples, 0.03%)</title><rect x="2.8843%" y="1029" width="0.0338%" height="15" fill="rgb(248,195,53)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1039.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_any (9 samples, 0.03%)</title><rect x="2.8843%" y="1013" width="0.0338%" height="15" fill="rgb(226,201,16)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1023.50"></text></g><g><title>serde_json::value::de::visit_object (9 samples, 0.03%)</title><rect x="2.8843%" y="997" width="0.0338%" height="15" fill="rgb(205,98,0)" fg:x="768" fg:w="9"/><text x="3.1343%" y="1007.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.03%)</title><rect x="2.8843%" y="981" width="0.0338%" height="15" fill="rgb(214,191,48)" fg:x="768" fg:w="9"/><text x="3.1343%" y="991.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_entry (9 samples, 0.03%)</title><rect x="2.8843%" y="965" width="0.0338%" height="15" fill="rgb(237,112,39)" fg:x="768" fg:w="9"/><text x="3.1343%" y="975.50"></text></g><g><title>serde::de::MapAccess::next_entry (9 samples, 0.03%)</title><rect x="2.8843%" y="949" width="0.0338%" height="15" fill="rgb(247,203,27)" fg:x="768" fg:w="9"/><text x="3.1343%" y="959.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (9 samples, 0.03%)</title><rect x="2.8843%" y="933" width="0.0338%" height="15" fill="rgb(235,124,28)" fg:x="768" fg:w="9"/><text x="3.1343%" y="943.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (8 samples, 0.03%)</title><rect x="2.8880%" y="917" width="0.0300%" height="15" fill="rgb(208,207,46)" fg:x="769" fg:w="8"/><text x="3.1380%" y="927.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.03%)</title><rect x="2.8918%" y="901" width="0.0263%" height="15" fill="rgb(234,176,4)" fg:x="770" fg:w="7"/><text x="3.1418%" y="911.50"></text></g><g><title>&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (7 samples, 0.03%)</title><rect x="2.8918%" y="885" width="0.0263%" height="15" fill="rgb(230,133,28)" fg:x="770" fg:w="7"/><text x="3.1418%" y="895.50"></text></g><g><title>serde::de::Deserializer::__deserialize_content (7 samples, 0.03%)</title><rect x="2.8918%" y="869" width="0.0263%" height="15" fill="rgb(211,137,40)" fg:x="770" fg:w="7"/><text x="3.1418%" y="879.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_any (7 samples, 0.03%)</title><rect x="2.8918%" y="853" width="0.0263%" height="15" fill="rgb(254,35,13)" fg:x="770" fg:w="7"/><text x="3.1418%" y="863.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.03%)</title><rect x="2.8918%" y="837" width="0.0263%" height="15" fill="rgb(225,49,51)" fg:x="770" fg:w="7"/><text x="3.1418%" y="847.50"></text></g><g><title>&lt;graph_craft::document::_::&lt;impl serde::de::Deserialize for graph_craft::document::DocumentNode&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.01%)</title><rect x="2.9256%" y="661" width="0.0113%" height="15" fill="rgb(251,10,15)" fg:x="779" fg:w="3"/><text x="3.1756%" y="671.50"></text></g><g><title>compile_demo_art::load_network (70 samples, 0.26%)</title><rect x="2.6777%" y="1797" width="0.2629%" height="15" fill="rgb(228,207,15)" fg:x="713" fg:w="70"/><text x="2.9277%" y="1807.50"></text></g><g><title>serde_json::value::from_value (16 samples, 0.06%)</title><rect x="2.8805%" y="1781" width="0.0601%" height="15" fill="rgb(241,99,19)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1791.50"></text></g><g><title>graph_craft::document::_::&lt;impl serde::de::Deserialize for graph_craft::document::NodeNetwork&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8805%" y="1765" width="0.0601%" height="15" fill="rgb(207,104,49)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1775.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (16 samples, 0.06%)</title><rect x="2.8805%" y="1749" width="0.0601%" height="15" fill="rgb(234,99,18)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1759.50"></text></g><g><title>serde_json::value::de::visit_object (16 samples, 0.06%)</title><rect x="2.8805%" y="1733" width="0.0601%" height="15" fill="rgb(213,191,49)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1743.50"></text></g><g><title>&lt;graph_craft::document::_::&lt;impl serde::de::Deserialize for graph_craft::document::NodeNetwork&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (16 samples, 0.06%)</title><rect x="2.8805%" y="1717" width="0.0601%" height="15" fill="rgb(210,226,19)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1727.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (16 samples, 0.06%)</title><rect x="2.8805%" y="1701" width="0.0601%" height="15" fill="rgb(229,97,18)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1711.50"></text></g><g><title>serde::de::MapAccess::next_value (16 samples, 0.06%)</title><rect x="2.8805%" y="1685" width="0.0601%" height="15" fill="rgb(211,167,15)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1695.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (16 samples, 0.06%)</title><rect x="2.8805%" y="1669" width="0.0601%" height="15" fill="rgb(210,169,34)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1679.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8805%" y="1653" width="0.0601%" height="15" fill="rgb(241,121,31)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1663.50"></text></g><g><title>&lt;&lt;graph_craft::document::_::&lt;impl serde::de::Deserialize for graph_craft::document::NodeNetwork&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::__DeserializeWith as serde::de::Deserialize&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8805%" y="1637" width="0.0601%" height="15" fill="rgb(232,40,11)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1647.50"></text></g><g><title>graphene_core::vector::vector_data::modification::deserialize_hashmap (16 samples, 0.06%)</title><rect x="2.8805%" y="1621" width="0.0601%" height="15" fill="rgb(205,86,26)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1631.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (16 samples, 0.06%)</title><rect x="2.8805%" y="1605" width="0.0601%" height="15" fill="rgb(231,126,28)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1615.50"></text></g><g><title>serde_json::value::de::visit_array (16 samples, 0.06%)</title><rect x="2.8805%" y="1589" width="0.0601%" height="15" fill="rgb(219,221,18)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1599.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::deserialize_hashmap::HashMapVisitor&lt;K,V&gt; as serde::de::Visitor&gt;::visit_seq (16 samples, 0.06%)</title><rect x="2.8805%" y="1573" width="0.0601%" height="15" fill="rgb(211,40,0)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1583.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (16 samples, 0.06%)</title><rect x="2.8805%" y="1557" width="0.0601%" height="15" fill="rgb(239,85,43)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1567.50"></text></g><g><title>serde::de::SeqAccess::next_element (16 samples, 0.06%)</title><rect x="2.8805%" y="1541" width="0.0601%" height="15" fill="rgb(231,55,21)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1551.50"></text></g><g><title>&lt;serde_json::value::de::SeqDeserializer as serde::de::SeqAccess&gt;::next_element_seed (16 samples, 0.06%)</title><rect x="2.8805%" y="1525" width="0.0601%" height="15" fill="rgb(225,184,43)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1535.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8805%" y="1509" width="0.0601%" height="15" fill="rgb(251,158,41)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1519.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1)&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8805%" y="1493" width="0.0601%" height="15" fill="rgb(234,159,37)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1503.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_tuple (16 samples, 0.06%)</title><rect x="2.8805%" y="1477" width="0.0601%" height="15" fill="rgb(216,204,22)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1487.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (16 samples, 0.06%)</title><rect x="2.8805%" y="1461" width="0.0601%" height="15" fill="rgb(214,17,3)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1471.50"></text></g><g><title>serde_json::value::de::visit_array (16 samples, 0.06%)</title><rect x="2.8805%" y="1445" width="0.0601%" height="15" fill="rgb(212,111,17)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1455.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1)&gt;::deserialize::TupleVisitor&lt;T0,T1&gt; as serde::de::Visitor&gt;::visit_seq (16 samples, 0.06%)</title><rect x="2.8805%" y="1429" width="0.0601%" height="15" fill="rgb(221,157,24)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1439.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (16 samples, 0.06%)</title><rect x="2.8805%" y="1413" width="0.0601%" height="15" fill="rgb(252,16,13)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1423.50"></text></g><g><title>serde::de::SeqAccess::next_element (16 samples, 0.06%)</title><rect x="2.8805%" y="1397" width="0.0601%" height="15" fill="rgb(221,62,2)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1407.50"></text></g><g><title>&lt;serde_json::value::de::SeqDeserializer as serde::de::SeqAccess&gt;::next_element_seed (16 samples, 0.06%)</title><rect x="2.8805%" y="1381" width="0.0601%" height="15" fill="rgb(247,87,22)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1391.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8805%" y="1365" width="0.0601%" height="15" fill="rgb(215,73,9)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1375.50"></text></g><g><title>graph_craft::document::_::&lt;impl serde::de::Deserialize for graph_craft::document::DocumentNode&gt;::deserialize (16 samples, 0.06%)</title><rect x="2.8805%" y="1349" width="0.0601%" height="15" fill="rgb(207,175,33)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1359.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (16 samples, 0.06%)</title><rect x="2.8805%" y="1333" width="0.0601%" height="15" fill="rgb(243,129,54)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1343.50"></text></g><g><title>serde_json::value::de::visit_object (16 samples, 0.06%)</title><rect x="2.8805%" y="1317" width="0.0601%" height="15" fill="rgb(227,119,45)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1327.50"></text></g><g><title>&lt;graph_craft::document::_::&lt;impl serde::de::Deserialize for graph_craft::document::DocumentNode&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (16 samples, 0.06%)</title><rect x="2.8805%" y="1301" width="0.0601%" height="15" fill="rgb(205,109,36)" fg:x="767" fg:w="16"/><text x="3.1305%" y="1311.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (15 samples, 0.06%)</title><rect x="2.8843%" y="1285" width="0.0563%" height="15" fill="rgb(205,6,39)" fg:x="768" fg:w="15"/><text x="3.1343%" y="1295.50"></text></g><g><title>serde::de::MapAccess::next_value (15 samples, 0.06%)</title><rect x="2.8843%" y="1269" width="0.0563%" height="15" fill="rgb(221,32,16)" fg:x="768" fg:w="15"/><text x="3.1343%" y="1279.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (15 samples, 0.06%)</title><rect x="2.8843%" y="1253" width="0.0563%" height="15" fill="rgb(228,144,50)" fg:x="768" fg:w="15"/><text x="3.1343%" y="1263.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (15 samples, 0.06%)</title><rect x="2.8843%" y="1237" width="0.0563%" height="15" fill="rgb(229,201,53)" fg:x="768" fg:w="15"/><text x="3.1343%" y="1247.50"></text></g><g><title>graph_craft::document::_::&lt;impl serde::de::Deserialize for graph_craft::document::DocumentNodeImplementation&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.9181%" y="1221" width="0.0225%" height="15" fill="rgb(249,153,27)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1231.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_enum (6 samples, 0.02%)</title><rect x="2.9181%" y="1205" width="0.0225%" height="15" fill="rgb(227,106,25)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1215.50"></text></g><g><title>&lt;graph_craft::document::_::&lt;impl serde::de::Deserialize for graph_craft::document::DocumentNodeImplementation&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (6 samples, 0.02%)</title><rect x="2.9181%" y="1189" width="0.0225%" height="15" fill="rgb(230,65,29)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1199.50"></text></g><g><title>serde::de::VariantAccess::newtype_variant (6 samples, 0.02%)</title><rect x="2.9181%" y="1173" width="0.0225%" height="15" fill="rgb(221,57,46)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1183.50"></text></g><g><title>&lt;serde_json::value::de::VariantDeserializer as serde::de::VariantAccess&gt;::newtype_variant_seed (6 samples, 0.02%)</title><rect x="2.9181%" y="1157" width="0.0225%" height="15" fill="rgb(229,161,17)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1167.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.9181%" y="1141" width="0.0225%" height="15" fill="rgb(222,213,11)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1151.50"></text></g><g><title>graph_craft::document::_::&lt;impl serde::de::Deserialize for graph_craft::document::NodeNetwork&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.9181%" y="1125" width="0.0225%" height="15" fill="rgb(235,35,13)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1135.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.02%)</title><rect x="2.9181%" y="1109" width="0.0225%" height="15" fill="rgb(233,158,34)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1119.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.02%)</title><rect x="2.9181%" y="1093" width="0.0225%" height="15" fill="rgb(215,151,48)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1103.50"></text></g><g><title>&lt;graph_craft::document::_::&lt;impl serde::de::Deserialize for graph_craft::document::NodeNetwork&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.02%)</title><rect x="2.9181%" y="1077" width="0.0225%" height="15" fill="rgb(229,84,14)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1087.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (6 samples, 0.02%)</title><rect x="2.9181%" y="1061" width="0.0225%" height="15" fill="rgb(229,68,14)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1071.50"></text></g><g><title>serde::de::MapAccess::next_value (6 samples, 0.02%)</title><rect x="2.9181%" y="1045" width="0.0225%" height="15" fill="rgb(243,106,26)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1055.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (6 samples, 0.02%)</title><rect x="2.9181%" y="1029" width="0.0225%" height="15" fill="rgb(206,45,38)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1039.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.9181%" y="1013" width="0.0225%" height="15" fill="rgb(226,6,15)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1023.50"></text></g><g><title>&lt;&lt;graph_craft::document::_::&lt;impl serde::de::Deserialize for graph_craft::document::NodeNetwork&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::__DeserializeWith as serde::de::Deserialize&gt;::deserialize (6 samples, 0.02%)</title><rect x="2.9181%" y="997" width="0.0225%" height="15" fill="rgb(232,22,54)" fg:x="777" fg:w="6"/><text x="3.1681%" y="1007.50"></text></g><g><title>graphene_core::vector::vector_data::modification::deserialize_hashmap (5 samples, 0.02%)</title><rect x="2.9218%" y="981" width="0.0188%" height="15" fill="rgb(229,222,32)" fg:x="778" fg:w="5"/><text x="3.1718%" y="991.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (5 samples, 0.02%)</title><rect x="2.9218%" y="965" width="0.0188%" height="15" fill="rgb(228,62,29)" fg:x="778" fg:w="5"/><text x="3.1718%" y="975.50"></text></g><g><title>serde_json::value::de::visit_array (5 samples, 0.02%)</title><rect x="2.9218%" y="949" width="0.0188%" height="15" fill="rgb(251,103,34)" fg:x="778" fg:w="5"/><text x="3.1718%" y="959.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::deserialize_hashmap::HashMapVisitor&lt;K,V&gt; as serde::de::Visitor&gt;::visit_seq (5 samples, 0.02%)</title><rect x="2.9218%" y="933" width="0.0188%" height="15" fill="rgb(233,12,30)" fg:x="778" fg:w="5"/><text x="3.1718%" y="943.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (5 samples, 0.02%)</title><rect x="2.9218%" y="917" width="0.0188%" height="15" fill="rgb(238,52,0)" fg:x="778" fg:w="5"/><text x="3.1718%" y="927.50"></text></g><g><title>serde::de::SeqAccess::next_element (5 samples, 0.02%)</title><rect x="2.9218%" y="901" width="0.0188%" height="15" fill="rgb(223,98,5)" fg:x="778" fg:w="5"/><text x="3.1718%" y="911.50"></text></g><g><title>&lt;serde_json::value::de::SeqDeserializer as serde::de::SeqAccess&gt;::next_element_seed (5 samples, 0.02%)</title><rect x="2.9218%" y="885" width="0.0188%" height="15" fill="rgb(228,75,37)" fg:x="778" fg:w="5"/><text x="3.1718%" y="895.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.02%)</title><rect x="2.9218%" y="869" width="0.0188%" height="15" fill="rgb(205,115,49)" fg:x="778" fg:w="5"/><text x="3.1718%" y="879.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1)&gt;::deserialize (5 samples, 0.02%)</title><rect x="2.9218%" y="853" width="0.0188%" height="15" fill="rgb(250,154,43)" fg:x="778" fg:w="5"/><text x="3.1718%" y="863.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_tuple (5 samples, 0.02%)</title><rect x="2.9218%" y="837" width="0.0188%" height="15" fill="rgb(226,43,29)" fg:x="778" fg:w="5"/><text x="3.1718%" y="847.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (5 samples, 0.02%)</title><rect x="2.9218%" y="821" width="0.0188%" height="15" fill="rgb(249,228,39)" fg:x="778" fg:w="5"/><text x="3.1718%" y="831.50"></text></g><g><title>serde_json::value::de::visit_array (5 samples, 0.02%)</title><rect x="2.9218%" y="805" width="0.0188%" height="15" fill="rgb(216,79,43)" fg:x="778" fg:w="5"/><text x="3.1718%" y="815.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1)&gt;::deserialize::TupleVisitor&lt;T0,T1&gt; as serde::de::Visitor&gt;::visit_seq (5 samples, 0.02%)</title><rect x="2.9218%" y="789" width="0.0188%" height="15" fill="rgb(228,95,12)" fg:x="778" fg:w="5"/><text x="3.1718%" y="799.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (5 samples, 0.02%)</title><rect x="2.9218%" y="773" width="0.0188%" height="15" fill="rgb(249,221,15)" fg:x="778" fg:w="5"/><text x="3.1718%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (5 samples, 0.02%)</title><rect x="2.9218%" y="757" width="0.0188%" height="15" fill="rgb(233,34,13)" fg:x="778" fg:w="5"/><text x="3.1718%" y="767.50"></text></g><g><title>&lt;serde_json::value::de::SeqDeserializer as serde::de::SeqAccess&gt;::next_element_seed (5 samples, 0.02%)</title><rect x="2.9218%" y="741" width="0.0188%" height="15" fill="rgb(214,103,39)" fg:x="778" fg:w="5"/><text x="3.1718%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.02%)</title><rect x="2.9218%" y="725" width="0.0188%" height="15" fill="rgb(251,126,39)" fg:x="778" fg:w="5"/><text x="3.1718%" y="735.50"></text></g><g><title>graph_craft::document::_::&lt;impl serde::de::Deserialize for graph_craft::document::DocumentNode&gt;::deserialize (5 samples, 0.02%)</title><rect x="2.9218%" y="709" width="0.0188%" height="15" fill="rgb(214,216,36)" fg:x="778" fg:w="5"/><text x="3.1718%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.02%)</title><rect x="2.9218%" y="693" width="0.0188%" height="15" fill="rgb(220,221,8)" fg:x="778" fg:w="5"/><text x="3.1718%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.02%)</title><rect x="2.9256%" y="677" width="0.0150%" height="15" fill="rgb(240,216,3)" fg:x="779" fg:w="4"/><text x="3.1756%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (11 samples, 0.04%)</title><rect x="2.9481%" y="1237" width="0.0413%" height="15" fill="rgb(232,218,17)" fg:x="785" fg:w="11"/><text x="3.1981%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (11 samples, 0.04%)</title><rect x="2.9481%" y="1221" width="0.0413%" height="15" fill="rgb(229,163,45)" fg:x="785" fg:w="11"/><text x="3.1981%" y="1231.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="2.9782%" y="1205" width="0.0113%" height="15" fill="rgb(231,110,42)" fg:x="793" fg:w="3"/><text x="3.2282%" y="1215.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="2.9782%" y="1189" width="0.0113%" height="15" fill="rgb(208,170,48)" fg:x="793" fg:w="3"/><text x="3.2282%" y="1199.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="2.9782%" y="1173" width="0.0113%" height="15" fill="rgb(239,116,25)" fg:x="793" fg:w="3"/><text x="3.2282%" y="1183.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="2.9782%" y="1157" width="0.0113%" height="15" fill="rgb(219,200,50)" fg:x="793" fg:w="3"/><text x="3.2282%" y="1167.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="2.9782%" y="1141" width="0.0113%" height="15" fill="rgb(245,200,0)" fg:x="793" fg:w="3"/><text x="3.2282%" y="1151.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3 samples, 0.01%)</title><rect x="2.9782%" y="1125" width="0.0113%" height="15" fill="rgb(245,119,33)" fg:x="793" fg:w="3"/><text x="3.2282%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (146 samples, 0.55%)</title><rect x="2.9406%" y="1285" width="0.5483%" height="15" fill="rgb(231,125,12)" fg:x="783" fg:w="146"/><text x="3.1906%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (146 samples, 0.55%)</title><rect x="2.9406%" y="1269" width="0.5483%" height="15" fill="rgb(216,96,41)" fg:x="783" fg:w="146"/><text x="3.1906%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (146 samples, 0.55%)</title><rect x="2.9406%" y="1253" width="0.5483%" height="15" fill="rgb(248,43,45)" fg:x="783" fg:w="146"/><text x="3.1906%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (133 samples, 0.50%)</title><rect x="2.9894%" y="1237" width="0.4995%" height="15" fill="rgb(217,222,7)" fg:x="796" fg:w="133"/><text x="3.2394%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (133 samples, 0.50%)</title><rect x="2.9894%" y="1221" width="0.4995%" height="15" fill="rgb(233,28,6)" fg:x="796" fg:w="133"/><text x="3.2394%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (133 samples, 0.50%)</title><rect x="2.9894%" y="1205" width="0.4995%" height="15" fill="rgb(231,218,15)" fg:x="796" fg:w="133"/><text x="3.2394%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (133 samples, 0.50%)</title><rect x="2.9894%" y="1189" width="0.4995%" height="15" fill="rgb(226,171,48)" fg:x="796" fg:w="133"/><text x="3.2394%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (133 samples, 0.50%)</title><rect x="2.9894%" y="1173" width="0.4995%" height="15" fill="rgb(235,201,9)" fg:x="796" fg:w="133"/><text x="3.2394%" y="1183.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (133 samples, 0.50%)</title><rect x="2.9894%" y="1157" width="0.4995%" height="15" fill="rgb(217,80,15)" fg:x="796" fg:w="133"/><text x="3.2394%" y="1167.50"></text></g><g><title>alloc::alloc::alloc (133 samples, 0.50%)</title><rect x="2.9894%" y="1141" width="0.4995%" height="15" fill="rgb(219,152,8)" fg:x="796" fg:w="133"/><text x="3.2394%" y="1151.50"></text></g><g><title>__rdl_alloc (133 samples, 0.50%)</title><rect x="2.9894%" y="1125" width="0.4995%" height="15" fill="rgb(243,107,38)" fg:x="796" fg:w="133"/><text x="3.2394%" y="1135.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (133 samples, 0.50%)</title><rect x="2.9894%" y="1109" width="0.4995%" height="15" fill="rgb(231,17,5)" fg:x="796" fg:w="133"/><text x="3.2394%" y="1119.50"></text></g><g><title>malloc (133 samples, 0.50%)</title><rect x="2.9894%" y="1093" width="0.4995%" height="15" fill="rgb(209,25,54)" fg:x="796" fg:w="133"/><text x="3.2394%" y="1103.50"></text></g><g><title>_int_malloc (133 samples, 0.50%)</title><rect x="2.9894%" y="1077" width="0.4995%" height="15" fill="rgb(219,0,2)" fg:x="796" fg:w="133"/><text x="3.2394%" y="1087.50"></text></g><g><title>cfree@GLIBC_2.2.5 (88 samples, 0.33%)</title><rect x="3.4889%" y="1141" width="0.3305%" height="15" fill="rgb(246,9,5)" fg:x="929" fg:w="88"/><text x="3.7389%" y="1151.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (88 samples, 0.33%)</title><rect x="3.4889%" y="1125" width="0.3305%" height="15" fill="rgb(226,159,4)" fg:x="929" fg:w="88"/><text x="3.7389%" y="1135.50"></text></g><g><title>malloc_consolidate (88 samples, 0.33%)</title><rect x="3.4889%" y="1109" width="0.3305%" height="15" fill="rgb(219,175,34)" fg:x="929" fg:w="88"/><text x="3.7389%" y="1119.50"></text></g><g><title>unlink_chunk.isra.0 (25 samples, 0.09%)</title><rect x="3.7255%" y="1093" width="0.0939%" height="15" fill="rgb(236,10,46)" fg:x="992" fg:w="25"/><text x="3.9755%" y="1103.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (4 samples, 0.02%)</title><rect x="3.8194%" y="1061" width="0.0150%" height="15" fill="rgb(240,211,16)" fg:x="1017" fg:w="4"/><text x="4.0694%" y="1071.50"></text></g><g><title>malloc_consolidate (4 samples, 0.02%)</title><rect x="3.8194%" y="1045" width="0.0150%" height="15" fill="rgb(205,3,43)" fg:x="1017" fg:w="4"/><text x="4.0694%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;graph_craft::document::NodeInput&gt;&gt; (5 samples, 0.02%)</title><rect x="3.8194%" y="1093" width="0.0188%" height="15" fill="rgb(245,7,22)" fg:x="1017" fg:w="5"/><text x="4.0694%" y="1103.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.02%)</title><rect x="3.8194%" y="1077" width="0.0188%" height="15" fill="rgb(239,132,32)" fg:x="1017" fg:w="5"/><text x="4.0694%" y="1087.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="3.8795%" y="853" width="0.0113%" height="15" fill="rgb(228,202,34)" fg:x="1033" fg:w="3"/><text x="4.1295%" y="863.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.01%)</title><rect x="3.8795%" y="837" width="0.0113%" height="15" fill="rgb(254,200,22)" fg:x="1033" fg:w="3"/><text x="4.1295%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="3.8795%" y="885" width="0.0188%" height="15" fill="rgb(219,10,39)" fg:x="1033" fg:w="5"/><text x="4.1295%" y="895.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (5 samples, 0.02%)</title><rect x="3.8795%" y="869" width="0.0188%" height="15" fill="rgb(226,210,39)" fg:x="1033" fg:w="5"/><text x="4.1295%" y="879.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (6 samples, 0.02%)</title><rect x="3.8983%" y="885" width="0.0225%" height="15" fill="rgb(208,219,16)" fg:x="1038" fg:w="6"/><text x="4.1483%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (6 samples, 0.02%)</title><rect x="3.8983%" y="869" width="0.0225%" height="15" fill="rgb(216,158,51)" fg:x="1038" fg:w="6"/><text x="4.1483%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::Source,usize)&gt; (6 samples, 0.02%)</title><rect x="3.8983%" y="853" width="0.0225%" height="15" fill="rgb(233,14,44)" fg:x="1038" fg:w="6"/><text x="4.1483%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::Source&gt; (6 samples, 0.02%)</title><rect x="3.8983%" y="837" width="0.0225%" height="15" fill="rgb(237,97,39)" fg:x="1038" fg:w="6"/><text x="4.1483%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt; (6 samples, 0.02%)</title><rect x="3.8983%" y="821" width="0.0225%" height="15" fill="rgb(218,198,43)" fg:x="1038" fg:w="6"/><text x="4.1483%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeId&gt;&gt; (6 samples, 0.02%)</title><rect x="3.8983%" y="805" width="0.0225%" height="15" fill="rgb(231,104,20)" fg:x="1038" fg:w="6"/><text x="4.1483%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="3.8983%" y="789" width="0.0225%" height="15" fill="rgb(254,36,13)" fg:x="1038" fg:w="6"/><text x="4.1483%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (6 samples, 0.02%)</title><rect x="3.8983%" y="773" width="0.0225%" height="15" fill="rgb(248,14,50)" fg:x="1038" fg:w="6"/><text x="4.1483%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (19 samples, 0.07%)</title><rect x="3.8795%" y="901" width="0.0714%" height="15" fill="rgb(217,107,29)" fg:x="1033" fg:w="19"/><text x="4.1295%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (8 samples, 0.03%)</title><rect x="3.9208%" y="885" width="0.0300%" height="15" fill="rgb(251,169,33)" fg:x="1044" fg:w="8"/><text x="4.1708%" y="895.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (8 samples, 0.03%)</title><rect x="3.9208%" y="869" width="0.0300%" height="15" fill="rgb(217,108,32)" fg:x="1044" fg:w="8"/><text x="4.1708%" y="879.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (7 samples, 0.03%)</title><rect x="3.9246%" y="853" width="0.0263%" height="15" fill="rgb(219,66,42)" fg:x="1045" fg:w="7"/><text x="4.1746%" y="863.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (7 samples, 0.03%)</title><rect x="3.9246%" y="837" width="0.0263%" height="15" fill="rgb(206,180,7)" fg:x="1045" fg:w="7"/><text x="4.1746%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.03%)</title><rect x="3.9246%" y="821" width="0.0263%" height="15" fill="rgb(208,226,31)" fg:x="1045" fg:w="7"/><text x="4.1746%" y="831.50"></text></g><g><title>_int_free (4 samples, 0.02%)</title><rect x="3.9546%" y="805" width="0.0150%" height="15" fill="rgb(218,26,49)" fg:x="1053" fg:w="4"/><text x="4.2046%" y="815.50"></text></g><g><title>_int_free_create_chunk (10 samples, 0.04%)</title><rect x="3.9884%" y="789" width="0.0376%" height="15" fill="rgb(233,197,48)" fg:x="1062" fg:w="10"/><text x="4.2384%" y="799.50"></text></g><g><title>unlink_chunk.isra.0 (3 samples, 0.01%)</title><rect x="4.0147%" y="773" width="0.0113%" height="15" fill="rgb(252,181,51)" fg:x="1069" fg:w="3"/><text x="4.2647%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::OriginalLocation&gt; (47 samples, 0.18%)</title><rect x="3.8570%" y="997" width="0.1765%" height="15" fill="rgb(253,90,19)" fg:x="1027" fg:w="47"/><text x="4.1070%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graph_craft::document::Source,usize&gt;&gt; (44 samples, 0.17%)</title><rect x="3.8683%" y="981" width="0.1652%" height="15" fill="rgb(215,171,30)" fg:x="1030" fg:w="44"/><text x="4.1183%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graph_craft::document::Source,usize,std::hash::random::RandomState&gt;&gt; (44 samples, 0.17%)</title><rect x="3.8683%" y="965" width="0.1652%" height="15" fill="rgb(214,222,9)" fg:x="1030" fg:w="44"/><text x="4.1183%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graph_craft::document::Source,usize)&gt;&gt; (44 samples, 0.17%)</title><rect x="3.8683%" y="949" width="0.1652%" height="15" fill="rgb(223,3,22)" fg:x="1030" fg:w="44"/><text x="4.1183%" y="959.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.17%)</title><rect x="3.8683%" y="933" width="0.1652%" height="15" fill="rgb(225,196,46)" fg:x="1030" fg:w="44"/><text x="4.1183%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (44 samples, 0.17%)</title><rect x="3.8683%" y="917" width="0.1652%" height="15" fill="rgb(209,110,37)" fg:x="1030" fg:w="44"/><text x="4.1183%" y="927.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (22 samples, 0.08%)</title><rect x="3.9509%" y="901" width="0.0826%" height="15" fill="rgb(249,89,12)" fg:x="1052" fg:w="22"/><text x="4.2009%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 0.08%)</title><rect x="3.9509%" y="885" width="0.0826%" height="15" fill="rgb(226,27,33)" fg:x="1052" fg:w="22"/><text x="4.2009%" y="895.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 0.08%)</title><rect x="3.9509%" y="869" width="0.0826%" height="15" fill="rgb(213,82,22)" fg:x="1052" fg:w="22"/><text x="4.2009%" y="879.50"></text></g><g><title>__rdl_dealloc (22 samples, 0.08%)</title><rect x="3.9509%" y="853" width="0.0826%" height="15" fill="rgb(248,140,0)" fg:x="1052" fg:w="22"/><text x="4.2009%" y="863.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (22 samples, 0.08%)</title><rect x="3.9509%" y="837" width="0.0826%" height="15" fill="rgb(228,106,3)" fg:x="1052" fg:w="22"/><text x="4.2009%" y="847.50"></text></g><g><title>cfree@GLIBC_2.2.5 (22 samples, 0.08%)</title><rect x="3.9509%" y="821" width="0.0826%" height="15" fill="rgb(209,23,37)" fg:x="1052" fg:w="22"/><text x="4.2009%" y="831.50"></text></g><g><title>_int_free_merge_chunk (16 samples, 0.06%)</title><rect x="3.9734%" y="805" width="0.0601%" height="15" fill="rgb(241,93,50)" fg:x="1058" fg:w="16"/><text x="4.2234%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(graph_craft::document::NodeId,bool)&gt;&gt; (25 samples, 0.09%)</title><rect x="4.0485%" y="981" width="0.0939%" height="15" fill="rgb(253,46,43)" fg:x="1078" fg:w="25"/><text x="4.2985%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(graph_craft::document::NodeId,bool)&gt;&gt; (25 samples, 0.09%)</title><rect x="4.0485%" y="965" width="0.0939%" height="15" fill="rgb(226,206,43)" fg:x="1078" fg:w="25"/><text x="4.2985%" y="975.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.09%)</title><rect x="4.0485%" y="949" width="0.0939%" height="15" fill="rgb(217,54,7)" fg:x="1078" fg:w="25"/><text x="4.2985%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.09%)</title><rect x="4.0485%" y="933" width="0.0939%" height="15" fill="rgb(223,5,52)" fg:x="1078" fg:w="25"/><text x="4.2985%" y="943.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.09%)</title><rect x="4.0485%" y="917" width="0.0939%" height="15" fill="rgb(206,52,46)" fg:x="1078" fg:w="25"/><text x="4.2985%" y="927.50"></text></g><g><title>__rdl_dealloc (25 samples, 0.09%)</title><rect x="4.0485%" y="901" width="0.0939%" height="15" fill="rgb(253,136,11)" fg:x="1078" fg:w="25"/><text x="4.2985%" y="911.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (25 samples, 0.09%)</title><rect x="4.0485%" y="885" width="0.0939%" height="15" fill="rgb(208,106,33)" fg:x="1078" fg:w="25"/><text x="4.2985%" y="895.50"></text></g><g><title>cfree@GLIBC_2.2.5 (24 samples, 0.09%)</title><rect x="4.0523%" y="869" width="0.0901%" height="15" fill="rgb(206,54,4)" fg:x="1079" fg:w="24"/><text x="4.3023%" y="879.50"></text></g><g><title>_int_free (14 samples, 0.05%)</title><rect x="4.0898%" y="853" width="0.0526%" height="15" fill="rgb(213,3,15)" fg:x="1089" fg:w="14"/><text x="4.3398%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::value::TaggedValue&gt; (7 samples, 0.03%)</title><rect x="4.1574%" y="965" width="0.0263%" height="15" fill="rgb(252,211,39)" fg:x="1107" fg:w="7"/><text x="4.4074%" y="975.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.01%)</title><rect x="4.1950%" y="949" width="0.0113%" height="15" fill="rgb(223,6,36)" fg:x="1117" fg:w="3"/><text x="4.4450%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::PointModification&gt; (6 samples, 0.02%)</title><rect x="4.2063%" y="949" width="0.0225%" height="15" fill="rgb(252,169,45)" fg:x="1120" fg:w="6"/><text x="4.4563%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2&gt;&gt; (6 samples, 0.02%)</title><rect x="4.2063%" y="933" width="0.0225%" height="15" fill="rgb(212,48,26)" fg:x="1120" fg:w="6"/><text x="4.4563%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2,std::hash::random::RandomState&gt;&gt; (6 samples, 0.02%)</title><rect x="4.2063%" y="917" width="0.0225%" height="15" fill="rgb(251,102,48)" fg:x="1120" fg:w="6"/><text x="4.4563%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2)&gt;&gt; (6 samples, 0.02%)</title><rect x="4.2063%" y="901" width="0.0225%" height="15" fill="rgb(243,208,16)" fg:x="1120" fg:w="6"/><text x="4.4563%" y="911.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="4.2063%" y="885" width="0.0225%" height="15" fill="rgb(219,96,24)" fg:x="1120" fg:w="6"/><text x="4.4563%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (6 samples, 0.02%)</title><rect x="4.2063%" y="869" width="0.0225%" height="15" fill="rgb(219,33,29)" fg:x="1120" fg:w="6"/><text x="4.4563%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (5 samples, 0.02%)</title><rect x="4.2100%" y="853" width="0.0188%" height="15" fill="rgb(223,176,5)" fg:x="1121" fg:w="5"/><text x="4.4600%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.02%)</title><rect x="4.2100%" y="837" width="0.0188%" height="15" fill="rgb(228,140,14)" fg:x="1121" fg:w="5"/><text x="4.4600%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.02%)</title><rect x="4.2100%" y="821" width="0.0188%" height="15" fill="rgb(217,179,31)" fg:x="1121" fg:w="5"/><text x="4.4600%" y="831.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.02%)</title><rect x="4.2100%" y="805" width="0.0188%" height="15" fill="rgb(230,9,30)" fg:x="1121" fg:w="5"/><text x="4.4600%" y="815.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.02%)</title><rect x="4.2100%" y="789" width="0.0188%" height="15" fill="rgb(230,136,20)" fg:x="1121" fg:w="5"/><text x="4.4600%" y="799.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.02%)</title><rect x="4.2100%" y="773" width="0.0188%" height="15" fill="rgb(215,210,22)" fg:x="1121" fg:w="5"/><text x="4.4600%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::RegionModification&gt; (3 samples, 0.01%)</title><rect x="4.2288%" y="949" width="0.0113%" height="15" fill="rgb(218,43,5)" fg:x="1126" fg:w="3"/><text x="4.4788%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graphene_core::vector::vector_data::attributes::SegmentId&gt;&gt; (3 samples, 0.01%)</title><rect x="4.2438%" y="933" width="0.0113%" height="15" fill="rgb(216,11,5)" fg:x="1130" fg:w="3"/><text x="4.4938%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graphene_core::vector::vector_data::attributes::SegmentId&gt;&gt; (3 samples, 0.01%)</title><rect x="4.2438%" y="917" width="0.0113%" height="15" fill="rgb(209,82,29)" fg:x="1130" fg:w="3"/><text x="4.4938%" y="927.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="4.2438%" y="901" width="0.0113%" height="15" fill="rgb(244,115,12)" fg:x="1130" fg:w="3"/><text x="4.4938%" y="911.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="4.2551%" y="757" width="0.0113%" height="15" fill="rgb(222,82,18)" fg:x="1133" fg:w="3"/><text x="4.5051%" y="767.50"></text></g><g><title>_int_free_create_chunk (4 samples, 0.02%)</title><rect x="4.2663%" y="741" width="0.0150%" height="15" fill="rgb(249,227,8)" fg:x="1136" fg:w="4"/><text x="4.5163%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;&gt;&gt; (8 samples, 0.03%)</title><rect x="4.2551%" y="933" width="0.0300%" height="15" fill="rgb(253,141,45)" fg:x="1133" fg:w="8"/><text x="4.5051%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;,std::hash::random::RandomState&gt;&gt; (8 samples, 0.03%)</title><rect x="4.2551%" y="917" width="0.0300%" height="15" fill="rgb(234,184,4)" fg:x="1133" fg:w="8"/><text x="4.5051%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;)&gt;&gt; (8 samples, 0.03%)</title><rect x="4.2551%" y="901" width="0.0300%" height="15" fill="rgb(218,194,23)" fg:x="1133" fg:w="8"/><text x="4.5051%" y="911.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.03%)</title><rect x="4.2551%" y="885" width="0.0300%" height="15" fill="rgb(235,66,41)" fg:x="1133" fg:w="8"/><text x="4.5051%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (8 samples, 0.03%)</title><rect x="4.2551%" y="869" width="0.0300%" height="15" fill="rgb(245,217,1)" fg:x="1133" fg:w="8"/><text x="4.5051%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (8 samples, 0.03%)</title><rect x="4.2551%" y="853" width="0.0300%" height="15" fill="rgb(229,91,1)" fg:x="1133" fg:w="8"/><text x="4.5051%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.03%)</title><rect x="4.2551%" y="837" width="0.0300%" height="15" fill="rgb(207,101,30)" fg:x="1133" fg:w="8"/><text x="4.5051%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.03%)</title><rect x="4.2551%" y="821" width="0.0300%" height="15" fill="rgb(223,82,49)" fg:x="1133" fg:w="8"/><text x="4.5051%" y="831.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.03%)</title><rect x="4.2551%" y="805" width="0.0300%" height="15" fill="rgb(218,167,17)" fg:x="1133" fg:w="8"/><text x="4.5051%" y="815.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.03%)</title><rect x="4.2551%" y="789" width="0.0300%" height="15" fill="rgb(208,103,14)" fg:x="1133" fg:w="8"/><text x="4.5051%" y="799.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 0.03%)</title><rect x="4.2551%" y="773" width="0.0300%" height="15" fill="rgb(238,20,8)" fg:x="1133" fg:w="8"/><text x="4.5051%" y="783.50"></text></g><g><title>_int_free_merge_chunk (5 samples, 0.02%)</title><rect x="4.2663%" y="757" width="0.0188%" height="15" fill="rgb(218,80,54)" fg:x="1136" fg:w="5"/><text x="4.5163%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId&gt;&gt; (6 samples, 0.02%)</title><rect x="4.2851%" y="933" width="0.0225%" height="15" fill="rgb(240,144,17)" fg:x="1141" fg:w="6"/><text x="4.5351%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId,std::hash::random::RandomState&gt;&gt; (6 samples, 0.02%)</title><rect x="4.2851%" y="917" width="0.0225%" height="15" fill="rgb(245,27,50)" fg:x="1141" fg:w="6"/><text x="4.5351%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId)&gt;&gt; (6 samples, 0.02%)</title><rect x="4.2851%" y="901" width="0.0225%" height="15" fill="rgb(251,51,7)" fg:x="1141" fg:w="6"/><text x="4.5351%" y="911.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="4.2851%" y="885" width="0.0225%" height="15" fill="rgb(245,217,29)" fg:x="1141" fg:w="6"/><text x="4.5351%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (6 samples, 0.02%)</title><rect x="4.2851%" y="869" width="0.0225%" height="15" fill="rgb(221,176,29)" fg:x="1141" fg:w="6"/><text x="4.5351%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (5 samples, 0.02%)</title><rect x="4.2889%" y="853" width="0.0188%" height="15" fill="rgb(212,180,24)" fg:x="1142" fg:w="5"/><text x="4.5389%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.02%)</title><rect x="4.2889%" y="837" width="0.0188%" height="15" fill="rgb(254,24,2)" fg:x="1142" fg:w="5"/><text x="4.5389%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.02%)</title><rect x="4.2889%" y="821" width="0.0188%" height="15" fill="rgb(230,100,2)" fg:x="1142" fg:w="5"/><text x="4.5389%" y="831.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.02%)</title><rect x="4.2889%" y="805" width="0.0188%" height="15" fill="rgb(219,142,25)" fg:x="1142" fg:w="5"/><text x="4.5389%" y="815.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.02%)</title><rect x="4.2889%" y="789" width="0.0188%" height="15" fill="rgb(240,73,43)" fg:x="1142" fg:w="5"/><text x="4.5389%" y="799.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.02%)</title><rect x="4.2889%" y="773" width="0.0188%" height="15" fill="rgb(214,114,15)" fg:x="1142" fg:w="5"/><text x="4.5389%" y="783.50"></text></g><g><title>_int_free_merge_chunk (3 samples, 0.01%)</title><rect x="4.2964%" y="757" width="0.0113%" height="15" fill="rgb(207,130,4)" fg:x="1144" fg:w="3"/><text x="4.5464%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::SegmentModification&gt; (19 samples, 0.07%)</title><rect x="4.2401%" y="949" width="0.0714%" height="15" fill="rgb(221,25,40)" fg:x="1129" fg:w="19"/><text x="4.4901%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ConstructionArgs&gt; (76 samples, 0.29%)</title><rect x="4.0335%" y="997" width="0.2854%" height="15" fill="rgb(241,184,7)" fg:x="1074" fg:w="76"/><text x="4.2835%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::memo::MemoHash&lt;graph_craft::document::value::TaggedValue&gt;&gt; (47 samples, 0.18%)</title><rect x="4.1424%" y="981" width="0.1765%" height="15" fill="rgb(235,159,4)" fg:x="1103" fg:w="47"/><text x="4.3924%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::VectorModification&gt; (35 samples, 0.13%)</title><rect x="4.1875%" y="965" width="0.1314%" height="15" fill="rgb(214,87,48)" fg:x="1115" fg:w="35"/><text x="4.4375%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNodeInput&gt; (10 samples, 0.04%)</title><rect x="4.3189%" y="997" width="0.0376%" height="15" fill="rgb(246,198,24)" fg:x="1150" fg:w="10"/><text x="4.5689%" y="1007.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.03%)</title><rect x="4.3227%" y="981" width="0.0338%" height="15" fill="rgb(209,66,40)" fg:x="1151" fg:w="9"/><text x="4.5727%" y="991.50"></text></g><g><title>_int_free (4 samples, 0.02%)</title><rect x="4.3415%" y="965" width="0.0150%" height="15" fill="rgb(233,147,39)" fg:x="1156" fg:w="4"/><text x="4.5915%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.09%)</title><rect x="4.3640%" y="901" width="0.0901%" height="15" fill="rgb(231,145,52)" fg:x="1162" fg:w="24"/><text x="4.6140%" y="911.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.09%)</title><rect x="4.3640%" y="885" width="0.0901%" height="15" fill="rgb(206,20,26)" fg:x="1162" fg:w="24"/><text x="4.6140%" y="895.50"></text></g><g><title>__rdl_dealloc (24 samples, 0.09%)</title><rect x="4.3640%" y="869" width="0.0901%" height="15" fill="rgb(238,220,4)" fg:x="1162" fg:w="24"/><text x="4.6140%" y="879.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (24 samples, 0.09%)</title><rect x="4.3640%" y="853" width="0.0901%" height="15" fill="rgb(252,195,42)" fg:x="1162" fg:w="24"/><text x="4.6140%" y="863.50"></text></g><g><title>cfree@GLIBC_2.2.5 (22 samples, 0.08%)</title><rect x="4.3715%" y="837" width="0.0826%" height="15" fill="rgb(209,10,6)" fg:x="1164" fg:w="22"/><text x="4.6215%" y="847.50"></text></g><g><title>_int_free (14 samples, 0.05%)</title><rect x="4.4015%" y="821" width="0.0526%" height="15" fill="rgb(229,3,52)" fg:x="1172" fg:w="14"/><text x="4.6515%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (258 samples, 0.97%)</title><rect x="3.4889%" y="1173" width="0.9689%" height="15" fill="rgb(253,49,37)" fg:x="929" fg:w="258"/><text x="3.7389%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (258 samples, 0.97%)</title><rect x="3.4889%" y="1157" width="0.9689%" height="15" fill="rgb(240,103,49)" fg:x="929" fg:w="258"/><text x="3.7389%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::GenericShunt&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;graph_craft::document::NodeInput&gt;,graph_craft::document::NodeNetwork::into_proto_networks::{{closure}}&gt;,graph_craft::graphene_compiler::Compiler::compile::{{closure}}&gt;,core::result::Result&lt;core::convert::Infallible,alloc::string::String&gt;&gt;&gt; (170 samples, 0.64%)</title><rect x="3.8194%" y="1141" width="0.6384%" height="15" fill="rgb(250,182,30)" fg:x="1017" fg:w="170"/><text x="4.0694%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;graph_craft::document::NodeInput&gt;,graph_craft::document::NodeNetwork::into_proto_networks::{{closure}}&gt;,graph_craft::graphene_compiler::Compiler::compile::{{closure}}&gt;&gt; (170 samples, 0.64%)</title><rect x="3.8194%" y="1125" width="0.6384%" height="15" fill="rgb(248,8,30)" fg:x="1017" fg:w="170"/><text x="4.0694%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;graph_craft::document::NodeInput&gt;,graph_craft::document::NodeNetwork::into_proto_networks::{{closure}}&gt;&gt; (170 samples, 0.64%)</title><rect x="3.8194%" y="1109" width="0.6384%" height="15" fill="rgb(237,120,30)" fg:x="1017" fg:w="170"/><text x="4.0694%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::NodeNetwork::into_proto_networks::{{closure}}&gt; (165 samples, 0.62%)</title><rect x="3.8382%" y="1093" width="0.6197%" height="15" fill="rgb(221,146,34)" fg:x="1022" fg:w="165"/><text x="4.0882%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (165 samples, 0.62%)</title><rect x="3.8382%" y="1077" width="0.6197%" height="15" fill="rgb(242,55,13)" fg:x="1022" fg:w="165"/><text x="4.0882%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (165 samples, 0.62%)</title><rect x="3.8382%" y="1061" width="0.6197%" height="15" fill="rgb(242,112,31)" fg:x="1022" fg:w="165"/><text x="4.0882%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)]&gt; (165 samples, 0.62%)</title><rect x="3.8382%" y="1045" width="0.6197%" height="15" fill="rgb(249,192,27)" fg:x="1022" fg:w="165"/><text x="4.0882%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt; (165 samples, 0.62%)</title><rect x="3.8382%" y="1029" width="0.6197%" height="15" fill="rgb(208,204,44)" fg:x="1022" fg:w="165"/><text x="4.0882%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNode&gt; (160 samples, 0.60%)</title><rect x="3.8570%" y="1013" width="0.6009%" height="15" fill="rgb(208,93,54)" fg:x="1027" fg:w="160"/><text x="4.1070%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::ProtoNodeIdentifier&gt; (27 samples, 0.10%)</title><rect x="4.3565%" y="997" width="0.1014%" height="15" fill="rgb(242,1,31)" fg:x="1160" fg:w="27"/><text x="4.6065%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (27 samples, 0.10%)</title><rect x="4.3565%" y="981" width="0.1014%" height="15" fill="rgb(241,83,25)" fg:x="1160" fg:w="27"/><text x="4.6065%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (25 samples, 0.09%)</title><rect x="4.3640%" y="965" width="0.0939%" height="15" fill="rgb(205,169,50)" fg:x="1162" fg:w="25"/><text x="4.6140%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (25 samples, 0.09%)</title><rect x="4.3640%" y="949" width="0.0939%" height="15" fill="rgb(239,186,37)" fg:x="1162" fg:w="25"/><text x="4.6140%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (25 samples, 0.09%)</title><rect x="4.3640%" y="933" width="0.0939%" height="15" fill="rgb(205,221,10)" fg:x="1162" fg:w="25"/><text x="4.6140%" y="943.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.09%)</title><rect x="4.3640%" y="917" width="0.0939%" height="15" fill="rgb(218,196,15)" fg:x="1162" fg:w="25"/><text x="4.6140%" y="927.50"></text></g><g><title>cfree@GLIBC_2.2.5 (20 samples, 0.08%)</title><rect x="4.4616%" y="1029" width="0.0751%" height="15" fill="rgb(218,196,35)" fg:x="1188" fg:w="20"/><text x="4.7116%" y="1039.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (20 samples, 0.08%)</title><rect x="4.4616%" y="1013" width="0.0751%" height="15" fill="rgb(233,63,24)" fg:x="1188" fg:w="20"/><text x="4.7116%" y="1023.50"></text></g><g><title>malloc_consolidate (20 samples, 0.08%)</title><rect x="4.4616%" y="997" width="0.0751%" height="15" fill="rgb(225,8,4)" fg:x="1188" fg:w="20"/><text x="4.7116%" y="1007.50"></text></g><g><title>unlink_chunk.isra.0 (5 samples, 0.02%)</title><rect x="4.5180%" y="981" width="0.0188%" height="15" fill="rgb(234,105,35)" fg:x="1203" fg:w="5"/><text x="4.7680%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="4.5405%" y="917" width="0.0113%" height="15" fill="rgb(236,21,32)" fg:x="1209" fg:w="3"/><text x="4.7905%" y="927.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3 samples, 0.01%)</title><rect x="4.5405%" y="901" width="0.0113%" height="15" fill="rgb(228,109,6)" fg:x="1209" fg:w="3"/><text x="4.7905%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt;&gt; (25 samples, 0.09%)</title><rect x="4.5405%" y="1013" width="0.0939%" height="15" fill="rgb(229,215,31)" fg:x="1209" fg:w="25"/><text x="4.7905%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;,std::hash::random::RandomState&gt;&gt; (25 samples, 0.09%)</title><rect x="4.5405%" y="997" width="0.0939%" height="15" fill="rgb(221,52,54)" fg:x="1209" fg:w="25"/><text x="4.7905%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;)&gt;&gt; (25 samples, 0.09%)</title><rect x="4.5405%" y="981" width="0.0939%" height="15" fill="rgb(252,129,43)" fg:x="1209" fg:w="25"/><text x="4.7905%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.09%)</title><rect x="4.5405%" y="965" width="0.0939%" height="15" fill="rgb(248,183,27)" fg:x="1209" fg:w="25"/><text x="4.7905%" y="975.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (25 samples, 0.09%)</title><rect x="4.5405%" y="949" width="0.0939%" height="15" fill="rgb(250,0,22)" fg:x="1209" fg:w="25"/><text x="4.7905%" y="959.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (25 samples, 0.09%)</title><rect x="4.5405%" y="933" width="0.0939%" height="15" fill="rgb(213,166,10)" fg:x="1209" fg:w="25"/><text x="4.7905%" y="943.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (22 samples, 0.08%)</title><rect x="4.5518%" y="917" width="0.0826%" height="15" fill="rgb(207,163,36)" fg:x="1212" fg:w="22"/><text x="4.8018%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (22 samples, 0.08%)</title><rect x="4.5518%" y="901" width="0.0826%" height="15" fill="rgb(208,122,22)" fg:x="1212" fg:w="22"/><text x="4.8018%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;)&gt; (22 samples, 0.08%)</title><rect x="4.5518%" y="885" width="0.0826%" height="15" fill="rgb(207,104,49)" fg:x="1212" fg:w="22"/><text x="4.8018%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt; (22 samples, 0.08%)</title><rect x="4.5518%" y="869" width="0.0826%" height="15" fill="rgb(248,211,50)" fg:x="1212" fg:w="22"/><text x="4.8018%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeId&gt;&gt; (22 samples, 0.08%)</title><rect x="4.5518%" y="853" width="0.0826%" height="15" fill="rgb(217,13,45)" fg:x="1212" fg:w="22"/><text x="4.8018%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.08%)</title><rect x="4.5518%" y="837" width="0.0826%" height="15" fill="rgb(211,216,49)" fg:x="1212" fg:w="22"/><text x="4.8018%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 0.08%)</title><rect x="4.5518%" y="821" width="0.0826%" height="15" fill="rgb(221,58,53)" fg:x="1212" fg:w="22"/><text x="4.8018%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 0.08%)</title><rect x="4.5518%" y="805" width="0.0826%" height="15" fill="rgb(220,112,41)" fg:x="1212" fg:w="22"/><text x="4.8018%" y="815.50"></text></g><g><title>__rdl_dealloc (22 samples, 0.08%)</title><rect x="4.5518%" y="789" width="0.0826%" height="15" fill="rgb(236,38,28)" fg:x="1212" fg:w="22"/><text x="4.8018%" y="799.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (22 samples, 0.08%)</title><rect x="4.5518%" y="773" width="0.0826%" height="15" fill="rgb(227,195,22)" fg:x="1212" fg:w="22"/><text x="4.8018%" y="783.50"></text></g><g><title>cfree@GLIBC_2.2.5 (21 samples, 0.08%)</title><rect x="4.5555%" y="757" width="0.0789%" height="15" fill="rgb(214,55,33)" fg:x="1213" fg:w="21"/><text x="4.8055%" y="767.50"></text></g><g><title>_int_free (12 samples, 0.05%)</title><rect x="4.5893%" y="741" width="0.0451%" height="15" fill="rgb(248,80,13)" fg:x="1222" fg:w="12"/><text x="4.8393%" y="751.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.07%)</title><rect x="4.6832%" y="997" width="0.0676%" height="15" fill="rgb(238,52,6)" fg:x="1247" fg:w="18"/><text x="4.9332%" y="1007.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (14 samples, 0.05%)</title><rect x="4.6982%" y="981" width="0.0526%" height="15" fill="rgb(224,198,47)" fg:x="1251" fg:w="14"/><text x="4.9482%" y="991.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (14 samples, 0.05%)</title><rect x="4.6982%" y="965" width="0.0526%" height="15" fill="rgb(233,171,20)" fg:x="1251" fg:w="14"/><text x="4.9482%" y="975.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (14 samples, 0.05%)</title><rect x="4.6982%" y="949" width="0.0526%" height="15" fill="rgb(241,30,25)" fg:x="1251" fg:w="14"/><text x="4.9482%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8 samples, 0.03%)</title><rect x="4.8785%" y="933" width="0.0300%" height="15" fill="rgb(207,171,38)" fg:x="1299" fg:w="8"/><text x="5.1285%" y="943.50"></text></g><g><title>alloc::alloc::Global::grow_impl (8 samples, 0.03%)</title><rect x="4.8785%" y="917" width="0.0300%" height="15" fill="rgb(234,70,1)" fg:x="1299" fg:w="8"/><text x="5.1285%" y="927.50"></text></g><g><title>alloc::alloc::realloc (8 samples, 0.03%)</title><rect x="4.8785%" y="901" width="0.0300%" height="15" fill="rgb(232,178,18)" fg:x="1299" fg:w="8"/><text x="5.1285%" y="911.50"></text></g><g><title>__rdl_realloc (8 samples, 0.03%)</title><rect x="4.8785%" y="885" width="0.0300%" height="15" fill="rgb(241,78,40)" fg:x="1299" fg:w="8"/><text x="5.1285%" y="895.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (8 samples, 0.03%)</title><rect x="4.8785%" y="869" width="0.0300%" height="15" fill="rgb(222,35,25)" fg:x="1299" fg:w="8"/><text x="5.1285%" y="879.50"></text></g><g><title>realloc (8 samples, 0.03%)</title><rect x="4.8785%" y="853" width="0.0300%" height="15" fill="rgb(207,92,16)" fg:x="1299" fg:w="8"/><text x="5.1285%" y="863.50"></text></g><g><title>_int_realloc (6 samples, 0.02%)</title><rect x="4.8860%" y="837" width="0.0225%" height="15" fill="rgb(216,59,51)" fg:x="1301" fg:w="6"/><text x="5.1360%" y="847.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="4.8935%" y="821" width="0.0150%" height="15" fill="rgb(213,80,28)" fg:x="1303" fg:w="4"/><text x="5.1435%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4 samples, 0.02%)</title><rect x="4.9086%" y="933" width="0.0150%" height="15" fill="rgb(220,93,7)" fg:x="1307" fg:w="4"/><text x="5.1586%" y="943.50"></text></g><g><title>alloc::raw_vec::finish_grow (93 samples, 0.35%)</title><rect x="4.8410%" y="949" width="0.3493%" height="15" fill="rgb(225,24,44)" fg:x="1289" fg:w="93"/><text x="5.0910%" y="959.50"></text></g><g><title>malloc (71 samples, 0.27%)</title><rect x="4.9236%" y="933" width="0.2666%" height="15" fill="rgb(243,74,40)" fg:x="1311" fg:w="71"/><text x="5.1736%" y="943.50"></text></g><g><title>_int_malloc (41 samples, 0.15%)</title><rect x="5.0362%" y="917" width="0.1540%" height="15" fill="rgb(228,39,7)" fg:x="1341" fg:w="41"/><text x="5.2862%" y="927.50"></text></g><g><title>unlink_chunk.isra.0 (4 samples, 0.02%)</title><rect x="5.1752%" y="901" width="0.0150%" height="15" fill="rgb(227,79,8)" fg:x="1378" fg:w="4"/><text x="5.4252%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (102 samples, 0.38%)</title><rect x="4.8184%" y="981" width="0.3831%" height="15" fill="rgb(236,58,11)" fg:x="1283" fg:w="102"/><text x="5.0684%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (100 samples, 0.38%)</title><rect x="4.8259%" y="965" width="0.3756%" height="15" fill="rgb(249,63,35)" fg:x="1285" fg:w="100"/><text x="5.0759%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (123 samples, 0.46%)</title><rect x="4.7508%" y="997" width="0.4619%" height="15" fill="rgb(252,114,16)" fg:x="1265" fg:w="123"/><text x="5.0008%" y="1007.50"></text></g><g><title>core::ptr::write (3 samples, 0.01%)</title><rect x="5.2015%" y="981" width="0.0113%" height="15" fill="rgb(254,151,24)" fg:x="1385" fg:w="3"/><text x="5.4515%" y="991.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.11%)</title><rect x="6.8502%" y="965" width="0.1052%" height="15" fill="rgb(253,54,39)" fg:x="1824" fg:w="28"/><text x="7.1002%" y="975.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (22 samples, 0.08%)</title><rect x="6.8727%" y="949" width="0.0826%" height="15" fill="rgb(243,25,45)" fg:x="1830" fg:w="22"/><text x="7.1227%" y="959.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (936 samples, 3.52%)</title><rect x="5.2128%" y="981" width="3.5152%" height="15" fill="rgb(234,134,9)" fg:x="1388" fg:w="936"/><text x="5.4628%" y="991.50">&lt;co..</text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref::_{{closure}} (472 samples, 1.77%)</title><rect x="6.9553%" y="965" width="1.7726%" height="15" fill="rgb(227,166,31)" fg:x="1852" fg:w="472"/><text x="7.2053%" y="975.50">g..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (472 samples, 1.77%)</title><rect x="6.9553%" y="949" width="1.7726%" height="15" fill="rgb(245,143,41)" fg:x="1852" fg:w="472"/><text x="7.2053%" y="959.50">c..</text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (472 samples, 1.77%)</title><rect x="6.9553%" y="933" width="1.7726%" height="15" fill="rgb(238,181,32)" fg:x="1852" fg:w="472"/><text x="7.2053%" y="943.50">&lt;..</text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref (937 samples, 3.52%)</title><rect x="5.2128%" y="997" width="3.5190%" height="15" fill="rgb(224,113,18)" fg:x="1388" fg:w="937"/><text x="5.4628%" y="1007.50">gra..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (8 samples, 0.03%)</title><rect x="8.7317%" y="917" width="0.0300%" height="15" fill="rgb(240,229,28)" fg:x="2325" fg:w="8"/><text x="8.9817%" y="927.50"></text></g><g><title>core::ptr::write (8 samples, 0.03%)</title><rect x="8.7317%" y="901" width="0.0300%" height="15" fill="rgb(250,185,3)" fg:x="2325" fg:w="8"/><text x="8.9817%" y="911.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (9 samples, 0.03%)</title><rect x="8.7317%" y="933" width="0.0338%" height="15" fill="rgb(212,59,25)" fg:x="2325" fg:w="9"/><text x="8.9817%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (11 samples, 0.04%)</title><rect x="8.7655%" y="917" width="0.0413%" height="15" fill="rgb(221,87,20)" fg:x="2334" fg:w="11"/><text x="9.0155%" y="927.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (9 samples, 0.03%)</title><rect x="8.7730%" y="901" width="0.0338%" height="15" fill="rgb(213,74,28)" fg:x="2336" fg:w="9"/><text x="9.0230%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (8 samples, 0.03%)</title><rect x="8.7768%" y="885" width="0.0300%" height="15" fill="rgb(224,132,34)" fg:x="2337" fg:w="8"/><text x="9.0268%" y="895.50"></text></g><g><title>hashbrown::raw::is_full (8 samples, 0.03%)</title><rect x="8.7768%" y="869" width="0.0300%" height="15" fill="rgb(222,101,24)" fg:x="2337" fg:w="8"/><text x="9.0268%" y="879.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (21 samples, 0.08%)</title><rect x="8.7317%" y="997" width="0.0789%" height="15" fill="rgb(254,142,4)" fg:x="2325" fg:w="21"/><text x="8.9817%" y="1007.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (21 samples, 0.08%)</title><rect x="8.7317%" y="981" width="0.0789%" height="15" fill="rgb(230,229,49)" fg:x="2325" fg:w="21"/><text x="8.9817%" y="991.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (21 samples, 0.08%)</title><rect x="8.7317%" y="965" width="0.0789%" height="15" fill="rgb(238,70,47)" fg:x="2325" fg:w="21"/><text x="8.9817%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (21 samples, 0.08%)</title><rect x="8.7317%" y="949" width="0.0789%" height="15" fill="rgb(231,160,17)" fg:x="2325" fg:w="21"/><text x="8.9817%" y="959.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (12 samples, 0.05%)</title><rect x="8.7655%" y="933" width="0.0451%" height="15" fill="rgb(218,68,53)" fg:x="2334" fg:w="12"/><text x="9.0155%" y="943.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="8.8482%" y="757" width="0.0113%" height="15" fill="rgb(236,111,10)" fg:x="2356" fg:w="3"/><text x="9.0982%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.02%)</title><rect x="8.8407%" y="773" width="0.0225%" height="15" fill="rgb(224,34,41)" fg:x="2354" fg:w="6"/><text x="9.0907%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.02%)</title><rect x="8.8895%" y="757" width="0.0225%" height="15" fill="rgb(241,118,19)" fg:x="2367" fg:w="6"/><text x="9.1395%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (28 samples, 0.11%)</title><rect x="8.8219%" y="821" width="0.1052%" height="15" fill="rgb(238,129,25)" fg:x="2349" fg:w="28"/><text x="9.0719%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (28 samples, 0.11%)</title><rect x="8.8219%" y="805" width="0.1052%" height="15" fill="rgb(238,22,31)" fg:x="2349" fg:w="28"/><text x="9.0719%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (28 samples, 0.11%)</title><rect x="8.8219%" y="789" width="0.1052%" height="15" fill="rgb(222,174,48)" fg:x="2349" fg:w="28"/><text x="9.0719%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (17 samples, 0.06%)</title><rect x="8.8632%" y="773" width="0.0638%" height="15" fill="rgb(206,152,40)" fg:x="2360" fg:w="17"/><text x="9.1132%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.02%)</title><rect x="8.9120%" y="757" width="0.0150%" height="15" fill="rgb(218,99,54)" fg:x="2373" fg:w="4"/><text x="9.1620%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="8.9458%" y="709" width="0.0113%" height="15" fill="rgb(220,174,26)" fg:x="2382" fg:w="3"/><text x="9.1958%" y="719.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (38 samples, 0.14%)</title><rect x="8.8219%" y="869" width="0.1427%" height="15" fill="rgb(245,116,9)" fg:x="2349" fg:w="38"/><text x="9.0719%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (38 samples, 0.14%)</title><rect x="8.8219%" y="853" width="0.1427%" height="15" fill="rgb(209,72,35)" fg:x="2349" fg:w="38"/><text x="9.0719%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (38 samples, 0.14%)</title><rect x="8.8219%" y="837" width="0.1427%" height="15" fill="rgb(226,126,21)" fg:x="2349" fg:w="38"/><text x="9.0719%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.04%)</title><rect x="8.9270%" y="821" width="0.0376%" height="15" fill="rgb(227,192,1)" fg:x="2377" fg:w="10"/><text x="9.1770%" y="831.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (10 samples, 0.04%)</title><rect x="8.9270%" y="805" width="0.0376%" height="15" fill="rgb(237,180,29)" fg:x="2377" fg:w="10"/><text x="9.1770%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (10 samples, 0.04%)</title><rect x="8.9270%" y="789" width="0.0376%" height="15" fill="rgb(230,197,35)" fg:x="2377" fg:w="10"/><text x="9.1770%" y="799.50"></text></g><g><title>core::hash::Hasher::write_u64 (10 samples, 0.04%)</title><rect x="8.9270%" y="773" width="0.0376%" height="15" fill="rgb(246,193,31)" fg:x="2377" fg:w="10"/><text x="9.1770%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.04%)</title><rect x="8.9270%" y="757" width="0.0376%" height="15" fill="rgb(241,36,4)" fg:x="2377" fg:w="10"/><text x="9.1770%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.04%)</title><rect x="8.9270%" y="741" width="0.0376%" height="15" fill="rgb(241,130,17)" fg:x="2377" fg:w="10"/><text x="9.1770%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.04%)</title><rect x="8.9270%" y="725" width="0.0376%" height="15" fill="rgb(206,137,32)" fg:x="2377" fg:w="10"/><text x="9.1770%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (39 samples, 0.15%)</title><rect x="8.8219%" y="885" width="0.1465%" height="15" fill="rgb(237,228,51)" fg:x="2349" fg:w="39"/><text x="9.0719%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (4 samples, 0.02%)</title><rect x="8.9759%" y="853" width="0.0150%" height="15" fill="rgb(243,6,42)" fg:x="2390" fg:w="4"/><text x="9.2259%" y="863.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.02%)</title><rect x="9.0021%" y="837" width="0.0150%" height="15" fill="rgb(251,74,28)" fg:x="2397" fg:w="4"/><text x="9.2521%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (17 samples, 0.06%)</title><rect x="8.9909%" y="853" width="0.0638%" height="15" fill="rgb(218,20,49)" fg:x="2394" fg:w="17"/><text x="9.2409%" y="863.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (10 samples, 0.04%)</title><rect x="9.0172%" y="837" width="0.0376%" height="15" fill="rgb(238,28,14)" fg:x="2401" fg:w="10"/><text x="9.2672%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (10 samples, 0.04%)</title><rect x="9.0172%" y="821" width="0.0376%" height="15" fill="rgb(229,40,46)" fg:x="2401" fg:w="10"/><text x="9.2672%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (15 samples, 0.06%)</title><rect x="9.0547%" y="853" width="0.0563%" height="15" fill="rgb(244,195,20)" fg:x="2411" fg:w="15"/><text x="9.3047%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (37 samples, 0.14%)</title><rect x="8.9759%" y="885" width="0.1390%" height="15" fill="rgb(253,56,35)" fg:x="2390" fg:w="37"/><text x="9.2259%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (37 samples, 0.14%)</title><rect x="8.9759%" y="869" width="0.1390%" height="15" fill="rgb(210,149,44)" fg:x="2390" fg:w="37"/><text x="9.2259%" y="879.50"></text></g><g><title>malloc_consolidate (13 samples, 0.05%)</title><rect x="9.3815%" y="709" width="0.0488%" height="15" fill="rgb(240,135,12)" fg:x="2498" fg:w="13"/><text x="9.6315%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (172 samples, 0.65%)</title><rect x="8.8106%" y="965" width="0.6460%" height="15" fill="rgb(251,24,50)" fg:x="2346" fg:w="172"/><text x="9.0606%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (172 samples, 0.65%)</title><rect x="8.8106%" y="949" width="0.6460%" height="15" fill="rgb(243,200,47)" fg:x="2346" fg:w="172"/><text x="9.0606%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (172 samples, 0.65%)</title><rect x="8.8106%" y="933" width="0.6460%" height="15" fill="rgb(224,166,26)" fg:x="2346" fg:w="172"/><text x="9.0606%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (171 samples, 0.64%)</title><rect x="8.8144%" y="917" width="0.6422%" height="15" fill="rgb(233,0,47)" fg:x="2347" fg:w="171"/><text x="9.0644%" y="927.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (171 samples, 0.64%)</title><rect x="8.8144%" y="901" width="0.6422%" height="15" fill="rgb(253,80,5)" fg:x="2347" fg:w="171"/><text x="9.0644%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (91 samples, 0.34%)</title><rect x="9.1148%" y="885" width="0.3418%" height="15" fill="rgb(214,133,25)" fg:x="2427" fg:w="91"/><text x="9.3648%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (91 samples, 0.34%)</title><rect x="9.1148%" y="869" width="0.3418%" height="15" fill="rgb(209,27,14)" fg:x="2427" fg:w="91"/><text x="9.3648%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (91 samples, 0.34%)</title><rect x="9.1148%" y="853" width="0.3418%" height="15" fill="rgb(219,102,51)" fg:x="2427" fg:w="91"/><text x="9.3648%" y="863.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (90 samples, 0.34%)</title><rect x="9.1186%" y="837" width="0.3380%" height="15" fill="rgb(237,18,16)" fg:x="2428" fg:w="90"/><text x="9.3686%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (90 samples, 0.34%)</title><rect x="9.1186%" y="821" width="0.3380%" height="15" fill="rgb(241,85,17)" fg:x="2428" fg:w="90"/><text x="9.3686%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (90 samples, 0.34%)</title><rect x="9.1186%" y="805" width="0.3380%" height="15" fill="rgb(236,90,42)" fg:x="2428" fg:w="90"/><text x="9.3686%" y="815.50"></text></g><g><title>alloc::alloc::alloc (90 samples, 0.34%)</title><rect x="9.1186%" y="789" width="0.3380%" height="15" fill="rgb(249,57,21)" fg:x="2428" fg:w="90"/><text x="9.3686%" y="799.50"></text></g><g><title>__rdl_alloc (90 samples, 0.34%)</title><rect x="9.1186%" y="773" width="0.3380%" height="15" fill="rgb(243,12,36)" fg:x="2428" fg:w="90"/><text x="9.3686%" y="783.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (90 samples, 0.34%)</title><rect x="9.1186%" y="757" width="0.3380%" height="15" fill="rgb(253,128,47)" fg:x="2428" fg:w="90"/><text x="9.3686%" y="767.50"></text></g><g><title>malloc (90 samples, 0.34%)</title><rect x="9.1186%" y="741" width="0.3380%" height="15" fill="rgb(207,33,20)" fg:x="2428" fg:w="90"/><text x="9.3686%" y="751.50"></text></g><g><title>_int_malloc (90 samples, 0.34%)</title><rect x="9.1186%" y="725" width="0.3380%" height="15" fill="rgb(233,215,35)" fg:x="2428" fg:w="90"/><text x="9.3686%" y="735.50"></text></g><g><title>unlink_chunk.isra.0 (7 samples, 0.03%)</title><rect x="9.4303%" y="709" width="0.0263%" height="15" fill="rgb(249,188,52)" fg:x="2511" fg:w="7"/><text x="9.6803%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.02%)</title><rect x="9.5129%" y="885" width="0.0188%" height="15" fill="rgb(225,12,32)" fg:x="2533" fg:w="5"/><text x="9.7629%" y="895.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8 samples, 0.03%)</title><rect x="9.5505%" y="869" width="0.0300%" height="15" fill="rgb(247,98,14)" fg:x="2543" fg:w="8"/><text x="9.8005%" y="879.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (31 samples, 0.12%)</title><rect x="9.4753%" y="933" width="0.1164%" height="15" fill="rgb(247,219,48)" fg:x="2523" fg:w="31"/><text x="9.7253%" y="943.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (31 samples, 0.12%)</title><rect x="9.4753%" y="917" width="0.1164%" height="15" fill="rgb(253,60,48)" fg:x="2523" fg:w="31"/><text x="9.7253%" y="927.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (31 samples, 0.12%)</title><rect x="9.4753%" y="901" width="0.1164%" height="15" fill="rgb(245,15,52)" fg:x="2523" fg:w="31"/><text x="9.7253%" y="911.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (16 samples, 0.06%)</title><rect x="9.5317%" y="885" width="0.0601%" height="15" fill="rgb(220,133,28)" fg:x="2538" fg:w="16"/><text x="9.7817%" y="895.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.01%)</title><rect x="9.5805%" y="869" width="0.0113%" height="15" fill="rgb(217,180,4)" fg:x="2551" fg:w="3"/><text x="9.8305%" y="879.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (31 samples, 0.12%)</title><rect x="9.5918%" y="933" width="0.1164%" height="15" fill="rgb(251,24,1)" fg:x="2554" fg:w="31"/><text x="9.8418%" y="943.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (21 samples, 0.08%)</title><rect x="9.6293%" y="917" width="0.0789%" height="15" fill="rgb(212,185,49)" fg:x="2564" fg:w="21"/><text x="9.8793%" y="927.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (21 samples, 0.08%)</title><rect x="9.6293%" y="901" width="0.0789%" height="15" fill="rgb(215,175,22)" fg:x="2564" fg:w="21"/><text x="9.8793%" y="911.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (21 samples, 0.08%)</title><rect x="9.6293%" y="885" width="0.0789%" height="15" fill="rgb(250,205,14)" fg:x="2564" fg:w="21"/><text x="9.8793%" y="895.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::hash::Hash&gt;::hash (9 samples, 0.03%)</title><rect x="9.7082%" y="917" width="0.0338%" height="15" fill="rgb(225,211,22)" fg:x="2585" fg:w="9"/><text x="9.9582%" y="927.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (9 samples, 0.03%)</title><rect x="9.7082%" y="901" width="0.0338%" height="15" fill="rgb(251,179,42)" fg:x="2585" fg:w="9"/><text x="9.9582%" y="911.50"></text></g><g><title>core::hash::Hasher::write_u64 (9 samples, 0.03%)</title><rect x="9.7082%" y="885" width="0.0338%" height="15" fill="rgb(208,216,51)" fg:x="2585" fg:w="9"/><text x="9.9582%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="9.7082%" y="869" width="0.0338%" height="15" fill="rgb(235,36,11)" fg:x="2585" fg:w="9"/><text x="9.9582%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="9.7082%" y="853" width="0.0338%" height="15" fill="rgb(213,189,28)" fg:x="2585" fg:w="9"/><text x="9.9582%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="9.7082%" y="837" width="0.0338%" height="15" fill="rgb(227,203,42)" fg:x="2585" fg:w="9"/><text x="9.9582%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (81 samples, 0.30%)</title><rect x="9.4566%" y="965" width="0.3042%" height="15" fill="rgb(244,72,36)" fg:x="2518" fg:w="81"/><text x="9.7066%" y="975.50"></text></g><g><title>core::hash::BuildHasher::hash_one (76 samples, 0.29%)</title><rect x="9.4753%" y="949" width="0.2854%" height="15" fill="rgb(213,53,17)" fg:x="2523" fg:w="76"/><text x="9.7253%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (14 samples, 0.05%)</title><rect x="9.7082%" y="933" width="0.0526%" height="15" fill="rgb(207,167,3)" fg:x="2585" fg:w="14"/><text x="9.9582%" y="943.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (5 samples, 0.02%)</title><rect x="9.7420%" y="917" width="0.0188%" height="15" fill="rgb(216,98,30)" fg:x="2594" fg:w="5"/><text x="9.9920%" y="927.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (5 samples, 0.02%)</title><rect x="9.7420%" y="901" width="0.0188%" height="15" fill="rgb(236,123,15)" fg:x="2594" fg:w="5"/><text x="9.9920%" y="911.50"></text></g><g><title>core::hash::Hasher::write_u64 (5 samples, 0.02%)</title><rect x="9.7420%" y="885" width="0.0188%" height="15" fill="rgb(248,81,50)" fg:x="2594" fg:w="5"/><text x="9.9920%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="9.7420%" y="869" width="0.0188%" height="15" fill="rgb(214,120,4)" fg:x="2594" fg:w="5"/><text x="9.9920%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="9.7420%" y="853" width="0.0188%" height="15" fill="rgb(208,179,34)" fg:x="2594" fg:w="5"/><text x="9.9920%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="9.7420%" y="837" width="0.0188%" height="15" fill="rgb(227,140,7)" fg:x="2594" fg:w="5"/><text x="9.9920%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.03%)</title><rect x="9.7795%" y="933" width="0.0263%" height="15" fill="rgb(214,22,6)" fg:x="2604" fg:w="7"/><text x="10.0295%" y="943.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 0.03%)</title><rect x="9.7795%" y="917" width="0.0263%" height="15" fill="rgb(207,137,27)" fg:x="2604" fg:w="7"/><text x="10.0295%" y="927.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (5 samples, 0.02%)</title><rect x="9.8096%" y="933" width="0.0188%" height="15" fill="rgb(210,8,46)" fg:x="2612" fg:w="5"/><text x="10.0596%" y="943.50"></text></g><g><title>hashbrown::raw::h2 (6 samples, 0.02%)</title><rect x="9.8284%" y="933" width="0.0225%" height="15" fill="rgb(240,16,54)" fg:x="2617" fg:w="6"/><text x="10.0784%" y="943.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (19 samples, 0.07%)</title><rect x="9.8509%" y="933" width="0.0714%" height="15" fill="rgb(211,209,29)" fg:x="2623" fg:w="19"/><text x="10.1009%" y="943.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (19 samples, 0.07%)</title><rect x="9.8509%" y="917" width="0.0714%" height="15" fill="rgb(226,228,24)" fg:x="2623" fg:w="19"/><text x="10.1009%" y="927.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::collect_outwards_edges (1,412 samples, 5.30%)</title><rect x="4.6344%" y="1013" width="5.3029%" height="15" fill="rgb(222,84,9)" fg:x="1234" fg:w="1412"/><text x="4.8844%" y="1023.50">graph_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (300 samples, 1.13%)</title><rect x="8.8106%" y="997" width="1.1267%" height="15" fill="rgb(234,203,30)" fg:x="2346" fg:w="300"/><text x="9.0606%" y="1007.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (300 samples, 1.13%)</title><rect x="8.8106%" y="981" width="1.1267%" height="15" fill="rgb(238,109,14)" fg:x="2346" fg:w="300"/><text x="9.0606%" y="991.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (47 samples, 0.18%)</title><rect x="9.7608%" y="965" width="0.1765%" height="15" fill="rgb(233,206,34)" fg:x="2599" fg:w="47"/><text x="10.0108%" y="975.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (47 samples, 0.18%)</title><rect x="9.7608%" y="949" width="0.1765%" height="15" fill="rgb(220,167,47)" fg:x="2599" fg:w="47"/><text x="10.0108%" y="959.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (4 samples, 0.02%)</title><rect x="9.9223%" y="933" width="0.0150%" height="15" fill="rgb(238,105,10)" fg:x="2642" fg:w="4"/><text x="10.1723%" y="943.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.02%)</title><rect x="9.9223%" y="917" width="0.0150%" height="15" fill="rgb(213,227,17)" fg:x="2642" fg:w="4"/><text x="10.1723%" y="927.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.02%)</title><rect x="9.9223%" y="901" width="0.0150%" height="15" fill="rgb(217,132,38)" fg:x="2642" fg:w="4"/><text x="10.1723%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (12 samples, 0.05%)</title><rect x="9.9485%" y="997" width="0.0451%" height="15" fill="rgb(242,146,4)" fg:x="2649" fg:w="12"/><text x="10.1985%" y="1007.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (12 samples, 0.05%)</title><rect x="9.9485%" y="981" width="0.0451%" height="15" fill="rgb(212,61,9)" fg:x="2649" fg:w="12"/><text x="10.1985%" y="991.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (12 samples, 0.05%)</title><rect x="9.9485%" y="965" width="0.0451%" height="15" fill="rgb(247,126,22)" fg:x="2649" fg:w="12"/><text x="10.1985%" y="975.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.03%)</title><rect x="10.0086%" y="981" width="0.0300%" height="15" fill="rgb(220,196,2)" fg:x="2665" fg:w="8"/><text x="10.2586%" y="991.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.03%)</title><rect x="10.0086%" y="965" width="0.0300%" height="15" fill="rgb(208,46,4)" fg:x="2665" fg:w="8"/><text x="10.2586%" y="975.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.03%)</title><rect x="10.0086%" y="949" width="0.0300%" height="15" fill="rgb(252,104,46)" fg:x="2665" fg:w="8"/><text x="10.2586%" y="959.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (6 samples, 0.02%)</title><rect x="10.0161%" y="933" width="0.0225%" height="15" fill="rgb(237,152,48)" fg:x="2667" fg:w="6"/><text x="10.2661%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (6 samples, 0.02%)</title><rect x="10.0161%" y="917" width="0.0225%" height="15" fill="rgb(221,59,37)" fg:x="2667" fg:w="6"/><text x="10.2661%" y="927.50"></text></g><g><title>graph_craft::proto::ProtoNode::map_ids::_{{closure}} (6 samples, 0.02%)</title><rect x="10.0161%" y="901" width="0.0225%" height="15" fill="rgb(209,202,51)" fg:x="2667" fg:w="6"/><text x="10.2661%" y="911.50"></text></g><g><title>graph_craft::proto::ProtoNode::map_ids (11 samples, 0.04%)</title><rect x="10.0011%" y="997" width="0.0413%" height="15" fill="rgb(228,81,30)" fg:x="2663" fg:w="11"/><text x="10.2511%" y="1007.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (16 samples, 0.06%)</title><rect x="10.0575%" y="917" width="0.0601%" height="15" fill="rgb(227,42,39)" fg:x="2678" fg:w="16"/><text x="10.3075%" y="927.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (16 samples, 0.06%)</title><rect x="10.0575%" y="901" width="0.0601%" height="15" fill="rgb(221,26,2)" fg:x="2678" fg:w="16"/><text x="10.3075%" y="911.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (16 samples, 0.06%)</title><rect x="10.0575%" y="885" width="0.0601%" height="15" fill="rgb(254,61,31)" fg:x="2678" fg:w="16"/><text x="10.3075%" y="895.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (10 samples, 0.04%)</title><rect x="10.0800%" y="869" width="0.0376%" height="15" fill="rgb(222,173,38)" fg:x="2684" fg:w="10"/><text x="10.3300%" y="879.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.02%)</title><rect x="10.1025%" y="853" width="0.0150%" height="15" fill="rgb(218,50,12)" fg:x="2690" fg:w="4"/><text x="10.3525%" y="863.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.01%)</title><rect x="10.1589%" y="805" width="0.0113%" height="15" fill="rgb(223,88,40)" fg:x="2705" fg:w="3"/><text x="10.4089%" y="815.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.05%)</title><rect x="10.1213%" y="853" width="0.0526%" height="15" fill="rgb(237,54,19)" fg:x="2695" fg:w="14"/><text x="10.3713%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.05%)</title><rect x="10.1213%" y="837" width="0.0526%" height="15" fill="rgb(251,129,25)" fg:x="2695" fg:w="14"/><text x="10.3713%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.05%)</title><rect x="10.1213%" y="821" width="0.0526%" height="15" fill="rgb(238,97,19)" fg:x="2695" fg:w="14"/><text x="10.3713%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (37 samples, 0.14%)</title><rect x="10.0462%" y="949" width="0.1390%" height="15" fill="rgb(240,169,18)" fg:x="2675" fg:w="37"/><text x="10.2962%" y="959.50"></text></g><g><title>core::hash::BuildHasher::hash_one (35 samples, 0.13%)</title><rect x="10.0537%" y="933" width="0.1314%" height="15" fill="rgb(230,187,49)" fg:x="2677" fg:w="35"/><text x="10.3037%" y="943.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (17 samples, 0.06%)</title><rect x="10.1213%" y="917" width="0.0638%" height="15" fill="rgb(209,44,26)" fg:x="2695" fg:w="17"/><text x="10.3713%" y="927.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (17 samples, 0.06%)</title><rect x="10.1213%" y="901" width="0.0638%" height="15" fill="rgb(244,0,6)" fg:x="2695" fg:w="17"/><text x="10.3713%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (17 samples, 0.06%)</title><rect x="10.1213%" y="885" width="0.0638%" height="15" fill="rgb(248,18,21)" fg:x="2695" fg:w="17"/><text x="10.3713%" y="895.50"></text></g><g><title>core::hash::Hasher::write_u64 (17 samples, 0.06%)</title><rect x="10.1213%" y="869" width="0.0638%" height="15" fill="rgb(245,180,19)" fg:x="2695" fg:w="17"/><text x="10.3713%" y="879.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_ne_bytes (3 samples, 0.01%)</title><rect x="10.1739%" y="853" width="0.0113%" height="15" fill="rgb(252,118,36)" fg:x="2709" fg:w="3"/><text x="10.4239%" y="863.50"></text></g><g><title>hashbrown::raw::h2 (10 samples, 0.04%)</title><rect x="10.2114%" y="901" width="0.0376%" height="15" fill="rgb(210,224,19)" fg:x="2719" fg:w="10"/><text x="10.4614%" y="911.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::replace_node_id (87 samples, 0.33%)</title><rect x="9.9373%" y="1013" width="0.3267%" height="15" fill="rgb(218,30,24)" fg:x="2646" fg:w="87"/><text x="10.1873%" y="1023.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (59 samples, 0.22%)</title><rect x="10.0424%" y="997" width="0.2216%" height="15" fill="rgb(219,75,50)" fg:x="2674" fg:w="59"/><text x="10.2924%" y="1007.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (59 samples, 0.22%)</title><rect x="10.0424%" y="981" width="0.2216%" height="15" fill="rgb(234,72,50)" fg:x="2674" fg:w="59"/><text x="10.2924%" y="991.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (59 samples, 0.22%)</title><rect x="10.0424%" y="965" width="0.2216%" height="15" fill="rgb(219,100,48)" fg:x="2674" fg:w="59"/><text x="10.2924%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (21 samples, 0.08%)</title><rect x="10.1852%" y="949" width="0.0789%" height="15" fill="rgb(253,5,41)" fg:x="2712" fg:w="21"/><text x="10.4352%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (21 samples, 0.08%)</title><rect x="10.1852%" y="933" width="0.0789%" height="15" fill="rgb(247,181,11)" fg:x="2712" fg:w="21"/><text x="10.4352%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (21 samples, 0.08%)</title><rect x="10.1852%" y="917" width="0.0789%" height="15" fill="rgb(222,223,25)" fg:x="2712" fg:w="21"/><text x="10.4352%" y="927.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.02%)</title><rect x="10.2490%" y="901" width="0.0150%" height="15" fill="rgb(214,198,28)" fg:x="2729" fg:w="4"/><text x="10.4990%" y="911.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.02%)</title><rect x="10.2490%" y="885" width="0.0150%" height="15" fill="rgb(230,46,43)" fg:x="2729" fg:w="4"/><text x="10.4990%" y="895.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::hash::Hash&gt;::hash (15 samples, 0.06%)</title><rect x="10.3091%" y="997" width="0.0563%" height="15" fill="rgb(233,65,53)" fg:x="2745" fg:w="15"/><text x="10.5591%" y="1007.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (15 samples, 0.06%)</title><rect x="10.3091%" y="981" width="0.0563%" height="15" fill="rgb(221,121,27)" fg:x="2745" fg:w="15"/><text x="10.5591%" y="991.50"></text></g><g><title>core::hash::Hasher::write_str (15 samples, 0.06%)</title><rect x="10.3091%" y="965" width="0.0563%" height="15" fill="rgb(247,70,47)" fg:x="2745" fg:w="15"/><text x="10.5591%" y="975.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (15 samples, 0.06%)</title><rect x="10.3091%" y="949" width="0.0563%" height="15" fill="rgb(228,85,35)" fg:x="2745" fg:w="15"/><text x="10.5591%" y="959.50"></text></g><g><title>rustc_hash::hash_bytes (15 samples, 0.06%)</title><rect x="10.3091%" y="933" width="0.0563%" height="15" fill="rgb(209,50,18)" fg:x="2745" fg:w="15"/><text x="10.5591%" y="943.50"></text></g><g><title>rustc_hash::multiply_mix (4 samples, 0.02%)</title><rect x="10.3504%" y="917" width="0.0150%" height="15" fill="rgb(250,19,35)" fg:x="2756" fg:w="4"/><text x="10.6004%" y="927.50"></text></g><g><title>&lt;core::mem::Discriminant&lt;T&gt; as core::hash::Hash&gt;::hash (7 samples, 0.03%)</title><rect x="10.3654%" y="997" width="0.0263%" height="15" fill="rgb(253,107,29)" fg:x="2760" fg:w="7"/><text x="10.6154%" y="1007.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (7 samples, 0.03%)</title><rect x="10.3654%" y="981" width="0.0263%" height="15" fill="rgb(252,179,29)" fg:x="2760" fg:w="7"/><text x="10.6154%" y="991.50"></text></g><g><title>core::hash::Hasher::write_isize (7 samples, 0.03%)</title><rect x="10.3654%" y="965" width="0.0263%" height="15" fill="rgb(238,194,6)" fg:x="2760" fg:w="7"/><text x="10.6154%" y="975.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (7 samples, 0.03%)</title><rect x="10.3654%" y="949" width="0.0263%" height="15" fill="rgb(238,164,29)" fg:x="2760" fg:w="7"/><text x="10.6154%" y="959.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (7 samples, 0.03%)</title><rect x="10.3654%" y="933" width="0.0263%" height="15" fill="rgb(224,25,9)" fg:x="2760" fg:w="7"/><text x="10.6154%" y="943.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (3 samples, 0.01%)</title><rect x="10.3804%" y="917" width="0.0113%" height="15" fill="rgb(244,153,23)" fg:x="2764" fg:w="3"/><text x="10.6304%" y="927.50"></text></g><g><title>&lt;core::mem::Discriminant&lt;T&gt; as core::hash::Hash&gt;::hash (4 samples, 0.02%)</title><rect x="10.3992%" y="981" width="0.0150%" height="15" fill="rgb(212,203,14)" fg:x="2769" fg:w="4"/><text x="10.6492%" y="991.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (4 samples, 0.02%)</title><rect x="10.3992%" y="965" width="0.0150%" height="15" fill="rgb(220,164,20)" fg:x="2769" fg:w="4"/><text x="10.6492%" y="975.50"></text></g><g><title>core::hash::Hasher::write_isize (4 samples, 0.02%)</title><rect x="10.3992%" y="949" width="0.0150%" height="15" fill="rgb(222,203,48)" fg:x="2769" fg:w="4"/><text x="10.6492%" y="959.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (4 samples, 0.02%)</title><rect x="10.3992%" y="933" width="0.0150%" height="15" fill="rgb(215,159,22)" fg:x="2769" fg:w="4"/><text x="10.6492%" y="943.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (4 samples, 0.02%)</title><rect x="10.3992%" y="917" width="0.0150%" height="15" fill="rgb(216,183,47)" fg:x="2769" fg:w="4"/><text x="10.6492%" y="927.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (4 samples, 0.02%)</title><rect x="10.3992%" y="901" width="0.0150%" height="15" fill="rgb(229,195,25)" fg:x="2769" fg:w="4"/><text x="10.6492%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (3 samples, 0.01%)</title><rect x="10.4218%" y="981" width="0.0113%" height="15" fill="rgb(224,132,51)" fg:x="2775" fg:w="3"/><text x="10.6718%" y="991.50"></text></g><g><title>&lt;graph_craft::proto::ConstructionArgs as core::hash::Hash&gt;::hash (11 samples, 0.04%)</title><rect x="10.3955%" y="997" width="0.0413%" height="15" fill="rgb(240,63,7)" fg:x="2768" fg:w="11"/><text x="10.6455%" y="1007.50"></text></g><g><title>&lt;graphene_core::types::Type as core::hash::Hash&gt;::hash (10 samples, 0.04%)</title><rect x="10.4368%" y="997" width="0.0376%" height="15" fill="rgb(249,182,41)" fg:x="2779" fg:w="10"/><text x="10.6868%" y="1007.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (3 samples, 0.01%)</title><rect x="10.4631%" y="981" width="0.0113%" height="15" fill="rgb(243,47,26)" fg:x="2786" fg:w="3"/><text x="10.7131%" y="991.50"></text></g><g><title>core::hash::Hasher::write_isize (3 samples, 0.01%)</title><rect x="10.4631%" y="965" width="0.0113%" height="15" fill="rgb(233,48,2)" fg:x="2786" fg:w="3"/><text x="10.7131%" y="975.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (3 samples, 0.01%)</title><rect x="10.4631%" y="949" width="0.0113%" height="15" fill="rgb(244,165,34)" fg:x="2786" fg:w="3"/><text x="10.7131%" y="959.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (3 samples, 0.01%)</title><rect x="10.4631%" y="933" width="0.0113%" height="15" fill="rgb(207,89,7)" fg:x="2786" fg:w="3"/><text x="10.7131%" y="943.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::generate_stable_node_ids (1,582 samples, 5.94%)</title><rect x="4.5367%" y="1029" width="5.9413%" height="15" fill="rgb(244,117,36)" fg:x="1208" fg:w="1582"/><text x="4.7867%" y="1039.50">graph_cr..</text></g><g><title>graph_craft::proto::ProtoNode::stable_node_id (57 samples, 0.21%)</title><rect x="10.2640%" y="1013" width="0.2141%" height="15" fill="rgb(226,144,34)" fg:x="2733" fg:w="57"/><text x="10.5140%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="10.5870%" y="869" width="0.0113%" height="15" fill="rgb(213,23,19)" fg:x="2819" fg:w="3"/><text x="10.8370%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="10.5870%" y="853" width="0.0113%" height="15" fill="rgb(217,75,12)" fg:x="2819" fg:w="3"/><text x="10.8370%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.01%)</title><rect x="10.5870%" y="837" width="0.0113%" height="15" fill="rgb(224,159,17)" fg:x="2819" fg:w="3"/><text x="10.8370%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="10.5870%" y="821" width="0.0113%" height="15" fill="rgb(217,118,1)" fg:x="2819" fg:w="3"/><text x="10.8370%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="10.5870%" y="805" width="0.0113%" height="15" fill="rgb(232,180,48)" fg:x="2819" fg:w="3"/><text x="10.8370%" y="815.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="10.5870%" y="789" width="0.0113%" height="15" fill="rgb(230,27,33)" fg:x="2819" fg:w="3"/><text x="10.8370%" y="799.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="10.5870%" y="773" width="0.0113%" height="15" fill="rgb(205,31,21)" fg:x="2819" fg:w="3"/><text x="10.8370%" y="783.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="10.5870%" y="757" width="0.0113%" height="15" fill="rgb(253,59,4)" fg:x="2819" fg:w="3"/><text x="10.8370%" y="767.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="10.5870%" y="741" width="0.0113%" height="15" fill="rgb(224,201,9)" fg:x="2819" fg:w="3"/><text x="10.8370%" y="751.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="10.5870%" y="981" width="0.0150%" height="15" fill="rgb(229,206,30)" fg:x="2819" fg:w="4"/><text x="10.8370%" y="991.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4 samples, 0.02%)</title><rect x="10.5870%" y="965" width="0.0150%" height="15" fill="rgb(212,67,47)" fg:x="2819" fg:w="4"/><text x="10.8370%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4 samples, 0.02%)</title><rect x="10.5870%" y="949" width="0.0150%" height="15" fill="rgb(211,96,50)" fg:x="2819" fg:w="4"/><text x="10.8370%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.02%)</title><rect x="10.5870%" y="933" width="0.0150%" height="15" fill="rgb(252,114,18)" fg:x="2819" fg:w="4"/><text x="10.8370%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.02%)</title><rect x="10.5870%" y="917" width="0.0150%" height="15" fill="rgb(223,58,37)" fg:x="2819" fg:w="4"/><text x="10.8370%" y="927.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.02%)</title><rect x="10.5870%" y="901" width="0.0150%" height="15" fill="rgb(237,70,4)" fg:x="2819" fg:w="4"/><text x="10.8370%" y="911.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.02%)</title><rect x="10.5870%" y="885" width="0.0150%" height="15" fill="rgb(244,85,46)" fg:x="2819" fg:w="4"/><text x="10.8370%" y="895.50"></text></g><g><title>__rdl_alloc (5 samples, 0.02%)</title><rect x="10.6020%" y="757" width="0.0188%" height="15" fill="rgb(223,39,52)" fg:x="2823" fg:w="5"/><text x="10.8520%" y="767.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.02%)</title><rect x="10.6020%" y="741" width="0.0188%" height="15" fill="rgb(218,200,14)" fg:x="2823" fg:w="5"/><text x="10.8520%" y="751.50"></text></g><g><title>malloc (5 samples, 0.02%)</title><rect x="10.6020%" y="725" width="0.0188%" height="15" fill="rgb(208,171,16)" fg:x="2823" fg:w="5"/><text x="10.8520%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.02%)</title><rect x="10.6020%" y="853" width="0.0225%" height="15" fill="rgb(234,200,18)" fg:x="2823" fg:w="6"/><text x="10.8520%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.02%)</title><rect x="10.6020%" y="837" width="0.0225%" height="15" fill="rgb(228,45,11)" fg:x="2823" fg:w="6"/><text x="10.8520%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (6 samples, 0.02%)</title><rect x="10.6020%" y="821" width="0.0225%" height="15" fill="rgb(237,182,11)" fg:x="2823" fg:w="6"/><text x="10.8520%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.02%)</title><rect x="10.6020%" y="805" width="0.0225%" height="15" fill="rgb(241,175,49)" fg:x="2823" fg:w="6"/><text x="10.8520%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.02%)</title><rect x="10.6020%" y="789" width="0.0225%" height="15" fill="rgb(247,38,35)" fg:x="2823" fg:w="6"/><text x="10.8520%" y="799.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.02%)</title><rect x="10.6020%" y="773" width="0.0225%" height="15" fill="rgb(228,39,49)" fg:x="2823" fg:w="6"/><text x="10.8520%" y="783.50"></text></g><g><title>&lt;graph_craft::proto::ProtoNodeInput as core::clone::Clone&gt;::clone (33 samples, 0.12%)</title><rect x="10.5081%" y="1013" width="0.1239%" height="15" fill="rgb(226,101,26)" fg:x="2798" fg:w="33"/><text x="10.7581%" y="1023.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="10.5795%" y="997" width="0.0526%" height="15" fill="rgb(206,141,19)" fg:x="2817" fg:w="14"/><text x="10.8295%" y="1007.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="10.6020%" y="981" width="0.0300%" height="15" fill="rgb(211,200,13)" fg:x="2823" fg:w="8"/><text x="10.8520%" y="991.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="10.6020%" y="965" width="0.0300%" height="15" fill="rgb(241,121,6)" fg:x="2823" fg:w="8"/><text x="10.8520%" y="975.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (8 samples, 0.03%)</title><rect x="10.6020%" y="949" width="0.0300%" height="15" fill="rgb(234,221,29)" fg:x="2823" fg:w="8"/><text x="10.8520%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (8 samples, 0.03%)</title><rect x="10.6020%" y="933" width="0.0300%" height="15" fill="rgb(229,136,5)" fg:x="2823" fg:w="8"/><text x="10.8520%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8 samples, 0.03%)</title><rect x="10.6020%" y="917" width="0.0300%" height="15" fill="rgb(238,36,11)" fg:x="2823" fg:w="8"/><text x="10.8520%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.03%)</title><rect x="10.6020%" y="901" width="0.0300%" height="15" fill="rgb(251,55,41)" fg:x="2823" fg:w="8"/><text x="10.8520%" y="911.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.03%)</title><rect x="10.6020%" y="885" width="0.0300%" height="15" fill="rgb(242,34,40)" fg:x="2823" fg:w="8"/><text x="10.8520%" y="895.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.03%)</title><rect x="10.6020%" y="869" width="0.0300%" height="15" fill="rgb(215,42,17)" fg:x="2823" fg:w="8"/><text x="10.8520%" y="879.50"></text></g><g><title>__memmove_avx512_unaligned_erms (21 samples, 0.08%)</title><rect x="10.6321%" y="1013" width="0.0789%" height="15" fill="rgb(207,44,46)" fg:x="2831" fg:w="21"/><text x="10.8821%" y="1023.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.05%)</title><rect x="10.7109%" y="1013" width="0.0451%" height="15" fill="rgb(211,206,28)" fg:x="2852" fg:w="12"/><text x="10.9609%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.05%)</title><rect x="10.7109%" y="997" width="0.0451%" height="15" fill="rgb(237,167,16)" fg:x="2852" fg:w="12"/><text x="10.9609%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.05%)</title><rect x="10.7109%" y="981" width="0.0451%" height="15" fill="rgb(233,66,6)" fg:x="2852" fg:w="12"/><text x="10.9609%" y="991.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.05%)</title><rect x="10.7109%" y="965" width="0.0451%" height="15" fill="rgb(246,123,29)" fg:x="2852" fg:w="12"/><text x="10.9609%" y="975.50"></text></g><g><title>__rdl_alloc (12 samples, 0.05%)</title><rect x="10.7109%" y="949" width="0.0451%" height="15" fill="rgb(209,62,40)" fg:x="2852" fg:w="12"/><text x="10.9609%" y="959.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (12 samples, 0.05%)</title><rect x="10.7109%" y="933" width="0.0451%" height="15" fill="rgb(218,4,25)" fg:x="2852" fg:w="12"/><text x="10.9609%" y="943.50"></text></g><g><title>malloc (12 samples, 0.05%)</title><rect x="10.7109%" y="917" width="0.0451%" height="15" fill="rgb(253,91,49)" fg:x="2852" fg:w="12"/><text x="10.9609%" y="927.50"></text></g><g><title>_int_malloc (9 samples, 0.03%)</title><rect x="10.7222%" y="901" width="0.0338%" height="15" fill="rgb(228,155,29)" fg:x="2855" fg:w="9"/><text x="10.9722%" y="911.50"></text></g><g><title>__memmove_avx512_unaligned_erms (32 samples, 0.12%)</title><rect x="10.7560%" y="837" width="0.1202%" height="15" fill="rgb(243,57,37)" fg:x="2864" fg:w="32"/><text x="11.0060%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (34 samples, 0.13%)</title><rect x="10.7560%" y="997" width="0.1277%" height="15" fill="rgb(244,167,17)" fg:x="2864" fg:w="34"/><text x="11.0060%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (34 samples, 0.13%)</title><rect x="10.7560%" y="981" width="0.1277%" height="15" fill="rgb(207,181,38)" fg:x="2864" fg:w="34"/><text x="11.0060%" y="991.50"></text></g><g><title>alloc::raw_vec::finish_grow (34 samples, 0.13%)</title><rect x="10.7560%" y="965" width="0.1277%" height="15" fill="rgb(211,8,23)" fg:x="2864" fg:w="34"/><text x="11.0060%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (34 samples, 0.13%)</title><rect x="10.7560%" y="949" width="0.1277%" height="15" fill="rgb(235,11,44)" fg:x="2864" fg:w="34"/><text x="11.0060%" y="959.50"></text></g><g><title>alloc::alloc::Global::grow_impl (34 samples, 0.13%)</title><rect x="10.7560%" y="933" width="0.1277%" height="15" fill="rgb(248,18,52)" fg:x="2864" fg:w="34"/><text x="11.0060%" y="943.50"></text></g><g><title>alloc::alloc::realloc (34 samples, 0.13%)</title><rect x="10.7560%" y="917" width="0.1277%" height="15" fill="rgb(208,4,7)" fg:x="2864" fg:w="34"/><text x="11.0060%" y="927.50"></text></g><g><title>__rdl_realloc (34 samples, 0.13%)</title><rect x="10.7560%" y="901" width="0.1277%" height="15" fill="rgb(240,17,39)" fg:x="2864" fg:w="34"/><text x="11.0060%" y="911.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (34 samples, 0.13%)</title><rect x="10.7560%" y="885" width="0.1277%" height="15" fill="rgb(207,170,3)" fg:x="2864" fg:w="34"/><text x="11.0060%" y="895.50"></text></g><g><title>realloc (34 samples, 0.13%)</title><rect x="10.7560%" y="869" width="0.1277%" height="15" fill="rgb(236,100,52)" fg:x="2864" fg:w="34"/><text x="11.0060%" y="879.50"></text></g><g><title>_int_realloc (34 samples, 0.13%)</title><rect x="10.7560%" y="853" width="0.1277%" height="15" fill="rgb(246,78,51)" fg:x="2864" fg:w="34"/><text x="11.0060%" y="863.50"></text></g><g><title>core::ptr::write (7 samples, 0.03%)</title><rect x="10.8837%" y="997" width="0.0263%" height="15" fill="rgb(211,17,15)" fg:x="2898" fg:w="7"/><text x="11.1337%" y="1007.50"></text></g><g><title>__memmove_avx512_unaligned_erms (7 samples, 0.03%)</title><rect x="10.8837%" y="981" width="0.0263%" height="15" fill="rgb(209,59,46)" fg:x="2898" fg:w="7"/><text x="11.1337%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (42 samples, 0.16%)</title><rect x="10.7560%" y="1013" width="0.1577%" height="15" fill="rgb(210,92,25)" fg:x="2864" fg:w="42"/><text x="11.0060%" y="1023.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="10.9175%" y="917" width="0.0113%" height="15" fill="rgb(238,174,52)" fg:x="2907" fg:w="3"/><text x="11.1675%" y="927.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3 samples, 0.01%)</title><rect x="10.9175%" y="901" width="0.0113%" height="15" fill="rgb(230,73,7)" fg:x="2907" fg:w="3"/><text x="11.1675%" y="911.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (3 samples, 0.01%)</title><rect x="10.9175%" y="885" width="0.0113%" height="15" fill="rgb(243,124,40)" fg:x="2907" fg:w="3"/><text x="11.1675%" y="895.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (3 samples, 0.01%)</title><rect x="10.9175%" y="869" width="0.0113%" height="15" fill="rgb(244,170,11)" fg:x="2907" fg:w="3"/><text x="11.1675%" y="879.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.01%)</title><rect x="10.9175%" y="853" width="0.0113%" height="15" fill="rgb(207,114,54)" fg:x="2907" fg:w="3"/><text x="11.1675%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (34 samples, 0.13%)</title><rect x="10.9288%" y="821" width="0.1277%" height="15" fill="rgb(205,42,20)" fg:x="2910" fg:w="34"/><text x="11.1788%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (34 samples, 0.13%)</title><rect x="10.9288%" y="805" width="0.1277%" height="15" fill="rgb(230,30,28)" fg:x="2910" fg:w="34"/><text x="11.1788%" y="815.50"></text></g><g><title>__rdl_dealloc (34 samples, 0.13%)</title><rect x="10.9288%" y="789" width="0.1277%" height="15" fill="rgb(205,73,54)" fg:x="2910" fg:w="34"/><text x="11.1788%" y="799.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (34 samples, 0.13%)</title><rect x="10.9288%" y="773" width="0.1277%" height="15" fill="rgb(254,227,23)" fg:x="2910" fg:w="34"/><text x="11.1788%" y="783.50"></text></g><g><title>cfree@GLIBC_2.2.5 (34 samples, 0.13%)</title><rect x="10.9288%" y="757" width="0.1277%" height="15" fill="rgb(228,202,34)" fg:x="2910" fg:w="34"/><text x="11.1788%" y="767.50"></text></g><g><title>_int_free (20 samples, 0.08%)</title><rect x="10.9813%" y="741" width="0.0751%" height="15" fill="rgb(222,225,37)" fg:x="2924" fg:w="20"/><text x="11.2313%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (42 samples, 0.16%)</title><rect x="10.9137%" y="933" width="0.1577%" height="15" fill="rgb(221,14,54)" fg:x="2906" fg:w="42"/><text x="11.1637%" y="943.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (38 samples, 0.14%)</title><rect x="10.9288%" y="917" width="0.1427%" height="15" fill="rgb(254,102,2)" fg:x="2910" fg:w="38"/><text x="11.1788%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (38 samples, 0.14%)</title><rect x="10.9288%" y="901" width="0.1427%" height="15" fill="rgb(232,104,17)" fg:x="2910" fg:w="38"/><text x="11.1788%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;)&gt; (38 samples, 0.14%)</title><rect x="10.9288%" y="885" width="0.1427%" height="15" fill="rgb(250,220,14)" fg:x="2910" fg:w="38"/><text x="11.1788%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt; (38 samples, 0.14%)</title><rect x="10.9288%" y="869" width="0.1427%" height="15" fill="rgb(241,158,9)" fg:x="2910" fg:w="38"/><text x="11.1788%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeId&gt;&gt; (38 samples, 0.14%)</title><rect x="10.9288%" y="853" width="0.1427%" height="15" fill="rgb(246,9,43)" fg:x="2910" fg:w="38"/><text x="11.1788%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.14%)</title><rect x="10.9288%" y="837" width="0.1427%" height="15" fill="rgb(206,73,33)" fg:x="2910" fg:w="38"/><text x="11.1788%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.02%)</title><rect x="11.0564%" y="821" width="0.0150%" height="15" fill="rgb(222,79,8)" fg:x="2944" fg:w="4"/><text x="11.3064%" y="831.50"></text></g><g><title>cfree@GLIBC_2.2.5 (17 samples, 0.06%)</title><rect x="11.0715%" y="853" width="0.0638%" height="15" fill="rgb(234,8,54)" fg:x="2948" fg:w="17"/><text x="11.3215%" y="863.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (16 samples, 0.06%)</title><rect x="11.0752%" y="837" width="0.0601%" height="15" fill="rgb(209,134,38)" fg:x="2949" fg:w="16"/><text x="11.3252%" y="847.50"></text></g><g><title>malloc_consolidate (16 samples, 0.06%)</title><rect x="11.0752%" y="821" width="0.0601%" height="15" fill="rgb(230,127,29)" fg:x="2949" fg:w="16"/><text x="11.3252%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt;&gt; (60 samples, 0.23%)</title><rect x="10.9137%" y="1013" width="0.2253%" height="15" fill="rgb(242,44,41)" fg:x="2906" fg:w="60"/><text x="11.1637%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;,std::hash::random::RandomState&gt;&gt; (60 samples, 0.23%)</title><rect x="10.9137%" y="997" width="0.2253%" height="15" fill="rgb(222,56,43)" fg:x="2906" fg:w="60"/><text x="11.1637%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;)&gt;&gt; (60 samples, 0.23%)</title><rect x="10.9137%" y="981" width="0.2253%" height="15" fill="rgb(238,39,47)" fg:x="2906" fg:w="60"/><text x="11.1637%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.23%)</title><rect x="10.9137%" y="965" width="0.2253%" height="15" fill="rgb(226,79,43)" fg:x="2906" fg:w="60"/><text x="11.1637%" y="975.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (60 samples, 0.23%)</title><rect x="10.9137%" y="949" width="0.2253%" height="15" fill="rgb(242,105,53)" fg:x="2906" fg:w="60"/><text x="11.1637%" y="959.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (18 samples, 0.07%)</title><rect x="11.0715%" y="933" width="0.0676%" height="15" fill="rgb(251,132,46)" fg:x="2948" fg:w="18"/><text x="11.3215%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.07%)</title><rect x="11.0715%" y="917" width="0.0676%" height="15" fill="rgb(231,77,14)" fg:x="2948" fg:w="18"/><text x="11.3215%" y="927.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.07%)</title><rect x="11.0715%" y="901" width="0.0676%" height="15" fill="rgb(240,135,9)" fg:x="2948" fg:w="18"/><text x="11.3215%" y="911.50"></text></g><g><title>__rdl_dealloc (18 samples, 0.07%)</title><rect x="11.0715%" y="885" width="0.0676%" height="15" fill="rgb(248,109,14)" fg:x="2948" fg:w="18"/><text x="11.3215%" y="895.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (18 samples, 0.07%)</title><rect x="11.0715%" y="869" width="0.0676%" height="15" fill="rgb(227,146,52)" fg:x="2948" fg:w="18"/><text x="11.3215%" y="879.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="11.1616%" y="997" width="0.0225%" height="15" fill="rgb(232,54,3)" fg:x="2972" fg:w="6"/><text x="11.4116%" y="1007.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (3 samples, 0.01%)</title><rect x="11.1729%" y="981" width="0.0113%" height="15" fill="rgb(229,201,43)" fg:x="2975" fg:w="3"/><text x="11.4229%" y="991.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (3 samples, 0.01%)</title><rect x="11.1729%" y="965" width="0.0113%" height="15" fill="rgb(252,161,33)" fg:x="2975" fg:w="3"/><text x="11.4229%" y="975.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (3 samples, 0.01%)</title><rect x="11.1729%" y="949" width="0.0113%" height="15" fill="rgb(226,146,40)" fg:x="2975" fg:w="3"/><text x="11.4229%" y="959.50"></text></g><g><title>alloc::raw_vec::finish_grow (74 samples, 0.28%)</title><rect x="11.2480%" y="949" width="0.2779%" height="15" fill="rgb(219,47,25)" fg:x="2995" fg:w="74"/><text x="11.4980%" y="959.50"></text></g><g><title>malloc (66 samples, 0.25%)</title><rect x="11.2780%" y="933" width="0.2479%" height="15" fill="rgb(250,135,13)" fg:x="3003" fg:w="66"/><text x="11.5280%" y="943.50"></text></g><g><title>_int_malloc (30 samples, 0.11%)</title><rect x="11.4132%" y="917" width="0.1127%" height="15" fill="rgb(219,229,18)" fg:x="3039" fg:w="30"/><text x="11.6632%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (78 samples, 0.29%)</title><rect x="11.2405%" y="981" width="0.2929%" height="15" fill="rgb(217,152,27)" fg:x="2993" fg:w="78"/><text x="11.4905%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (77 samples, 0.29%)</title><rect x="11.2442%" y="965" width="0.2892%" height="15" fill="rgb(225,71,47)" fg:x="2994" fg:w="77"/><text x="11.4942%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (95 samples, 0.36%)</title><rect x="11.1841%" y="997" width="0.3568%" height="15" fill="rgb(220,139,14)" fg:x="2978" fg:w="95"/><text x="11.4341%" y="1007.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.04%)</title><rect x="12.2883%" y="965" width="0.0413%" height="15" fill="rgb(247,54,32)" fg:x="3272" fg:w="11"/><text x="12.5383%" y="975.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.03%)</title><rect x="12.2995%" y="949" width="0.0300%" height="15" fill="rgb(252,131,39)" fg:x="3275" fg:w="8"/><text x="12.5495%" y="959.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (403 samples, 1.51%)</title><rect x="11.5409%" y="981" width="1.5135%" height="15" fill="rgb(210,108,39)" fg:x="3073" fg:w="403"/><text x="11.7909%" y="991.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref::_{{closure}} (193 samples, 0.72%)</title><rect x="12.3296%" y="965" width="0.7248%" height="15" fill="rgb(205,23,29)" fg:x="3283" fg:w="193"/><text x="12.5796%" y="975.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (193 samples, 0.72%)</title><rect x="12.3296%" y="949" width="0.7248%" height="15" fill="rgb(246,139,46)" fg:x="3283" fg:w="193"/><text x="12.5796%" y="959.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (193 samples, 0.72%)</title><rect x="12.3296%" y="933" width="0.7248%" height="15" fill="rgb(250,81,26)" fg:x="3283" fg:w="193"/><text x="12.5796%" y="943.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref (405 samples, 1.52%)</title><rect x="11.5409%" y="997" width="1.5210%" height="15" fill="rgb(214,104,7)" fg:x="3073" fg:w="405"/><text x="11.7909%" y="1007.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (8 samples, 0.03%)</title><rect x="13.0619%" y="917" width="0.0300%" height="15" fill="rgb(233,189,8)" fg:x="3478" fg:w="8"/><text x="13.3119%" y="927.50"></text></g><g><title>core::ptr::write (8 samples, 0.03%)</title><rect x="13.0619%" y="901" width="0.0300%" height="15" fill="rgb(228,141,17)" fg:x="3478" fg:w="8"/><text x="13.3119%" y="911.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (9 samples, 0.03%)</title><rect x="13.0619%" y="933" width="0.0338%" height="15" fill="rgb(247,157,1)" fg:x="3478" fg:w="9"/><text x="13.3119%" y="943.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (14 samples, 0.05%)</title><rect x="13.0619%" y="997" width="0.0526%" height="15" fill="rgb(249,225,5)" fg:x="3478" fg:w="14"/><text x="13.3119%" y="1007.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (14 samples, 0.05%)</title><rect x="13.0619%" y="981" width="0.0526%" height="15" fill="rgb(242,55,13)" fg:x="3478" fg:w="14"/><text x="13.3119%" y="991.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (14 samples, 0.05%)</title><rect x="13.0619%" y="965" width="0.0526%" height="15" fill="rgb(230,49,50)" fg:x="3478" fg:w="14"/><text x="13.3119%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (14 samples, 0.05%)</title><rect x="13.0619%" y="949" width="0.0526%" height="15" fill="rgb(241,111,38)" fg:x="3478" fg:w="14"/><text x="13.3119%" y="959.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (4 samples, 0.02%)</title><rect x="13.0995%" y="933" width="0.0150%" height="15" fill="rgb(252,155,4)" fg:x="3488" fg:w="4"/><text x="13.3495%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (4 samples, 0.02%)</title><rect x="13.0995%" y="917" width="0.0150%" height="15" fill="rgb(212,69,32)" fg:x="3488" fg:w="4"/><text x="13.3495%" y="927.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (18 samples, 0.07%)</title><rect x="13.1220%" y="821" width="0.0676%" height="15" fill="rgb(243,107,47)" fg:x="3494" fg:w="18"/><text x="13.3720%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (18 samples, 0.07%)</title><rect x="13.1220%" y="805" width="0.0676%" height="15" fill="rgb(247,130,12)" fg:x="3494" fg:w="18"/><text x="13.3720%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (18 samples, 0.07%)</title><rect x="13.1220%" y="789" width="0.0676%" height="15" fill="rgb(233,74,16)" fg:x="3494" fg:w="18"/><text x="13.3720%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12 samples, 0.05%)</title><rect x="13.1446%" y="773" width="0.0451%" height="15" fill="rgb(208,58,18)" fg:x="3500" fg:w="12"/><text x="13.3946%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.02%)</title><rect x="13.1708%" y="757" width="0.0188%" height="15" fill="rgb(242,225,1)" fg:x="3507" fg:w="5"/><text x="13.4208%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (24 samples, 0.09%)</title><rect x="13.1220%" y="885" width="0.0901%" height="15" fill="rgb(249,39,40)" fg:x="3494" fg:w="24"/><text x="13.3720%" y="895.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (24 samples, 0.09%)</title><rect x="13.1220%" y="869" width="0.0901%" height="15" fill="rgb(207,72,44)" fg:x="3494" fg:w="24"/><text x="13.3720%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (24 samples, 0.09%)</title><rect x="13.1220%" y="853" width="0.0901%" height="15" fill="rgb(215,193,12)" fg:x="3494" fg:w="24"/><text x="13.3720%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (24 samples, 0.09%)</title><rect x="13.1220%" y="837" width="0.0901%" height="15" fill="rgb(248,41,39)" fg:x="3494" fg:w="24"/><text x="13.3720%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.02%)</title><rect x="13.1971%" y="821" width="0.0150%" height="15" fill="rgb(253,85,4)" fg:x="3514" fg:w="4"/><text x="13.4471%" y="831.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (4 samples, 0.02%)</title><rect x="13.1971%" y="805" width="0.0150%" height="15" fill="rgb(243,70,31)" fg:x="3514" fg:w="4"/><text x="13.4471%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (4 samples, 0.02%)</title><rect x="13.1971%" y="789" width="0.0150%" height="15" fill="rgb(253,195,26)" fg:x="3514" fg:w="4"/><text x="13.4471%" y="799.50"></text></g><g><title>core::hash::Hasher::write_u64 (4 samples, 0.02%)</title><rect x="13.1971%" y="773" width="0.0150%" height="15" fill="rgb(243,42,11)" fg:x="3514" fg:w="4"/><text x="13.4471%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="13.1971%" y="757" width="0.0150%" height="15" fill="rgb(239,66,17)" fg:x="3514" fg:w="4"/><text x="13.4471%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="13.1971%" y="741" width="0.0150%" height="15" fill="rgb(217,132,21)" fg:x="3514" fg:w="4"/><text x="13.4471%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="13.1971%" y="725" width="0.0150%" height="15" fill="rgb(252,202,21)" fg:x="3514" fg:w="4"/><text x="13.4471%" y="735.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.01%)</title><rect x="13.2309%" y="837" width="0.0113%" height="15" fill="rgb(233,98,36)" fg:x="3523" fg:w="3"/><text x="13.4809%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (8 samples, 0.03%)</title><rect x="13.2234%" y="853" width="0.0300%" height="15" fill="rgb(216,153,54)" fg:x="3521" fg:w="8"/><text x="13.4734%" y="863.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (3 samples, 0.01%)</title><rect x="13.2422%" y="837" width="0.0113%" height="15" fill="rgb(250,99,7)" fg:x="3526" fg:w="3"/><text x="13.4922%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.01%)</title><rect x="13.2422%" y="821" width="0.0113%" height="15" fill="rgb(207,56,50)" fg:x="3526" fg:w="3"/><text x="13.4922%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (10 samples, 0.04%)</title><rect x="13.2535%" y="853" width="0.0376%" height="15" fill="rgb(244,61,34)" fg:x="3529" fg:w="10"/><text x="13.5035%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (22 samples, 0.08%)</title><rect x="13.2159%" y="869" width="0.0826%" height="15" fill="rgb(241,50,38)" fg:x="3519" fg:w="22"/><text x="13.4659%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (24 samples, 0.09%)</title><rect x="13.2159%" y="885" width="0.0901%" height="15" fill="rgb(212,166,30)" fg:x="3519" fg:w="24"/><text x="13.4659%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (81 samples, 0.30%)</title><rect x="13.1145%" y="965" width="0.3042%" height="15" fill="rgb(249,127,32)" fg:x="3492" fg:w="81"/><text x="13.3645%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (81 samples, 0.30%)</title><rect x="13.1145%" y="949" width="0.3042%" height="15" fill="rgb(209,103,0)" fg:x="3492" fg:w="81"/><text x="13.3645%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (80 samples, 0.30%)</title><rect x="13.1183%" y="933" width="0.3004%" height="15" fill="rgb(238,209,51)" fg:x="3493" fg:w="80"/><text x="13.3683%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (80 samples, 0.30%)</title><rect x="13.1183%" y="917" width="0.3004%" height="15" fill="rgb(237,56,23)" fg:x="3493" fg:w="80"/><text x="13.3683%" y="927.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (80 samples, 0.30%)</title><rect x="13.1183%" y="901" width="0.3004%" height="15" fill="rgb(215,153,46)" fg:x="3493" fg:w="80"/><text x="13.3683%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (30 samples, 0.11%)</title><rect x="13.3060%" y="885" width="0.1127%" height="15" fill="rgb(224,49,31)" fg:x="3543" fg:w="30"/><text x="13.5560%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (30 samples, 0.11%)</title><rect x="13.3060%" y="869" width="0.1127%" height="15" fill="rgb(250,18,42)" fg:x="3543" fg:w="30"/><text x="13.5560%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (29 samples, 0.11%)</title><rect x="13.3098%" y="853" width="0.1089%" height="15" fill="rgb(215,176,39)" fg:x="3544" fg:w="29"/><text x="13.5598%" y="863.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (29 samples, 0.11%)</title><rect x="13.3098%" y="837" width="0.1089%" height="15" fill="rgb(223,77,29)" fg:x="3544" fg:w="29"/><text x="13.5598%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.11%)</title><rect x="13.3098%" y="821" width="0.1089%" height="15" fill="rgb(234,94,52)" fg:x="3544" fg:w="29"/><text x="13.5598%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.11%)</title><rect x="13.3098%" y="805" width="0.1089%" height="15" fill="rgb(220,154,50)" fg:x="3544" fg:w="29"/><text x="13.5598%" y="815.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.11%)</title><rect x="13.3098%" y="789" width="0.1089%" height="15" fill="rgb(212,11,10)" fg:x="3544" fg:w="29"/><text x="13.5598%" y="799.50"></text></g><g><title>__rdl_alloc (29 samples, 0.11%)</title><rect x="13.3098%" y="773" width="0.1089%" height="15" fill="rgb(205,166,19)" fg:x="3544" fg:w="29"/><text x="13.5598%" y="783.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (29 samples, 0.11%)</title><rect x="13.3098%" y="757" width="0.1089%" height="15" fill="rgb(244,198,16)" fg:x="3544" fg:w="29"/><text x="13.5598%" y="767.50"></text></g><g><title>malloc (29 samples, 0.11%)</title><rect x="13.3098%" y="741" width="0.1089%" height="15" fill="rgb(219,69,12)" fg:x="3544" fg:w="29"/><text x="13.5598%" y="751.50"></text></g><g><title>_int_malloc (29 samples, 0.11%)</title><rect x="13.3098%" y="725" width="0.1089%" height="15" fill="rgb(245,30,7)" fg:x="3544" fg:w="29"/><text x="13.5598%" y="735.50"></text></g><g><title>unlink_chunk.isra.0 (4 samples, 0.02%)</title><rect x="13.4037%" y="709" width="0.0150%" height="15" fill="rgb(218,221,48)" fg:x="3569" fg:w="4"/><text x="13.6537%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.02%)</title><rect x="13.4788%" y="885" width="0.0188%" height="15" fill="rgb(216,66,15)" fg:x="3589" fg:w="5"/><text x="13.7288%" y="895.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.02%)</title><rect x="13.5088%" y="869" width="0.0150%" height="15" fill="rgb(226,122,50)" fg:x="3597" fg:w="4"/><text x="13.7588%" y="879.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (20 samples, 0.08%)</title><rect x="13.4525%" y="933" width="0.0751%" height="15" fill="rgb(239,156,16)" fg:x="3582" fg:w="20"/><text x="13.7025%" y="943.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (20 samples, 0.08%)</title><rect x="13.4525%" y="917" width="0.0751%" height="15" fill="rgb(224,27,38)" fg:x="3582" fg:w="20"/><text x="13.7025%" y="927.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (20 samples, 0.08%)</title><rect x="13.4525%" y="901" width="0.0751%" height="15" fill="rgb(224,39,27)" fg:x="3582" fg:w="20"/><text x="13.7025%" y="911.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.03%)</title><rect x="13.4976%" y="885" width="0.0300%" height="15" fill="rgb(215,92,29)" fg:x="3594" fg:w="8"/><text x="13.7476%" y="895.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (12 samples, 0.05%)</title><rect x="13.5276%" y="933" width="0.0451%" height="15" fill="rgb(207,159,16)" fg:x="3602" fg:w="12"/><text x="13.7776%" y="943.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (11 samples, 0.04%)</title><rect x="13.5314%" y="917" width="0.0413%" height="15" fill="rgb(238,163,47)" fg:x="3603" fg:w="11"/><text x="13.7814%" y="927.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (11 samples, 0.04%)</title><rect x="13.5314%" y="901" width="0.0413%" height="15" fill="rgb(219,91,49)" fg:x="3603" fg:w="11"/><text x="13.7814%" y="911.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (11 samples, 0.04%)</title><rect x="13.5314%" y="885" width="0.0413%" height="15" fill="rgb(227,167,31)" fg:x="3603" fg:w="11"/><text x="13.7814%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.04%)</title><rect x="13.5727%" y="869" width="0.0413%" height="15" fill="rgb(234,80,54)" fg:x="3614" fg:w="11"/><text x="13.8227%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11 samples, 0.04%)</title><rect x="13.5727%" y="853" width="0.0413%" height="15" fill="rgb(212,114,2)" fg:x="3614" fg:w="11"/><text x="13.8227%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.04%)</title><rect x="13.5727%" y="837" width="0.0413%" height="15" fill="rgb(234,50,24)" fg:x="3614" fg:w="11"/><text x="13.8227%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.02%)</title><rect x="13.5952%" y="821" width="0.0188%" height="15" fill="rgb(221,68,8)" fg:x="3620" fg:w="5"/><text x="13.8452%" y="831.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::hash::Hash&gt;::hash (12 samples, 0.05%)</title><rect x="13.5727%" y="917" width="0.0451%" height="15" fill="rgb(254,180,31)" fg:x="3614" fg:w="12"/><text x="13.8227%" y="927.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (12 samples, 0.05%)</title><rect x="13.5727%" y="901" width="0.0451%" height="15" fill="rgb(247,130,50)" fg:x="3614" fg:w="12"/><text x="13.8227%" y="911.50"></text></g><g><title>core::hash::Hasher::write_u64 (12 samples, 0.05%)</title><rect x="13.5727%" y="885" width="0.0451%" height="15" fill="rgb(211,109,4)" fg:x="3614" fg:w="12"/><text x="13.8227%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (56 samples, 0.21%)</title><rect x="13.4187%" y="965" width="0.2103%" height="15" fill="rgb(238,50,21)" fg:x="3573" fg:w="56"/><text x="13.6687%" y="975.50"></text></g><g><title>core::hash::BuildHasher::hash_one (48 samples, 0.18%)</title><rect x="13.4488%" y="949" width="0.1803%" height="15" fill="rgb(225,57,45)" fg:x="3581" fg:w="48"/><text x="13.6988%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (15 samples, 0.06%)</title><rect x="13.5727%" y="933" width="0.0563%" height="15" fill="rgb(209,196,50)" fg:x="3614" fg:w="15"/><text x="13.8227%" y="943.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="13.6178%" y="917" width="0.0113%" height="15" fill="rgb(242,140,13)" fg:x="3626" fg:w="3"/><text x="13.8678%" y="927.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.01%)</title><rect x="13.6178%" y="901" width="0.0113%" height="15" fill="rgb(217,111,7)" fg:x="3626" fg:w="3"/><text x="13.8678%" y="911.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.01%)</title><rect x="13.6178%" y="885" width="0.0113%" height="15" fill="rgb(253,193,51)" fg:x="3626" fg:w="3"/><text x="13.8678%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="13.6178%" y="869" width="0.0113%" height="15" fill="rgb(252,70,29)" fg:x="3626" fg:w="3"/><text x="13.8678%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="13.6178%" y="853" width="0.0113%" height="15" fill="rgb(232,127,12)" fg:x="3626" fg:w="3"/><text x="13.8678%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="13.6178%" y="837" width="0.0113%" height="15" fill="rgb(211,180,21)" fg:x="3626" fg:w="3"/><text x="13.8678%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (6 samples, 0.02%)</title><rect x="13.6440%" y="933" width="0.0225%" height="15" fill="rgb(229,72,13)" fg:x="3633" fg:w="6"/><text x="13.8940%" y="943.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 0.03%)</title><rect x="13.6703%" y="933" width="0.0300%" height="15" fill="rgb(240,211,49)" fg:x="3640" fg:w="8"/><text x="13.9203%" y="943.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.03%)</title><rect x="13.6703%" y="917" width="0.0300%" height="15" fill="rgb(219,149,40)" fg:x="3640" fg:w="8"/><text x="13.9203%" y="927.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::collect_outwards_edges (683 samples, 2.57%)</title><rect x="11.1391%" y="1013" width="2.5651%" height="15" fill="rgb(210,127,46)" fg:x="2966" fg:w="683"/><text x="11.3891%" y="1023.50">gr..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (157 samples, 0.59%)</title><rect x="13.1145%" y="997" width="0.5896%" height="15" fill="rgb(220,106,7)" fg:x="3492" fg:w="157"/><text x="13.3645%" y="1007.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (157 samples, 0.59%)</title><rect x="13.1145%" y="981" width="0.5896%" height="15" fill="rgb(249,31,22)" fg:x="3492" fg:w="157"/><text x="13.3645%" y="991.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (20 samples, 0.08%)</title><rect x="13.6290%" y="965" width="0.0751%" height="15" fill="rgb(253,1,49)" fg:x="3629" fg:w="20"/><text x="13.8790%" y="975.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (19 samples, 0.07%)</title><rect x="13.6328%" y="949" width="0.0714%" height="15" fill="rgb(227,144,33)" fg:x="3630" fg:w="19"/><text x="13.8828%" y="959.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.02%)</title><rect x="13.8619%" y="709" width="0.0188%" height="15" fill="rgb(249,163,44)" fg:x="3691" fg:w="5"/><text x="14.1119%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.02%)</title><rect x="13.8656%" y="693" width="0.0150%" height="15" fill="rgb(234,15,39)" fg:x="3692" fg:w="4"/><text x="14.1156%" y="703.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8 samples, 0.03%)</title><rect x="13.8919%" y="693" width="0.0300%" height="15" fill="rgb(207,66,16)" fg:x="3699" fg:w="8"/><text x="14.1419%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (28 samples, 0.11%)</title><rect x="13.8243%" y="757" width="0.1052%" height="15" fill="rgb(233,112,24)" fg:x="3681" fg:w="28"/><text x="14.0743%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (28 samples, 0.11%)</title><rect x="13.8243%" y="741" width="0.1052%" height="15" fill="rgb(230,90,22)" fg:x="3681" fg:w="28"/><text x="14.0743%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (28 samples, 0.11%)</title><rect x="13.8243%" y="725" width="0.1052%" height="15" fill="rgb(229,61,13)" fg:x="3681" fg:w="28"/><text x="14.0743%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (13 samples, 0.05%)</title><rect x="13.8806%" y="709" width="0.0488%" height="15" fill="rgb(225,57,24)" fg:x="3696" fg:w="13"/><text x="14.1306%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="13.9520%" y="645" width="0.0113%" height="15" fill="rgb(208,169,48)" fg:x="3715" fg:w="3"/><text x="14.2020%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (49 samples, 0.18%)</title><rect x="13.7830%" y="789" width="0.1840%" height="15" fill="rgb(244,218,51)" fg:x="3670" fg:w="49"/><text x="14.0330%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (49 samples, 0.18%)</title><rect x="13.7830%" y="773" width="0.1840%" height="15" fill="rgb(214,148,10)" fg:x="3670" fg:w="49"/><text x="14.0330%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.04%)</title><rect x="13.9295%" y="757" width="0.0376%" height="15" fill="rgb(225,174,27)" fg:x="3709" fg:w="10"/><text x="14.1795%" y="767.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::hash::Hash&gt;::hash (10 samples, 0.04%)</title><rect x="13.9295%" y="741" width="0.0376%" height="15" fill="rgb(230,96,26)" fg:x="3709" fg:w="10"/><text x="14.1795%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (10 samples, 0.04%)</title><rect x="13.9295%" y="725" width="0.0376%" height="15" fill="rgb(232,10,30)" fg:x="3709" fg:w="10"/><text x="14.1795%" y="735.50"></text></g><g><title>core::hash::Hasher::write_u64 (10 samples, 0.04%)</title><rect x="13.9295%" y="709" width="0.0376%" height="15" fill="rgb(222,8,50)" fg:x="3709" fg:w="10"/><text x="14.1795%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.04%)</title><rect x="13.9295%" y="693" width="0.0376%" height="15" fill="rgb(213,81,27)" fg:x="3709" fg:w="10"/><text x="14.1795%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.04%)</title><rect x="13.9295%" y="677" width="0.0376%" height="15" fill="rgb(245,50,10)" fg:x="3709" fg:w="10"/><text x="14.1795%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="13.9332%" y="661" width="0.0338%" height="15" fill="rgb(216,100,18)" fg:x="3710" fg:w="9"/><text x="14.1832%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.03%)</title><rect x="14.0421%" y="741" width="0.0263%" height="15" fill="rgb(236,147,54)" fg:x="3739" fg:w="7"/><text x="14.2921%" y="751.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 0.03%)</title><rect x="14.0421%" y="725" width="0.0263%" height="15" fill="rgb(205,143,26)" fg:x="3739" fg:w="7"/><text x="14.2921%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (6 samples, 0.02%)</title><rect x="14.0684%" y="741" width="0.0225%" height="15" fill="rgb(236,26,9)" fg:x="3746" fg:w="6"/><text x="14.3184%" y="751.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (6 samples, 0.02%)</title><rect x="14.0684%" y="725" width="0.0225%" height="15" fill="rgb(221,165,53)" fg:x="3746" fg:w="6"/><text x="14.3184%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (6 samples, 0.02%)</title><rect x="14.0684%" y="709" width="0.0225%" height="15" fill="rgb(214,110,17)" fg:x="3746" fg:w="6"/><text x="14.3184%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (6 samples, 0.02%)</title><rect x="14.0684%" y="693" width="0.0225%" height="15" fill="rgb(237,197,12)" fg:x="3746" fg:w="6"/><text x="14.3184%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.02%)</title><rect x="14.0684%" y="677" width="0.0225%" height="15" fill="rgb(205,84,17)" fg:x="3746" fg:w="6"/><text x="14.3184%" y="687.50"></text></g><g><title>hashbrown::raw::h2 (6 samples, 0.02%)</title><rect x="14.0910%" y="741" width="0.0225%" height="15" fill="rgb(237,18,45)" fg:x="3752" fg:w="6"/><text x="14.3410%" y="751.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (92 samples, 0.35%)</title><rect x="13.7792%" y="901" width="0.3455%" height="15" fill="rgb(221,87,14)" fg:x="3669" fg:w="92"/><text x="14.0292%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (92 samples, 0.35%)</title><rect x="13.7792%" y="885" width="0.3455%" height="15" fill="rgb(238,186,15)" fg:x="3669" fg:w="92"/><text x="14.0292%" y="895.50"></text></g><g><title>graph_craft::proto::ProtoNode::map_ids::_{{closure}} (92 samples, 0.35%)</title><rect x="13.7792%" y="869" width="0.3455%" height="15" fill="rgb(208,115,11)" fg:x="3669" fg:w="92"/><text x="14.0292%" y="879.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids::_{{closure}}::_{{closure}} (91 samples, 0.34%)</title><rect x="13.7830%" y="853" width="0.3418%" height="15" fill="rgb(254,175,0)" fg:x="3670" fg:w="91"/><text x="14.0330%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (91 samples, 0.34%)</title><rect x="13.7830%" y="837" width="0.3418%" height="15" fill="rgb(227,24,42)" fg:x="3670" fg:w="91"/><text x="14.0330%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (91 samples, 0.34%)</title><rect x="13.7830%" y="821" width="0.3418%" height="15" fill="rgb(223,211,37)" fg:x="3670" fg:w="91"/><text x="14.0330%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (91 samples, 0.34%)</title><rect x="13.7830%" y="805" width="0.3418%" height="15" fill="rgb(235,49,27)" fg:x="3670" fg:w="91"/><text x="14.0330%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (42 samples, 0.16%)</title><rect x="13.9670%" y="789" width="0.1577%" height="15" fill="rgb(254,97,51)" fg:x="3719" fg:w="42"/><text x="14.2170%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (42 samples, 0.16%)</title><rect x="13.9670%" y="773" width="0.1577%" height="15" fill="rgb(249,51,40)" fg:x="3719" fg:w="42"/><text x="14.2170%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (42 samples, 0.16%)</title><rect x="13.9670%" y="757" width="0.1577%" height="15" fill="rgb(210,128,45)" fg:x="3719" fg:w="42"/><text x="14.2170%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.01%)</title><rect x="14.1135%" y="741" width="0.0113%" height="15" fill="rgb(224,137,50)" fg:x="3758" fg:w="3"/><text x="14.3635%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.01%)</title><rect x="14.1135%" y="725" width="0.0113%" height="15" fill="rgb(242,15,9)" fg:x="3758" fg:w="3"/><text x="14.3635%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (93 samples, 0.35%)</title><rect x="13.7792%" y="949" width="0.3493%" height="15" fill="rgb(233,187,41)" fg:x="3669" fg:w="93"/><text x="14.0292%" y="959.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (93 samples, 0.35%)</title><rect x="13.7792%" y="933" width="0.3493%" height="15" fill="rgb(227,2,29)" fg:x="3669" fg:w="93"/><text x="14.0292%" y="943.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (93 samples, 0.35%)</title><rect x="13.7792%" y="917" width="0.3493%" height="15" fill="rgb(222,70,3)" fg:x="3669" fg:w="93"/><text x="14.0292%" y="927.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.02%)</title><rect x="14.1510%" y="805" width="0.0150%" height="15" fill="rgb(213,11,42)" fg:x="3768" fg:w="4"/><text x="14.4010%" y="815.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="14.1323%" y="853" width="0.0376%" height="15" fill="rgb(225,150,9)" fg:x="3763" fg:w="10"/><text x="14.3823%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="14.1323%" y="837" width="0.0376%" height="15" fill="rgb(230,162,45)" fg:x="3763" fg:w="10"/><text x="14.3823%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="14.1323%" y="821" width="0.0376%" height="15" fill="rgb(222,14,52)" fg:x="3763" fg:w="10"/><text x="14.3823%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (15 samples, 0.06%)</title><rect x="14.1285%" y="885" width="0.0563%" height="15" fill="rgb(254,198,14)" fg:x="3762" fg:w="15"/><text x="14.3785%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.05%)</title><rect x="14.1323%" y="869" width="0.0526%" height="15" fill="rgb(220,217,30)" fg:x="3763" fg:w="14"/><text x="14.3823%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.02%)</title><rect x="14.1698%" y="853" width="0.0150%" height="15" fill="rgb(215,146,41)" fg:x="3773" fg:w="4"/><text x="14.4198%" y="863.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (4 samples, 0.02%)</title><rect x="14.1698%" y="837" width="0.0150%" height="15" fill="rgb(217,27,36)" fg:x="3773" fg:w="4"/><text x="14.4198%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (4 samples, 0.02%)</title><rect x="14.1698%" y="821" width="0.0150%" height="15" fill="rgb(219,218,39)" fg:x="3773" fg:w="4"/><text x="14.4198%" y="831.50"></text></g><g><title>core::hash::Hasher::write_u64 (4 samples, 0.02%)</title><rect x="14.1698%" y="805" width="0.0150%" height="15" fill="rgb(219,4,42)" fg:x="3773" fg:w="4"/><text x="14.4198%" y="815.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="14.1698%" y="789" width="0.0150%" height="15" fill="rgb(249,119,36)" fg:x="3773" fg:w="4"/><text x="14.4198%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="14.1698%" y="773" width="0.0150%" height="15" fill="rgb(209,23,33)" fg:x="3773" fg:w="4"/><text x="14.4198%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="14.1698%" y="757" width="0.0150%" height="15" fill="rgb(211,10,0)" fg:x="3773" fg:w="4"/><text x="14.4198%" y="767.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (128 samples, 0.48%)</title><rect x="13.7492%" y="997" width="0.4807%" height="15" fill="rgb(208,99,37)" fg:x="3661" fg:w="128"/><text x="13.9992%" y="1007.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids::_{{closure}} (125 samples, 0.47%)</title><rect x="13.7605%" y="981" width="0.4694%" height="15" fill="rgb(213,132,31)" fg:x="3664" fg:w="125"/><text x="14.0105%" y="991.50"></text></g><g><title>graph_craft::proto::ProtoNode::map_ids (125 samples, 0.47%)</title><rect x="13.7605%" y="965" width="0.4694%" height="15" fill="rgb(243,129,40)" fg:x="3664" fg:w="125"/><text x="14.0105%" y="975.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids::_{{closure}}::_{{closure}} (27 samples, 0.10%)</title><rect x="14.1285%" y="949" width="0.1014%" height="15" fill="rgb(210,66,33)" fg:x="3762" fg:w="27"/><text x="14.3785%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (27 samples, 0.10%)</title><rect x="14.1285%" y="933" width="0.1014%" height="15" fill="rgb(209,189,4)" fg:x="3762" fg:w="27"/><text x="14.3785%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (27 samples, 0.10%)</title><rect x="14.1285%" y="917" width="0.1014%" height="15" fill="rgb(214,107,37)" fg:x="3762" fg:w="27"/><text x="14.3785%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (27 samples, 0.10%)</title><rect x="14.1285%" y="901" width="0.1014%" height="15" fill="rgb(245,88,54)" fg:x="3762" fg:w="27"/><text x="14.3785%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (12 samples, 0.05%)</title><rect x="14.1848%" y="885" width="0.0451%" height="15" fill="rgb(205,146,20)" fg:x="3777" fg:w="12"/><text x="14.4348%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.05%)</title><rect x="14.1848%" y="869" width="0.0451%" height="15" fill="rgb(220,161,25)" fg:x="3777" fg:w="12"/><text x="14.4348%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (12 samples, 0.05%)</title><rect x="14.1848%" y="853" width="0.0451%" height="15" fill="rgb(215,152,15)" fg:x="3777" fg:w="12"/><text x="14.4348%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.05%)</title><rect x="14.3238%" y="965" width="0.0451%" height="15" fill="rgb(233,192,44)" fg:x="3814" fg:w="12"/><text x="14.5738%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11 samples, 0.04%)</title><rect x="14.3276%" y="949" width="0.0413%" height="15" fill="rgb(240,170,46)" fg:x="3815" fg:w="11"/><text x="14.5776%" y="959.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.04%)</title><rect x="14.3276%" y="933" width="0.0413%" height="15" fill="rgb(207,104,33)" fg:x="3815" fg:w="11"/><text x="14.5776%" y="943.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11 samples, 0.04%)</title><rect x="14.3276%" y="917" width="0.0413%" height="15" fill="rgb(219,21,39)" fg:x="3815" fg:w="11"/><text x="14.5776%" y="927.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6 samples, 0.02%)</title><rect x="14.3463%" y="901" width="0.0225%" height="15" fill="rgb(214,133,29)" fg:x="3820" fg:w="6"/><text x="14.5963%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.02%)</title><rect x="14.3463%" y="885" width="0.0225%" height="15" fill="rgb(226,93,6)" fg:x="3820" fg:w="6"/><text x="14.5963%" y="895.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="14.3501%" y="869" width="0.0188%" height="15" fill="rgb(252,222,34)" fg:x="3821" fg:w="5"/><text x="14.6001%" y="879.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="14.3689%" y="965" width="0.0188%" height="15" fill="rgb(252,92,48)" fg:x="3826" fg:w="5"/><text x="14.6189%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.03%)</title><rect x="14.7707%" y="837" width="0.0300%" height="15" fill="rgb(245,223,24)" fg:x="3933" fg:w="8"/><text x="15.0207%" y="847.50"></text></g><g><title>core::clone::Clone::clone (10 samples, 0.04%)</title><rect x="14.7670%" y="885" width="0.0376%" height="15" fill="rgb(205,176,3)" fg:x="3932" fg:w="10"/><text x="15.0170%" y="895.50"></text></g><g><title>&lt;graph_craft::document::Source as core::clone::Clone&gt;::clone (10 samples, 0.04%)</title><rect x="14.7670%" y="869" width="0.0376%" height="15" fill="rgb(235,151,15)" fg:x="3932" fg:w="10"/><text x="15.0170%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="14.7707%" y="853" width="0.0338%" height="15" fill="rgb(237,209,11)" fg:x="3933" fg:w="9"/><text x="15.0207%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (11 samples, 0.04%)</title><rect x="14.8045%" y="885" width="0.0413%" height="15" fill="rgb(243,227,24)" fg:x="3942" fg:w="11"/><text x="15.0545%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.04%)</title><rect x="14.8045%" y="869" width="0.0413%" height="15" fill="rgb(239,193,16)" fg:x="3942" fg:w="11"/><text x="15.0545%" y="879.50"></text></g><g><title>__memmove_avx512_unaligned_erms (10 samples, 0.04%)</title><rect x="14.8083%" y="853" width="0.0376%" height="15" fill="rgb(231,27,9)" fg:x="3943" fg:w="10"/><text x="15.0583%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (27 samples, 0.10%)</title><rect x="14.7557%" y="917" width="0.1014%" height="15" fill="rgb(219,169,10)" fg:x="3929" fg:w="27"/><text x="15.0057%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (27 samples, 0.10%)</title><rect x="14.7557%" y="901" width="0.1014%" height="15" fill="rgb(244,229,43)" fg:x="3929" fg:w="27"/><text x="15.0057%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_in (3 samples, 0.01%)</title><rect x="14.8571%" y="917" width="0.0113%" height="15" fill="rgb(254,38,20)" fg:x="3956" fg:w="3"/><text x="15.1071%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (60 samples, 0.23%)</title><rect x="14.8684%" y="917" width="0.2253%" height="15" fill="rgb(250,47,30)" fg:x="3959" fg:w="60"/><text x="15.1184%" y="927.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (60 samples, 0.23%)</title><rect x="14.8684%" y="901" width="0.2253%" height="15" fill="rgb(224,124,36)" fg:x="3959" fg:w="60"/><text x="15.1184%" y="911.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (60 samples, 0.23%)</title><rect x="14.8684%" y="885" width="0.2253%" height="15" fill="rgb(246,68,51)" fg:x="3959" fg:w="60"/><text x="15.1184%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (59 samples, 0.22%)</title><rect x="14.8721%" y="869" width="0.2216%" height="15" fill="rgb(253,43,49)" fg:x="3960" fg:w="59"/><text x="15.1221%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (59 samples, 0.22%)</title><rect x="14.8721%" y="853" width="0.2216%" height="15" fill="rgb(219,54,36)" fg:x="3960" fg:w="59"/><text x="15.1221%" y="863.50"></text></g><g><title>alloc::alloc::alloc (59 samples, 0.22%)</title><rect x="14.8721%" y="837" width="0.2216%" height="15" fill="rgb(227,133,34)" fg:x="3960" fg:w="59"/><text x="15.1221%" y="847.50"></text></g><g><title>__rdl_alloc (59 samples, 0.22%)</title><rect x="14.8721%" y="821" width="0.2216%" height="15" fill="rgb(247,227,15)" fg:x="3960" fg:w="59"/><text x="15.1221%" y="831.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (59 samples, 0.22%)</title><rect x="14.8721%" y="805" width="0.2216%" height="15" fill="rgb(229,96,14)" fg:x="3960" fg:w="59"/><text x="15.1221%" y="815.50"></text></g><g><title>malloc (59 samples, 0.22%)</title><rect x="14.8721%" y="789" width="0.2216%" height="15" fill="rgb(220,79,17)" fg:x="3960" fg:w="59"/><text x="15.1221%" y="799.50"></text></g><g><title>_int_malloc (49 samples, 0.18%)</title><rect x="14.9097%" y="773" width="0.1840%" height="15" fill="rgb(205,131,53)" fg:x="3970" fg:w="49"/><text x="15.1597%" y="783.50"></text></g><g><title>unlink_chunk.isra.0 (16 samples, 0.06%)</title><rect x="15.0336%" y="757" width="0.0601%" height="15" fill="rgb(209,50,29)" fg:x="4003" fg:w="16"/><text x="15.2836%" y="767.50"></text></g><g><title>&lt;graph_craft::document::OriginalLocation as core::clone::Clone&gt;::clone (219 samples, 0.82%)</title><rect x="14.2863%" y="981" width="0.8225%" height="15" fill="rgb(245,86,46)" fg:x="3804" fg:w="219"/><text x="14.5363%" y="991.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (192 samples, 0.72%)</title><rect x="14.3877%" y="965" width="0.7211%" height="15" fill="rgb(235,66,46)" fg:x="3831" fg:w="192"/><text x="14.6377%" y="975.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (116 samples, 0.44%)</title><rect x="14.6731%" y="949" width="0.4356%" height="15" fill="rgb(232,148,31)" fg:x="3907" fg:w="116"/><text x="14.9231%" y="959.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (113 samples, 0.42%)</title><rect x="14.6843%" y="933" width="0.4244%" height="15" fill="rgb(217,149,8)" fg:x="3910" fg:w="113"/><text x="14.9343%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_empty_singleton (3 samples, 0.01%)</title><rect x="15.0975%" y="917" width="0.0113%" height="15" fill="rgb(209,183,11)" fg:x="4020" fg:w="3"/><text x="15.3475%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.02%)</title><rect x="15.3153%" y="949" width="0.0225%" height="15" fill="rgb(208,55,20)" fg:x="4078" fg:w="6"/><text x="15.5653%" y="959.50"></text></g><g><title>__rdl_alloc (66 samples, 0.25%)</title><rect x="15.3378%" y="805" width="0.2479%" height="15" fill="rgb(218,39,14)" fg:x="4084" fg:w="66"/><text x="15.5878%" y="815.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (66 samples, 0.25%)</title><rect x="15.3378%" y="789" width="0.2479%" height="15" fill="rgb(216,169,33)" fg:x="4084" fg:w="66"/><text x="15.5878%" y="799.50"></text></g><g><title>malloc (66 samples, 0.25%)</title><rect x="15.3378%" y="773" width="0.2479%" height="15" fill="rgb(233,80,24)" fg:x="4084" fg:w="66"/><text x="15.5878%" y="783.50"></text></g><g><title>_int_malloc (53 samples, 0.20%)</title><rect x="15.3866%" y="757" width="0.1990%" height="15" fill="rgb(213,179,31)" fg:x="4097" fg:w="53"/><text x="15.6366%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (67 samples, 0.25%)</title><rect x="15.3378%" y="901" width="0.2516%" height="15" fill="rgb(209,19,5)" fg:x="4084" fg:w="67"/><text x="15.5878%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (67 samples, 0.25%)</title><rect x="15.3378%" y="885" width="0.2516%" height="15" fill="rgb(219,18,35)" fg:x="4084" fg:w="67"/><text x="15.5878%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (67 samples, 0.25%)</title><rect x="15.3378%" y="869" width="0.2516%" height="15" fill="rgb(209,169,16)" fg:x="4084" fg:w="67"/><text x="15.5878%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (67 samples, 0.25%)</title><rect x="15.3378%" y="853" width="0.2516%" height="15" fill="rgb(245,90,51)" fg:x="4084" fg:w="67"/><text x="15.5878%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (67 samples, 0.25%)</title><rect x="15.3378%" y="837" width="0.2516%" height="15" fill="rgb(220,99,45)" fg:x="4084" fg:w="67"/><text x="15.5878%" y="847.50"></text></g><g><title>alloc::alloc::alloc (67 samples, 0.25%)</title><rect x="15.3378%" y="821" width="0.2516%" height="15" fill="rgb(249,89,25)" fg:x="4084" fg:w="67"/><text x="15.5878%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (108 samples, 0.41%)</title><rect x="15.3153%" y="965" width="0.4056%" height="15" fill="rgb(239,193,0)" fg:x="4078" fg:w="108"/><text x="15.5653%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (102 samples, 0.38%)</title><rect x="15.3378%" y="949" width="0.3831%" height="15" fill="rgb(231,126,1)" fg:x="4084" fg:w="102"/><text x="15.5878%" y="959.50"></text></g><g><title>alloc::slice::hack::to_vec (102 samples, 0.38%)</title><rect x="15.3378%" y="933" width="0.3831%" height="15" fill="rgb(243,166,3)" fg:x="4084" fg:w="102"/><text x="15.5878%" y="943.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (102 samples, 0.38%)</title><rect x="15.3378%" y="917" width="0.3831%" height="15" fill="rgb(223,22,34)" fg:x="4084" fg:w="102"/><text x="15.5878%" y="927.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (35 samples, 0.13%)</title><rect x="15.5894%" y="901" width="0.1314%" height="15" fill="rgb(251,52,51)" fg:x="4151" fg:w="35"/><text x="15.8394%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.13%)</title><rect x="15.5894%" y="885" width="0.1314%" height="15" fill="rgb(221,165,28)" fg:x="4151" fg:w="35"/><text x="15.8394%" y="895.50"></text></g><g><title>__memmove_avx512_unaligned_erms (35 samples, 0.13%)</title><rect x="15.5894%" y="869" width="0.1314%" height="15" fill="rgb(218,121,47)" fg:x="4151" fg:w="35"/><text x="15.8394%" y="879.50"></text></g><g><title>&lt;graphene_core::vector::style::Fill as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="15.8411%" y="933" width="0.0225%" height="15" fill="rgb(209,120,9)" fg:x="4218" fg:w="6"/><text x="16.0911%" y="943.50"></text></g><g><title>&lt;graphene_core::vector::style::Gradient as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="15.8448%" y="917" width="0.0188%" height="15" fill="rgb(236,68,12)" fg:x="4219" fg:w="5"/><text x="16.0948%" y="927.50"></text></g><g><title>&lt;graphene_core::vector::style::GradientStops as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="15.8486%" y="901" width="0.0150%" height="15" fill="rgb(225,194,26)" fg:x="4220" fg:w="4"/><text x="16.0986%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="15.8486%" y="885" width="0.0150%" height="15" fill="rgb(231,84,39)" fg:x="4220" fg:w="4"/><text x="16.0986%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.01%)</title><rect x="15.8523%" y="869" width="0.0113%" height="15" fill="rgb(210,11,45)" fg:x="4221" fg:w="3"/><text x="16.1023%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.01%)</title><rect x="15.8523%" y="853" width="0.0113%" height="15" fill="rgb(224,54,52)" fg:x="4221" fg:w="3"/><text x="16.1023%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="15.8523%" y="837" width="0.0113%" height="15" fill="rgb(238,102,14)" fg:x="4221" fg:w="3"/><text x="16.1023%" y="847.50"></text></g><g><title>&lt;graphene_core::vector::style::PathStyle as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="15.8749%" y="917" width="0.0300%" height="15" fill="rgb(243,160,52)" fg:x="4227" fg:w="8"/><text x="16.1249%" y="927.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::RegionDomain as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="15.9087%" y="917" width="0.0113%" height="15" fill="rgb(216,114,19)" fg:x="4236" fg:w="3"/><text x="16.1587%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="15.9087%" y="901" width="0.0113%" height="15" fill="rgb(244,166,37)" fg:x="4236" fg:w="3"/><text x="16.1587%" y="911.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::VectorData as core::clone::Clone&gt;::clone (18 samples, 0.07%)</title><rect x="15.8636%" y="933" width="0.0676%" height="15" fill="rgb(246,29,44)" fg:x="4224" fg:w="18"/><text x="16.1136%" y="943.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::SegmentDomain as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="15.9199%" y="917" width="0.0113%" height="15" fill="rgb(215,56,53)" fg:x="4239" fg:w="3"/><text x="16.1699%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="15.9199%" y="901" width="0.0113%" height="15" fill="rgb(217,60,2)" fg:x="4239" fg:w="3"/><text x="16.1699%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.01%)</title><rect x="15.9199%" y="885" width="0.0113%" height="15" fill="rgb(207,26,24)" fg:x="4239" fg:w="3"/><text x="16.1699%" y="895.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.01%)</title><rect x="15.9199%" y="869" width="0.0113%" height="15" fill="rgb(252,210,15)" fg:x="4239" fg:w="3"/><text x="16.1699%" y="879.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="15.9199%" y="853" width="0.0113%" height="15" fill="rgb(253,209,26)" fg:x="4239" fg:w="3"/><text x="16.1699%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.01%)</title><rect x="15.9199%" y="837" width="0.0113%" height="15" fill="rgb(238,170,14)" fg:x="4239" fg:w="3"/><text x="16.1699%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="15.9199%" y="821" width="0.0113%" height="15" fill="rgb(216,178,15)" fg:x="4239" fg:w="3"/><text x="16.1699%" y="831.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="15.9199%" y="805" width="0.0113%" height="15" fill="rgb(250,197,2)" fg:x="4239" fg:w="3"/><text x="16.1699%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="15.9763%" y="837" width="0.0150%" height="15" fill="rgb(212,70,42)" fg:x="4254" fg:w="4"/><text x="16.2263%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="15.9763%" y="821" width="0.0150%" height="15" fill="rgb(227,213,9)" fg:x="4254" fg:w="4"/><text x="16.2263%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (4 samples, 0.02%)</title><rect x="15.9763%" y="805" width="0.0150%" height="15" fill="rgb(245,99,25)" fg:x="4254" fg:w="4"/><text x="16.2263%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.04%)</title><rect x="15.9725%" y="901" width="0.0376%" height="15" fill="rgb(250,82,29)" fg:x="4253" fg:w="10"/><text x="16.2225%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.03%)</title><rect x="15.9763%" y="885" width="0.0338%" height="15" fill="rgb(241,226,54)" fg:x="4254" fg:w="9"/><text x="16.2263%" y="895.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.03%)</title><rect x="15.9763%" y="869" width="0.0338%" height="15" fill="rgb(221,99,41)" fg:x="4254" fg:w="9"/><text x="16.2263%" y="879.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.03%)</title><rect x="15.9763%" y="853" width="0.0338%" height="15" fill="rgb(213,90,21)" fg:x="4254" fg:w="9"/><text x="16.2263%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.02%)</title><rect x="15.9913%" y="837" width="0.0188%" height="15" fill="rgb(205,208,24)" fg:x="4258" fg:w="5"/><text x="16.2413%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.02%)</title><rect x="15.9913%" y="821" width="0.0188%" height="15" fill="rgb(246,31,12)" fg:x="4258" fg:w="5"/><text x="16.2413%" y="831.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="15.9913%" y="805" width="0.0188%" height="15" fill="rgb(213,154,6)" fg:x="4258" fg:w="5"/><text x="16.2413%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (13 samples, 0.05%)</title><rect x="16.0739%" y="853" width="0.0488%" height="15" fill="rgb(222,163,29)" fg:x="4280" fg:w="13"/><text x="16.3239%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (13 samples, 0.05%)</title><rect x="16.0739%" y="837" width="0.0488%" height="15" fill="rgb(227,201,8)" fg:x="4280" fg:w="13"/><text x="16.3239%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.05%)</title><rect x="16.0739%" y="821" width="0.0488%" height="15" fill="rgb(233,9,32)" fg:x="4280" fg:w="13"/><text x="16.3239%" y="831.50"></text></g><g><title>__memmove_avx512_unaligned_erms (13 samples, 0.05%)</title><rect x="16.0739%" y="805" width="0.0488%" height="15" fill="rgb(217,54,24)" fg:x="4280" fg:w="13"/><text x="16.3239%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (39 samples, 0.15%)</title><rect x="16.0101%" y="901" width="0.1465%" height="15" fill="rgb(235,192,0)" fg:x="4263" fg:w="39"/><text x="16.2601%" y="911.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (22 samples, 0.08%)</title><rect x="16.0739%" y="885" width="0.0826%" height="15" fill="rgb(235,45,9)" fg:x="4280" fg:w="22"/><text x="16.3239%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (22 samples, 0.08%)</title><rect x="16.0739%" y="869" width="0.0826%" height="15" fill="rgb(246,42,40)" fg:x="4280" fg:w="22"/><text x="16.3239%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (9 samples, 0.03%)</title><rect x="16.1227%" y="853" width="0.0338%" height="15" fill="rgb(248,111,24)" fg:x="4293" fg:w="9"/><text x="16.3727%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (9 samples, 0.03%)</title><rect x="16.1227%" y="837" width="0.0338%" height="15" fill="rgb(249,65,22)" fg:x="4293" fg:w="9"/><text x="16.3727%" y="847.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (9 samples, 0.03%)</title><rect x="16.1227%" y="821" width="0.0338%" height="15" fill="rgb(238,111,51)" fg:x="4293" fg:w="9"/><text x="16.3727%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.03%)</title><rect x="16.1227%" y="805" width="0.0338%" height="15" fill="rgb(250,118,22)" fg:x="4293" fg:w="9"/><text x="16.3727%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.03%)</title><rect x="16.1227%" y="789" width="0.0338%" height="15" fill="rgb(234,84,26)" fg:x="4293" fg:w="9"/><text x="16.3727%" y="799.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.03%)</title><rect x="16.1227%" y="773" width="0.0338%" height="15" fill="rgb(243,172,12)" fg:x="4293" fg:w="9"/><text x="16.3727%" y="783.50"></text></g><g><title>__rdl_alloc (9 samples, 0.03%)</title><rect x="16.1227%" y="757" width="0.0338%" height="15" fill="rgb(236,150,49)" fg:x="4293" fg:w="9"/><text x="16.3727%" y="767.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.03%)</title><rect x="16.1227%" y="741" width="0.0338%" height="15" fill="rgb(225,197,26)" fg:x="4293" fg:w="9"/><text x="16.3727%" y="751.50"></text></g><g><title>malloc (9 samples, 0.03%)</title><rect x="16.1227%" y="725" width="0.0338%" height="15" fill="rgb(214,17,42)" fg:x="4293" fg:w="9"/><text x="16.3727%" y="735.50"></text></g><g><title>_int_malloc (6 samples, 0.02%)</title><rect x="16.1340%" y="709" width="0.0225%" height="15" fill="rgb(224,165,40)" fg:x="4296" fg:w="6"/><text x="16.3840%" y="719.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::PointModification as core::clone::Clone&gt;::clone (53 samples, 0.20%)</title><rect x="15.9688%" y="917" width="0.1990%" height="15" fill="rgb(246,100,4)" fg:x="4252" fg:w="53"/><text x="16.2188%" y="927.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="16.1565%" y="901" width="0.0113%" height="15" fill="rgb(222,103,0)" fg:x="4302" fg:w="3"/><text x="16.4065%" y="911.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="16.1565%" y="885" width="0.0113%" height="15" fill="rgb(227,189,26)" fg:x="4302" fg:w="3"/><text x="16.4065%" y="895.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="16.1565%" y="869" width="0.0113%" height="15" fill="rgb(214,202,17)" fg:x="4302" fg:w="3"/><text x="16.4065%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="16.1678%" y="837" width="0.0113%" height="15" fill="rgb(229,111,3)" fg:x="4305" fg:w="3"/><text x="16.4178%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="16.1678%" y="821" width="0.0113%" height="15" fill="rgb(229,172,15)" fg:x="4305" fg:w="3"/><text x="16.4178%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.01%)</title><rect x="16.1678%" y="805" width="0.0113%" height="15" fill="rgb(230,224,35)" fg:x="4305" fg:w="3"/><text x="16.4178%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="16.1678%" y="789" width="0.0113%" height="15" fill="rgb(251,141,6)" fg:x="4305" fg:w="3"/><text x="16.4178%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="16.1678%" y="773" width="0.0113%" height="15" fill="rgb(225,208,6)" fg:x="4305" fg:w="3"/><text x="16.4178%" y="783.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="16.1678%" y="757" width="0.0113%" height="15" fill="rgb(246,181,16)" fg:x="4305" fg:w="3"/><text x="16.4178%" y="767.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="16.1678%" y="741" width="0.0113%" height="15" fill="rgb(227,129,36)" fg:x="4305" fg:w="3"/><text x="16.4178%" y="751.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="16.1678%" y="725" width="0.0113%" height="15" fill="rgb(248,117,24)" fg:x="4305" fg:w="3"/><text x="16.4178%" y="735.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="16.1678%" y="709" width="0.0113%" height="15" fill="rgb(214,185,35)" fg:x="4305" fg:w="3"/><text x="16.4178%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="16.1678%" y="901" width="0.0150%" height="15" fill="rgb(236,150,34)" fg:x="4305" fg:w="4"/><text x="16.4178%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.02%)</title><rect x="16.1678%" y="885" width="0.0150%" height="15" fill="rgb(243,228,27)" fg:x="4305" fg:w="4"/><text x="16.4178%" y="895.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.02%)</title><rect x="16.1678%" y="869" width="0.0150%" height="15" fill="rgb(245,77,44)" fg:x="4305" fg:w="4"/><text x="16.4178%" y="879.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.02%)</title><rect x="16.1678%" y="853" width="0.0150%" height="15" fill="rgb(235,214,42)" fg:x="4305" fg:w="4"/><text x="16.4178%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="16.1828%" y="901" width="0.0526%" height="15" fill="rgb(221,74,3)" fg:x="4309" fg:w="14"/><text x="16.4328%" y="911.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.04%)</title><rect x="16.1941%" y="885" width="0.0413%" height="15" fill="rgb(206,121,29)" fg:x="4312" fg:w="11"/><text x="16.4441%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.04%)</title><rect x="16.1978%" y="869" width="0.0376%" height="15" fill="rgb(249,131,53)" fg:x="4313" fg:w="10"/><text x="16.4478%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (9 samples, 0.03%)</title><rect x="16.2016%" y="853" width="0.0338%" height="15" fill="rgb(236,170,29)" fg:x="4314" fg:w="9"/><text x="16.4516%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (9 samples, 0.03%)</title><rect x="16.2016%" y="837" width="0.0338%" height="15" fill="rgb(247,96,15)" fg:x="4314" fg:w="9"/><text x="16.4516%" y="847.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (9 samples, 0.03%)</title><rect x="16.2016%" y="821" width="0.0338%" height="15" fill="rgb(211,210,7)" fg:x="4314" fg:w="9"/><text x="16.4516%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.03%)</title><rect x="16.2016%" y="805" width="0.0338%" height="15" fill="rgb(240,88,50)" fg:x="4314" fg:w="9"/><text x="16.4516%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.03%)</title><rect x="16.2016%" y="789" width="0.0338%" height="15" fill="rgb(209,229,26)" fg:x="4314" fg:w="9"/><text x="16.4516%" y="799.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.03%)</title><rect x="16.2016%" y="773" width="0.0338%" height="15" fill="rgb(210,68,23)" fg:x="4314" fg:w="9"/><text x="16.4516%" y="783.50"></text></g><g><title>__rdl_alloc (9 samples, 0.03%)</title><rect x="16.2016%" y="757" width="0.0338%" height="15" fill="rgb(229,180,13)" fg:x="4314" fg:w="9"/><text x="16.4516%" y="767.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.03%)</title><rect x="16.2016%" y="741" width="0.0338%" height="15" fill="rgb(236,53,44)" fg:x="4314" fg:w="9"/><text x="16.4516%" y="751.50"></text></g><g><title>malloc (9 samples, 0.03%)</title><rect x="16.2016%" y="725" width="0.0338%" height="15" fill="rgb(244,214,29)" fg:x="4314" fg:w="9"/><text x="16.4516%" y="735.50"></text></g><g><title>_int_malloc (8 samples, 0.03%)</title><rect x="16.2054%" y="709" width="0.0300%" height="15" fill="rgb(220,75,29)" fg:x="4315" fg:w="8"/><text x="16.4554%" y="719.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::RegionModification as core::clone::Clone&gt;::clone (21 samples, 0.08%)</title><rect x="16.1678%" y="917" width="0.0789%" height="15" fill="rgb(214,183,37)" fg:x="4305" fg:w="21"/><text x="16.4178%" y="927.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="16.2354%" y="901" width="0.0113%" height="15" fill="rgb(239,117,29)" fg:x="4323" fg:w="3"/><text x="16.4854%" y="911.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="16.2354%" y="885" width="0.0113%" height="15" fill="rgb(237,171,35)" fg:x="4323" fg:w="3"/><text x="16.4854%" y="895.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="16.2354%" y="869" width="0.0113%" height="15" fill="rgb(229,178,53)" fg:x="4323" fg:w="3"/><text x="16.4854%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="16.2542%" y="901" width="0.0150%" height="15" fill="rgb(210,102,19)" fg:x="4328" fg:w="4"/><text x="16.5042%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.02%)</title><rect x="16.2542%" y="885" width="0.0150%" height="15" fill="rgb(235,127,22)" fg:x="4328" fg:w="4"/><text x="16.5042%" y="895.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.02%)</title><rect x="16.2542%" y="869" width="0.0150%" height="15" fill="rgb(244,31,31)" fg:x="4328" fg:w="4"/><text x="16.5042%" y="879.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.02%)</title><rect x="16.2542%" y="853" width="0.0150%" height="15" fill="rgb(231,43,21)" fg:x="4328" fg:w="4"/><text x="16.5042%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (22 samples, 0.08%)</title><rect x="16.2692%" y="853" width="0.0826%" height="15" fill="rgb(217,131,35)" fg:x="4332" fg:w="22"/><text x="16.5192%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (21 samples, 0.08%)</title><rect x="16.2730%" y="837" width="0.0789%" height="15" fill="rgb(221,149,4)" fg:x="4333" fg:w="21"/><text x="16.5230%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.08%)</title><rect x="16.2730%" y="821" width="0.0789%" height="15" fill="rgb(232,170,28)" fg:x="4333" fg:w="21"/><text x="16.5230%" y="831.50"></text></g><g><title>__memmove_avx512_unaligned_erms (20 samples, 0.08%)</title><rect x="16.2767%" y="805" width="0.0751%" height="15" fill="rgb(238,56,10)" fg:x="4334" fg:w="20"/><text x="16.5267%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (44 samples, 0.17%)</title><rect x="16.2692%" y="901" width="0.1652%" height="15" fill="rgb(235,196,14)" fg:x="4332" fg:w="44"/><text x="16.5192%" y="911.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (44 samples, 0.17%)</title><rect x="16.2692%" y="885" width="0.1652%" height="15" fill="rgb(216,45,48)" fg:x="4332" fg:w="44"/><text x="16.5192%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (44 samples, 0.17%)</title><rect x="16.2692%" y="869" width="0.1652%" height="15" fill="rgb(238,213,17)" fg:x="4332" fg:w="44"/><text x="16.5192%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (22 samples, 0.08%)</title><rect x="16.3518%" y="853" width="0.0826%" height="15" fill="rgb(212,13,2)" fg:x="4354" fg:w="22"/><text x="16.6018%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (22 samples, 0.08%)</title><rect x="16.3518%" y="837" width="0.0826%" height="15" fill="rgb(240,114,20)" fg:x="4354" fg:w="22"/><text x="16.6018%" y="847.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (20 samples, 0.08%)</title><rect x="16.3593%" y="821" width="0.0751%" height="15" fill="rgb(228,41,40)" fg:x="4356" fg:w="20"/><text x="16.6093%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.08%)</title><rect x="16.3593%" y="805" width="0.0751%" height="15" fill="rgb(244,132,35)" fg:x="4356" fg:w="20"/><text x="16.6093%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.08%)</title><rect x="16.3593%" y="789" width="0.0751%" height="15" fill="rgb(253,189,4)" fg:x="4356" fg:w="20"/><text x="16.6093%" y="799.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.08%)</title><rect x="16.3593%" y="773" width="0.0751%" height="15" fill="rgb(224,37,19)" fg:x="4356" fg:w="20"/><text x="16.6093%" y="783.50"></text></g><g><title>__rdl_alloc (20 samples, 0.08%)</title><rect x="16.3593%" y="757" width="0.0751%" height="15" fill="rgb(235,223,18)" fg:x="4356" fg:w="20"/><text x="16.6093%" y="767.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.08%)</title><rect x="16.3593%" y="741" width="0.0751%" height="15" fill="rgb(235,163,25)" fg:x="4356" fg:w="20"/><text x="16.6093%" y="751.50"></text></g><g><title>malloc (19 samples, 0.07%)</title><rect x="16.3631%" y="725" width="0.0714%" height="15" fill="rgb(217,145,28)" fg:x="4357" fg:w="19"/><text x="16.6131%" y="735.50"></text></g><g><title>_int_malloc (14 samples, 0.05%)</title><rect x="16.3819%" y="709" width="0.0526%" height="15" fill="rgb(223,223,32)" fg:x="4362" fg:w="14"/><text x="16.6319%" y="719.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::SegmentModification as core::clone::Clone&gt;::clone (51 samples, 0.19%)</title><rect x="16.2467%" y="917" width="0.1915%" height="15" fill="rgb(227,189,39)" fg:x="4326" fg:w="51"/><text x="16.4967%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (3 samples, 0.01%)</title><rect x="16.4420%" y="837" width="0.0113%" height="15" fill="rgb(248,10,22)" fg:x="4378" fg:w="3"/><text x="16.6920%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="16.4420%" y="821" width="0.0113%" height="15" fill="rgb(248,46,39)" fg:x="4378" fg:w="3"/><text x="16.6920%" y="831.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="16.4420%" y="805" width="0.0113%" height="15" fill="rgb(248,113,48)" fg:x="4378" fg:w="3"/><text x="16.6920%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (5 samples, 0.02%)</title><rect x="16.4382%" y="853" width="0.0188%" height="15" fill="rgb(245,16,25)" fg:x="4377" fg:w="5"/><text x="16.6882%" y="863.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::VectorModification as core::clone::Clone&gt;::clone (141 samples, 0.53%)</title><rect x="15.9312%" y="933" width="0.5295%" height="15" fill="rgb(249,152,16)" fg:x="4242" fg:w="141"/><text x="16.1812%" y="943.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="16.4382%" y="917" width="0.0225%" height="15" fill="rgb(250,16,1)" fg:x="4377" fg:w="6"/><text x="16.6882%" y="927.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="16.4382%" y="901" width="0.0225%" height="15" fill="rgb(249,138,3)" fg:x="4377" fg:w="6"/><text x="16.6882%" y="911.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="16.4382%" y="885" width="0.0225%" height="15" fill="rgb(227,71,41)" fg:x="4377" fg:w="6"/><text x="16.6882%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="16.4382%" y="869" width="0.0225%" height="15" fill="rgb(209,184,23)" fg:x="4377" fg:w="6"/><text x="16.6882%" y="879.50"></text></g><g><title>&lt;graphene_core::memo::MemoHash&lt;T&gt; as core::clone::Clone&gt;::clone (199 samples, 0.75%)</title><rect x="15.7209%" y="965" width="0.7474%" height="15" fill="rgb(223,215,31)" fg:x="4186" fg:w="199"/><text x="15.9709%" y="975.50"></text></g><g><title>&lt;graph_craft::document::value::TaggedValue as core::clone::Clone&gt;::clone (178 samples, 0.67%)</title><rect x="15.7998%" y="949" width="0.6685%" height="15" fill="rgb(210,146,28)" fg:x="4207" fg:w="178"/><text x="16.0498%" y="959.50"></text></g><g><title>&lt;graph_craft::proto::ConstructionArgs as core::clone::Clone&gt;::clone (372 samples, 1.40%)</title><rect x="15.1087%" y="981" width="1.3971%" height="15" fill="rgb(209,183,41)" fg:x="4023" fg:w="372"/><text x="15.3587%" y="991.50"></text></g><g><title>__memmove_avx512_unaligned_erms (10 samples, 0.04%)</title><rect x="16.4682%" y="965" width="0.0376%" height="15" fill="rgb(209,224,45)" fg:x="4385" fg:w="10"/><text x="16.7182%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.06%)</title><rect x="16.7311%" y="837" width="0.0601%" height="15" fill="rgb(224,209,51)" fg:x="4455" fg:w="16"/><text x="16.9811%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.06%)</title><rect x="16.7311%" y="821" width="0.0601%" height="15" fill="rgb(223,17,39)" fg:x="4455" fg:w="16"/><text x="16.9811%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (16 samples, 0.06%)</title><rect x="16.7311%" y="805" width="0.0601%" height="15" fill="rgb(234,204,37)" fg:x="4455" fg:w="16"/><text x="16.9811%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.06%)</title><rect x="16.7349%" y="789" width="0.0563%" height="15" fill="rgb(236,120,5)" fg:x="4456" fg:w="15"/><text x="16.9849%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.06%)</title><rect x="16.7349%" y="773" width="0.0563%" height="15" fill="rgb(248,97,27)" fg:x="4456" fg:w="15"/><text x="16.9849%" y="783.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.06%)</title><rect x="16.7349%" y="757" width="0.0563%" height="15" fill="rgb(240,66,17)" fg:x="4456" fg:w="15"/><text x="16.9849%" y="767.50"></text></g><g><title>__rdl_alloc (15 samples, 0.06%)</title><rect x="16.7349%" y="741" width="0.0563%" height="15" fill="rgb(210,79,3)" fg:x="4456" fg:w="15"/><text x="16.9849%" y="751.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (15 samples, 0.06%)</title><rect x="16.7349%" y="725" width="0.0563%" height="15" fill="rgb(214,176,27)" fg:x="4456" fg:w="15"/><text x="16.9849%" y="735.50"></text></g><g><title>malloc (15 samples, 0.06%)</title><rect x="16.7349%" y="709" width="0.0563%" height="15" fill="rgb(235,185,3)" fg:x="4456" fg:w="15"/><text x="16.9849%" y="719.50"></text></g><g><title>_int_malloc (14 samples, 0.05%)</title><rect x="16.7386%" y="693" width="0.0526%" height="15" fill="rgb(227,24,12)" fg:x="4457" fg:w="14"/><text x="16.9886%" y="703.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (28 samples, 0.11%)</title><rect x="16.7236%" y="949" width="0.1052%" height="15" fill="rgb(252,169,48)" fg:x="4453" fg:w="28"/><text x="16.9736%" y="959.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (26 samples, 0.10%)</title><rect x="16.7311%" y="933" width="0.0976%" height="15" fill="rgb(212,65,1)" fg:x="4455" fg:w="26"/><text x="16.9811%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (26 samples, 0.10%)</title><rect x="16.7311%" y="917" width="0.0976%" height="15" fill="rgb(242,39,24)" fg:x="4455" fg:w="26"/><text x="16.9811%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (26 samples, 0.10%)</title><rect x="16.7311%" y="901" width="0.0976%" height="15" fill="rgb(249,32,23)" fg:x="4455" fg:w="26"/><text x="16.9811%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (26 samples, 0.10%)</title><rect x="16.7311%" y="885" width="0.0976%" height="15" fill="rgb(251,195,23)" fg:x="4455" fg:w="26"/><text x="16.9811%" y="895.50"></text></g><g><title>alloc::slice::hack::to_vec (26 samples, 0.10%)</title><rect x="16.7311%" y="869" width="0.0976%" height="15" fill="rgb(236,174,8)" fg:x="4455" fg:w="26"/><text x="16.9811%" y="879.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (26 samples, 0.10%)</title><rect x="16.7311%" y="853" width="0.0976%" height="15" fill="rgb(220,197,8)" fg:x="4455" fg:w="26"/><text x="16.9811%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (10 samples, 0.04%)</title><rect x="16.7912%" y="837" width="0.0376%" height="15" fill="rgb(240,108,37)" fg:x="4471" fg:w="10"/><text x="17.0412%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.04%)</title><rect x="16.7912%" y="821" width="0.0376%" height="15" fill="rgb(232,176,24)" fg:x="4471" fg:w="10"/><text x="17.0412%" y="831.50"></text></g><g><title>__memmove_avx512_unaligned_erms (10 samples, 0.04%)</title><rect x="16.7912%" y="805" width="0.0376%" height="15" fill="rgb(243,35,29)" fg:x="4471" fg:w="10"/><text x="17.0412%" y="815.50"></text></g><g><title>__rdl_alloc (27 samples, 0.10%)</title><rect x="16.8325%" y="725" width="0.1014%" height="15" fill="rgb(210,37,18)" fg:x="4482" fg:w="27"/><text x="17.0825%" y="735.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (27 samples, 0.10%)</title><rect x="16.8325%" y="709" width="0.1014%" height="15" fill="rgb(224,184,40)" fg:x="4482" fg:w="27"/><text x="17.0825%" y="719.50"></text></g><g><title>malloc (25 samples, 0.09%)</title><rect x="16.8400%" y="693" width="0.0939%" height="15" fill="rgb(236,39,29)" fg:x="4484" fg:w="25"/><text x="17.0900%" y="703.50"></text></g><g><title>_int_malloc (18 samples, 0.07%)</title><rect x="16.8663%" y="677" width="0.0676%" height="15" fill="rgb(232,48,39)" fg:x="4491" fg:w="18"/><text x="17.1163%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (28 samples, 0.11%)</title><rect x="16.8325%" y="821" width="0.1052%" height="15" fill="rgb(236,34,42)" fg:x="4482" fg:w="28"/><text x="17.0825%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (28 samples, 0.11%)</title><rect x="16.8325%" y="805" width="0.1052%" height="15" fill="rgb(243,106,37)" fg:x="4482" fg:w="28"/><text x="17.0825%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (28 samples, 0.11%)</title><rect x="16.8325%" y="789" width="0.1052%" height="15" fill="rgb(218,96,6)" fg:x="4482" fg:w="28"/><text x="17.0825%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.11%)</title><rect x="16.8325%" y="773" width="0.1052%" height="15" fill="rgb(235,130,12)" fg:x="4482" fg:w="28"/><text x="17.0825%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.11%)</title><rect x="16.8325%" y="757" width="0.1052%" height="15" fill="rgb(231,95,0)" fg:x="4482" fg:w="28"/><text x="17.0825%" y="767.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.11%)</title><rect x="16.8325%" y="741" width="0.1052%" height="15" fill="rgb(228,12,23)" fg:x="4482" fg:w="28"/><text x="17.0825%" y="751.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (36 samples, 0.14%)</title><rect x="16.8288%" y="933" width="0.1352%" height="15" fill="rgb(216,12,1)" fg:x="4481" fg:w="36"/><text x="17.0788%" y="943.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (35 samples, 0.13%)</title><rect x="16.8325%" y="917" width="0.1314%" height="15" fill="rgb(219,59,3)" fg:x="4482" fg:w="35"/><text x="17.0825%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (35 samples, 0.13%)</title><rect x="16.8325%" y="901" width="0.1314%" height="15" fill="rgb(215,208,46)" fg:x="4482" fg:w="35"/><text x="17.0825%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (35 samples, 0.13%)</title><rect x="16.8325%" y="885" width="0.1314%" height="15" fill="rgb(254,224,29)" fg:x="4482" fg:w="35"/><text x="17.0825%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (35 samples, 0.13%)</title><rect x="16.8325%" y="869" width="0.1314%" height="15" fill="rgb(232,14,29)" fg:x="4482" fg:w="35"/><text x="17.0825%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (35 samples, 0.13%)</title><rect x="16.8325%" y="853" width="0.1314%" height="15" fill="rgb(208,45,52)" fg:x="4482" fg:w="35"/><text x="17.0825%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (35 samples, 0.13%)</title><rect x="16.8325%" y="837" width="0.1314%" height="15" fill="rgb(234,191,28)" fg:x="4482" fg:w="35"/><text x="17.0825%" y="847.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7 samples, 0.03%)</title><rect x="16.9377%" y="821" width="0.0263%" height="15" fill="rgb(244,67,43)" fg:x="4510" fg:w="7"/><text x="17.1877%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.03%)</title><rect x="16.9377%" y="805" width="0.0263%" height="15" fill="rgb(236,189,24)" fg:x="4510" fg:w="7"/><text x="17.1877%" y="815.50"></text></g><g><title>__memmove_avx512_unaligned_erms (7 samples, 0.03%)</title><rect x="16.9377%" y="789" width="0.0263%" height="15" fill="rgb(239,214,33)" fg:x="4510" fg:w="7"/><text x="17.1877%" y="799.50"></text></g><g><title>&lt;graph_craft::proto::ProtoNodeInput as core::clone::Clone&gt;::clone (123 samples, 0.46%)</title><rect x="16.5058%" y="981" width="0.4619%" height="15" fill="rgb(226,176,41)" fg:x="4395" fg:w="123"/><text x="16.7558%" y="991.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (69 samples, 0.26%)</title><rect x="16.7086%" y="965" width="0.2591%" height="15" fill="rgb(248,47,8)" fg:x="4449" fg:w="69"/><text x="16.9586%" y="975.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (37 samples, 0.14%)</title><rect x="16.8288%" y="949" width="0.1390%" height="15" fill="rgb(218,81,44)" fg:x="4481" fg:w="37"/><text x="17.0788%" y="959.50"></text></g><g><title>__rdl_alloc (51 samples, 0.19%)</title><rect x="16.9903%" y="757" width="0.1915%" height="15" fill="rgb(213,98,6)" fg:x="4524" fg:w="51"/><text x="17.2403%" y="767.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (51 samples, 0.19%)</title><rect x="16.9903%" y="741" width="0.1915%" height="15" fill="rgb(222,85,22)" fg:x="4524" fg:w="51"/><text x="17.2403%" y="751.50"></text></g><g><title>malloc (51 samples, 0.19%)</title><rect x="16.9903%" y="725" width="0.1915%" height="15" fill="rgb(239,46,39)" fg:x="4524" fg:w="51"/><text x="17.2403%" y="735.50"></text></g><g><title>_int_malloc (30 samples, 0.11%)</title><rect x="17.0691%" y="709" width="0.1127%" height="15" fill="rgb(237,12,29)" fg:x="4545" fg:w="30"/><text x="17.3191%" y="719.50"></text></g><g><title>unlink_chunk.isra.0 (3 samples, 0.01%)</title><rect x="17.1705%" y="693" width="0.0113%" height="15" fill="rgb(214,77,8)" fg:x="4572" fg:w="3"/><text x="17.4205%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (54 samples, 0.20%)</title><rect x="16.9903%" y="853" width="0.2028%" height="15" fill="rgb(217,168,37)" fg:x="4524" fg:w="54"/><text x="17.2403%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (54 samples, 0.20%)</title><rect x="16.9903%" y="837" width="0.2028%" height="15" fill="rgb(221,217,23)" fg:x="4524" fg:w="54"/><text x="17.2403%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (54 samples, 0.20%)</title><rect x="16.9903%" y="821" width="0.2028%" height="15" fill="rgb(243,229,36)" fg:x="4524" fg:w="54"/><text x="17.2403%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (54 samples, 0.20%)</title><rect x="16.9903%" y="805" width="0.2028%" height="15" fill="rgb(251,163,40)" fg:x="4524" fg:w="54"/><text x="17.2403%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (54 samples, 0.20%)</title><rect x="16.9903%" y="789" width="0.2028%" height="15" fill="rgb(237,222,12)" fg:x="4524" fg:w="54"/><text x="17.2403%" y="799.50"></text></g><g><title>alloc::alloc::alloc (54 samples, 0.20%)</title><rect x="16.9903%" y="773" width="0.2028%" height="15" fill="rgb(248,132,6)" fg:x="4524" fg:w="54"/><text x="17.2403%" y="783.50"></text></g><g><title>core::ptr::read_volatile (3 samples, 0.01%)</title><rect x="17.1818%" y="757" width="0.0113%" height="15" fill="rgb(227,167,50)" fg:x="4575" fg:w="3"/><text x="17.4318%" y="767.50"></text></g><g><title>&lt;graphene_core::types::ProtoNodeIdentifier as core::clone::Clone&gt;::clone (75 samples, 0.28%)</title><rect x="16.9677%" y="981" width="0.2817%" height="15" fill="rgb(242,84,37)" fg:x="4518" fg:w="75"/><text x="17.2177%" y="991.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (75 samples, 0.28%)</title><rect x="16.9677%" y="965" width="0.2817%" height="15" fill="rgb(212,4,50)" fg:x="4518" fg:w="75"/><text x="17.2177%" y="975.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (69 samples, 0.26%)</title><rect x="16.9903%" y="949" width="0.2591%" height="15" fill="rgb(230,228,32)" fg:x="4524" fg:w="69"/><text x="17.2403%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (69 samples, 0.26%)</title><rect x="16.9903%" y="933" width="0.2591%" height="15" fill="rgb(248,217,23)" fg:x="4524" fg:w="69"/><text x="17.2403%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (69 samples, 0.26%)</title><rect x="16.9903%" y="917" width="0.2591%" height="15" fill="rgb(238,197,32)" fg:x="4524" fg:w="69"/><text x="17.2403%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (69 samples, 0.26%)</title><rect x="16.9903%" y="901" width="0.2591%" height="15" fill="rgb(236,106,1)" fg:x="4524" fg:w="69"/><text x="17.2403%" y="911.50"></text></g><g><title>alloc::slice::hack::to_vec (69 samples, 0.26%)</title><rect x="16.9903%" y="885" width="0.2591%" height="15" fill="rgb(219,228,13)" fg:x="4524" fg:w="69"/><text x="17.2403%" y="895.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (69 samples, 0.26%)</title><rect x="16.9903%" y="869" width="0.2591%" height="15" fill="rgb(238,30,35)" fg:x="4524" fg:w="69"/><text x="17.2403%" y="879.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (15 samples, 0.06%)</title><rect x="17.1931%" y="853" width="0.0563%" height="15" fill="rgb(236,70,23)" fg:x="4578" fg:w="15"/><text x="17.4431%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.06%)</title><rect x="17.1931%" y="837" width="0.0563%" height="15" fill="rgb(249,104,48)" fg:x="4578" fg:w="15"/><text x="17.4431%" y="847.50"></text></g><g><title>__memmove_avx512_unaligned_erms (15 samples, 0.06%)</title><rect x="17.1931%" y="821" width="0.0563%" height="15" fill="rgb(254,117,50)" fg:x="4578" fg:w="15"/><text x="17.4431%" y="831.50"></text></g><g><title>&lt;graph_craft::proto::ProtoNode as core::clone::Clone&gt;::clone (864 samples, 3.24%)</title><rect x="14.2299%" y="997" width="3.2448%" height="15" fill="rgb(223,152,4)" fg:x="3789" fg:w="864"/><text x="14.4799%" y="1007.50">&lt;gr..</text></g><g><title>__memmove_avx512_unaligned_erms (60 samples, 0.23%)</title><rect x="17.2494%" y="981" width="0.2253%" height="15" fill="rgb(245,6,2)" fg:x="4593" fg:w="60"/><text x="17.4994%" y="991.50"></text></g><g><title>__memmove_avx512_unaligned_erms (103 samples, 0.39%)</title><rect x="17.4747%" y="997" width="0.3868%" height="15" fill="rgb(249,150,24)" fg:x="4653" fg:w="103"/><text x="17.7247%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (166 samples, 0.62%)</title><rect x="17.8616%" y="997" width="0.6234%" height="15" fill="rgb(228,185,42)" fg:x="4756" fg:w="166"/><text x="18.1116%" y="1007.50"></text></g><g><title>core::ptr::write (166 samples, 0.62%)</title><rect x="17.8616%" y="981" width="0.6234%" height="15" fill="rgb(226,39,33)" fg:x="4756" fg:w="166"/><text x="18.1116%" y="991.50"></text></g><g><title>__memmove_avx512_unaligned_erms (165 samples, 0.62%)</title><rect x="17.8653%" y="965" width="0.6197%" height="15" fill="rgb(221,166,19)" fg:x="4757" fg:w="165"/><text x="18.1153%" y="975.50"></text></g><g><title>[unknown] (45 samples, 0.17%)</title><rect x="18.3160%" y="949" width="0.1690%" height="15" fill="rgb(209,109,2)" fg:x="4877" fg:w="45"/><text x="18.5660%" y="959.50"></text></g><g><title>[unknown] (17 samples, 0.06%)</title><rect x="18.4212%" y="933" width="0.0638%" height="15" fill="rgb(252,216,26)" fg:x="4905" fg:w="17"/><text x="18.6712%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.02%)</title><rect x="18.4850%" y="997" width="0.0188%" height="15" fill="rgb(227,173,36)" fg:x="4922" fg:w="5"/><text x="18.7350%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.02%)</title><rect x="18.4850%" y="981" width="0.0188%" height="15" fill="rgb(209,90,7)" fg:x="4922" fg:w="5"/><text x="18.7350%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.02%)</title><rect x="18.4850%" y="965" width="0.0188%" height="15" fill="rgb(250,194,11)" fg:x="4922" fg:w="5"/><text x="18.7350%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (5 samples, 0.02%)</title><rect x="18.4850%" y="949" width="0.0188%" height="15" fill="rgb(220,72,50)" fg:x="4922" fg:w="5"/><text x="18.7350%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.02%)</title><rect x="18.4850%" y="933" width="0.0188%" height="15" fill="rgb(222,106,48)" fg:x="4922" fg:w="5"/><text x="18.7350%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.02%)</title><rect x="18.4850%" y="917" width="0.0188%" height="15" fill="rgb(216,220,45)" fg:x="4922" fg:w="5"/><text x="18.7350%" y="927.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="18.4850%" y="901" width="0.0188%" height="15" fill="rgb(234,112,18)" fg:x="4922" fg:w="5"/><text x="18.7350%" y="911.50"></text></g><g><title>__rdl_alloc (5 samples, 0.02%)</title><rect x="18.4850%" y="885" width="0.0188%" height="15" fill="rgb(206,179,9)" fg:x="4922" fg:w="5"/><text x="18.7350%" y="895.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.02%)</title><rect x="18.4850%" y="869" width="0.0188%" height="15" fill="rgb(215,115,40)" fg:x="4922" fg:w="5"/><text x="18.7350%" y="879.50"></text></g><g><title>malloc (5 samples, 0.02%)</title><rect x="18.4850%" y="853" width="0.0188%" height="15" fill="rgb(222,69,34)" fg:x="4922" fg:w="5"/><text x="18.7350%" y="863.50"></text></g><g><title>_int_malloc (5 samples, 0.02%)</title><rect x="18.4850%" y="837" width="0.0188%" height="15" fill="rgb(209,161,10)" fg:x="4922" fg:w="5"/><text x="18.7350%" y="847.50"></text></g><g><title>sysmalloc (5 samples, 0.02%)</title><rect x="18.4850%" y="821" width="0.0188%" height="15" fill="rgb(217,6,38)" fg:x="4922" fg:w="5"/><text x="18.7350%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.03%)</title><rect x="18.6127%" y="709" width="0.0338%" height="15" fill="rgb(229,229,48)" fg:x="4956" fg:w="9"/><text x="18.8627%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (10 samples, 0.04%)</title><rect x="18.6728%" y="693" width="0.0376%" height="15" fill="rgb(225,21,28)" fg:x="4972" fg:w="10"/><text x="18.9228%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (45 samples, 0.17%)</title><rect x="18.5639%" y="757" width="0.1690%" height="15" fill="rgb(206,33,13)" fg:x="4943" fg:w="45"/><text x="18.8139%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (45 samples, 0.17%)</title><rect x="18.5639%" y="741" width="0.1690%" height="15" fill="rgb(242,178,17)" fg:x="4943" fg:w="45"/><text x="18.8139%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (45 samples, 0.17%)</title><rect x="18.5639%" y="725" width="0.1690%" height="15" fill="rgb(220,162,5)" fg:x="4943" fg:w="45"/><text x="18.8139%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (23 samples, 0.09%)</title><rect x="18.6465%" y="709" width="0.0864%" height="15" fill="rgb(210,33,43)" fg:x="4965" fg:w="23"/><text x="18.8965%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.02%)</title><rect x="18.7103%" y="693" width="0.0225%" height="15" fill="rgb(216,116,54)" fg:x="4982" fg:w="6"/><text x="18.9603%" y="703.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.01%)</title><rect x="18.7329%" y="757" width="0.0113%" height="15" fill="rgb(249,92,24)" fg:x="4988" fg:w="3"/><text x="18.9829%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 0.04%)</title><rect x="18.7930%" y="645" width="0.0376%" height="15" fill="rgb(231,189,14)" fg:x="5004" fg:w="10"/><text x="19.0430%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 0.03%)</title><rect x="18.8042%" y="629" width="0.0263%" height="15" fill="rgb(230,8,41)" fg:x="5007" fg:w="7"/><text x="19.0542%" y="639.50"></text></g><g><title>core::hash::sip::u8to64_le (9 samples, 0.03%)</title><rect x="18.8305%" y="645" width="0.0338%" height="15" fill="rgb(249,7,27)" fg:x="5014" fg:w="9"/><text x="19.0805%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (31 samples, 0.12%)</title><rect x="18.7516%" y="693" width="0.1164%" height="15" fill="rgb(232,86,5)" fg:x="4993" fg:w="31"/><text x="19.0016%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (31 samples, 0.12%)</title><rect x="18.7516%" y="677" width="0.1164%" height="15" fill="rgb(224,175,18)" fg:x="4993" fg:w="31"/><text x="19.0016%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (31 samples, 0.12%)</title><rect x="18.7516%" y="661" width="0.1164%" height="15" fill="rgb(220,129,12)" fg:x="4993" fg:w="31"/><text x="19.0016%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (88 samples, 0.33%)</title><rect x="18.5601%" y="789" width="0.3305%" height="15" fill="rgb(210,19,36)" fg:x="4942" fg:w="88"/><text x="18.8101%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (87 samples, 0.33%)</title><rect x="18.5639%" y="773" width="0.3267%" height="15" fill="rgb(219,96,14)" fg:x="4943" fg:w="87"/><text x="18.8139%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (39 samples, 0.15%)</title><rect x="18.7441%" y="757" width="0.1465%" height="15" fill="rgb(249,106,1)" fg:x="4991" fg:w="39"/><text x="18.9941%" y="767.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (37 samples, 0.14%)</title><rect x="18.7516%" y="741" width="0.1390%" height="15" fill="rgb(249,155,20)" fg:x="4993" fg:w="37"/><text x="19.0016%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (37 samples, 0.14%)</title><rect x="18.7516%" y="725" width="0.1390%" height="15" fill="rgb(244,168,9)" fg:x="4993" fg:w="37"/><text x="19.0016%" y="735.50"></text></g><g><title>core::hash::Hasher::write_u64 (37 samples, 0.14%)</title><rect x="18.7516%" y="709" width="0.1390%" height="15" fill="rgb(216,23,50)" fg:x="4993" fg:w="37"/><text x="19.0016%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_ne_bytes (6 samples, 0.02%)</title><rect x="18.8681%" y="693" width="0.0225%" height="15" fill="rgb(224,219,20)" fg:x="5024" fg:w="6"/><text x="19.1181%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.04%)</title><rect x="18.8981%" y="757" width="0.0376%" height="15" fill="rgb(222,156,15)" fg:x="5032" fg:w="10"/><text x="19.1481%" y="767.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (10 samples, 0.04%)</title><rect x="18.8981%" y="741" width="0.0376%" height="15" fill="rgb(231,97,17)" fg:x="5032" fg:w="10"/><text x="19.1481%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (23 samples, 0.09%)</title><rect x="18.9394%" y="757" width="0.0864%" height="15" fill="rgb(218,70,48)" fg:x="5043" fg:w="23"/><text x="19.1894%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (20 samples, 0.08%)</title><rect x="18.9507%" y="741" width="0.0751%" height="15" fill="rgb(212,196,52)" fg:x="5046" fg:w="20"/><text x="19.2007%" y="751.50"></text></g><g><title>hashbrown::raw::is_full (20 samples, 0.08%)</title><rect x="18.9507%" y="725" width="0.0751%" height="15" fill="rgb(243,203,18)" fg:x="5046" fg:w="20"/><text x="19.2007%" y="735.50"></text></g><g><title>hashbrown::raw::h2 (14 samples, 0.05%)</title><rect x="19.0258%" y="757" width="0.0526%" height="15" fill="rgb(252,125,41)" fg:x="5066" fg:w="14"/><text x="19.2758%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.02%)</title><rect x="19.0784%" y="757" width="0.0150%" height="15" fill="rgb(223,180,33)" fg:x="5080" fg:w="4"/><text x="19.3284%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.02%)</title><rect x="19.0784%" y="741" width="0.0150%" height="15" fill="rgb(254,159,46)" fg:x="5080" fg:w="4"/><text x="19.3284%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (57 samples, 0.21%)</title><rect x="18.8906%" y="789" width="0.2141%" height="15" fill="rgb(254,38,10)" fg:x="5030" fg:w="57"/><text x="19.1406%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (56 samples, 0.21%)</title><rect x="18.8944%" y="773" width="0.2103%" height="15" fill="rgb(208,217,32)" fg:x="5031" fg:w="56"/><text x="19.1444%" y="783.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3 samples, 0.01%)</title><rect x="19.0934%" y="757" width="0.0113%" height="15" fill="rgb(221,120,13)" fg:x="5084" fg:w="3"/><text x="19.3434%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.01%)</title><rect x="19.0934%" y="741" width="0.0113%" height="15" fill="rgb(246,54,52)" fg:x="5084" fg:w="3"/><text x="19.3434%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.01%)</title><rect x="19.0934%" y="725" width="0.0113%" height="15" fill="rgb(242,34,25)" fg:x="5084" fg:w="3"/><text x="19.3434%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (22 samples, 0.08%)</title><rect x="19.1047%" y="773" width="0.0826%" height="15" fill="rgb(247,209,9)" fg:x="5087" fg:w="22"/><text x="19.3547%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (22 samples, 0.08%)</title><rect x="19.1047%" y="757" width="0.0826%" height="15" fill="rgb(228,71,26)" fg:x="5087" fg:w="22"/><text x="19.3547%" y="767.50"></text></g><g><title>core::ptr::write (22 samples, 0.08%)</title><rect x="19.1047%" y="741" width="0.0826%" height="15" fill="rgb(222,145,49)" fg:x="5087" fg:w="22"/><text x="19.3547%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (197 samples, 0.74%)</title><rect x="18.5150%" y="869" width="0.7399%" height="15" fill="rgb(218,121,17)" fg:x="4930" fg:w="197"/><text x="18.7650%" y="879.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (197 samples, 0.74%)</title><rect x="18.5150%" y="853" width="0.7399%" height="15" fill="rgb(244,50,7)" fg:x="4930" fg:w="197"/><text x="18.7650%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (197 samples, 0.74%)</title><rect x="18.5150%" y="837" width="0.7399%" height="15" fill="rgb(246,229,37)" fg:x="4930" fg:w="197"/><text x="18.7650%" y="847.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (197 samples, 0.74%)</title><rect x="18.5150%" y="821" width="0.7399%" height="15" fill="rgb(225,18,5)" fg:x="4930" fg:w="197"/><text x="18.7650%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (196 samples, 0.74%)</title><rect x="18.5188%" y="805" width="0.7361%" height="15" fill="rgb(213,204,8)" fg:x="4931" fg:w="196"/><text x="18.7688%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (40 samples, 0.15%)</title><rect x="19.1047%" y="789" width="0.1502%" height="15" fill="rgb(238,103,6)" fg:x="5087" fg:w="40"/><text x="19.3547%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (18 samples, 0.07%)</title><rect x="19.1873%" y="773" width="0.0676%" height="15" fill="rgb(222,25,35)" fg:x="5109" fg:w="18"/><text x="19.4373%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (9 samples, 0.03%)</title><rect x="19.2211%" y="757" width="0.0338%" height="15" fill="rgb(213,203,35)" fg:x="5118" fg:w="9"/><text x="19.4711%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (9 samples, 0.03%)</title><rect x="19.2211%" y="741" width="0.0338%" height="15" fill="rgb(221,79,53)" fg:x="5118" fg:w="9"/><text x="19.4711%" y="751.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (6 samples, 0.02%)</title><rect x="19.2324%" y="725" width="0.0225%" height="15" fill="rgb(243,200,35)" fg:x="5121" fg:w="6"/><text x="19.4824%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (201 samples, 0.75%)</title><rect x="18.5038%" y="933" width="0.7549%" height="15" fill="rgb(248,60,25)" fg:x="4927" fg:w="201"/><text x="18.7538%" y="943.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (201 samples, 0.75%)</title><rect x="18.5038%" y="917" width="0.7549%" height="15" fill="rgb(227,53,46)" fg:x="4927" fg:w="201"/><text x="18.7538%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (201 samples, 0.75%)</title><rect x="18.5038%" y="901" width="0.7549%" height="15" fill="rgb(216,120,32)" fg:x="4927" fg:w="201"/><text x="18.7538%" y="911.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (201 samples, 0.75%)</title><rect x="18.5038%" y="885" width="0.7549%" height="15" fill="rgb(220,134,1)" fg:x="4927" fg:w="201"/><text x="18.7538%" y="895.50"></text></g><g><title>malloc_consolidate (17 samples, 0.06%)</title><rect x="19.3262%" y="677" width="0.0638%" height="15" fill="rgb(237,168,5)" fg:x="5146" fg:w="17"/><text x="19.5762%" y="687.50"></text></g><g><title>unlink_chunk.isra.0 (3 samples, 0.01%)</title><rect x="19.3788%" y="661" width="0.0113%" height="15" fill="rgb(231,100,33)" fg:x="5160" fg:w="3"/><text x="19.6288%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (37 samples, 0.14%)</title><rect x="19.2586%" y="821" width="0.1390%" height="15" fill="rgb(236,177,47)" fg:x="5128" fg:w="37"/><text x="19.5086%" y="831.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (37 samples, 0.14%)</title><rect x="19.2586%" y="805" width="0.1390%" height="15" fill="rgb(235,7,49)" fg:x="5128" fg:w="37"/><text x="19.5086%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.14%)</title><rect x="19.2586%" y="789" width="0.1390%" height="15" fill="rgb(232,119,22)" fg:x="5128" fg:w="37"/><text x="19.5086%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.14%)</title><rect x="19.2586%" y="773" width="0.1390%" height="15" fill="rgb(254,73,53)" fg:x="5128" fg:w="37"/><text x="19.5086%" y="783.50"></text></g><g><title>alloc::alloc::alloc (37 samples, 0.14%)</title><rect x="19.2586%" y="757" width="0.1390%" height="15" fill="rgb(251,35,20)" fg:x="5128" fg:w="37"/><text x="19.5086%" y="767.50"></text></g><g><title>__rdl_alloc (37 samples, 0.14%)</title><rect x="19.2586%" y="741" width="0.1390%" height="15" fill="rgb(241,119,20)" fg:x="5128" fg:w="37"/><text x="19.5086%" y="751.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (37 samples, 0.14%)</title><rect x="19.2586%" y="725" width="0.1390%" height="15" fill="rgb(207,102,14)" fg:x="5128" fg:w="37"/><text x="19.5086%" y="735.50"></text></g><g><title>malloc (37 samples, 0.14%)</title><rect x="19.2586%" y="709" width="0.1390%" height="15" fill="rgb(248,201,50)" fg:x="5128" fg:w="37"/><text x="19.5086%" y="719.50"></text></g><g><title>_int_malloc (37 samples, 0.14%)</title><rect x="19.2586%" y="693" width="0.1390%" height="15" fill="rgb(222,185,44)" fg:x="5128" fg:w="37"/><text x="19.5086%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (239 samples, 0.90%)</title><rect x="18.5038%" y="997" width="0.8976%" height="15" fill="rgb(218,107,18)" fg:x="4927" fg:w="239"/><text x="18.7538%" y="1007.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (239 samples, 0.90%)</title><rect x="18.5038%" y="981" width="0.8976%" height="15" fill="rgb(237,177,39)" fg:x="4927" fg:w="239"/><text x="18.7538%" y="991.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (239 samples, 0.90%)</title><rect x="18.5038%" y="965" width="0.8976%" height="15" fill="rgb(246,69,6)" fg:x="4927" fg:w="239"/><text x="18.7538%" y="975.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (239 samples, 0.90%)</title><rect x="18.5038%" y="949" width="0.8976%" height="15" fill="rgb(234,208,37)" fg:x="4927" fg:w="239"/><text x="18.7538%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (38 samples, 0.14%)</title><rect x="19.2586%" y="933" width="0.1427%" height="15" fill="rgb(225,4,6)" fg:x="5128" fg:w="38"/><text x="19.5086%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (38 samples, 0.14%)</title><rect x="19.2586%" y="917" width="0.1427%" height="15" fill="rgb(233,45,0)" fg:x="5128" fg:w="38"/><text x="19.5086%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (38 samples, 0.14%)</title><rect x="19.2586%" y="901" width="0.1427%" height="15" fill="rgb(226,136,5)" fg:x="5128" fg:w="38"/><text x="19.5086%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (38 samples, 0.14%)</title><rect x="19.2586%" y="885" width="0.1427%" height="15" fill="rgb(211,91,47)" fg:x="5128" fg:w="38"/><text x="19.5086%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (38 samples, 0.14%)</title><rect x="19.2586%" y="869" width="0.1427%" height="15" fill="rgb(242,88,51)" fg:x="5128" fg:w="38"/><text x="19.5086%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (38 samples, 0.14%)</title><rect x="19.2586%" y="853" width="0.1427%" height="15" fill="rgb(230,91,28)" fg:x="5128" fg:w="38"/><text x="19.5086%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (38 samples, 0.14%)</title><rect x="19.2586%" y="837" width="0.1427%" height="15" fill="rgb(254,186,29)" fg:x="5128" fg:w="38"/><text x="19.5086%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (5 samples, 0.02%)</title><rect x="19.4389%" y="901" width="0.0188%" height="15" fill="rgb(238,6,4)" fg:x="5176" fg:w="5"/><text x="19.6889%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (5 samples, 0.02%)</title><rect x="19.4389%" y="885" width="0.0188%" height="15" fill="rgb(221,151,16)" fg:x="5176" fg:w="5"/><text x="19.6889%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="19.4389%" y="869" width="0.0188%" height="15" fill="rgb(251,143,52)" fg:x="5176" fg:w="5"/><text x="19.6889%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.02%)</title><rect x="19.4389%" y="853" width="0.0188%" height="15" fill="rgb(206,90,15)" fg:x="5176" fg:w="5"/><text x="19.6889%" y="863.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (9 samples, 0.03%)</title><rect x="19.4915%" y="805" width="0.0338%" height="15" fill="rgb(218,35,8)" fg:x="5190" fg:w="9"/><text x="19.7415%" y="815.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (9 samples, 0.03%)</title><rect x="19.4915%" y="789" width="0.0338%" height="15" fill="rgb(239,215,6)" fg:x="5190" fg:w="9"/><text x="19.7415%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::Source,usize)&gt; (9 samples, 0.03%)</title><rect x="19.4915%" y="773" width="0.0338%" height="15" fill="rgb(245,116,39)" fg:x="5190" fg:w="9"/><text x="19.7415%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::Source&gt; (9 samples, 0.03%)</title><rect x="19.4915%" y="757" width="0.0338%" height="15" fill="rgb(242,65,28)" fg:x="5190" fg:w="9"/><text x="19.7415%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt; (9 samples, 0.03%)</title><rect x="19.4915%" y="741" width="0.0338%" height="15" fill="rgb(252,132,53)" fg:x="5190" fg:w="9"/><text x="19.7415%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeId&gt;&gt; (9 samples, 0.03%)</title><rect x="19.4915%" y="725" width="0.0338%" height="15" fill="rgb(224,159,50)" fg:x="5190" fg:w="9"/><text x="19.7415%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="19.4915%" y="709" width="0.0338%" height="15" fill="rgb(224,93,4)" fg:x="5190" fg:w="9"/><text x="19.7415%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (9 samples, 0.03%)</title><rect x="19.4915%" y="693" width="0.0338%" height="15" fill="rgb(208,81,34)" fg:x="5190" fg:w="9"/><text x="19.7415%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (19 samples, 0.07%)</title><rect x="19.4802%" y="821" width="0.0714%" height="15" fill="rgb(233,92,54)" fg:x="5187" fg:w="19"/><text x="19.7302%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (7 samples, 0.03%)</title><rect x="19.5253%" y="805" width="0.0263%" height="15" fill="rgb(237,21,14)" fg:x="5199" fg:w="7"/><text x="19.7753%" y="815.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (7 samples, 0.03%)</title><rect x="19.5253%" y="789" width="0.0263%" height="15" fill="rgb(249,128,51)" fg:x="5199" fg:w="7"/><text x="19.7753%" y="799.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (7 samples, 0.03%)</title><rect x="19.5253%" y="773" width="0.0263%" height="15" fill="rgb(223,129,24)" fg:x="5199" fg:w="7"/><text x="19.7753%" y="783.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (5 samples, 0.02%)</title><rect x="19.5328%" y="757" width="0.0188%" height="15" fill="rgb(231,168,25)" fg:x="5201" fg:w="5"/><text x="19.7828%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.02%)</title><rect x="19.5328%" y="741" width="0.0188%" height="15" fill="rgb(224,39,20)" fg:x="5201" fg:w="5"/><text x="19.7828%" y="751.50"></text></g><g><title>_int_free_create_chunk (10 samples, 0.04%)</title><rect x="19.5967%" y="709" width="0.0376%" height="15" fill="rgb(225,152,53)" fg:x="5218" fg:w="10"/><text x="19.8467%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::OriginalLocation&gt; (54 samples, 0.20%)</title><rect x="19.4389%" y="917" width="0.2028%" height="15" fill="rgb(252,17,24)" fg:x="5176" fg:w="54"/><text x="19.6889%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graph_craft::document::Source,usize&gt;&gt; (49 samples, 0.18%)</title><rect x="19.4577%" y="901" width="0.1840%" height="15" fill="rgb(250,114,30)" fg:x="5181" fg:w="49"/><text x="19.7077%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graph_craft::document::Source,usize,std::hash::random::RandomState&gt;&gt; (49 samples, 0.18%)</title><rect x="19.4577%" y="885" width="0.1840%" height="15" fill="rgb(229,5,4)" fg:x="5181" fg:w="49"/><text x="19.7077%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graph_craft::document::Source,usize)&gt;&gt; (49 samples, 0.18%)</title><rect x="19.4577%" y="869" width="0.1840%" height="15" fill="rgb(225,176,49)" fg:x="5181" fg:w="49"/><text x="19.7077%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.18%)</title><rect x="19.4577%" y="853" width="0.1840%" height="15" fill="rgb(224,221,49)" fg:x="5181" fg:w="49"/><text x="19.7077%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (49 samples, 0.18%)</title><rect x="19.4577%" y="837" width="0.1840%" height="15" fill="rgb(253,169,27)" fg:x="5181" fg:w="49"/><text x="19.7077%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (24 samples, 0.09%)</title><rect x="19.5516%" y="821" width="0.0901%" height="15" fill="rgb(211,206,16)" fg:x="5206" fg:w="24"/><text x="19.8016%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.09%)</title><rect x="19.5516%" y="805" width="0.0901%" height="15" fill="rgb(244,87,35)" fg:x="5206" fg:w="24"/><text x="19.8016%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.09%)</title><rect x="19.5516%" y="789" width="0.0901%" height="15" fill="rgb(246,28,10)" fg:x="5206" fg:w="24"/><text x="19.8016%" y="799.50"></text></g><g><title>__rdl_dealloc (24 samples, 0.09%)</title><rect x="19.5516%" y="773" width="0.0901%" height="15" fill="rgb(229,12,44)" fg:x="5206" fg:w="24"/><text x="19.8016%" y="783.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (24 samples, 0.09%)</title><rect x="19.5516%" y="757" width="0.0901%" height="15" fill="rgb(210,145,37)" fg:x="5206" fg:w="24"/><text x="19.8016%" y="767.50"></text></g><g><title>cfree@GLIBC_2.2.5 (24 samples, 0.09%)</title><rect x="19.5516%" y="741" width="0.0901%" height="15" fill="rgb(227,112,52)" fg:x="5206" fg:w="24"/><text x="19.8016%" y="751.50"></text></g><g><title>_int_free_merge_chunk (19 samples, 0.07%)</title><rect x="19.5704%" y="725" width="0.0714%" height="15" fill="rgb(238,155,34)" fg:x="5211" fg:w="19"/><text x="19.8204%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (36 samples, 0.14%)</title><rect x="19.6718%" y="853" width="0.1352%" height="15" fill="rgb(239,226,36)" fg:x="5238" fg:w="36"/><text x="19.9218%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (36 samples, 0.14%)</title><rect x="19.6718%" y="837" width="0.1352%" height="15" fill="rgb(230,16,23)" fg:x="5238" fg:w="36"/><text x="19.9218%" y="847.50"></text></g><g><title>__rdl_dealloc (36 samples, 0.14%)</title><rect x="19.6718%" y="821" width="0.1352%" height="15" fill="rgb(236,171,36)" fg:x="5238" fg:w="36"/><text x="19.9218%" y="831.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (36 samples, 0.14%)</title><rect x="19.6718%" y="805" width="0.1352%" height="15" fill="rgb(221,22,14)" fg:x="5238" fg:w="36"/><text x="19.9218%" y="815.50"></text></g><g><title>cfree@GLIBC_2.2.5 (32 samples, 0.12%)</title><rect x="19.6868%" y="789" width="0.1202%" height="15" fill="rgb(242,43,11)" fg:x="5242" fg:w="32"/><text x="19.9368%" y="799.50"></text></g><g><title>_int_free (14 samples, 0.05%)</title><rect x="19.7544%" y="773" width="0.0526%" height="15" fill="rgb(232,69,23)" fg:x="5260" fg:w="14"/><text x="20.0044%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(graph_craft::document::NodeId,bool)&gt;&gt; (38 samples, 0.14%)</title><rect x="19.6680%" y="901" width="0.1427%" height="15" fill="rgb(216,180,54)" fg:x="5237" fg:w="38"/><text x="19.9180%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(graph_craft::document::NodeId,bool)&gt;&gt; (38 samples, 0.14%)</title><rect x="19.6680%" y="885" width="0.1427%" height="15" fill="rgb(216,5,24)" fg:x="5237" fg:w="38"/><text x="19.9180%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.14%)</title><rect x="19.6680%" y="869" width="0.1427%" height="15" fill="rgb(225,89,9)" fg:x="5237" fg:w="38"/><text x="19.9180%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::value::TaggedValue&gt; (12 samples, 0.05%)</title><rect x="19.8370%" y="885" width="0.0451%" height="15" fill="rgb(243,75,33)" fg:x="5282" fg:w="12"/><text x="20.0870%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::VectorData&gt; (3 samples, 0.01%)</title><rect x="19.8858%" y="885" width="0.0113%" height="15" fill="rgb(247,141,45)" fg:x="5295" fg:w="3"/><text x="20.1358%" y="895.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="19.9121%" y="853" width="0.0113%" height="15" fill="rgb(232,177,36)" fg:x="5302" fg:w="3"/><text x="20.1621%" y="863.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7 samples, 0.03%)</title><rect x="19.9046%" y="869" width="0.0263%" height="15" fill="rgb(219,125,36)" fg:x="5300" fg:w="7"/><text x="20.1546%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graphene_core::vector::vector_data::attributes::PointId&gt;&gt; (4 samples, 0.02%)</title><rect x="19.9309%" y="853" width="0.0150%" height="15" fill="rgb(227,94,9)" fg:x="5307" fg:w="4"/><text x="20.1809%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graphene_core::vector::vector_data::attributes::PointId&gt;&gt; (4 samples, 0.02%)</title><rect x="19.9309%" y="837" width="0.0150%" height="15" fill="rgb(240,34,52)" fg:x="5307" fg:w="4"/><text x="20.1809%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="19.9309%" y="821" width="0.0150%" height="15" fill="rgb(216,45,12)" fg:x="5307" fg:w="4"/><text x="20.1809%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.02%)</title><rect x="19.9309%" y="805" width="0.0150%" height="15" fill="rgb(246,21,19)" fg:x="5307" fg:w="4"/><text x="20.1809%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.02%)</title><rect x="19.9309%" y="789" width="0.0150%" height="15" fill="rgb(213,98,42)" fg:x="5307" fg:w="4"/><text x="20.1809%" y="799.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.02%)</title><rect x="19.9309%" y="773" width="0.0150%" height="15" fill="rgb(250,136,47)" fg:x="5307" fg:w="4"/><text x="20.1809%" y="783.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.02%)</title><rect x="19.9309%" y="757" width="0.0150%" height="15" fill="rgb(251,124,27)" fg:x="5307" fg:w="4"/><text x="20.1809%" y="767.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.02%)</title><rect x="19.9309%" y="741" width="0.0150%" height="15" fill="rgb(229,180,14)" fg:x="5307" fg:w="4"/><text x="20.1809%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2&gt;&gt; (3 samples, 0.01%)</title><rect x="19.9459%" y="853" width="0.0113%" height="15" fill="rgb(245,216,25)" fg:x="5311" fg:w="3"/><text x="20.1959%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2,std::hash::random::RandomState&gt;&gt; (3 samples, 0.01%)</title><rect x="19.9459%" y="837" width="0.0113%" height="15" fill="rgb(251,43,5)" fg:x="5311" fg:w="3"/><text x="20.1959%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2)&gt;&gt; (3 samples, 0.01%)</title><rect x="19.9459%" y="821" width="0.0113%" height="15" fill="rgb(250,128,24)" fg:x="5311" fg:w="3"/><text x="20.1959%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="19.9459%" y="805" width="0.0113%" height="15" fill="rgb(217,117,27)" fg:x="5311" fg:w="3"/><text x="20.1959%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (3 samples, 0.01%)</title><rect x="19.9459%" y="789" width="0.0113%" height="15" fill="rgb(245,147,4)" fg:x="5311" fg:w="3"/><text x="20.1959%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3 samples, 0.01%)</title><rect x="19.9459%" y="773" width="0.0113%" height="15" fill="rgb(242,201,35)" fg:x="5311" fg:w="3"/><text x="20.1959%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="19.9459%" y="757" width="0.0113%" height="15" fill="rgb(218,181,1)" fg:x="5311" fg:w="3"/><text x="20.1959%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="19.9459%" y="741" width="0.0113%" height="15" fill="rgb(222,6,29)" fg:x="5311" fg:w="3"/><text x="20.1959%" y="751.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.01%)</title><rect x="19.9459%" y="725" width="0.0113%" height="15" fill="rgb(208,186,3)" fg:x="5311" fg:w="3"/><text x="20.1959%" y="735.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.01%)</title><rect x="19.9459%" y="709" width="0.0113%" height="15" fill="rgb(216,36,26)" fg:x="5311" fg:w="3"/><text x="20.1959%" y="719.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.01%)</title><rect x="19.9459%" y="693" width="0.0113%" height="15" fill="rgb(248,201,23)" fg:x="5311" fg:w="3"/><text x="20.1959%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::PointModification&gt; (8 samples, 0.03%)</title><rect x="19.9309%" y="869" width="0.0300%" height="15" fill="rgb(251,170,31)" fg:x="5307" fg:w="8"/><text x="20.1809%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graphene_core::vector::vector_data::attributes::RegionId&gt;&gt; (4 samples, 0.02%)</title><rect x="19.9609%" y="853" width="0.0150%" height="15" fill="rgb(207,110,25)" fg:x="5315" fg:w="4"/><text x="20.2109%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graphene_core::vector::vector_data::attributes::RegionId&gt;&gt; (4 samples, 0.02%)</title><rect x="19.9609%" y="837" width="0.0150%" height="15" fill="rgb(250,54,15)" fg:x="5315" fg:w="4"/><text x="20.2109%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="19.9609%" y="821" width="0.0150%" height="15" fill="rgb(227,68,33)" fg:x="5315" fg:w="4"/><text x="20.2109%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.02%)</title><rect x="19.9609%" y="805" width="0.0150%" height="15" fill="rgb(238,34,41)" fg:x="5315" fg:w="4"/><text x="20.2109%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.02%)</title><rect x="19.9609%" y="789" width="0.0150%" height="15" fill="rgb(220,11,15)" fg:x="5315" fg:w="4"/><text x="20.2109%" y="799.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.02%)</title><rect x="19.9609%" y="773" width="0.0150%" height="15" fill="rgb(246,111,35)" fg:x="5315" fg:w="4"/><text x="20.2109%" y="783.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.02%)</title><rect x="19.9609%" y="757" width="0.0150%" height="15" fill="rgb(209,88,53)" fg:x="5315" fg:w="4"/><text x="20.2109%" y="767.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.02%)</title><rect x="19.9609%" y="741" width="0.0150%" height="15" fill="rgb(231,185,47)" fg:x="5315" fg:w="4"/><text x="20.2109%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::RegionId,core::ops::range::RangeInclusive&lt;graphene_core::vector::vector_data::attributes::SegmentId&gt;&gt;&gt; (7 samples, 0.03%)</title><rect x="19.9760%" y="853" width="0.0263%" height="15" fill="rgb(233,154,1)" fg:x="5319" fg:w="7"/><text x="20.2260%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::RegionId,core::ops::range::RangeInclusive&lt;graphene_core::vector::vector_data::attributes::SegmentId&gt;,std::hash::random::RandomState&gt;&gt; (7 samples, 0.03%)</title><rect x="19.9760%" y="837" width="0.0263%" height="15" fill="rgb(225,15,46)" fg:x="5319" fg:w="7"/><text x="20.2260%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::RegionId,core::ops::range::RangeInclusive&lt;graphene_core::vector::vector_data::attributes::SegmentId&gt;)&gt;&gt; (7 samples, 0.03%)</title><rect x="19.9760%" y="821" width="0.0263%" height="15" fill="rgb(211,135,41)" fg:x="5319" fg:w="7"/><text x="20.2260%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.03%)</title><rect x="19.9760%" y="805" width="0.0263%" height="15" fill="rgb(208,54,0)" fg:x="5319" fg:w="7"/><text x="20.2260%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (7 samples, 0.03%)</title><rect x="19.9760%" y="789" width="0.0263%" height="15" fill="rgb(244,136,14)" fg:x="5319" fg:w="7"/><text x="20.2260%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (7 samples, 0.03%)</title><rect x="19.9760%" y="773" width="0.0263%" height="15" fill="rgb(241,56,14)" fg:x="5319" fg:w="7"/><text x="20.2260%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.03%)</title><rect x="19.9760%" y="757" width="0.0263%" height="15" fill="rgb(205,80,24)" fg:x="5319" fg:w="7"/><text x="20.2260%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.03%)</title><rect x="19.9760%" y="741" width="0.0263%" height="15" fill="rgb(220,57,4)" fg:x="5319" fg:w="7"/><text x="20.2260%" y="751.50"></text></g><g><title>__rdl_dealloc (7 samples, 0.03%)</title><rect x="19.9760%" y="725" width="0.0263%" height="15" fill="rgb(226,193,50)" fg:x="5319" fg:w="7"/><text x="20.2260%" y="735.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7 samples, 0.03%)</title><rect x="19.9760%" y="709" width="0.0263%" height="15" fill="rgb(231,168,22)" fg:x="5319" fg:w="7"/><text x="20.2260%" y="719.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7 samples, 0.03%)</title><rect x="19.9760%" y="693" width="0.0263%" height="15" fill="rgb(254,215,14)" fg:x="5319" fg:w="7"/><text x="20.2260%" y="703.50"></text></g><g><title>_int_free_merge_chunk (4 samples, 0.02%)</title><rect x="19.9872%" y="677" width="0.0150%" height="15" fill="rgb(211,115,16)" fg:x="5322" fg:w="4"/><text x="20.2372%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::RegionModification&gt; (12 samples, 0.05%)</title><rect x="19.9609%" y="869" width="0.0451%" height="15" fill="rgb(236,210,16)" fg:x="5315" fg:w="12"/><text x="20.2109%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graphene_core::vector::vector_data::attributes::SegmentId&gt;&gt; (3 samples, 0.01%)</title><rect x="20.0060%" y="853" width="0.0113%" height="15" fill="rgb(221,94,12)" fg:x="5327" fg:w="3"/><text x="20.2560%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graphene_core::vector::vector_data::attributes::SegmentId&gt;&gt; (3 samples, 0.01%)</title><rect x="20.0060%" y="837" width="0.0113%" height="15" fill="rgb(235,218,49)" fg:x="5327" fg:w="3"/><text x="20.2560%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="20.0060%" y="821" width="0.0113%" height="15" fill="rgb(217,114,14)" fg:x="5327" fg:w="3"/><text x="20.2560%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="20.0060%" y="805" width="0.0113%" height="15" fill="rgb(216,145,22)" fg:x="5327" fg:w="3"/><text x="20.2560%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="20.0060%" y="789" width="0.0113%" height="15" fill="rgb(217,112,39)" fg:x="5327" fg:w="3"/><text x="20.2560%" y="799.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.01%)</title><rect x="20.0060%" y="773" width="0.0113%" height="15" fill="rgb(225,85,32)" fg:x="5327" fg:w="3"/><text x="20.2560%" y="783.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.01%)</title><rect x="20.0060%" y="757" width="0.0113%" height="15" fill="rgb(245,209,47)" fg:x="5327" fg:w="3"/><text x="20.2560%" y="767.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.01%)</title><rect x="20.0060%" y="741" width="0.0113%" height="15" fill="rgb(218,220,15)" fg:x="5327" fg:w="3"/><text x="20.2560%" y="751.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="20.0060%" y="725" width="0.0113%" height="15" fill="rgb(222,202,31)" fg:x="5327" fg:w="3"/><text x="20.2560%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;&gt;&gt; (9 samples, 0.03%)</title><rect x="20.0173%" y="853" width="0.0338%" height="15" fill="rgb(243,203,4)" fg:x="5330" fg:w="9"/><text x="20.2673%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;,std::hash::random::RandomState&gt;&gt; (9 samples, 0.03%)</title><rect x="20.0173%" y="837" width="0.0338%" height="15" fill="rgb(237,92,17)" fg:x="5330" fg:w="9"/><text x="20.2673%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;)&gt;&gt; (9 samples, 0.03%)</title><rect x="20.0173%" y="821" width="0.0338%" height="15" fill="rgb(231,119,7)" fg:x="5330" fg:w="9"/><text x="20.2673%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="20.0173%" y="805" width="0.0338%" height="15" fill="rgb(237,82,41)" fg:x="5330" fg:w="9"/><text x="20.2673%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (9 samples, 0.03%)</title><rect x="20.0173%" y="789" width="0.0338%" height="15" fill="rgb(226,81,48)" fg:x="5330" fg:w="9"/><text x="20.2673%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (9 samples, 0.03%)</title><rect x="20.0173%" y="773" width="0.0338%" height="15" fill="rgb(234,70,51)" fg:x="5330" fg:w="9"/><text x="20.2673%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.03%)</title><rect x="20.0173%" y="757" width="0.0338%" height="15" fill="rgb(251,86,4)" fg:x="5330" fg:w="9"/><text x="20.2673%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.03%)</title><rect x="20.0173%" y="741" width="0.0338%" height="15" fill="rgb(244,144,28)" fg:x="5330" fg:w="9"/><text x="20.2673%" y="751.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.03%)</title><rect x="20.0173%" y="725" width="0.0338%" height="15" fill="rgb(232,161,39)" fg:x="5330" fg:w="9"/><text x="20.2673%" y="735.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.03%)</title><rect x="20.0173%" y="709" width="0.0338%" height="15" fill="rgb(247,34,51)" fg:x="5330" fg:w="9"/><text x="20.2673%" y="719.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.03%)</title><rect x="20.0173%" y="693" width="0.0338%" height="15" fill="rgb(225,132,2)" fg:x="5330" fg:w="9"/><text x="20.2673%" y="703.50"></text></g><g><title>_int_free_merge_chunk (4 samples, 0.02%)</title><rect x="20.0361%" y="677" width="0.0150%" height="15" fill="rgb(209,159,44)" fg:x="5335" fg:w="4"/><text x="20.2861%" y="687.50"></text></g><g><title>_int_free_create_chunk (4 samples, 0.02%)</title><rect x="20.0623%" y="661" width="0.0150%" height="15" fill="rgb(251,214,1)" fg:x="5342" fg:w="4"/><text x="20.3123%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId&gt;&gt; (9 samples, 0.03%)</title><rect x="20.0511%" y="853" width="0.0338%" height="15" fill="rgb(247,84,47)" fg:x="5339" fg:w="9"/><text x="20.3011%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId,std::hash::random::RandomState&gt;&gt; (9 samples, 0.03%)</title><rect x="20.0511%" y="837" width="0.0338%" height="15" fill="rgb(240,111,43)" fg:x="5339" fg:w="9"/><text x="20.3011%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId)&gt;&gt; (9 samples, 0.03%)</title><rect x="20.0511%" y="821" width="0.0338%" height="15" fill="rgb(215,214,35)" fg:x="5339" fg:w="9"/><text x="20.3011%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="20.0511%" y="805" width="0.0338%" height="15" fill="rgb(248,207,23)" fg:x="5339" fg:w="9"/><text x="20.3011%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (9 samples, 0.03%)</title><rect x="20.0511%" y="789" width="0.0338%" height="15" fill="rgb(214,186,4)" fg:x="5339" fg:w="9"/><text x="20.3011%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (8 samples, 0.03%)</title><rect x="20.0548%" y="773" width="0.0300%" height="15" fill="rgb(220,133,22)" fg:x="5340" fg:w="8"/><text x="20.3048%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.03%)</title><rect x="20.0548%" y="757" width="0.0300%" height="15" fill="rgb(239,134,19)" fg:x="5340" fg:w="8"/><text x="20.3048%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.03%)</title><rect x="20.0548%" y="741" width="0.0300%" height="15" fill="rgb(250,140,9)" fg:x="5340" fg:w="8"/><text x="20.3048%" y="751.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.03%)</title><rect x="20.0548%" y="725" width="0.0300%" height="15" fill="rgb(225,59,14)" fg:x="5340" fg:w="8"/><text x="20.3048%" y="735.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.03%)</title><rect x="20.0548%" y="709" width="0.0300%" height="15" fill="rgb(214,152,51)" fg:x="5340" fg:w="8"/><text x="20.3048%" y="719.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 0.03%)</title><rect x="20.0548%" y="693" width="0.0300%" height="15" fill="rgb(251,227,43)" fg:x="5340" fg:w="8"/><text x="20.3048%" y="703.50"></text></g><g><title>_int_free_merge_chunk (6 samples, 0.02%)</title><rect x="20.0623%" y="677" width="0.0225%" height="15" fill="rgb(241,96,17)" fg:x="5342" fg:w="6"/><text x="20.3123%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::SegmentModification&gt; (22 samples, 0.08%)</title><rect x="20.0060%" y="869" width="0.0826%" height="15" fill="rgb(234,198,43)" fg:x="5327" fg:w="22"/><text x="20.2560%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ConstructionArgs&gt; (121 samples, 0.45%)</title><rect x="19.6417%" y="917" width="0.4544%" height="15" fill="rgb(220,108,29)" fg:x="5230" fg:w="121"/><text x="19.8917%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::memo::MemoHash&lt;graph_craft::document::value::TaggedValue&gt;&gt; (76 samples, 0.29%)</title><rect x="19.8107%" y="901" width="0.2854%" height="15" fill="rgb(226,163,33)" fg:x="5275" fg:w="76"/><text x="20.0607%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::VectorModification&gt; (53 samples, 0.20%)</title><rect x="19.8971%" y="885" width="0.1990%" height="15" fill="rgb(205,194,45)" fg:x="5298" fg:w="53"/><text x="20.1471%" y="895.50"></text></g><g><title>cfree@GLIBC_2.2.5 (21 samples, 0.08%)</title><rect x="20.1375%" y="901" width="0.0789%" height="15" fill="rgb(206,143,44)" fg:x="5362" fg:w="21"/><text x="20.3875%" y="911.50"></text></g><g><title>_int_free (10 samples, 0.04%)</title><rect x="20.1788%" y="885" width="0.0376%" height="15" fill="rgb(236,136,36)" fg:x="5373" fg:w="10"/><text x="20.4288%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNodeInput&gt; (38 samples, 0.14%)</title><rect x="20.0961%" y="917" width="0.1427%" height="15" fill="rgb(249,172,42)" fg:x="5351" fg:w="38"/><text x="20.3461%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::Type&gt; (6 samples, 0.02%)</title><rect x="20.2163%" y="901" width="0.0225%" height="15" fill="rgb(216,139,23)" fg:x="5383" fg:w="6"/><text x="20.4663%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (259 samples, 0.97%)</title><rect x="19.4014%" y="981" width="0.9727%" height="15" fill="rgb(207,166,20)" fg:x="5166" fg:w="259"/><text x="19.6514%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)]&gt; (259 samples, 0.97%)</title><rect x="19.4014%" y="965" width="0.9727%" height="15" fill="rgb(210,209,22)" fg:x="5166" fg:w="259"/><text x="19.6514%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt; (256 samples, 0.96%)</title><rect x="19.4126%" y="949" width="0.9614%" height="15" fill="rgb(232,118,20)" fg:x="5169" fg:w="256"/><text x="19.6626%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNode&gt; (249 samples, 0.94%)</title><rect x="19.4389%" y="933" width="0.9351%" height="15" fill="rgb(238,113,42)" fg:x="5176" fg:w="249"/><text x="19.6889%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::ProtoNodeIdentifier&gt; (36 samples, 0.14%)</title><rect x="20.2389%" y="917" width="0.1352%" height="15" fill="rgb(231,42,5)" fg:x="5389" fg:w="36"/><text x="20.4889%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (36 samples, 0.14%)</title><rect x="20.2389%" y="901" width="0.1352%" height="15" fill="rgb(243,166,24)" fg:x="5389" fg:w="36"/><text x="20.4889%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (31 samples, 0.12%)</title><rect x="20.2576%" y="885" width="0.1164%" height="15" fill="rgb(237,226,12)" fg:x="5394" fg:w="31"/><text x="20.5076%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (31 samples, 0.12%)</title><rect x="20.2576%" y="869" width="0.1164%" height="15" fill="rgb(229,133,24)" fg:x="5394" fg:w="31"/><text x="20.5076%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (31 samples, 0.12%)</title><rect x="20.2576%" y="853" width="0.1164%" height="15" fill="rgb(238,33,43)" fg:x="5394" fg:w="31"/><text x="20.5076%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.12%)</title><rect x="20.2576%" y="837" width="0.1164%" height="15" fill="rgb(227,59,38)" fg:x="5394" fg:w="31"/><text x="20.5076%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31 samples, 0.12%)</title><rect x="20.2576%" y="821" width="0.1164%" height="15" fill="rgb(230,97,0)" fg:x="5394" fg:w="31"/><text x="20.5076%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (31 samples, 0.12%)</title><rect x="20.2576%" y="805" width="0.1164%" height="15" fill="rgb(250,173,50)" fg:x="5394" fg:w="31"/><text x="20.5076%" y="815.50"></text></g><g><title>__rdl_dealloc (31 samples, 0.12%)</title><rect x="20.2576%" y="789" width="0.1164%" height="15" fill="rgb(240,15,50)" fg:x="5394" fg:w="31"/><text x="20.5076%" y="799.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (31 samples, 0.12%)</title><rect x="20.2576%" y="773" width="0.1164%" height="15" fill="rgb(221,93,22)" fg:x="5394" fg:w="31"/><text x="20.5076%" y="783.50"></text></g><g><title>cfree@GLIBC_2.2.5 (31 samples, 0.12%)</title><rect x="20.2576%" y="757" width="0.1164%" height="15" fill="rgb(245,180,53)" fg:x="5394" fg:w="31"/><text x="20.5076%" y="767.50"></text></g><g><title>_int_free (13 samples, 0.05%)</title><rect x="20.3252%" y="741" width="0.0488%" height="15" fill="rgb(231,88,51)" fg:x="5412" fg:w="13"/><text x="20.5752%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (126 samples, 0.47%)</title><rect x="20.3741%" y="949" width="0.4732%" height="15" fill="rgb(240,58,21)" fg:x="5425" fg:w="126"/><text x="20.6241%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (126 samples, 0.47%)</title><rect x="20.3741%" y="933" width="0.4732%" height="15" fill="rgb(237,21,10)" fg:x="5425" fg:w="126"/><text x="20.6241%" y="943.50"></text></g><g><title>__rdl_dealloc (126 samples, 0.47%)</title><rect x="20.3741%" y="917" width="0.4732%" height="15" fill="rgb(218,43,11)" fg:x="5425" fg:w="126"/><text x="20.6241%" y="927.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (126 samples, 0.47%)</title><rect x="20.3741%" y="901" width="0.4732%" height="15" fill="rgb(218,221,29)" fg:x="5425" fg:w="126"/><text x="20.6241%" y="911.50"></text></g><g><title>cfree@GLIBC_2.2.5 (126 samples, 0.47%)</title><rect x="20.3741%" y="885" width="0.4732%" height="15" fill="rgb(214,118,42)" fg:x="5425" fg:w="126"/><text x="20.6241%" y="895.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (126 samples, 0.47%)</title><rect x="20.3741%" y="869" width="0.4732%" height="15" fill="rgb(251,200,26)" fg:x="5425" fg:w="126"/><text x="20.6241%" y="879.50"></text></g><g><title>malloc_consolidate (126 samples, 0.47%)</title><rect x="20.3741%" y="853" width="0.4732%" height="15" fill="rgb(237,101,39)" fg:x="5425" fg:w="126"/><text x="20.6241%" y="863.50"></text></g><g><title>unlink_chunk.isra.0 (48 samples, 0.18%)</title><rect x="20.6670%" y="837" width="0.1803%" height="15" fill="rgb(251,117,11)" fg:x="5503" fg:w="48"/><text x="20.9170%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (386 samples, 1.45%)</title><rect x="19.4014%" y="997" width="1.4497%" height="15" fill="rgb(216,223,23)" fg:x="5166" fg:w="386"/><text x="19.6514%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (127 samples, 0.48%)</title><rect x="20.3741%" y="981" width="0.4770%" height="15" fill="rgb(251,54,12)" fg:x="5425" fg:w="127"/><text x="20.6241%" y="991.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (127 samples, 0.48%)</title><rect x="20.3741%" y="965" width="0.4770%" height="15" fill="rgb(254,176,54)" fg:x="5425" fg:w="127"/><text x="20.6241%" y="975.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 0.02%)</title><rect x="20.8585%" y="981" width="0.0225%" height="15" fill="rgb(210,32,8)" fg:x="5554" fg:w="6"/><text x="21.1085%" y="991.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (6 samples, 0.02%)</title><rect x="20.8585%" y="965" width="0.0225%" height="15" fill="rgb(235,52,38)" fg:x="5554" fg:w="6"/><text x="21.1085%" y="975.50"></text></g><g><title>malloc_consolidate (6 samples, 0.02%)</title><rect x="20.8585%" y="949" width="0.0225%" height="15" fill="rgb(231,4,44)" fg:x="5554" fg:w="6"/><text x="21.1085%" y="959.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="20.8811%" y="885" width="0.0113%" height="15" fill="rgb(249,2,32)" fg:x="5560" fg:w="3"/><text x="21.1311%" y="895.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3 samples, 0.01%)</title><rect x="20.8811%" y="869" width="0.0113%" height="15" fill="rgb(224,65,26)" fg:x="5560" fg:w="3"/><text x="21.1311%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (26 samples, 0.10%)</title><rect x="20.8961%" y="789" width="0.0976%" height="15" fill="rgb(250,73,40)" fg:x="5564" fg:w="26"/><text x="21.1461%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (26 samples, 0.10%)</title><rect x="20.8961%" y="773" width="0.0976%" height="15" fill="rgb(253,177,16)" fg:x="5564" fg:w="26"/><text x="21.1461%" y="783.50"></text></g><g><title>__rdl_dealloc (26 samples, 0.10%)</title><rect x="20.8961%" y="757" width="0.0976%" height="15" fill="rgb(217,32,34)" fg:x="5564" fg:w="26"/><text x="21.1461%" y="767.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (26 samples, 0.10%)</title><rect x="20.8961%" y="741" width="0.0976%" height="15" fill="rgb(212,7,10)" fg:x="5564" fg:w="26"/><text x="21.1461%" y="751.50"></text></g><g><title>cfree@GLIBC_2.2.5 (26 samples, 0.10%)</title><rect x="20.8961%" y="725" width="0.0976%" height="15" fill="rgb(245,89,8)" fg:x="5564" fg:w="26"/><text x="21.1461%" y="735.50"></text></g><g><title>_int_free (18 samples, 0.07%)</title><rect x="20.9261%" y="709" width="0.0676%" height="15" fill="rgb(237,16,53)" fg:x="5572" fg:w="18"/><text x="21.1761%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt;&gt; (31 samples, 0.12%)</title><rect x="20.8811%" y="981" width="0.1164%" height="15" fill="rgb(250,204,30)" fg:x="5560" fg:w="31"/><text x="21.1311%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;,std::hash::random::RandomState&gt;&gt; (31 samples, 0.12%)</title><rect x="20.8811%" y="965" width="0.1164%" height="15" fill="rgb(208,77,27)" fg:x="5560" fg:w="31"/><text x="21.1311%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;)&gt;&gt; (31 samples, 0.12%)</title><rect x="20.8811%" y="949" width="0.1164%" height="15" fill="rgb(250,204,28)" fg:x="5560" fg:w="31"/><text x="21.1311%" y="959.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.12%)</title><rect x="20.8811%" y="933" width="0.1164%" height="15" fill="rgb(244,63,21)" fg:x="5560" fg:w="31"/><text x="21.1311%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (31 samples, 0.12%)</title><rect x="20.8811%" y="917" width="0.1164%" height="15" fill="rgb(236,85,44)" fg:x="5560" fg:w="31"/><text x="21.1311%" y="927.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (31 samples, 0.12%)</title><rect x="20.8811%" y="901" width="0.1164%" height="15" fill="rgb(215,98,4)" fg:x="5560" fg:w="31"/><text x="21.1311%" y="911.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (28 samples, 0.11%)</title><rect x="20.8923%" y="885" width="0.1052%" height="15" fill="rgb(235,38,11)" fg:x="5563" fg:w="28"/><text x="21.1423%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (28 samples, 0.11%)</title><rect x="20.8923%" y="869" width="0.1052%" height="15" fill="rgb(254,186,25)" fg:x="5563" fg:w="28"/><text x="21.1423%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;)&gt; (28 samples, 0.11%)</title><rect x="20.8923%" y="853" width="0.1052%" height="15" fill="rgb(225,55,31)" fg:x="5563" fg:w="28"/><text x="21.1423%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt; (28 samples, 0.11%)</title><rect x="20.8923%" y="837" width="0.1052%" height="15" fill="rgb(211,15,21)" fg:x="5563" fg:w="28"/><text x="21.1423%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeId&gt;&gt; (28 samples, 0.11%)</title><rect x="20.8923%" y="821" width="0.1052%" height="15" fill="rgb(215,187,41)" fg:x="5563" fg:w="28"/><text x="21.1423%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.11%)</title><rect x="20.8923%" y="805" width="0.1052%" height="15" fill="rgb(248,69,32)" fg:x="5563" fg:w="28"/><text x="21.1423%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.05%)</title><rect x="21.1440%" y="965" width="0.0451%" height="15" fill="rgb(252,102,52)" fg:x="5630" fg:w="12"/><text x="21.3940%" y="975.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.03%)</title><rect x="21.1590%" y="949" width="0.0300%" height="15" fill="rgb(253,140,32)" fg:x="5634" fg:w="8"/><text x="21.4090%" y="959.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.02%)</title><rect x="21.2979%" y="917" width="0.0188%" height="15" fill="rgb(216,56,42)" fg:x="5671" fg:w="5"/><text x="21.5479%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (4 samples, 0.02%)</title><rect x="21.3205%" y="917" width="0.0150%" height="15" fill="rgb(216,184,14)" fg:x="5677" fg:w="4"/><text x="21.5705%" y="927.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="21.3918%" y="789" width="0.0113%" height="15" fill="rgb(237,187,27)" fg:x="5696" fg:w="3"/><text x="21.6418%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (18 samples, 0.07%)</title><rect x="21.3618%" y="901" width="0.0676%" height="15" fill="rgb(219,65,3)" fg:x="5688" fg:w="18"/><text x="21.6118%" y="911.50"></text></g><g><title>alloc::alloc::Global::grow_impl (18 samples, 0.07%)</title><rect x="21.3618%" y="885" width="0.0676%" height="15" fill="rgb(245,83,25)" fg:x="5688" fg:w="18"/><text x="21.6118%" y="895.50"></text></g><g><title>alloc::alloc::realloc (18 samples, 0.07%)</title><rect x="21.3618%" y="869" width="0.0676%" height="15" fill="rgb(214,205,45)" fg:x="5688" fg:w="18"/><text x="21.6118%" y="879.50"></text></g><g><title>__rdl_realloc (18 samples, 0.07%)</title><rect x="21.3618%" y="853" width="0.0676%" height="15" fill="rgb(241,20,18)" fg:x="5688" fg:w="18"/><text x="21.6118%" y="863.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (18 samples, 0.07%)</title><rect x="21.3618%" y="837" width="0.0676%" height="15" fill="rgb(232,163,23)" fg:x="5688" fg:w="18"/><text x="21.6118%" y="847.50"></text></g><g><title>realloc (18 samples, 0.07%)</title><rect x="21.3618%" y="821" width="0.0676%" height="15" fill="rgb(214,5,46)" fg:x="5688" fg:w="18"/><text x="21.6118%" y="831.50"></text></g><g><title>_int_realloc (13 samples, 0.05%)</title><rect x="21.3806%" y="805" width="0.0488%" height="15" fill="rgb(229,78,17)" fg:x="5693" fg:w="13"/><text x="21.6306%" y="815.50"></text></g><g><title>_int_malloc (7 samples, 0.03%)</title><rect x="21.4031%" y="789" width="0.0263%" height="15" fill="rgb(248,89,10)" fg:x="5699" fg:w="7"/><text x="21.6531%" y="799.50"></text></g><g><title>alloc::raw_vec::finish_grow (146 samples, 0.55%)</title><rect x="21.3355%" y="917" width="0.5483%" height="15" fill="rgb(248,54,15)" fg:x="5681" fg:w="146"/><text x="21.5855%" y="927.50"></text></g><g><title>malloc (120 samples, 0.45%)</title><rect x="21.4331%" y="901" width="0.4507%" height="15" fill="rgb(223,116,6)" fg:x="5707" fg:w="120"/><text x="21.6831%" y="911.50"></text></g><g><title>_int_malloc (79 samples, 0.30%)</title><rect x="21.5871%" y="885" width="0.2967%" height="15" fill="rgb(205,125,38)" fg:x="5748" fg:w="79"/><text x="21.8371%" y="895.50"></text></g><g><title>unlink_chunk.isra.0 (6 samples, 0.02%)</title><rect x="21.8613%" y="869" width="0.0225%" height="15" fill="rgb(251,78,38)" fg:x="5821" fg:w="6"/><text x="22.1113%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (170 samples, 0.64%)</title><rect x="21.2829%" y="949" width="0.6384%" height="15" fill="rgb(253,78,28)" fg:x="5667" fg:w="170"/><text x="21.5329%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (166 samples, 0.62%)</title><rect x="21.2979%" y="933" width="0.6234%" height="15" fill="rgb(209,120,3)" fg:x="5671" fg:w="166"/><text x="21.5479%" y="943.50"></text></g><g><title>core::cmp::max (8 samples, 0.03%)</title><rect x="21.8913%" y="917" width="0.0300%" height="15" fill="rgb(238,229,9)" fg:x="5829" fg:w="8"/><text x="22.1413%" y="927.50"></text></g><g><title>core::cmp::Ord::max (8 samples, 0.03%)</title><rect x="21.8913%" y="901" width="0.0300%" height="15" fill="rgb(253,159,18)" fg:x="5829" fg:w="8"/><text x="22.1413%" y="911.50"></text></g><g><title>core::cmp::max_by (8 samples, 0.03%)</title><rect x="21.8913%" y="885" width="0.0300%" height="15" fill="rgb(244,42,34)" fg:x="5829" fg:w="8"/><text x="22.1413%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (199 samples, 0.75%)</title><rect x="21.1890%" y="965" width="0.7474%" height="15" fill="rgb(224,8,7)" fg:x="5642" fg:w="199"/><text x="21.4390%" y="975.50"></text></g><g><title>core::ptr::write (4 samples, 0.02%)</title><rect x="21.9214%" y="949" width="0.0150%" height="15" fill="rgb(210,201,45)" fg:x="5837" fg:w="4"/><text x="22.1714%" y="959.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="24.2498%" y="933" width="0.0338%" height="15" fill="rgb(252,185,21)" fg:x="6457" fg:w="9"/><text x="24.4998%" y="943.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1,454 samples, 5.46%)</title><rect x="21.9364%" y="949" width="5.4606%" height="15" fill="rgb(223,131,1)" fg:x="5841" fg:w="1454"/><text x="22.1864%" y="959.50">&lt;core::..</text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref::_{{closure}} (829 samples, 3.11%)</title><rect x="24.2836%" y="933" width="3.1134%" height="15" fill="rgb(245,141,16)" fg:x="6466" fg:w="829"/><text x="24.5336%" y="943.50">gra..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (829 samples, 3.11%)</title><rect x="24.2836%" y="917" width="3.1134%" height="15" fill="rgb(229,55,45)" fg:x="6466" fg:w="829"/><text x="24.5336%" y="927.50">cor..</text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (829 samples, 3.11%)</title><rect x="24.2836%" y="901" width="3.1134%" height="15" fill="rgb(208,92,15)" fg:x="6466" fg:w="829"/><text x="24.5336%" y="911.50">&lt;gr..</text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref (1,472 samples, 5.53%)</title><rect x="21.9364%" y="965" width="5.5282%" height="15" fill="rgb(234,185,47)" fg:x="5841" fg:w="1472"/><text x="22.1864%" y="975.50">graph_c..</text></g><g><title>core::fmt::Arguments::new_v1_formatted (18 samples, 0.07%)</title><rect x="27.3970%" y="949" width="0.0676%" height="15" fill="rgb(253,104,50)" fg:x="7295" fg:w="18"/><text x="27.6470%" y="959.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (16 samples, 0.06%)</title><rect x="27.4646%" y="901" width="0.0601%" height="15" fill="rgb(205,70,7)" fg:x="7313" fg:w="16"/><text x="27.7146%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (16 samples, 0.06%)</title><rect x="27.4646%" y="885" width="0.0601%" height="15" fill="rgb(240,178,43)" fg:x="7313" fg:w="16"/><text x="27.7146%" y="895.50"></text></g><g><title>core::ptr::write (16 samples, 0.06%)</title><rect x="27.4646%" y="869" width="0.0601%" height="15" fill="rgb(214,112,2)" fg:x="7313" fg:w="16"/><text x="27.7146%" y="879.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (23 samples, 0.09%)</title><rect x="27.4646%" y="965" width="0.0864%" height="15" fill="rgb(206,46,17)" fg:x="7313" fg:w="23"/><text x="27.7146%" y="975.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (23 samples, 0.09%)</title><rect x="27.4646%" y="949" width="0.0864%" height="15" fill="rgb(225,220,16)" fg:x="7313" fg:w="23"/><text x="27.7146%" y="959.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (23 samples, 0.09%)</title><rect x="27.4646%" y="933" width="0.0864%" height="15" fill="rgb(238,65,40)" fg:x="7313" fg:w="23"/><text x="27.7146%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (23 samples, 0.09%)</title><rect x="27.4646%" y="917" width="0.0864%" height="15" fill="rgb(230,151,21)" fg:x="7313" fg:w="23"/><text x="27.7146%" y="927.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (6 samples, 0.02%)</title><rect x="27.5284%" y="901" width="0.0225%" height="15" fill="rgb(218,58,49)" fg:x="7330" fg:w="6"/><text x="27.7784%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (5 samples, 0.02%)</title><rect x="27.5322%" y="885" width="0.0188%" height="15" fill="rgb(219,179,14)" fg:x="7331" fg:w="5"/><text x="27.7822%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.01%)</title><rect x="27.5397%" y="869" width="0.0113%" height="15" fill="rgb(223,72,1)" fg:x="7333" fg:w="3"/><text x="27.7897%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3 samples, 0.01%)</title><rect x="27.5397%" y="853" width="0.0113%" height="15" fill="rgb(238,126,10)" fg:x="7333" fg:w="3"/><text x="27.7897%" y="863.50"></text></g><g><title>hashbrown::raw::is_full (3 samples, 0.01%)</title><rect x="27.5397%" y="837" width="0.0113%" height="15" fill="rgb(224,206,38)" fg:x="7333" fg:w="3"/><text x="27.7897%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="27.5660%" y="853" width="0.0113%" height="15" fill="rgb(212,201,54)" fg:x="7340" fg:w="3"/><text x="27.8160%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.02%)</title><rect x="27.6336%" y="741" width="0.0225%" height="15" fill="rgb(218,154,48)" fg:x="7358" fg:w="6"/><text x="27.8836%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.02%)</title><rect x="27.6862%" y="725" width="0.0150%" height="15" fill="rgb(232,93,24)" fg:x="7372" fg:w="4"/><text x="27.9362%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (34 samples, 0.13%)</title><rect x="27.5848%" y="789" width="0.1277%" height="15" fill="rgb(245,30,21)" fg:x="7345" fg:w="34"/><text x="27.8348%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (34 samples, 0.13%)</title><rect x="27.5848%" y="773" width="0.1277%" height="15" fill="rgb(242,148,29)" fg:x="7345" fg:w="34"/><text x="27.8348%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (34 samples, 0.13%)</title><rect x="27.5848%" y="757" width="0.1277%" height="15" fill="rgb(244,153,54)" fg:x="7345" fg:w="34"/><text x="27.8348%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (15 samples, 0.06%)</title><rect x="27.6561%" y="741" width="0.0563%" height="15" fill="rgb(252,87,22)" fg:x="7364" fg:w="15"/><text x="27.9061%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.01%)</title><rect x="27.7012%" y="725" width="0.0113%" height="15" fill="rgb(210,51,29)" fg:x="7376" fg:w="3"/><text x="27.9512%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.02%)</title><rect x="27.7162%" y="677" width="0.0150%" height="15" fill="rgb(242,136,47)" fg:x="7380" fg:w="4"/><text x="27.9662%" y="687.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (40 samples, 0.15%)</title><rect x="27.5848%" y="837" width="0.1502%" height="15" fill="rgb(238,68,4)" fg:x="7345" fg:w="40"/><text x="27.8348%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (40 samples, 0.15%)</title><rect x="27.5848%" y="821" width="0.1502%" height="15" fill="rgb(242,161,30)" fg:x="7345" fg:w="40"/><text x="27.8348%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (40 samples, 0.15%)</title><rect x="27.5848%" y="805" width="0.1502%" height="15" fill="rgb(218,58,44)" fg:x="7345" fg:w="40"/><text x="27.8348%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.02%)</title><rect x="27.7162%" y="789" width="0.0188%" height="15" fill="rgb(252,125,32)" fg:x="7380" fg:w="5"/><text x="27.9662%" y="799.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (5 samples, 0.02%)</title><rect x="27.7162%" y="773" width="0.0188%" height="15" fill="rgb(219,178,0)" fg:x="7380" fg:w="5"/><text x="27.9662%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (5 samples, 0.02%)</title><rect x="27.7162%" y="757" width="0.0188%" height="15" fill="rgb(213,152,7)" fg:x="7380" fg:w="5"/><text x="27.9662%" y="767.50"></text></g><g><title>core::hash::Hasher::write_u64 (5 samples, 0.02%)</title><rect x="27.7162%" y="741" width="0.0188%" height="15" fill="rgb(249,109,34)" fg:x="7380" fg:w="5"/><text x="27.9662%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="27.7162%" y="725" width="0.0188%" height="15" fill="rgb(232,96,21)" fg:x="7380" fg:w="5"/><text x="27.9662%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="27.7162%" y="709" width="0.0188%" height="15" fill="rgb(228,27,39)" fg:x="7380" fg:w="5"/><text x="27.9662%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="27.7162%" y="693" width="0.0188%" height="15" fill="rgb(211,182,52)" fg:x="7380" fg:w="5"/><text x="27.9662%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (43 samples, 0.16%)</title><rect x="27.5848%" y="853" width="0.1615%" height="15" fill="rgb(234,178,38)" fg:x="7345" fg:w="43"/><text x="27.8348%" y="863.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.01%)</title><rect x="27.7350%" y="837" width="0.0113%" height="15" fill="rgb(221,111,3)" fg:x="7385" fg:w="3"/><text x="27.9850%" y="847.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.01%)</title><rect x="27.7350%" y="821" width="0.0113%" height="15" fill="rgb(228,175,21)" fg:x="7385" fg:w="3"/><text x="27.9850%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.01%)</title><rect x="27.7350%" y="805" width="0.0113%" height="15" fill="rgb(228,174,43)" fg:x="7385" fg:w="3"/><text x="27.9850%" y="815.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.01%)</title><rect x="27.7350%" y="789" width="0.0113%" height="15" fill="rgb(211,191,0)" fg:x="7385" fg:w="3"/><text x="27.9850%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket_ptr (4 samples, 0.02%)</title><rect x="27.7463%" y="853" width="0.0150%" height="15" fill="rgb(253,117,3)" fg:x="7388" fg:w="4"/><text x="27.9963%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (5 samples, 0.02%)</title><rect x="27.7613%" y="821" width="0.0188%" height="15" fill="rgb(241,127,19)" fg:x="7392" fg:w="5"/><text x="28.0113%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (15 samples, 0.06%)</title><rect x="27.7801%" y="821" width="0.0563%" height="15" fill="rgb(218,103,12)" fg:x="7397" fg:w="15"/><text x="28.0301%" y="831.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (11 samples, 0.04%)</title><rect x="27.7951%" y="805" width="0.0413%" height="15" fill="rgb(236,214,43)" fg:x="7401" fg:w="11"/><text x="28.0451%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (11 samples, 0.04%)</title><rect x="27.7951%" y="789" width="0.0413%" height="15" fill="rgb(244,144,19)" fg:x="7401" fg:w="11"/><text x="28.0451%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (12 samples, 0.05%)</title><rect x="27.8364%" y="821" width="0.0451%" height="15" fill="rgb(246,188,10)" fg:x="7412" fg:w="12"/><text x="28.0864%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (34 samples, 0.13%)</title><rect x="27.7613%" y="853" width="0.1277%" height="15" fill="rgb(212,193,33)" fg:x="7392" fg:w="34"/><text x="28.0113%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (34 samples, 0.13%)</title><rect x="27.7613%" y="837" width="0.1277%" height="15" fill="rgb(241,51,29)" fg:x="7392" fg:w="34"/><text x="28.0113%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (105 samples, 0.39%)</title><rect x="27.5585%" y="869" width="0.3943%" height="15" fill="rgb(211,58,19)" fg:x="7338" fg:w="105"/><text x="27.8085%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (17 samples, 0.06%)</title><rect x="27.8890%" y="853" width="0.0638%" height="15" fill="rgb(229,111,26)" fg:x="7426" fg:w="17"/><text x="28.1390%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (17 samples, 0.06%)</title><rect x="27.8890%" y="837" width="0.0638%" height="15" fill="rgb(213,115,40)" fg:x="7426" fg:w="17"/><text x="28.1390%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (17 samples, 0.06%)</title><rect x="27.8890%" y="821" width="0.0638%" height="15" fill="rgb(209,56,44)" fg:x="7426" fg:w="17"/><text x="28.1390%" y="831.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (17 samples, 0.06%)</title><rect x="27.8890%" y="805" width="0.0638%" height="15" fill="rgb(230,108,32)" fg:x="7426" fg:w="17"/><text x="28.1390%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.06%)</title><rect x="27.8890%" y="789" width="0.0638%" height="15" fill="rgb(216,165,31)" fg:x="7426" fg:w="17"/><text x="28.1390%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.06%)</title><rect x="27.8890%" y="773" width="0.0638%" height="15" fill="rgb(218,122,21)" fg:x="7426" fg:w="17"/><text x="28.1390%" y="783.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.06%)</title><rect x="27.8890%" y="757" width="0.0638%" height="15" fill="rgb(223,224,47)" fg:x="7426" fg:w="17"/><text x="28.1390%" y="767.50"></text></g><g><title>__rdl_alloc (17 samples, 0.06%)</title><rect x="27.8890%" y="741" width="0.0638%" height="15" fill="rgb(238,102,44)" fg:x="7426" fg:w="17"/><text x="28.1390%" y="751.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17 samples, 0.06%)</title><rect x="27.8890%" y="725" width="0.0638%" height="15" fill="rgb(236,46,40)" fg:x="7426" fg:w="17"/><text x="28.1390%" y="735.50"></text></g><g><title>malloc (17 samples, 0.06%)</title><rect x="27.8890%" y="709" width="0.0638%" height="15" fill="rgb(247,202,50)" fg:x="7426" fg:w="17"/><text x="28.1390%" y="719.50"></text></g><g><title>_int_malloc (15 samples, 0.06%)</title><rect x="27.8965%" y="693" width="0.0563%" height="15" fill="rgb(209,99,20)" fg:x="7428" fg:w="15"/><text x="28.1465%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (108 samples, 0.41%)</title><rect x="27.5510%" y="933" width="0.4056%" height="15" fill="rgb(252,27,34)" fg:x="7336" fg:w="108"/><text x="27.8010%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (108 samples, 0.41%)</title><rect x="27.5510%" y="917" width="0.4056%" height="15" fill="rgb(215,206,23)" fg:x="7336" fg:w="108"/><text x="27.8010%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (107 samples, 0.40%)</title><rect x="27.5547%" y="901" width="0.4018%" height="15" fill="rgb(212,135,36)" fg:x="7337" fg:w="107"/><text x="27.8047%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (106 samples, 0.40%)</title><rect x="27.5585%" y="885" width="0.3981%" height="15" fill="rgb(240,189,1)" fg:x="7338" fg:w="106"/><text x="27.8085%" y="895.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.02%)</title><rect x="28.0279%" y="837" width="0.0150%" height="15" fill="rgb(242,56,20)" fg:x="7463" fg:w="4"/><text x="28.2779%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.03%)</title><rect x="28.0167%" y="853" width="0.0338%" height="15" fill="rgb(247,132,33)" fg:x="7460" fg:w="9"/><text x="28.2667%" y="863.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (10 samples, 0.04%)</title><rect x="28.0730%" y="837" width="0.0376%" height="15" fill="rgb(208,149,11)" fg:x="7475" fg:w="10"/><text x="28.3230%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (39 samples, 0.15%)</title><rect x="27.9754%" y="901" width="0.1465%" height="15" fill="rgb(211,33,11)" fg:x="7449" fg:w="39"/><text x="28.2254%" y="911.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (39 samples, 0.15%)</title><rect x="27.9754%" y="885" width="0.1465%" height="15" fill="rgb(221,29,38)" fg:x="7449" fg:w="39"/><text x="28.2254%" y="895.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (39 samples, 0.15%)</title><rect x="27.9754%" y="869" width="0.1465%" height="15" fill="rgb(206,182,49)" fg:x="7449" fg:w="39"/><text x="28.2254%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (19 samples, 0.07%)</title><rect x="28.0505%" y="853" width="0.0714%" height="15" fill="rgb(216,140,1)" fg:x="7469" fg:w="19"/><text x="28.3005%" y="863.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.01%)</title><rect x="28.1106%" y="837" width="0.0113%" height="15" fill="rgb(232,57,40)" fg:x="7485" fg:w="3"/><text x="28.3606%" y="847.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (11 samples, 0.04%)</title><rect x="28.1218%" y="901" width="0.0413%" height="15" fill="rgb(224,186,18)" fg:x="7488" fg:w="11"/><text x="28.3718%" y="911.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (5 samples, 0.02%)</title><rect x="28.1444%" y="885" width="0.0188%" height="15" fill="rgb(215,121,11)" fg:x="7494" fg:w="5"/><text x="28.3944%" y="895.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (5 samples, 0.02%)</title><rect x="28.1444%" y="869" width="0.0188%" height="15" fill="rgb(245,147,10)" fg:x="7494" fg:w="5"/><text x="28.3944%" y="879.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (5 samples, 0.02%)</title><rect x="28.1444%" y="853" width="0.0188%" height="15" fill="rgb(238,153,13)" fg:x="7494" fg:w="5"/><text x="28.3944%" y="863.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.02%)</title><rect x="28.2307%" y="773" width="0.0150%" height="15" fill="rgb(233,108,0)" fg:x="7517" fg:w="4"/><text x="28.4807%" y="783.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::hash::Hash&gt;::hash (24 samples, 0.09%)</title><rect x="28.1631%" y="885" width="0.0901%" height="15" fill="rgb(212,157,17)" fg:x="7499" fg:w="24"/><text x="28.4131%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (24 samples, 0.09%)</title><rect x="28.1631%" y="869" width="0.0901%" height="15" fill="rgb(225,213,38)" fg:x="7499" fg:w="24"/><text x="28.4131%" y="879.50"></text></g><g><title>core::hash::Hasher::write_u64 (24 samples, 0.09%)</title><rect x="28.1631%" y="853" width="0.0901%" height="15" fill="rgb(248,16,11)" fg:x="7499" fg:w="24"/><text x="28.4131%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (24 samples, 0.09%)</title><rect x="28.1631%" y="837" width="0.0901%" height="15" fill="rgb(241,33,4)" fg:x="7499" fg:w="24"/><text x="28.4131%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (24 samples, 0.09%)</title><rect x="28.1631%" y="821" width="0.0901%" height="15" fill="rgb(222,26,43)" fg:x="7499" fg:w="24"/><text x="28.4131%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.08%)</title><rect x="28.1707%" y="805" width="0.0826%" height="15" fill="rgb(243,29,36)" fg:x="7501" fg:w="22"/><text x="28.4207%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 0.04%)</title><rect x="28.2157%" y="789" width="0.0376%" height="15" fill="rgb(241,9,27)" fg:x="7513" fg:w="10"/><text x="28.4657%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="28.2533%" y="837" width="0.0225%" height="15" fill="rgb(205,117,26)" fg:x="7523" fg:w="6"/><text x="28.5033%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="28.2533%" y="821" width="0.0225%" height="15" fill="rgb(209,80,39)" fg:x="7523" fg:w="6"/><text x="28.5033%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="28.2533%" y="805" width="0.0225%" height="15" fill="rgb(239,155,6)" fg:x="7523" fg:w="6"/><text x="28.5033%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (87 samples, 0.33%)</title><rect x="27.9566%" y="933" width="0.3267%" height="15" fill="rgb(212,104,12)" fg:x="7444" fg:w="87"/><text x="28.2066%" y="943.50"></text></g><g><title>core::hash::BuildHasher::hash_one (87 samples, 0.33%)</title><rect x="27.9566%" y="917" width="0.3267%" height="15" fill="rgb(234,204,3)" fg:x="7444" fg:w="87"/><text x="28.2066%" y="927.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (32 samples, 0.12%)</title><rect x="28.1631%" y="901" width="0.1202%" height="15" fill="rgb(251,218,7)" fg:x="7499" fg:w="32"/><text x="28.4131%" y="911.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (8 samples, 0.03%)</title><rect x="28.2533%" y="885" width="0.0300%" height="15" fill="rgb(221,81,32)" fg:x="7523" fg:w="8"/><text x="28.5033%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (8 samples, 0.03%)</title><rect x="28.2533%" y="869" width="0.0300%" height="15" fill="rgb(214,152,26)" fg:x="7523" fg:w="8"/><text x="28.5033%" y="879.50"></text></g><g><title>core::hash::Hasher::write_u64 (8 samples, 0.03%)</title><rect x="28.2533%" y="853" width="0.0300%" height="15" fill="rgb(223,22,3)" fg:x="7523" fg:w="8"/><text x="28.5033%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.04%)</title><rect x="28.3284%" y="901" width="0.0376%" height="15" fill="rgb(207,174,7)" fg:x="7543" fg:w="10"/><text x="28.5784%" y="911.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (10 samples, 0.04%)</title><rect x="28.3284%" y="885" width="0.0376%" height="15" fill="rgb(224,19,52)" fg:x="7543" fg:w="10"/><text x="28.5784%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3 samples, 0.01%)</title><rect x="28.3697%" y="901" width="0.0113%" height="15" fill="rgb(228,24,14)" fg:x="7554" fg:w="3"/><text x="28.6197%" y="911.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.01%)</title><rect x="28.3697%" y="885" width="0.0113%" height="15" fill="rgb(230,153,43)" fg:x="7554" fg:w="3"/><text x="28.6197%" y="895.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.01%)</title><rect x="28.3697%" y="869" width="0.0113%" height="15" fill="rgb(231,106,12)" fg:x="7554" fg:w="3"/><text x="28.6197%" y="879.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.01%)</title><rect x="28.3697%" y="853" width="0.0113%" height="15" fill="rgb(215,92,2)" fg:x="7554" fg:w="3"/><text x="28.6197%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.01%)</title><rect x="28.3697%" y="837" width="0.0113%" height="15" fill="rgb(249,143,25)" fg:x="7554" fg:w="3"/><text x="28.6197%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (7 samples, 0.03%)</title><rect x="28.3810%" y="901" width="0.0263%" height="15" fill="rgb(252,7,35)" fg:x="7557" fg:w="7"/><text x="28.6310%" y="911.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (18 samples, 0.07%)</title><rect x="28.4148%" y="901" width="0.0676%" height="15" fill="rgb(216,69,40)" fg:x="7566" fg:w="18"/><text x="28.6648%" y="911.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.07%)</title><rect x="28.4148%" y="885" width="0.0676%" height="15" fill="rgb(240,36,33)" fg:x="7566" fg:w="18"/><text x="28.6648%" y="895.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::collect_inwards_edges (2,002 samples, 7.52%)</title><rect x="20.9975%" y="981" width="7.5187%" height="15" fill="rgb(231,128,14)" fg:x="5591" fg:w="2002"/><text x="21.2475%" y="991.50">graph_craf..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (257 samples, 0.97%)</title><rect x="27.5510%" y="965" width="0.9652%" height="15" fill="rgb(245,143,14)" fg:x="7336" fg:w="257"/><text x="27.8010%" y="975.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (257 samples, 0.97%)</title><rect x="27.5510%" y="949" width="0.9652%" height="15" fill="rgb(222,130,28)" fg:x="7336" fg:w="257"/><text x="27.8010%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (62 samples, 0.23%)</title><rect x="28.2833%" y="933" width="0.2328%" height="15" fill="rgb(212,10,48)" fg:x="7531" fg:w="62"/><text x="28.5333%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (62 samples, 0.23%)</title><rect x="28.2833%" y="917" width="0.2328%" height="15" fill="rgb(254,118,45)" fg:x="7531" fg:w="62"/><text x="28.5333%" y="927.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (9 samples, 0.03%)</title><rect x="28.4824%" y="901" width="0.0338%" height="15" fill="rgb(228,6,45)" fg:x="7584" fg:w="9"/><text x="28.7324%" y="911.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (9 samples, 0.03%)</title><rect x="28.4824%" y="885" width="0.0338%" height="15" fill="rgb(241,18,35)" fg:x="7584" fg:w="9"/><text x="28.7324%" y="895.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9 samples, 0.03%)</title><rect x="28.4824%" y="869" width="0.0338%" height="15" fill="rgb(227,214,53)" fg:x="7584" fg:w="9"/><text x="28.7324%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (10 samples, 0.04%)</title><rect x="28.5199%" y="917" width="0.0376%" height="15" fill="rgb(224,107,51)" fg:x="7594" fg:w="10"/><text x="28.7699%" y="927.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (10 samples, 0.04%)</title><rect x="28.5199%" y="901" width="0.0376%" height="15" fill="rgb(248,60,28)" fg:x="7594" fg:w="10"/><text x="28.7699%" y="911.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (10 samples, 0.04%)</title><rect x="28.5199%" y="885" width="0.0376%" height="15" fill="rgb(249,101,23)" fg:x="7594" fg:w="10"/><text x="28.7699%" y="895.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (12 samples, 0.05%)</title><rect x="28.5199%" y="933" width="0.0451%" height="15" fill="rgb(228,51,19)" fg:x="7594" fg:w="12"/><text x="28.7699%" y="943.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (13 samples, 0.05%)</title><rect x="28.5199%" y="949" width="0.0488%" height="15" fill="rgb(213,20,6)" fg:x="7594" fg:w="13"/><text x="28.7699%" y="959.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (17 samples, 0.06%)</title><rect x="28.5162%" y="965" width="0.0638%" height="15" fill="rgb(212,124,10)" fg:x="7593" fg:w="17"/><text x="28.7662%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4 samples, 0.02%)</title><rect x="28.5875%" y="901" width="0.0150%" height="15" fill="rgb(248,3,40)" fg:x="7612" fg:w="4"/><text x="28.8375%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.01%)</title><rect x="28.5913%" y="885" width="0.0113%" height="15" fill="rgb(223,178,23)" fg:x="7613" fg:w="3"/><text x="28.8413%" y="895.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (24 samples, 0.09%)</title><rect x="28.5162%" y="981" width="0.0901%" height="15" fill="rgb(240,132,45)" fg:x="7593" fg:w="24"/><text x="28.7662%" y="991.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (6 samples, 0.02%)</title><rect x="28.5838%" y="965" width="0.0225%" height="15" fill="rgb(245,164,36)" fg:x="7611" fg:w="6"/><text x="28.8338%" y="975.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (6 samples, 0.02%)</title><rect x="28.5838%" y="949" width="0.0225%" height="15" fill="rgb(231,188,53)" fg:x="7611" fg:w="6"/><text x="28.8338%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.02%)</title><rect x="28.5838%" y="933" width="0.0225%" height="15" fill="rgb(237,198,39)" fg:x="7611" fg:w="6"/><text x="28.8338%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (5 samples, 0.02%)</title><rect x="28.5875%" y="917" width="0.0188%" height="15" fill="rgb(223,120,35)" fg:x="7612" fg:w="5"/><text x="28.8375%" y="927.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (2,066 samples, 7.76%)</title><rect x="20.8510%" y="997" width="7.7590%" height="15" fill="rgb(253,107,49)" fg:x="5552" fg:w="2066"/><text x="21.1010%" y="1007.50">graph_craft..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="28.6363%" y="853" width="0.0113%" height="15" fill="rgb(216,44,31)" fg:x="7625" fg:w="3"/><text x="28.8863%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.02%)</title><rect x="28.6326%" y="869" width="0.0188%" height="15" fill="rgb(253,87,21)" fg:x="7624" fg:w="5"/><text x="28.8826%" y="879.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.03%)</title><rect x="28.6589%" y="853" width="0.0338%" height="15" fill="rgb(226,18,2)" fg:x="7631" fg:w="9"/><text x="28.9089%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (25 samples, 0.09%)</title><rect x="28.6138%" y="917" width="0.0939%" height="15" fill="rgb(216,8,46)" fg:x="7619" fg:w="25"/><text x="28.8638%" y="927.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (25 samples, 0.09%)</title><rect x="28.6138%" y="901" width="0.0939%" height="15" fill="rgb(226,140,39)" fg:x="7619" fg:w="25"/><text x="28.8638%" y="911.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (25 samples, 0.09%)</title><rect x="28.6138%" y="885" width="0.0939%" height="15" fill="rgb(221,194,54)" fg:x="7619" fg:w="25"/><text x="28.8638%" y="895.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (15 samples, 0.06%)</title><rect x="28.6514%" y="869" width="0.0563%" height="15" fill="rgb(213,92,11)" fg:x="7629" fg:w="15"/><text x="28.9014%" y="879.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.02%)</title><rect x="28.6927%" y="853" width="0.0150%" height="15" fill="rgb(229,162,46)" fg:x="7640" fg:w="4"/><text x="28.9427%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="28.7115%" y="853" width="0.0150%" height="15" fill="rgb(214,111,36)" fg:x="7645" fg:w="4"/><text x="28.9615%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="28.7115%" y="837" width="0.0150%" height="15" fill="rgb(207,6,21)" fg:x="7645" fg:w="4"/><text x="28.9615%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="28.7115%" y="821" width="0.0150%" height="15" fill="rgb(213,127,38)" fg:x="7645" fg:w="4"/><text x="28.9615%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (32 samples, 0.12%)</title><rect x="28.6138%" y="949" width="0.1202%" height="15" fill="rgb(238,118,32)" fg:x="7619" fg:w="32"/><text x="28.8638%" y="959.50"></text></g><g><title>core::hash::BuildHasher::hash_one (32 samples, 0.12%)</title><rect x="28.6138%" y="933" width="0.1202%" height="15" fill="rgb(240,139,39)" fg:x="7619" fg:w="32"/><text x="28.8638%" y="943.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.02%)</title><rect x="28.7115%" y="917" width="0.0225%" height="15" fill="rgb(235,10,37)" fg:x="7645" fg:w="6"/><text x="28.9615%" y="927.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (6 samples, 0.02%)</title><rect x="28.7115%" y="901" width="0.0225%" height="15" fill="rgb(249,171,38)" fg:x="7645" fg:w="6"/><text x="28.9615%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (6 samples, 0.02%)</title><rect x="28.7115%" y="885" width="0.0225%" height="15" fill="rgb(242,144,32)" fg:x="7645" fg:w="6"/><text x="28.9615%" y="895.50"></text></g><g><title>core::hash::Hasher::write_u64 (6 samples, 0.02%)</title><rect x="28.7115%" y="869" width="0.0225%" height="15" fill="rgb(217,117,21)" fg:x="7645" fg:w="6"/><text x="28.9615%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.05%)</title><rect x="28.8880%" y="901" width="0.0451%" height="15" fill="rgb(249,87,1)" fg:x="7692" fg:w="12"/><text x="29.1380%" y="911.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (12 samples, 0.05%)</title><rect x="28.8880%" y="885" width="0.0451%" height="15" fill="rgb(248,196,48)" fg:x="7692" fg:w="12"/><text x="29.1380%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (4 samples, 0.02%)</title><rect x="28.9330%" y="901" width="0.0150%" height="15" fill="rgb(251,206,33)" fg:x="7704" fg:w="4"/><text x="29.1830%" y="911.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (4 samples, 0.02%)</title><rect x="28.9330%" y="885" width="0.0150%" height="15" fill="rgb(232,141,28)" fg:x="7704" fg:w="4"/><text x="29.1830%" y="895.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (4 samples, 0.02%)</title><rect x="28.9330%" y="869" width="0.0150%" height="15" fill="rgb(209,167,14)" fg:x="7704" fg:w="4"/><text x="29.1830%" y="879.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.02%)</title><rect x="28.9330%" y="853" width="0.0150%" height="15" fill="rgb(225,11,50)" fg:x="7704" fg:w="4"/><text x="29.1830%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.02%)</title><rect x="28.9330%" y="837" width="0.0150%" height="15" fill="rgb(209,50,20)" fg:x="7704" fg:w="4"/><text x="29.1830%" y="847.50"></text></g><g><title>hashbrown::raw::h2 (8 samples, 0.03%)</title><rect x="28.9518%" y="901" width="0.0300%" height="15" fill="rgb(212,17,46)" fg:x="7709" fg:w="8"/><text x="29.2018%" y="911.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (4,083 samples, 15.33%)</title><rect x="13.7041%" y="1013" width="15.3341%" height="15" fill="rgb(216,101,39)" fg:x="3649" fg:w="4083"/><text x="13.9541%" y="1023.50">graph_craft::proto::Pro..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (114 samples, 0.43%)</title><rect x="28.6101%" y="997" width="0.4281%" height="15" fill="rgb(212,228,48)" fg:x="7618" fg:w="114"/><text x="28.8601%" y="1007.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (114 samples, 0.43%)</title><rect x="28.6101%" y="981" width="0.4281%" height="15" fill="rgb(250,6,50)" fg:x="7618" fg:w="114"/><text x="28.8601%" y="991.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (114 samples, 0.43%)</title><rect x="28.6101%" y="965" width="0.4281%" height="15" fill="rgb(250,160,48)" fg:x="7618" fg:w="114"/><text x="28.8601%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (81 samples, 0.30%)</title><rect x="28.7340%" y="949" width="0.3042%" height="15" fill="rgb(244,216,33)" fg:x="7651" fg:w="81"/><text x="28.9840%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (81 samples, 0.30%)</title><rect x="28.7340%" y="933" width="0.3042%" height="15" fill="rgb(207,157,5)" fg:x="7651" fg:w="81"/><text x="28.9840%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (81 samples, 0.30%)</title><rect x="28.7340%" y="917" width="0.3042%" height="15" fill="rgb(228,199,8)" fg:x="7651" fg:w="81"/><text x="28.9840%" y="927.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (15 samples, 0.06%)</title><rect x="28.9819%" y="901" width="0.0563%" height="15" fill="rgb(227,80,20)" fg:x="7717" fg:w="15"/><text x="29.2319%" y="911.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 0.06%)</title><rect x="28.9819%" y="885" width="0.0563%" height="15" fill="rgb(222,9,33)" fg:x="7717" fg:w="15"/><text x="29.2319%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.02%)</title><rect x="29.0645%" y="981" width="0.0150%" height="15" fill="rgb(239,44,28)" fg:x="7739" fg:w="4"/><text x="29.3145%" y="991.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.02%)</title><rect x="29.0645%" y="965" width="0.0150%" height="15" fill="rgb(249,187,43)" fg:x="7739" fg:w="4"/><text x="29.3145%" y="975.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.02%)</title><rect x="29.0645%" y="949" width="0.0150%" height="15" fill="rgb(216,141,28)" fg:x="7739" fg:w="4"/><text x="29.3145%" y="959.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (4 samples, 0.02%)</title><rect x="29.0645%" y="933" width="0.0150%" height="15" fill="rgb(230,154,53)" fg:x="7739" fg:w="4"/><text x="29.3145%" y="943.50"></text></g><g><title>graph_craft::proto::ProtoNode::map_ids::_{{closure}} (3 samples, 0.01%)</title><rect x="29.0682%" y="917" width="0.0113%" height="15" fill="rgb(227,82,4)" fg:x="7740" fg:w="3"/><text x="29.3182%" y="927.50"></text></g><g><title>graph_craft::proto::ProtoNode::map_ids (8 samples, 0.03%)</title><rect x="29.0532%" y="997" width="0.0300%" height="15" fill="rgb(220,107,16)" fg:x="7736" fg:w="8"/><text x="29.3032%" y="1007.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.02%)</title><rect x="29.0983%" y="869" width="0.0225%" height="15" fill="rgb(207,187,2)" fg:x="7748" fg:w="6"/><text x="29.3483%" y="879.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="29.1096%" y="853" width="0.0113%" height="15" fill="rgb(210,162,52)" fg:x="7751" fg:w="3"/><text x="29.3596%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.05%)</title><rect x="29.0833%" y="949" width="0.0526%" height="15" fill="rgb(217,216,49)" fg:x="7744" fg:w="14"/><text x="29.3333%" y="959.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.05%)</title><rect x="29.0833%" y="933" width="0.0526%" height="15" fill="rgb(218,146,49)" fg:x="7744" fg:w="14"/><text x="29.3333%" y="943.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="29.0833%" y="917" width="0.0526%" height="15" fill="rgb(216,55,40)" fg:x="7744" fg:w="14"/><text x="29.3333%" y="927.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="29.0833%" y="901" width="0.0526%" height="15" fill="rgb(208,196,21)" fg:x="7744" fg:w="14"/><text x="29.3333%" y="911.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="29.0833%" y="885" width="0.0526%" height="15" fill="rgb(242,117,42)" fg:x="7744" fg:w="14"/><text x="29.3333%" y="895.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.02%)</title><rect x="29.1208%" y="869" width="0.0150%" height="15" fill="rgb(210,11,23)" fg:x="7754" fg:w="4"/><text x="29.3708%" y="879.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (6,571 samples, 24.68%)</title><rect x="4.4616%" y="1061" width="24.6780%" height="15" fill="rgb(217,110,2)" fg:x="1188" fg:w="6571"/><text x="4.7116%" y="1071.50">core::iter::adapters::map::map_try_fold..</text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (6,571 samples, 24.68%)</title><rect x="4.4616%" y="1045" width="24.6780%" height="15" fill="rgb(229,77,54)" fg:x="1188" fg:w="6571"/><text x="4.7116%" y="1055.50">graph_craft::graphene_compiler::Compile..</text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (4,969 samples, 18.66%)</title><rect x="10.4781%" y="1029" width="18.6615%" height="15" fill="rgb(218,53,16)" fg:x="2790" fg:w="4969"/><text x="10.7281%" y="1039.50">graph_craft::proto::ProtoNetw..</text></g><g><title>graph_craft::proto::ProtoNetwork::replace_node_id (27 samples, 0.10%)</title><rect x="29.0382%" y="1013" width="0.1014%" height="15" fill="rgb(215,38,13)" fg:x="7732" fg:w="27"/><text x="29.2882%" y="1023.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (15 samples, 0.06%)</title><rect x="29.0833%" y="997" width="0.0563%" height="15" fill="rgb(235,42,18)" fg:x="7744" fg:w="15"/><text x="29.3333%" y="1007.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (15 samples, 0.06%)</title><rect x="29.0833%" y="981" width="0.0563%" height="15" fill="rgb(219,66,54)" fg:x="7744" fg:w="15"/><text x="29.3333%" y="991.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (15 samples, 0.06%)</title><rect x="29.0833%" y="965" width="0.0563%" height="15" fill="rgb(222,205,4)" fg:x="7744" fg:w="15"/><text x="29.3333%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (51 samples, 0.19%)</title><rect x="29.1396%" y="981" width="0.1915%" height="15" fill="rgb(227,213,46)" fg:x="7759" fg:w="51"/><text x="29.3896%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (50 samples, 0.19%)</title><rect x="29.1434%" y="965" width="0.1878%" height="15" fill="rgb(250,145,42)" fg:x="7760" fg:w="50"/><text x="29.3934%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (50 samples, 0.19%)</title><rect x="29.1434%" y="949" width="0.1878%" height="15" fill="rgb(219,15,2)" fg:x="7760" fg:w="50"/><text x="29.3934%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (50 samples, 0.19%)</title><rect x="29.1434%" y="933" width="0.1878%" height="15" fill="rgb(231,181,52)" fg:x="7760" fg:w="50"/><text x="29.3934%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (50 samples, 0.19%)</title><rect x="29.1434%" y="917" width="0.1878%" height="15" fill="rgb(235,1,42)" fg:x="7760" fg:w="50"/><text x="29.3934%" y="927.50"></text></g><g><title>alloc::alloc::alloc (50 samples, 0.19%)</title><rect x="29.1434%" y="901" width="0.1878%" height="15" fill="rgb(249,88,27)" fg:x="7760" fg:w="50"/><text x="29.3934%" y="911.50"></text></g><g><title>__rdl_alloc (50 samples, 0.19%)</title><rect x="29.1434%" y="885" width="0.1878%" height="15" fill="rgb(235,145,16)" fg:x="7760" fg:w="50"/><text x="29.3934%" y="895.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (50 samples, 0.19%)</title><rect x="29.1434%" y="869" width="0.1878%" height="15" fill="rgb(237,114,19)" fg:x="7760" fg:w="50"/><text x="29.3934%" y="879.50"></text></g><g><title>malloc (50 samples, 0.19%)</title><rect x="29.1434%" y="853" width="0.1878%" height="15" fill="rgb(238,51,50)" fg:x="7760" fg:w="50"/><text x="29.3934%" y="863.50"></text></g><g><title>_int_malloc (50 samples, 0.19%)</title><rect x="29.1434%" y="837" width="0.1878%" height="15" fill="rgb(205,194,25)" fg:x="7760" fg:w="50"/><text x="29.3934%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="29.4663%" y="933" width="0.0150%" height="15" fill="rgb(215,203,17)" fg:x="7846" fg:w="4"/><text x="29.7163%" y="943.50"></text></g><g><title>core::clone::Clone::clone (9 samples, 0.03%)</title><rect x="29.6015%" y="853" width="0.0338%" height="15" fill="rgb(233,112,49)" fg:x="7882" fg:w="9"/><text x="29.8515%" y="863.50"></text></g><g><title>&lt;graph_craft::document::Source as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="29.6015%" y="837" width="0.0338%" height="15" fill="rgb(241,130,26)" fg:x="7882" fg:w="9"/><text x="29.8515%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="29.6015%" y="821" width="0.0338%" height="15" fill="rgb(252,223,19)" fg:x="7882" fg:w="9"/><text x="29.8515%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.03%)</title><rect x="29.6015%" y="805" width="0.0338%" height="15" fill="rgb(211,95,25)" fg:x="7882" fg:w="9"/><text x="29.8515%" y="815.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (16 samples, 0.06%)</title><rect x="29.6353%" y="853" width="0.0601%" height="15" fill="rgb(251,182,27)" fg:x="7891" fg:w="16"/><text x="29.8853%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.06%)</title><rect x="29.6353%" y="837" width="0.0601%" height="15" fill="rgb(238,24,4)" fg:x="7891" fg:w="16"/><text x="29.8853%" y="847.50"></text></g><g><title>__memmove_avx512_unaligned_erms (15 samples, 0.06%)</title><rect x="29.6391%" y="821" width="0.0563%" height="15" fill="rgb(224,220,25)" fg:x="7892" fg:w="15"/><text x="29.8891%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (27 samples, 0.10%)</title><rect x="29.5978%" y="885" width="0.1014%" height="15" fill="rgb(239,133,26)" fg:x="7881" fg:w="27"/><text x="29.8478%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (27 samples, 0.10%)</title><rect x="29.5978%" y="869" width="0.1014%" height="15" fill="rgb(211,94,48)" fg:x="7881" fg:w="27"/><text x="29.8478%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (17 samples, 0.06%)</title><rect x="29.7067%" y="885" width="0.0638%" height="15" fill="rgb(239,87,6)" fg:x="7910" fg:w="17"/><text x="29.9567%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (17 samples, 0.06%)</title><rect x="29.7067%" y="869" width="0.0638%" height="15" fill="rgb(227,62,0)" fg:x="7910" fg:w="17"/><text x="29.9567%" y="879.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (17 samples, 0.06%)</title><rect x="29.7067%" y="853" width="0.0638%" height="15" fill="rgb(211,226,4)" fg:x="7910" fg:w="17"/><text x="29.9567%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.06%)</title><rect x="29.7067%" y="837" width="0.0638%" height="15" fill="rgb(253,38,52)" fg:x="7910" fg:w="17"/><text x="29.9567%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.06%)</title><rect x="29.7067%" y="821" width="0.0638%" height="15" fill="rgb(229,126,40)" fg:x="7910" fg:w="17"/><text x="29.9567%" y="831.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.06%)</title><rect x="29.7067%" y="805" width="0.0638%" height="15" fill="rgb(229,165,44)" fg:x="7910" fg:w="17"/><text x="29.9567%" y="815.50"></text></g><g><title>__rdl_alloc (17 samples, 0.06%)</title><rect x="29.7067%" y="789" width="0.0638%" height="15" fill="rgb(247,95,47)" fg:x="7910" fg:w="17"/><text x="29.9567%" y="799.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17 samples, 0.06%)</title><rect x="29.7067%" y="773" width="0.0638%" height="15" fill="rgb(216,140,30)" fg:x="7910" fg:w="17"/><text x="29.9567%" y="783.50"></text></g><g><title>malloc (17 samples, 0.06%)</title><rect x="29.7067%" y="757" width="0.0638%" height="15" fill="rgb(246,214,8)" fg:x="7910" fg:w="17"/><text x="29.9567%" y="767.50"></text></g><g><title>_int_malloc (17 samples, 0.06%)</title><rect x="29.7067%" y="741" width="0.0638%" height="15" fill="rgb(227,224,15)" fg:x="7910" fg:w="17"/><text x="29.9567%" y="751.50"></text></g><g><title>unlink_chunk.isra.0 (4 samples, 0.02%)</title><rect x="29.7555%" y="725" width="0.0150%" height="15" fill="rgb(233,175,4)" fg:x="7923" fg:w="4"/><text x="30.0055%" y="735.50"></text></g><g><title>&lt;graph_craft::document::OriginalLocation as core::clone::Clone&gt;::clone (89 samples, 0.33%)</title><rect x="29.4476%" y="949" width="0.3342%" height="15" fill="rgb(221,66,45)" fg:x="7841" fg:w="89"/><text x="29.6976%" y="959.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (80 samples, 0.30%)</title><rect x="29.4814%" y="933" width="0.3004%" height="15" fill="rgb(221,178,18)" fg:x="7850" fg:w="80"/><text x="29.7314%" y="943.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (56 samples, 0.21%)</title><rect x="29.5715%" y="917" width="0.2103%" height="15" fill="rgb(213,81,29)" fg:x="7874" fg:w="56"/><text x="29.8215%" y="927.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (55 samples, 0.21%)</title><rect x="29.5752%" y="901" width="0.2066%" height="15" fill="rgb(220,89,49)" fg:x="7875" fg:w="55"/><text x="29.8252%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_empty_singleton (3 samples, 0.01%)</title><rect x="29.7705%" y="885" width="0.0113%" height="15" fill="rgb(227,60,33)" fg:x="7927" fg:w="3"/><text x="30.0205%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (19 samples, 0.07%)</title><rect x="29.7818%" y="869" width="0.0714%" height="15" fill="rgb(205,113,12)" fg:x="7930" fg:w="19"/><text x="30.0318%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.07%)</title><rect x="29.7818%" y="853" width="0.0714%" height="15" fill="rgb(211,32,1)" fg:x="7930" fg:w="19"/><text x="30.0318%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (19 samples, 0.07%)</title><rect x="29.7818%" y="837" width="0.0714%" height="15" fill="rgb(246,2,12)" fg:x="7930" fg:w="19"/><text x="30.0318%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.07%)</title><rect x="29.7818%" y="821" width="0.0714%" height="15" fill="rgb(243,37,27)" fg:x="7930" fg:w="19"/><text x="30.0318%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.07%)</title><rect x="29.7818%" y="805" width="0.0714%" height="15" fill="rgb(248,211,31)" fg:x="7930" fg:w="19"/><text x="30.0318%" y="815.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.07%)</title><rect x="29.7818%" y="789" width="0.0714%" height="15" fill="rgb(242,146,47)" fg:x="7930" fg:w="19"/><text x="30.0318%" y="799.50"></text></g><g><title>__rdl_alloc (19 samples, 0.07%)</title><rect x="29.7818%" y="773" width="0.0714%" height="15" fill="rgb(206,70,20)" fg:x="7930" fg:w="19"/><text x="30.0318%" y="783.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (19 samples, 0.07%)</title><rect x="29.7818%" y="757" width="0.0714%" height="15" fill="rgb(215,10,51)" fg:x="7930" fg:w="19"/><text x="30.0318%" y="767.50"></text></g><g><title>malloc (19 samples, 0.07%)</title><rect x="29.7818%" y="741" width="0.0714%" height="15" fill="rgb(243,178,53)" fg:x="7930" fg:w="19"/><text x="30.0318%" y="751.50"></text></g><g><title>_int_malloc (18 samples, 0.07%)</title><rect x="29.7856%" y="725" width="0.0676%" height="15" fill="rgb(233,221,20)" fg:x="7931" fg:w="18"/><text x="30.0356%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (33 samples, 0.12%)</title><rect x="29.7818%" y="933" width="0.1239%" height="15" fill="rgb(218,95,35)" fg:x="7930" fg:w="33"/><text x="30.0318%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (33 samples, 0.12%)</title><rect x="29.7818%" y="917" width="0.1239%" height="15" fill="rgb(229,13,5)" fg:x="7930" fg:w="33"/><text x="30.0318%" y="927.50"></text></g><g><title>alloc::slice::hack::to_vec (33 samples, 0.12%)</title><rect x="29.7818%" y="901" width="0.1239%" height="15" fill="rgb(252,164,30)" fg:x="7930" fg:w="33"/><text x="30.0318%" y="911.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (33 samples, 0.12%)</title><rect x="29.7818%" y="885" width="0.1239%" height="15" fill="rgb(232,68,36)" fg:x="7930" fg:w="33"/><text x="30.0318%" y="895.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (14 samples, 0.05%)</title><rect x="29.8532%" y="869" width="0.0526%" height="15" fill="rgb(219,59,54)" fg:x="7949" fg:w="14"/><text x="30.1032%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.05%)</title><rect x="29.8532%" y="853" width="0.0526%" height="15" fill="rgb(250,92,33)" fg:x="7949" fg:w="14"/><text x="30.1032%" y="863.50"></text></g><g><title>__memmove_avx512_unaligned_erms (14 samples, 0.05%)</title><rect x="29.8532%" y="837" width="0.0526%" height="15" fill="rgb(229,162,54)" fg:x="7949" fg:w="14"/><text x="30.1032%" y="847.50"></text></g><g><title>&lt;graphene_core::vector::style::Fill as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="29.9433%" y="901" width="0.0188%" height="15" fill="rgb(244,114,52)" fg:x="7973" fg:w="5"/><text x="30.1933%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.02%)</title><rect x="29.9846%" y="853" width="0.0150%" height="15" fill="rgb(212,211,43)" fg:x="7984" fg:w="4"/><text x="30.2346%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 0.02%)</title><rect x="29.9846%" y="837" width="0.0150%" height="15" fill="rgb(226,147,8)" fg:x="7984" fg:w="4"/><text x="30.2346%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.02%)</title><rect x="29.9846%" y="821" width="0.0150%" height="15" fill="rgb(226,23,13)" fg:x="7984" fg:w="4"/><text x="30.2346%" y="831.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::VectorData as core::clone::Clone&gt;::clone (11 samples, 0.04%)</title><rect x="29.9621%" y="901" width="0.0413%" height="15" fill="rgb(240,63,4)" fg:x="7978" fg:w="11"/><text x="30.2121%" y="911.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::SegmentDomain as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="29.9808%" y="885" width="0.0225%" height="15" fill="rgb(221,1,32)" fg:x="7983" fg:w="6"/><text x="30.2308%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="29.9846%" y="869" width="0.0188%" height="15" fill="rgb(242,117,10)" fg:x="7984" fg:w="5"/><text x="30.2346%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="30.0034%" y="805" width="0.0113%" height="15" fill="rgb(249,172,44)" fg:x="7989" fg:w="3"/><text x="30.2534%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="30.0034%" y="789" width="0.0113%" height="15" fill="rgb(244,46,45)" fg:x="7989" fg:w="3"/><text x="30.2534%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.01%)</title><rect x="30.0034%" y="773" width="0.0113%" height="15" fill="rgb(206,43,17)" fg:x="7989" fg:w="3"/><text x="30.2534%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="30.0034%" y="757" width="0.0113%" height="15" fill="rgb(239,218,39)" fg:x="7989" fg:w="3"/><text x="30.2534%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="30.0034%" y="741" width="0.0113%" height="15" fill="rgb(208,169,54)" fg:x="7989" fg:w="3"/><text x="30.2534%" y="751.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="30.0034%" y="725" width="0.0113%" height="15" fill="rgb(247,25,42)" fg:x="7989" fg:w="3"/><text x="30.2534%" y="735.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="30.0034%" y="709" width="0.0113%" height="15" fill="rgb(226,23,31)" fg:x="7989" fg:w="3"/><text x="30.2534%" y="719.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="30.0034%" y="693" width="0.0113%" height="15" fill="rgb(247,16,28)" fg:x="7989" fg:w="3"/><text x="30.2534%" y="703.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="30.0034%" y="677" width="0.0113%" height="15" fill="rgb(231,147,38)" fg:x="7989" fg:w="3"/><text x="30.2534%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="30.0034%" y="869" width="0.0150%" height="15" fill="rgb(253,81,48)" fg:x="7989" fg:w="4"/><text x="30.2534%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.02%)</title><rect x="30.0034%" y="853" width="0.0150%" height="15" fill="rgb(249,222,43)" fg:x="7989" fg:w="4"/><text x="30.2534%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.02%)</title><rect x="30.0034%" y="837" width="0.0150%" height="15" fill="rgb(221,3,27)" fg:x="7989" fg:w="4"/><text x="30.2534%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.02%)</title><rect x="30.0034%" y="821" width="0.0150%" height="15" fill="rgb(228,180,5)" fg:x="7989" fg:w="4"/><text x="30.2534%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (4 samples, 0.02%)</title><rect x="30.0372%" y="821" width="0.0150%" height="15" fill="rgb(227,131,42)" fg:x="7998" fg:w="4"/><text x="30.2872%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (4 samples, 0.02%)</title><rect x="30.0372%" y="805" width="0.0150%" height="15" fill="rgb(212,3,39)" fg:x="7998" fg:w="4"/><text x="30.2872%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.02%)</title><rect x="30.0372%" y="789" width="0.0150%" height="15" fill="rgb(226,45,5)" fg:x="7998" fg:w="4"/><text x="30.2872%" y="799.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="30.0372%" y="773" width="0.0150%" height="15" fill="rgb(215,167,45)" fg:x="7998" fg:w="4"/><text x="30.2872%" y="783.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::PointModification as core::clone::Clone&gt;::clone (20 samples, 0.08%)</title><rect x="30.0034%" y="885" width="0.0751%" height="15" fill="rgb(250,218,53)" fg:x="7989" fg:w="20"/><text x="30.2534%" y="895.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (16 samples, 0.06%)</title><rect x="30.0184%" y="869" width="0.0601%" height="15" fill="rgb(207,140,0)" fg:x="7993" fg:w="16"/><text x="30.2684%" y="879.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.04%)</title><rect x="30.0372%" y="853" width="0.0413%" height="15" fill="rgb(238,133,51)" fg:x="7998" fg:w="11"/><text x="30.2872%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.04%)</title><rect x="30.0372%" y="837" width="0.0413%" height="15" fill="rgb(218,203,53)" fg:x="7998" fg:w="11"/><text x="30.2872%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (7 samples, 0.03%)</title><rect x="30.0522%" y="821" width="0.0263%" height="15" fill="rgb(226,184,25)" fg:x="8002" fg:w="7"/><text x="30.3022%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (7 samples, 0.03%)</title><rect x="30.0522%" y="805" width="0.0263%" height="15" fill="rgb(231,121,21)" fg:x="8002" fg:w="7"/><text x="30.3022%" y="815.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (7 samples, 0.03%)</title><rect x="30.0522%" y="789" width="0.0263%" height="15" fill="rgb(251,14,34)" fg:x="8002" fg:w="7"/><text x="30.3022%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.03%)</title><rect x="30.0522%" y="773" width="0.0263%" height="15" fill="rgb(249,193,11)" fg:x="8002" fg:w="7"/><text x="30.3022%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.03%)</title><rect x="30.0522%" y="757" width="0.0263%" height="15" fill="rgb(220,172,37)" fg:x="8002" fg:w="7"/><text x="30.3022%" y="767.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.03%)</title><rect x="30.0522%" y="741" width="0.0263%" height="15" fill="rgb(231,229,43)" fg:x="8002" fg:w="7"/><text x="30.3022%" y="751.50"></text></g><g><title>__rdl_alloc (7 samples, 0.03%)</title><rect x="30.0522%" y="725" width="0.0263%" height="15" fill="rgb(250,161,5)" fg:x="8002" fg:w="7"/><text x="30.3022%" y="735.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.03%)</title><rect x="30.0522%" y="709" width="0.0263%" height="15" fill="rgb(218,225,18)" fg:x="8002" fg:w="7"/><text x="30.3022%" y="719.50"></text></g><g><title>malloc (7 samples, 0.03%)</title><rect x="30.0522%" y="693" width="0.0263%" height="15" fill="rgb(245,45,42)" fg:x="8002" fg:w="7"/><text x="30.3022%" y="703.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="30.0635%" y="677" width="0.0150%" height="15" fill="rgb(211,115,1)" fg:x="8005" fg:w="4"/><text x="30.3135%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="30.0785%" y="869" width="0.0113%" height="15" fill="rgb(248,133,52)" fg:x="8009" fg:w="3"/><text x="30.3285%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.01%)</title><rect x="30.0785%" y="853" width="0.0113%" height="15" fill="rgb(238,100,21)" fg:x="8009" fg:w="3"/><text x="30.3285%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.01%)</title><rect x="30.0785%" y="837" width="0.0113%" height="15" fill="rgb(247,144,11)" fg:x="8009" fg:w="3"/><text x="30.3285%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="30.0785%" y="821" width="0.0113%" height="15" fill="rgb(206,164,16)" fg:x="8009" fg:w="3"/><text x="30.3285%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="30.0785%" y="805" width="0.0113%" height="15" fill="rgb(222,34,3)" fg:x="8009" fg:w="3"/><text x="30.3285%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="30.0785%" y="789" width="0.0113%" height="15" fill="rgb(248,82,4)" fg:x="8009" fg:w="3"/><text x="30.3285%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.01%)</title><rect x="30.0785%" y="773" width="0.0113%" height="15" fill="rgb(228,81,46)" fg:x="8009" fg:w="3"/><text x="30.3285%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="30.0785%" y="757" width="0.0113%" height="15" fill="rgb(227,67,47)" fg:x="8009" fg:w="3"/><text x="30.3285%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="30.0785%" y="741" width="0.0113%" height="15" fill="rgb(215,93,53)" fg:x="8009" fg:w="3"/><text x="30.3285%" y="751.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="30.0785%" y="725" width="0.0113%" height="15" fill="rgb(248,194,39)" fg:x="8009" fg:w="3"/><text x="30.3285%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="30.0898%" y="869" width="0.0300%" height="15" fill="rgb(215,5,19)" fg:x="8012" fg:w="8"/><text x="30.3398%" y="879.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="30.1010%" y="853" width="0.0188%" height="15" fill="rgb(226,215,51)" fg:x="8015" fg:w="5"/><text x="30.3510%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="30.1010%" y="837" width="0.0188%" height="15" fill="rgb(225,56,26)" fg:x="8015" fg:w="5"/><text x="30.3510%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (5 samples, 0.02%)</title><rect x="30.1010%" y="821" width="0.0188%" height="15" fill="rgb(222,75,29)" fg:x="8015" fg:w="5"/><text x="30.3510%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (5 samples, 0.02%)</title><rect x="30.1010%" y="805" width="0.0188%" height="15" fill="rgb(236,139,6)" fg:x="8015" fg:w="5"/><text x="30.3510%" y="815.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5 samples, 0.02%)</title><rect x="30.1010%" y="789" width="0.0188%" height="15" fill="rgb(223,137,36)" fg:x="8015" fg:w="5"/><text x="30.3510%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.02%)</title><rect x="30.1010%" y="773" width="0.0188%" height="15" fill="rgb(226,99,2)" fg:x="8015" fg:w="5"/><text x="30.3510%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.02%)</title><rect x="30.1010%" y="757" width="0.0188%" height="15" fill="rgb(206,133,23)" fg:x="8015" fg:w="5"/><text x="30.3510%" y="767.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="30.1010%" y="741" width="0.0188%" height="15" fill="rgb(243,173,15)" fg:x="8015" fg:w="5"/><text x="30.3510%" y="751.50"></text></g><g><title>__rdl_alloc (5 samples, 0.02%)</title><rect x="30.1010%" y="725" width="0.0188%" height="15" fill="rgb(228,69,28)" fg:x="8015" fg:w="5"/><text x="30.3510%" y="735.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.02%)</title><rect x="30.1010%" y="709" width="0.0188%" height="15" fill="rgb(212,51,22)" fg:x="8015" fg:w="5"/><text x="30.3510%" y="719.50"></text></g><g><title>malloc (5 samples, 0.02%)</title><rect x="30.1010%" y="693" width="0.0188%" height="15" fill="rgb(227,113,0)" fg:x="8015" fg:w="5"/><text x="30.3510%" y="703.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::RegionModification as core::clone::Clone&gt;::clone (13 samples, 0.05%)</title><rect x="30.0785%" y="885" width="0.0488%" height="15" fill="rgb(252,84,27)" fg:x="8009" fg:w="13"/><text x="30.3285%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="30.1273%" y="869" width="0.0113%" height="15" fill="rgb(223,145,39)" fg:x="8022" fg:w="3"/><text x="30.3773%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.01%)</title><rect x="30.1273%" y="853" width="0.0113%" height="15" fill="rgb(239,219,30)" fg:x="8022" fg:w="3"/><text x="30.3773%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.01%)</title><rect x="30.1273%" y="837" width="0.0113%" height="15" fill="rgb(224,196,39)" fg:x="8022" fg:w="3"/><text x="30.3773%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="30.1273%" y="821" width="0.0113%" height="15" fill="rgb(205,35,43)" fg:x="8022" fg:w="3"/><text x="30.3773%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (16 samples, 0.06%)</title><rect x="30.1386%" y="821" width="0.0601%" height="15" fill="rgb(228,201,21)" fg:x="8025" fg:w="16"/><text x="30.3886%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (16 samples, 0.06%)</title><rect x="30.1386%" y="805" width="0.0601%" height="15" fill="rgb(237,118,16)" fg:x="8025" fg:w="16"/><text x="30.3886%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.06%)</title><rect x="30.1386%" y="789" width="0.0601%" height="15" fill="rgb(241,17,19)" fg:x="8025" fg:w="16"/><text x="30.3886%" y="799.50"></text></g><g><title>__memmove_avx512_unaligned_erms (16 samples, 0.06%)</title><rect x="30.1386%" y="773" width="0.0601%" height="15" fill="rgb(214,10,25)" fg:x="8025" fg:w="16"/><text x="30.3886%" y="783.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::SegmentModification as core::clone::Clone&gt;::clone (50 samples, 0.19%)</title><rect x="30.1273%" y="885" width="0.1878%" height="15" fill="rgb(238,37,29)" fg:x="8022" fg:w="50"/><text x="30.3773%" y="895.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (47 samples, 0.18%)</title><rect x="30.1386%" y="869" width="0.1765%" height="15" fill="rgb(253,83,25)" fg:x="8025" fg:w="47"/><text x="30.3886%" y="879.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (47 samples, 0.18%)</title><rect x="30.1386%" y="853" width="0.1765%" height="15" fill="rgb(234,192,12)" fg:x="8025" fg:w="47"/><text x="30.3886%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (47 samples, 0.18%)</title><rect x="30.1386%" y="837" width="0.1765%" height="15" fill="rgb(241,216,45)" fg:x="8025" fg:w="47"/><text x="30.3886%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (31 samples, 0.12%)</title><rect x="30.1987%" y="821" width="0.1164%" height="15" fill="rgb(242,22,33)" fg:x="8041" fg:w="31"/><text x="30.4487%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (31 samples, 0.12%)</title><rect x="30.1987%" y="805" width="0.1164%" height="15" fill="rgb(231,105,49)" fg:x="8041" fg:w="31"/><text x="30.4487%" y="815.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (31 samples, 0.12%)</title><rect x="30.1987%" y="789" width="0.1164%" height="15" fill="rgb(218,204,15)" fg:x="8041" fg:w="31"/><text x="30.4487%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31 samples, 0.12%)</title><rect x="30.1987%" y="773" width="0.1164%" height="15" fill="rgb(235,138,41)" fg:x="8041" fg:w="31"/><text x="30.4487%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.12%)</title><rect x="30.1987%" y="757" width="0.1164%" height="15" fill="rgb(246,0,9)" fg:x="8041" fg:w="31"/><text x="30.4487%" y="767.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.12%)</title><rect x="30.1987%" y="741" width="0.1164%" height="15" fill="rgb(210,74,4)" fg:x="8041" fg:w="31"/><text x="30.4487%" y="751.50"></text></g><g><title>__rdl_alloc (31 samples, 0.12%)</title><rect x="30.1987%" y="725" width="0.1164%" height="15" fill="rgb(250,60,41)" fg:x="8041" fg:w="31"/><text x="30.4487%" y="735.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (31 samples, 0.12%)</title><rect x="30.1987%" y="709" width="0.1164%" height="15" fill="rgb(220,115,12)" fg:x="8041" fg:w="31"/><text x="30.4487%" y="719.50"></text></g><g><title>malloc (31 samples, 0.12%)</title><rect x="30.1987%" y="693" width="0.1164%" height="15" fill="rgb(237,100,13)" fg:x="8041" fg:w="31"/><text x="30.4487%" y="703.50"></text></g><g><title>_int_malloc (27 samples, 0.10%)</title><rect x="30.2137%" y="677" width="0.1014%" height="15" fill="rgb(213,55,26)" fg:x="8045" fg:w="27"/><text x="30.4637%" y="687.50"></text></g><g><title>unlink_chunk.isra.0 (10 samples, 0.04%)</title><rect x="30.2775%" y="661" width="0.0376%" height="15" fill="rgb(216,17,4)" fg:x="8062" fg:w="10"/><text x="30.5275%" y="671.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::VectorModification as core::clone::Clone&gt;::clone (90 samples, 0.34%)</title><rect x="30.0034%" y="901" width="0.3380%" height="15" fill="rgb(220,153,47)" fg:x="7989" fg:w="90"/><text x="30.2534%" y="911.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="30.3226%" y="885" width="0.0188%" height="15" fill="rgb(215,131,9)" fg:x="8074" fg:w="5"/><text x="30.5726%" y="895.50"></text></g><g><title>&lt;graph_craft::proto::ConstructionArgs as core::clone::Clone&gt;::clone (153 samples, 0.57%)</title><rect x="29.7818%" y="949" width="0.5746%" height="15" fill="rgb(233,46,42)" fg:x="7930" fg:w="153"/><text x="30.0318%" y="959.50"></text></g><g><title>&lt;graphene_core::memo::MemoHash&lt;T&gt; as core::clone::Clone&gt;::clone (120 samples, 0.45%)</title><rect x="29.9057%" y="933" width="0.4507%" height="15" fill="rgb(226,86,7)" fg:x="7963" fg:w="120"/><text x="30.1557%" y="943.50"></text></g><g><title>&lt;graph_craft::document::value::TaggedValue as core::clone::Clone&gt;::clone (120 samples, 0.45%)</title><rect x="29.9057%" y="917" width="0.4507%" height="15" fill="rgb(239,226,21)" fg:x="7963" fg:w="120"/><text x="30.1557%" y="927.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="30.3414%" y="901" width="0.0150%" height="15" fill="rgb(244,137,22)" fg:x="8079" fg:w="4"/><text x="30.5914%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.03%)</title><rect x="30.4428%" y="805" width="0.0263%" height="15" fill="rgb(211,139,35)" fg:x="8106" fg:w="7"/><text x="30.6928%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.03%)</title><rect x="30.4428%" y="789" width="0.0263%" height="15" fill="rgb(214,62,50)" fg:x="8106" fg:w="7"/><text x="30.6928%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (7 samples, 0.03%)</title><rect x="30.4428%" y="773" width="0.0263%" height="15" fill="rgb(212,113,44)" fg:x="8106" fg:w="7"/><text x="30.6928%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.03%)</title><rect x="30.4428%" y="757" width="0.0263%" height="15" fill="rgb(226,150,43)" fg:x="8106" fg:w="7"/><text x="30.6928%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.03%)</title><rect x="30.4428%" y="741" width="0.0263%" height="15" fill="rgb(250,71,37)" fg:x="8106" fg:w="7"/><text x="30.6928%" y="751.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.03%)</title><rect x="30.4428%" y="725" width="0.0263%" height="15" fill="rgb(219,76,19)" fg:x="8106" fg:w="7"/><text x="30.6928%" y="735.50"></text></g><g><title>__rdl_alloc (7 samples, 0.03%)</title><rect x="30.4428%" y="709" width="0.0263%" height="15" fill="rgb(250,39,11)" fg:x="8106" fg:w="7"/><text x="30.6928%" y="719.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.03%)</title><rect x="30.4428%" y="693" width="0.0263%" height="15" fill="rgb(230,64,31)" fg:x="8106" fg:w="7"/><text x="30.6928%" y="703.50"></text></g><g><title>malloc (7 samples, 0.03%)</title><rect x="30.4428%" y="677" width="0.0263%" height="15" fill="rgb(208,222,23)" fg:x="8106" fg:w="7"/><text x="30.6928%" y="687.50"></text></g><g><title>_int_malloc (7 samples, 0.03%)</title><rect x="30.4428%" y="661" width="0.0263%" height="15" fill="rgb(227,125,18)" fg:x="8106" fg:w="7"/><text x="30.6928%" y="671.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (10 samples, 0.04%)</title><rect x="30.4428%" y="917" width="0.0376%" height="15" fill="rgb(234,210,9)" fg:x="8106" fg:w="10"/><text x="30.6928%" y="927.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (10 samples, 0.04%)</title><rect x="30.4428%" y="901" width="0.0376%" height="15" fill="rgb(217,127,24)" fg:x="8106" fg:w="10"/><text x="30.6928%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (10 samples, 0.04%)</title><rect x="30.4428%" y="885" width="0.0376%" height="15" fill="rgb(239,141,48)" fg:x="8106" fg:w="10"/><text x="30.6928%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (10 samples, 0.04%)</title><rect x="30.4428%" y="869" width="0.0376%" height="15" fill="rgb(227,109,8)" fg:x="8106" fg:w="10"/><text x="30.6928%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10 samples, 0.04%)</title><rect x="30.4428%" y="853" width="0.0376%" height="15" fill="rgb(235,184,23)" fg:x="8106" fg:w="10"/><text x="30.6928%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.04%)</title><rect x="30.4428%" y="837" width="0.0376%" height="15" fill="rgb(227,226,48)" fg:x="8106" fg:w="10"/><text x="30.6928%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10 samples, 0.04%)</title><rect x="30.4428%" y="821" width="0.0376%" height="15" fill="rgb(206,150,11)" fg:x="8106" fg:w="10"/><text x="30.6928%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.01%)</title><rect x="30.4691%" y="805" width="0.0113%" height="15" fill="rgb(254,2,33)" fg:x="8113" fg:w="3"/><text x="30.7191%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="30.4691%" y="789" width="0.0113%" height="15" fill="rgb(243,160,20)" fg:x="8113" fg:w="3"/><text x="30.7191%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.06%)</title><rect x="30.4841%" y="789" width="0.0638%" height="15" fill="rgb(218,208,30)" fg:x="8117" fg:w="17"/><text x="30.7341%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.06%)</title><rect x="30.4841%" y="773" width="0.0638%" height="15" fill="rgb(224,120,49)" fg:x="8117" fg:w="17"/><text x="30.7341%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (17 samples, 0.06%)</title><rect x="30.4841%" y="757" width="0.0638%" height="15" fill="rgb(246,12,2)" fg:x="8117" fg:w="17"/><text x="30.7341%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.06%)</title><rect x="30.4841%" y="741" width="0.0638%" height="15" fill="rgb(236,117,3)" fg:x="8117" fg:w="17"/><text x="30.7341%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.06%)</title><rect x="30.4841%" y="725" width="0.0638%" height="15" fill="rgb(216,128,52)" fg:x="8117" fg:w="17"/><text x="30.7341%" y="735.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.06%)</title><rect x="30.4841%" y="709" width="0.0638%" height="15" fill="rgb(246,145,19)" fg:x="8117" fg:w="17"/><text x="30.7341%" y="719.50"></text></g><g><title>__rdl_alloc (17 samples, 0.06%)</title><rect x="30.4841%" y="693" width="0.0638%" height="15" fill="rgb(222,11,46)" fg:x="8117" fg:w="17"/><text x="30.7341%" y="703.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17 samples, 0.06%)</title><rect x="30.4841%" y="677" width="0.0638%" height="15" fill="rgb(245,82,36)" fg:x="8117" fg:w="17"/><text x="30.7341%" y="687.50"></text></g><g><title>malloc (17 samples, 0.06%)</title><rect x="30.4841%" y="661" width="0.0638%" height="15" fill="rgb(250,73,51)" fg:x="8117" fg:w="17"/><text x="30.7341%" y="671.50"></text></g><g><title>_int_malloc (16 samples, 0.06%)</title><rect x="30.4879%" y="645" width="0.0601%" height="15" fill="rgb(221,189,23)" fg:x="8118" fg:w="16"/><text x="30.7379%" y="655.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (19 samples, 0.07%)</title><rect x="30.4803%" y="901" width="0.0714%" height="15" fill="rgb(210,33,7)" fg:x="8116" fg:w="19"/><text x="30.7303%" y="911.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (18 samples, 0.07%)</title><rect x="30.4841%" y="885" width="0.0676%" height="15" fill="rgb(210,107,22)" fg:x="8117" fg:w="18"/><text x="30.7341%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (18 samples, 0.07%)</title><rect x="30.4841%" y="869" width="0.0676%" height="15" fill="rgb(222,116,37)" fg:x="8117" fg:w="18"/><text x="30.7341%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (18 samples, 0.07%)</title><rect x="30.4841%" y="853" width="0.0676%" height="15" fill="rgb(254,17,48)" fg:x="8117" fg:w="18"/><text x="30.7341%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18 samples, 0.07%)</title><rect x="30.4841%" y="837" width="0.0676%" height="15" fill="rgb(224,36,32)" fg:x="8117" fg:w="18"/><text x="30.7341%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.07%)</title><rect x="30.4841%" y="821" width="0.0676%" height="15" fill="rgb(232,90,46)" fg:x="8117" fg:w="18"/><text x="30.7341%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18 samples, 0.07%)</title><rect x="30.4841%" y="805" width="0.0676%" height="15" fill="rgb(241,66,40)" fg:x="8117" fg:w="18"/><text x="30.7341%" y="815.50"></text></g><g><title>&lt;graph_craft::proto::ProtoNodeInput as core::clone::Clone&gt;::clone (53 samples, 0.20%)</title><rect x="30.3564%" y="949" width="0.1990%" height="15" fill="rgb(249,184,29)" fg:x="8083" fg:w="53"/><text x="30.6064%" y="959.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (31 samples, 0.12%)</title><rect x="30.4390%" y="933" width="0.1164%" height="15" fill="rgb(231,181,1)" fg:x="8105" fg:w="31"/><text x="30.6890%" y="943.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (20 samples, 0.08%)</title><rect x="30.4803%" y="917" width="0.0751%" height="15" fill="rgb(224,94,2)" fg:x="8116" fg:w="20"/><text x="30.7303%" y="927.50"></text></g><g><title>__rdl_alloc (43 samples, 0.16%)</title><rect x="30.5855%" y="725" width="0.1615%" height="15" fill="rgb(229,170,15)" fg:x="8144" fg:w="43"/><text x="30.8355%" y="735.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (43 samples, 0.16%)</title><rect x="30.5855%" y="709" width="0.1615%" height="15" fill="rgb(240,127,35)" fg:x="8144" fg:w="43"/><text x="30.8355%" y="719.50"></text></g><g><title>malloc (43 samples, 0.16%)</title><rect x="30.5855%" y="693" width="0.1615%" height="15" fill="rgb(248,196,34)" fg:x="8144" fg:w="43"/><text x="30.8355%" y="703.50"></text></g><g><title>_int_malloc (32 samples, 0.12%)</title><rect x="30.6268%" y="677" width="0.1202%" height="15" fill="rgb(236,137,7)" fg:x="8155" fg:w="32"/><text x="30.8768%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (46 samples, 0.17%)</title><rect x="30.5817%" y="821" width="0.1728%" height="15" fill="rgb(235,127,16)" fg:x="8143" fg:w="46"/><text x="30.8317%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (46 samples, 0.17%)</title><rect x="30.5817%" y="805" width="0.1728%" height="15" fill="rgb(250,192,54)" fg:x="8143" fg:w="46"/><text x="30.8317%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (46 samples, 0.17%)</title><rect x="30.5817%" y="789" width="0.1728%" height="15" fill="rgb(218,98,20)" fg:x="8143" fg:w="46"/><text x="30.8317%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.17%)</title><rect x="30.5855%" y="773" width="0.1690%" height="15" fill="rgb(230,176,47)" fg:x="8144" fg:w="45"/><text x="30.8355%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.17%)</title><rect x="30.5855%" y="757" width="0.1690%" height="15" fill="rgb(244,2,33)" fg:x="8144" fg:w="45"/><text x="30.8355%" y="767.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.17%)</title><rect x="30.5855%" y="741" width="0.1690%" height="15" fill="rgb(231,100,17)" fg:x="8144" fg:w="45"/><text x="30.8355%" y="751.50"></text></g><g><title>&lt;graphene_core::types::ProtoNodeIdentifier as core::clone::Clone&gt;::clone (58 samples, 0.22%)</title><rect x="30.5555%" y="949" width="0.2178%" height="15" fill="rgb(245,23,12)" fg:x="8136" fg:w="58"/><text x="30.8055%" y="959.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (58 samples, 0.22%)</title><rect x="30.5555%" y="933" width="0.2178%" height="15" fill="rgb(249,55,22)" fg:x="8136" fg:w="58"/><text x="30.8055%" y="943.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (51 samples, 0.19%)</title><rect x="30.5817%" y="917" width="0.1915%" height="15" fill="rgb(207,134,9)" fg:x="8143" fg:w="51"/><text x="30.8317%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (51 samples, 0.19%)</title><rect x="30.5817%" y="901" width="0.1915%" height="15" fill="rgb(218,134,0)" fg:x="8143" fg:w="51"/><text x="30.8317%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (51 samples, 0.19%)</title><rect x="30.5817%" y="885" width="0.1915%" height="15" fill="rgb(213,212,33)" fg:x="8143" fg:w="51"/><text x="30.8317%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (51 samples, 0.19%)</title><rect x="30.5817%" y="869" width="0.1915%" height="15" fill="rgb(252,106,18)" fg:x="8143" fg:w="51"/><text x="30.8317%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (51 samples, 0.19%)</title><rect x="30.5817%" y="853" width="0.1915%" height="15" fill="rgb(208,126,42)" fg:x="8143" fg:w="51"/><text x="30.8317%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (51 samples, 0.19%)</title><rect x="30.5817%" y="837" width="0.1915%" height="15" fill="rgb(246,175,29)" fg:x="8143" fg:w="51"/><text x="30.8317%" y="847.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.02%)</title><rect x="30.7545%" y="821" width="0.0188%" height="15" fill="rgb(215,13,50)" fg:x="8189" fg:w="5"/><text x="31.0045%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.02%)</title><rect x="30.7545%" y="805" width="0.0188%" height="15" fill="rgb(216,172,15)" fg:x="8189" fg:w="5"/><text x="31.0045%" y="815.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="30.7545%" y="789" width="0.0188%" height="15" fill="rgb(212,103,13)" fg:x="8189" fg:w="5"/><text x="31.0045%" y="799.50"></text></g><g><title>core::clone::Clone::clone (407 samples, 1.53%)</title><rect x="29.3311%" y="981" width="1.5285%" height="15" fill="rgb(231,171,36)" fg:x="7810" fg:w="407"/><text x="29.5811%" y="991.50"></text></g><g><title>&lt;graph_craft::proto::ProtoNode as core::clone::Clone&gt;::clone (407 samples, 1.53%)</title><rect x="29.3311%" y="965" width="1.5285%" height="15" fill="rgb(250,123,20)" fg:x="7810" fg:w="407"/><text x="29.5811%" y="975.50"></text></g><g><title>__memmove_avx512_unaligned_erms (23 samples, 0.09%)</title><rect x="30.7733%" y="949" width="0.0864%" height="15" fill="rgb(212,53,50)" fg:x="8194" fg:w="23"/><text x="31.0233%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (7,468 samples, 28.05%)</title><rect x="2.9406%" y="1301" width="28.0467%" height="15" fill="rgb(243,54,12)" fg:x="783" fg:w="7468"/><text x="3.1906%" y="1311.50">core::iter::traits::iterator::Iterator::colle..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (7,322 samples, 27.50%)</title><rect x="3.4889%" y="1285" width="27.4984%" height="15" fill="rgb(234,101,34)" fg:x="929" fg:w="7322"/><text x="3.7389%" y="1295.50">&lt;core::result::Result&lt;V,E&gt; as core::iter::tr..</text></g><g><title>core::iter::adapters::try_process (7,322 samples, 27.50%)</title><rect x="3.4889%" y="1269" width="27.4984%" height="15" fill="rgb(254,67,22)" fg:x="929" fg:w="7322"/><text x="3.7389%" y="1279.50">core::iter::adapters::try_process</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (7,322 samples, 27.50%)</title><rect x="3.4889%" y="1253" width="27.4984%" height="15" fill="rgb(250,35,47)" fg:x="929" fg:w="7322"/><text x="3.7389%" y="1263.50">&lt;core::result::Result&lt;V,E&gt; as core::iter::tr..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (7,322 samples, 27.50%)</title><rect x="3.4889%" y="1237" width="27.4984%" height="15" fill="rgb(226,126,38)" fg:x="929" fg:w="7322"/><text x="3.7389%" y="1247.50">core::iter::traits::iterator::Iterator::coll..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (7,322 samples, 27.50%)</title><rect x="3.4889%" y="1221" width="27.4984%" height="15" fill="rgb(216,138,53)" fg:x="929" fg:w="7322"/><text x="3.7389%" y="1231.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::c..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (7,322 samples, 27.50%)</title><rect x="3.4889%" y="1205" width="27.4984%" height="15" fill="rgb(246,199,43)" fg:x="929" fg:w="7322"/><text x="3.7389%" y="1215.50">alloc::vec::in_place_collect::&lt;impl alloc::v..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (7,322 samples, 27.50%)</title><rect x="3.4889%" y="1189" width="27.4984%" height="15" fill="rgb(232,125,11)" fg:x="929" fg:w="7322"/><text x="3.7389%" y="1199.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,064 samples, 26.53%)</title><rect x="4.4579%" y="1173" width="26.5295%" height="15" fill="rgb(218,219,45)" fg:x="1187" fg:w="7064"/><text x="4.7079%" y="1183.50">&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; a..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (7,064 samples, 26.53%)</title><rect x="4.4579%" y="1157" width="26.5295%" height="15" fill="rgb(216,102,54)" fg:x="1187" fg:w="7064"/><text x="4.7079%" y="1167.50">core::iter::traits::iterator::Iterator::tr..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7,064 samples, 26.53%)</title><rect x="4.4579%" y="1141" width="26.5295%" height="15" fill="rgb(250,228,7)" fg:x="1187" fg:w="7064"/><text x="4.7079%" y="1151.50">&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7,064 samples, 26.53%)</title><rect x="4.4579%" y="1125" width="26.5295%" height="15" fill="rgb(226,125,25)" fg:x="1187" fg:w="7064"/><text x="4.7079%" y="1135.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as co..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7,064 samples, 26.53%)</title><rect x="4.4579%" y="1109" width="26.5295%" height="15" fill="rgb(224,165,27)" fg:x="1187" fg:w="7064"/><text x="4.7079%" y="1119.50">&lt;core::iter::adapters::filter_map::FilterM..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7,064 samples, 26.53%)</title><rect x="4.4579%" y="1093" width="26.5295%" height="15" fill="rgb(233,86,3)" fg:x="1187" fg:w="7064"/><text x="4.7079%" y="1103.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as c..</text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (7,064 samples, 26.53%)</title><rect x="4.4579%" y="1077" width="26.5295%" height="15" fill="rgb(228,116,20)" fg:x="1187" fg:w="7064"/><text x="4.7079%" y="1087.50">core::iter::adapters::filter_map::filter_m..</text></g><g><title>graph_craft::document::NodeNetwork::into_proto_networks::_{{closure}} (492 samples, 1.85%)</title><rect x="29.1396%" y="1061" width="1.8477%" height="15" fill="rgb(209,192,17)" fg:x="7759" fg:w="492"/><text x="29.3896%" y="1071.50">g..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (492 samples, 1.85%)</title><rect x="29.1396%" y="1045" width="1.8477%" height="15" fill="rgb(224,88,34)" fg:x="7759" fg:w="492"/><text x="29.3896%" y="1055.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (492 samples, 1.85%)</title><rect x="29.1396%" y="1029" width="1.8477%" height="15" fill="rgb(233,38,6)" fg:x="7759" fg:w="492"/><text x="29.3896%" y="1039.50">a..</text></g><g><title>alloc::slice::hack::to_vec (492 samples, 1.85%)</title><rect x="29.1396%" y="1013" width="1.8477%" height="15" fill="rgb(212,59,30)" fg:x="7759" fg:w="492"/><text x="29.3896%" y="1023.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (492 samples, 1.85%)</title><rect x="29.1396%" y="997" width="1.8477%" height="15" fill="rgb(213,80,3)" fg:x="7759" fg:w="492"/><text x="29.3896%" y="1007.50">&lt;..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (34 samples, 0.13%)</title><rect x="30.8597%" y="981" width="0.1277%" height="15" fill="rgb(251,178,7)" fg:x="8217" fg:w="34"/><text x="31.1097%" y="991.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="30.9761%" y="965" width="0.0113%" height="15" fill="rgb(213,154,26)" fg:x="8248" fg:w="3"/><text x="31.2261%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.05%)</title><rect x="31.0700%" y="1269" width="0.0488%" height="15" fill="rgb(238,165,49)" fg:x="8273" fg:w="13"/><text x="31.3200%" y="1279.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (12 samples, 0.05%)</title><rect x="31.0737%" y="1253" width="0.0451%" height="15" fill="rgb(248,91,46)" fg:x="8274" fg:w="12"/><text x="31.3237%" y="1263.50"></text></g><g><title>__memmove_avx512_unaligned_erms (12 samples, 0.05%)</title><rect x="31.0737%" y="1237" width="0.0451%" height="15" fill="rgb(244,21,52)" fg:x="8274" fg:w="12"/><text x="31.3237%" y="1247.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="31.3779%" y="1157" width="0.0526%" height="15" fill="rgb(247,122,20)" fg:x="8355" fg:w="14"/><text x="31.6279%" y="1167.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (13 samples, 0.05%)</title><rect x="31.3817%" y="1141" width="0.0488%" height="15" fill="rgb(218,27,9)" fg:x="8356" fg:w="13"/><text x="31.6317%" y="1151.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (13 samples, 0.05%)</title><rect x="31.3817%" y="1125" width="0.0488%" height="15" fill="rgb(246,7,6)" fg:x="8356" fg:w="13"/><text x="31.6317%" y="1135.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (13 samples, 0.05%)</title><rect x="31.3817%" y="1109" width="0.0488%" height="15" fill="rgb(227,135,54)" fg:x="8356" fg:w="13"/><text x="31.6317%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.05%)</title><rect x="31.3817%" y="1093" width="0.0488%" height="15" fill="rgb(247,14,11)" fg:x="8356" fg:w="13"/><text x="31.6317%" y="1103.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.05%)</title><rect x="31.3817%" y="1077" width="0.0488%" height="15" fill="rgb(206,149,34)" fg:x="8356" fg:w="13"/><text x="31.6317%" y="1087.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.05%)</title><rect x="31.3817%" y="1061" width="0.0488%" height="15" fill="rgb(227,228,4)" fg:x="8356" fg:w="13"/><text x="31.6317%" y="1071.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12 samples, 0.05%)</title><rect x="31.3854%" y="1045" width="0.0451%" height="15" fill="rgb(238,218,28)" fg:x="8357" fg:w="12"/><text x="31.6354%" y="1055.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.05%)</title><rect x="31.3854%" y="1029" width="0.0451%" height="15" fill="rgb(252,86,40)" fg:x="8357" fg:w="12"/><text x="31.6354%" y="1039.50"></text></g><g><title>__memmove_avx512_unaligned_erms (12 samples, 0.05%)</title><rect x="31.3854%" y="1013" width="0.0451%" height="15" fill="rgb(251,225,11)" fg:x="8357" fg:w="12"/><text x="31.6354%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="31.4418%" y="1029" width="0.0150%" height="15" fill="rgb(206,46,49)" fg:x="8372" fg:w="4"/><text x="31.6918%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="31.4418%" y="1013" width="0.0150%" height="15" fill="rgb(245,128,24)" fg:x="8372" fg:w="4"/><text x="31.6918%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (4 samples, 0.02%)</title><rect x="31.4418%" y="997" width="0.0150%" height="15" fill="rgb(219,177,34)" fg:x="8372" fg:w="4"/><text x="31.6918%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="31.4455%" y="981" width="0.0113%" height="15" fill="rgb(218,60,48)" fg:x="8373" fg:w="3"/><text x="31.6955%" y="991.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="31.4455%" y="965" width="0.0113%" height="15" fill="rgb(221,11,5)" fg:x="8373" fg:w="3"/><text x="31.6955%" y="975.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="31.4455%" y="949" width="0.0113%" height="15" fill="rgb(220,148,13)" fg:x="8373" fg:w="3"/><text x="31.6955%" y="959.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (28 samples, 0.11%)</title><rect x="31.4380%" y="1141" width="0.1052%" height="15" fill="rgb(210,16,3)" fg:x="8371" fg:w="28"/><text x="31.6880%" y="1151.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (27 samples, 0.10%)</title><rect x="31.4418%" y="1125" width="0.1014%" height="15" fill="rgb(236,80,2)" fg:x="8372" fg:w="27"/><text x="31.6918%" y="1135.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (27 samples, 0.10%)</title><rect x="31.4418%" y="1109" width="0.1014%" height="15" fill="rgb(239,129,19)" fg:x="8372" fg:w="27"/><text x="31.6918%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 0.10%)</title><rect x="31.4418%" y="1093" width="0.1014%" height="15" fill="rgb(220,106,35)" fg:x="8372" fg:w="27"/><text x="31.6918%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (27 samples, 0.10%)</title><rect x="31.4418%" y="1077" width="0.1014%" height="15" fill="rgb(252,139,45)" fg:x="8372" fg:w="27"/><text x="31.6918%" y="1087.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.10%)</title><rect x="31.4418%" y="1061" width="0.1014%" height="15" fill="rgb(229,8,36)" fg:x="8372" fg:w="27"/><text x="31.6918%" y="1071.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (27 samples, 0.10%)</title><rect x="31.4418%" y="1045" width="0.1014%" height="15" fill="rgb(230,126,33)" fg:x="8372" fg:w="27"/><text x="31.6918%" y="1055.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (23 samples, 0.09%)</title><rect x="31.4568%" y="1029" width="0.0864%" height="15" fill="rgb(239,140,21)" fg:x="8376" fg:w="23"/><text x="31.7068%" y="1039.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.09%)</title><rect x="31.4568%" y="1013" width="0.0864%" height="15" fill="rgb(254,104,9)" fg:x="8376" fg:w="23"/><text x="31.7068%" y="1023.50"></text></g><g><title>__memmove_avx512_unaligned_erms (23 samples, 0.09%)</title><rect x="31.4568%" y="997" width="0.0864%" height="15" fill="rgb(239,52,14)" fg:x="8376" fg:w="23"/><text x="31.7068%" y="1007.50"></text></g><g><title>&lt;graph_craft::document::NodeInput as core::clone::Clone&gt;::clone (102 samples, 0.38%)</title><rect x="31.1639%" y="1189" width="0.3831%" height="15" fill="rgb(208,227,44)" fg:x="8298" fg:w="102"/><text x="31.4139%" y="1199.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (52 samples, 0.20%)</title><rect x="31.3516%" y="1173" width="0.1953%" height="15" fill="rgb(246,18,19)" fg:x="8348" fg:w="52"/><text x="31.6016%" y="1183.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (29 samples, 0.11%)</title><rect x="31.4380%" y="1157" width="0.1089%" height="15" fill="rgb(235,228,25)" fg:x="8371" fg:w="29"/><text x="31.6880%" y="1167.50"></text></g><g><title>malloc_consolidate (23 samples, 0.09%)</title><rect x="31.7234%" y="1029" width="0.0864%" height="15" fill="rgb(240,156,20)" fg:x="8447" fg:w="23"/><text x="31.9734%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (75 samples, 0.28%)</title><rect x="31.5469%" y="1189" width="0.2817%" height="15" fill="rgb(224,8,20)" fg:x="8400" fg:w="75"/><text x="31.7969%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (75 samples, 0.28%)</title><rect x="31.5469%" y="1173" width="0.2817%" height="15" fill="rgb(214,12,52)" fg:x="8400" fg:w="75"/><text x="31.7969%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (75 samples, 0.28%)</title><rect x="31.5469%" y="1157" width="0.2817%" height="15" fill="rgb(211,220,47)" fg:x="8400" fg:w="75"/><text x="31.7969%" y="1167.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (75 samples, 0.28%)</title><rect x="31.5469%" y="1141" width="0.2817%" height="15" fill="rgb(250,173,5)" fg:x="8400" fg:w="75"/><text x="31.7969%" y="1151.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (75 samples, 0.28%)</title><rect x="31.5469%" y="1125" width="0.2817%" height="15" fill="rgb(250,125,52)" fg:x="8400" fg:w="75"/><text x="31.7969%" y="1135.50"></text></g><g><title>alloc::alloc::alloc (75 samples, 0.28%)</title><rect x="31.5469%" y="1109" width="0.2817%" height="15" fill="rgb(209,133,18)" fg:x="8400" fg:w="75"/><text x="31.7969%" y="1119.50"></text></g><g><title>__rdl_alloc (75 samples, 0.28%)</title><rect x="31.5469%" y="1093" width="0.2817%" height="15" fill="rgb(216,173,22)" fg:x="8400" fg:w="75"/><text x="31.7969%" y="1103.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (75 samples, 0.28%)</title><rect x="31.5469%" y="1077" width="0.2817%" height="15" fill="rgb(205,3,22)" fg:x="8400" fg:w="75"/><text x="31.7969%" y="1087.50"></text></g><g><title>malloc (75 samples, 0.28%)</title><rect x="31.5469%" y="1061" width="0.2817%" height="15" fill="rgb(248,22,20)" fg:x="8400" fg:w="75"/><text x="31.7969%" y="1071.50"></text></g><g><title>_int_malloc (75 samples, 0.28%)</title><rect x="31.5469%" y="1045" width="0.2817%" height="15" fill="rgb(233,6,29)" fg:x="8400" fg:w="75"/><text x="31.7969%" y="1055.50"></text></g><g><title>unlink_chunk.isra.0 (5 samples, 0.02%)</title><rect x="31.8098%" y="1029" width="0.0188%" height="15" fill="rgb(240,22,54)" fg:x="8470" fg:w="5"/><text x="32.0598%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (271 samples, 1.02%)</title><rect x="31.1488%" y="1253" width="1.0178%" height="15" fill="rgb(231,133,32)" fg:x="8294" fg:w="271"/><text x="31.3988%" y="1263.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (271 samples, 1.02%)</title><rect x="31.1488%" y="1237" width="1.0178%" height="15" fill="rgb(248,193,4)" fg:x="8294" fg:w="271"/><text x="31.3988%" y="1247.50"></text></g><g><title>alloc::slice::hack::to_vec (271 samples, 1.02%)</title><rect x="31.1488%" y="1221" width="1.0178%" height="15" fill="rgb(211,178,46)" fg:x="8294" fg:w="271"/><text x="31.3988%" y="1231.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (271 samples, 1.02%)</title><rect x="31.1488%" y="1205" width="1.0178%" height="15" fill="rgb(224,5,42)" fg:x="8294" fg:w="271"/><text x="31.3988%" y="1215.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (90 samples, 0.34%)</title><rect x="31.8286%" y="1189" width="0.3380%" height="15" fill="rgb(239,176,25)" fg:x="8475" fg:w="90"/><text x="32.0786%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (29 samples, 0.11%)</title><rect x="32.0577%" y="1173" width="0.1089%" height="15" fill="rgb(245,187,50)" fg:x="8536" fg:w="29"/><text x="32.3077%" y="1183.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="32.2267%" y="1221" width="0.0150%" height="15" fill="rgb(248,24,15)" fg:x="8581" fg:w="4"/><text x="32.4767%" y="1231.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (3 samples, 0.01%)</title><rect x="32.2304%" y="1205" width="0.0113%" height="15" fill="rgb(205,166,13)" fg:x="8582" fg:w="3"/><text x="32.4804%" y="1215.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (3 samples, 0.01%)</title><rect x="32.2304%" y="1189" width="0.0113%" height="15" fill="rgb(208,114,23)" fg:x="8582" fg:w="3"/><text x="32.4804%" y="1199.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.01%)</title><rect x="32.2304%" y="1173" width="0.0113%" height="15" fill="rgb(239,127,18)" fg:x="8582" fg:w="3"/><text x="32.4804%" y="1183.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.01%)</title><rect x="32.2304%" y="1157" width="0.0113%" height="15" fill="rgb(219,154,28)" fg:x="8582" fg:w="3"/><text x="32.4804%" y="1167.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.01%)</title><rect x="32.2304%" y="1141" width="0.0113%" height="15" fill="rgb(225,157,23)" fg:x="8582" fg:w="3"/><text x="32.4804%" y="1151.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="32.2304%" y="1125" width="0.0113%" height="15" fill="rgb(219,8,6)" fg:x="8582" fg:w="3"/><text x="32.4804%" y="1135.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.01%)</title><rect x="32.2304%" y="1109" width="0.0113%" height="15" fill="rgb(212,47,6)" fg:x="8582" fg:w="3"/><text x="32.4804%" y="1119.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="32.2304%" y="1093" width="0.0113%" height="15" fill="rgb(224,190,4)" fg:x="8582" fg:w="3"/><text x="32.4804%" y="1103.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="32.2304%" y="1077" width="0.0113%" height="15" fill="rgb(239,183,29)" fg:x="8582" fg:w="3"/><text x="32.4804%" y="1087.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (24 samples, 0.09%)</title><rect x="32.1666%" y="1253" width="0.0901%" height="15" fill="rgb(213,57,7)" fg:x="8565" fg:w="24"/><text x="32.4166%" y="1263.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="32.2229%" y="1237" width="0.0338%" height="15" fill="rgb(216,148,1)" fg:x="8580" fg:w="9"/><text x="32.4729%" y="1247.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="32.2417%" y="1221" width="0.0150%" height="15" fill="rgb(236,182,29)" fg:x="8585" fg:w="4"/><text x="32.4917%" y="1231.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="32.2417%" y="1205" width="0.0150%" height="15" fill="rgb(244,120,48)" fg:x="8585" fg:w="4"/><text x="32.4917%" y="1215.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4 samples, 0.02%)</title><rect x="32.2417%" y="1189" width="0.0150%" height="15" fill="rgb(206,71,34)" fg:x="8585" fg:w="4"/><text x="32.4917%" y="1199.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4 samples, 0.02%)</title><rect x="32.2417%" y="1173" width="0.0150%" height="15" fill="rgb(242,32,6)" fg:x="8585" fg:w="4"/><text x="32.4917%" y="1183.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.02%)</title><rect x="32.2417%" y="1157" width="0.0150%" height="15" fill="rgb(241,35,3)" fg:x="8585" fg:w="4"/><text x="32.4917%" y="1167.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.02%)</title><rect x="32.2417%" y="1141" width="0.0150%" height="15" fill="rgb(222,62,19)" fg:x="8585" fg:w="4"/><text x="32.4917%" y="1151.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.02%)</title><rect x="32.2417%" y="1125" width="0.0150%" height="15" fill="rgb(223,110,41)" fg:x="8585" fg:w="4"/><text x="32.4917%" y="1135.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.02%)</title><rect x="32.2417%" y="1109" width="0.0150%" height="15" fill="rgb(208,224,4)" fg:x="8585" fg:w="4"/><text x="32.4917%" y="1119.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.01%)</title><rect x="32.2455%" y="1093" width="0.0113%" height="15" fill="rgb(241,137,19)" fg:x="8586" fg:w="3"/><text x="32.4955%" y="1103.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="32.2455%" y="1077" width="0.0113%" height="15" fill="rgb(244,24,17)" fg:x="8586" fg:w="3"/><text x="32.4955%" y="1087.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="32.2455%" y="1061" width="0.0113%" height="15" fill="rgb(245,178,49)" fg:x="8586" fg:w="3"/><text x="32.4955%" y="1071.50"></text></g><g><title>__rdl_alloc (41 samples, 0.15%)</title><rect x="32.2830%" y="1013" width="0.1540%" height="15" fill="rgb(219,160,38)" fg:x="8596" fg:w="41"/><text x="32.5330%" y="1023.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (41 samples, 0.15%)</title><rect x="32.2830%" y="997" width="0.1540%" height="15" fill="rgb(228,137,14)" fg:x="8596" fg:w="41"/><text x="32.5330%" y="1007.50"></text></g><g><title>malloc (40 samples, 0.15%)</title><rect x="32.2868%" y="981" width="0.1502%" height="15" fill="rgb(237,134,11)" fg:x="8597" fg:w="40"/><text x="32.5368%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43 samples, 0.16%)</title><rect x="32.2793%" y="1109" width="0.1615%" height="15" fill="rgb(211,126,44)" fg:x="8595" fg:w="43"/><text x="32.5293%" y="1119.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (43 samples, 0.16%)</title><rect x="32.2793%" y="1093" width="0.1615%" height="15" fill="rgb(226,171,33)" fg:x="8595" fg:w="43"/><text x="32.5293%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (43 samples, 0.16%)</title><rect x="32.2793%" y="1077" width="0.1615%" height="15" fill="rgb(253,99,13)" fg:x="8595" fg:w="43"/><text x="32.5293%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.16%)</title><rect x="32.2830%" y="1061" width="0.1577%" height="15" fill="rgb(244,48,7)" fg:x="8596" fg:w="42"/><text x="32.5330%" y="1071.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.16%)</title><rect x="32.2830%" y="1045" width="0.1577%" height="15" fill="rgb(244,217,54)" fg:x="8596" fg:w="42"/><text x="32.5330%" y="1055.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.16%)</title><rect x="32.2830%" y="1029" width="0.1577%" height="15" fill="rgb(224,15,18)" fg:x="8596" fg:w="42"/><text x="32.5330%" y="1039.50"></text></g><g><title>&lt;graph_craft::document::DocumentNodeImplementation as core::clone::Clone&gt;::clone (60 samples, 0.23%)</title><rect x="32.2567%" y="1253" width="0.2253%" height="15" fill="rgb(244,99,12)" fg:x="8589" fg:w="60"/><text x="32.5067%" y="1263.50"></text></g><g><title>&lt;graphene_core::types::ProtoNodeIdentifier as core::clone::Clone&gt;::clone (54 samples, 0.20%)</title><rect x="32.2793%" y="1237" width="0.2028%" height="15" fill="rgb(233,226,8)" fg:x="8595" fg:w="54"/><text x="32.5293%" y="1247.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (54 samples, 0.20%)</title><rect x="32.2793%" y="1221" width="0.2028%" height="15" fill="rgb(229,211,3)" fg:x="8595" fg:w="54"/><text x="32.5293%" y="1231.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (54 samples, 0.20%)</title><rect x="32.2793%" y="1205" width="0.2028%" height="15" fill="rgb(216,140,21)" fg:x="8595" fg:w="54"/><text x="32.5293%" y="1215.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (54 samples, 0.20%)</title><rect x="32.2793%" y="1189" width="0.2028%" height="15" fill="rgb(234,122,30)" fg:x="8595" fg:w="54"/><text x="32.5293%" y="1199.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (54 samples, 0.20%)</title><rect x="32.2793%" y="1173" width="0.2028%" height="15" fill="rgb(236,25,46)" fg:x="8595" fg:w="54"/><text x="32.5293%" y="1183.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (54 samples, 0.20%)</title><rect x="32.2793%" y="1157" width="0.2028%" height="15" fill="rgb(217,52,54)" fg:x="8595" fg:w="54"/><text x="32.5293%" y="1167.50"></text></g><g><title>alloc::slice::hack::to_vec (54 samples, 0.20%)</title><rect x="32.2793%" y="1141" width="0.2028%" height="15" fill="rgb(222,29,26)" fg:x="8595" fg:w="54"/><text x="32.5293%" y="1151.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (54 samples, 0.20%)</title><rect x="32.2793%" y="1125" width="0.2028%" height="15" fill="rgb(216,177,29)" fg:x="8595" fg:w="54"/><text x="32.5293%" y="1135.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11 samples, 0.04%)</title><rect x="32.4408%" y="1109" width="0.0413%" height="15" fill="rgb(247,136,51)" fg:x="8638" fg:w="11"/><text x="32.6908%" y="1119.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.04%)</title><rect x="32.4408%" y="1093" width="0.0413%" height="15" fill="rgb(231,47,47)" fg:x="8638" fg:w="11"/><text x="32.6908%" y="1103.50"></text></g><g><title>__memmove_avx512_unaligned_erms (9 samples, 0.03%)</title><rect x="32.4483%" y="1077" width="0.0338%" height="15" fill="rgb(211,192,36)" fg:x="8640" fg:w="9"/><text x="32.6983%" y="1087.50"></text></g><g><title>&lt;graph_craft::document::DocumentNode as core::clone::Clone&gt;::clone (378 samples, 1.42%)</title><rect x="31.1188%" y="1269" width="1.4196%" height="15" fill="rgb(229,156,32)" fg:x="8286" fg:w="378"/><text x="31.3688%" y="1279.50"></text></g><g><title>&lt;graph_craft::document::OriginalLocation as core::clone::Clone&gt;::clone (15 samples, 0.06%)</title><rect x="32.4821%" y="1253" width="0.0563%" height="15" fill="rgb(248,213,20)" fg:x="8649" fg:w="15"/><text x="32.7321%" y="1263.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (12 samples, 0.05%)</title><rect x="32.4933%" y="1237" width="0.0451%" height="15" fill="rgb(217,64,7)" fg:x="8652" fg:w="12"/><text x="32.7433%" y="1247.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="32.5234%" y="1221" width="0.0150%" height="15" fill="rgb(232,142,8)" fg:x="8660" fg:w="4"/><text x="32.7734%" y="1231.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="32.5234%" y="1205" width="0.0150%" height="15" fill="rgb(224,92,44)" fg:x="8660" fg:w="4"/><text x="32.7734%" y="1215.50"></text></g><g><title>&lt;graph_craft::document::DocumentNode as core::default::Default&gt;::default (35 samples, 0.13%)</title><rect x="32.5384%" y="1269" width="0.1314%" height="15" fill="rgb(214,169,17)" fg:x="8664" fg:w="35"/><text x="32.7884%" y="1279.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.02%)</title><rect x="32.6698%" y="1269" width="0.0188%" height="15" fill="rgb(210,59,37)" fg:x="8699" fg:w="5"/><text x="32.9198%" y="1279.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.02%)</title><rect x="32.6698%" y="1253" width="0.0188%" height="15" fill="rgb(214,116,48)" fg:x="8699" fg:w="5"/><text x="32.9198%" y="1263.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.02%)</title><rect x="32.6698%" y="1237" width="0.0188%" height="15" fill="rgb(244,191,6)" fg:x="8699" fg:w="5"/><text x="32.9198%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (3 samples, 0.01%)</title><rect x="32.6774%" y="1221" width="0.0113%" height="15" fill="rgb(241,50,52)" fg:x="8701" fg:w="3"/><text x="32.9274%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (3 samples, 0.01%)</title><rect x="32.6774%" y="1205" width="0.0113%" height="15" fill="rgb(236,75,39)" fg:x="8701" fg:w="3"/><text x="32.9274%" y="1215.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.01%)</title><rect x="32.7337%" y="1173" width="0.0113%" height="15" fill="rgb(236,99,0)" fg:x="8716" fg:w="3"/><text x="32.9837%" y="1183.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="32.7337%" y="1189" width="0.0150%" height="15" fill="rgb(207,202,15)" fg:x="8716" fg:w="4"/><text x="32.9837%" y="1199.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.06%)</title><rect x="32.7074%" y="1221" width="0.0563%" height="15" fill="rgb(233,207,14)" fg:x="8709" fg:w="15"/><text x="32.9574%" y="1231.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (8 samples, 0.03%)</title><rect x="32.7337%" y="1205" width="0.0300%" height="15" fill="rgb(226,27,51)" fg:x="8716" fg:w="8"/><text x="32.9837%" y="1215.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (4 samples, 0.02%)</title><rect x="32.7487%" y="1189" width="0.0150%" height="15" fill="rgb(206,104,42)" fg:x="8720" fg:w="4"/><text x="32.9987%" y="1199.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.02%)</title><rect x="32.7487%" y="1173" width="0.0150%" height="15" fill="rgb(212,225,4)" fg:x="8720" fg:w="4"/><text x="32.9987%" y="1183.50"></text></g><g><title>core::num::&lt;impl isize&gt;::unchecked_neg (4 samples, 0.02%)</title><rect x="32.7487%" y="1157" width="0.0150%" height="15" fill="rgb(233,96,42)" fg:x="8720" fg:w="4"/><text x="32.9987%" y="1167.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.15%)</title><rect x="32.6886%" y="1269" width="0.1465%" height="15" fill="rgb(229,21,32)" fg:x="8704" fg:w="39"/><text x="32.9386%" y="1279.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.15%)</title><rect x="32.6886%" y="1253" width="0.1465%" height="15" fill="rgb(226,216,24)" fg:x="8704" fg:w="39"/><text x="32.9386%" y="1263.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.15%)</title><rect x="32.6886%" y="1237" width="0.1465%" height="15" fill="rgb(221,163,17)" fg:x="8704" fg:w="39"/><text x="32.9386%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (19 samples, 0.07%)</title><rect x="32.7637%" y="1221" width="0.0714%" height="15" fill="rgb(216,216,42)" fg:x="8724" fg:w="19"/><text x="33.0137%" y="1231.50"></text></g><g><title>__memmove_avx512_unaligned_erms (375 samples, 1.41%)</title><rect x="32.8351%" y="1269" width="1.4083%" height="15" fill="rgb(240,118,7)" fg:x="8743" fg:w="375"/><text x="33.0851%" y="1279.50"></text></g><g><title>alloc::alloc::exchange_malloc (46 samples, 0.17%)</title><rect x="34.2434%" y="1269" width="0.1728%" height="15" fill="rgb(221,67,37)" fg:x="9118" fg:w="46"/><text x="34.4934%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46 samples, 0.17%)</title><rect x="34.2434%" y="1253" width="0.1728%" height="15" fill="rgb(241,32,44)" fg:x="9118" fg:w="46"/><text x="34.4934%" y="1263.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 0.17%)</title><rect x="34.2434%" y="1237" width="0.1728%" height="15" fill="rgb(235,204,43)" fg:x="9118" fg:w="46"/><text x="34.4934%" y="1247.50"></text></g><g><title>alloc::alloc::alloc (46 samples, 0.17%)</title><rect x="34.2434%" y="1221" width="0.1728%" height="15" fill="rgb(213,116,10)" fg:x="9118" fg:w="46"/><text x="34.4934%" y="1231.50"></text></g><g><title>__rdl_alloc (46 samples, 0.17%)</title><rect x="34.2434%" y="1205" width="0.1728%" height="15" fill="rgb(239,15,48)" fg:x="9118" fg:w="46"/><text x="34.4934%" y="1215.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (46 samples, 0.17%)</title><rect x="34.2434%" y="1189" width="0.1728%" height="15" fill="rgb(207,123,36)" fg:x="9118" fg:w="46"/><text x="34.4934%" y="1199.50"></text></g><g><title>malloc (45 samples, 0.17%)</title><rect x="34.2472%" y="1173" width="0.1690%" height="15" fill="rgb(209,103,30)" fg:x="9119" fg:w="45"/><text x="34.4972%" y="1183.50"></text></g><g><title>_int_malloc (40 samples, 0.15%)</title><rect x="34.2660%" y="1157" width="0.1502%" height="15" fill="rgb(238,100,19)" fg:x="9124" fg:w="40"/><text x="34.5160%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.01%)</title><rect x="34.4425%" y="1205" width="0.0113%" height="15" fill="rgb(244,30,14)" fg:x="9171" fg:w="3"/><text x="34.6925%" y="1215.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="34.4425%" y="1189" width="0.0113%" height="15" fill="rgb(249,174,6)" fg:x="9171" fg:w="3"/><text x="34.6925%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="34.4425%" y="1173" width="0.0113%" height="15" fill="rgb(235,213,41)" fg:x="9171" fg:w="3"/><text x="34.6925%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.01%)</title><rect x="34.4425%" y="1157" width="0.0113%" height="15" fill="rgb(213,118,6)" fg:x="9171" fg:w="3"/><text x="34.6925%" y="1167.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (10 samples, 0.04%)</title><rect x="34.4199%" y="1269" width="0.0376%" height="15" fill="rgb(235,44,51)" fg:x="9165" fg:w="10"/><text x="34.6699%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (10 samples, 0.04%)</title><rect x="34.4199%" y="1253" width="0.0376%" height="15" fill="rgb(217,9,53)" fg:x="9165" fg:w="10"/><text x="34.6699%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.04%)</title><rect x="34.4199%" y="1237" width="0.0376%" height="15" fill="rgb(237,172,34)" fg:x="9165" fg:w="10"/><text x="34.6699%" y="1247.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.03%)</title><rect x="34.4275%" y="1221" width="0.0300%" height="15" fill="rgb(206,206,11)" fg:x="9167" fg:w="8"/><text x="34.6775%" y="1231.50"></text></g><g><title>core::ptr::read (58 samples, 0.22%)</title><rect x="34.4575%" y="1253" width="0.2178%" height="15" fill="rgb(214,149,29)" fg:x="9175" fg:w="58"/><text x="34.7075%" y="1263.50"></text></g><g><title>__memmove_avx512_unaligned_erms (58 samples, 0.22%)</title><rect x="34.4575%" y="1237" width="0.2178%" height="15" fill="rgb(208,123,3)" fg:x="9175" fg:w="58"/><text x="34.7075%" y="1247.50"></text></g><g><title>core::mem::replace (61 samples, 0.23%)</title><rect x="34.4575%" y="1269" width="0.2291%" height="15" fill="rgb(229,126,4)" fg:x="9175" fg:w="61"/><text x="34.7075%" y="1279.50"></text></g><g><title>core::ptr::write (3 samples, 0.01%)</title><rect x="34.6753%" y="1253" width="0.0113%" height="15" fill="rgb(222,92,36)" fg:x="9233" fg:w="3"/><text x="34.9253%" y="1263.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="34.6866%" y="1237" width="0.0113%" height="15" fill="rgb(216,39,41)" fg:x="9236" fg:w="3"/><text x="34.9366%" y="1247.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.01%)</title><rect x="34.6866%" y="1221" width="0.0113%" height="15" fill="rgb(253,127,28)" fg:x="9236" fg:w="3"/><text x="34.9366%" y="1231.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.01%)</title><rect x="34.6866%" y="1205" width="0.0113%" height="15" fill="rgb(249,152,51)" fg:x="9236" fg:w="3"/><text x="34.9366%" y="1215.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="34.6866%" y="1189" width="0.0113%" height="15" fill="rgb(209,123,42)" fg:x="9236" fg:w="3"/><text x="34.9366%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="34.6866%" y="1173" width="0.0113%" height="15" fill="rgb(241,118,22)" fg:x="9236" fg:w="3"/><text x="34.9366%" y="1183.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="34.6866%" y="1157" width="0.0113%" height="15" fill="rgb(208,25,7)" fg:x="9236" fg:w="3"/><text x="34.9366%" y="1167.50"></text></g><g><title>core::ops::function::Fn::call (7 samples, 0.03%)</title><rect x="34.6866%" y="1269" width="0.0263%" height="15" fill="rgb(243,144,39)" fg:x="9236" fg:w="7"/><text x="34.9366%" y="1279.50"></text></g><g><title>graph_craft::document::merge_ids (7 samples, 0.03%)</title><rect x="34.6866%" y="1253" width="0.0263%" height="15" fill="rgb(250,50,5)" fg:x="9236" fg:w="7"/><text x="34.9366%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="34.7129%" y="1253" width="0.0338%" height="15" fill="rgb(207,67,11)" fg:x="9243" fg:w="9"/><text x="34.9629%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;[graph_craft::document::NodeInput]&gt; (9 samples, 0.03%)</title><rect x="34.7129%" y="1237" width="0.0338%" height="15" fill="rgb(245,204,40)" fg:x="9243" fg:w="9"/><text x="34.9629%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::NodeInput&gt; (9 samples, 0.03%)</title><rect x="34.7129%" y="1221" width="0.0338%" height="15" fill="rgb(238,228,24)" fg:x="9243" fg:w="9"/><text x="34.9629%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeInput&gt;&gt; (17 samples, 0.06%)</title><rect x="34.7129%" y="1269" width="0.0638%" height="15" fill="rgb(217,116,22)" fg:x="9243" fg:w="17"/><text x="34.9629%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeInput&gt;&gt; (8 samples, 0.03%)</title><rect x="34.7467%" y="1253" width="0.0300%" height="15" fill="rgb(234,98,12)" fg:x="9252" fg:w="8"/><text x="34.9967%" y="1263.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.03%)</title><rect x="34.7467%" y="1237" width="0.0300%" height="15" fill="rgb(242,170,50)" fg:x="9252" fg:w="8"/><text x="34.9967%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.03%)</title><rect x="34.7467%" y="1221" width="0.0300%" height="15" fill="rgb(235,7,5)" fg:x="9252" fg:w="8"/><text x="34.9967%" y="1231.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.03%)</title><rect x="34.7467%" y="1205" width="0.0300%" height="15" fill="rgb(241,114,28)" fg:x="9252" fg:w="8"/><text x="34.9967%" y="1215.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.03%)</title><rect x="34.7467%" y="1189" width="0.0300%" height="15" fill="rgb(246,112,42)" fg:x="9252" fg:w="8"/><text x="34.9967%" y="1199.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.03%)</title><rect x="34.7467%" y="1173" width="0.0300%" height="15" fill="rgb(248,228,14)" fg:x="9252" fg:w="8"/><text x="34.9967%" y="1183.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 0.03%)</title><rect x="34.7467%" y="1157" width="0.0300%" height="15" fill="rgb(208,133,18)" fg:x="9252" fg:w="8"/><text x="34.9967%" y="1167.50"></text></g><g><title>_int_free_merge_chunk (5 samples, 0.02%)</title><rect x="34.7580%" y="1141" width="0.0188%" height="15" fill="rgb(207,35,49)" fg:x="9255" fg:w="5"/><text x="35.0080%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::enumerate::Enumerate&lt;alloc::vec::into_iter::IntoIter&lt;graph_craft::document::NodeInput&gt;&gt;&gt; (19 samples, 0.07%)</title><rect x="34.7805%" y="1269" width="0.0714%" height="15" fill="rgb(205,68,36)" fg:x="9261" fg:w="19"/><text x="35.0305%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;graph_craft::document::NodeInput&gt;&gt; (19 samples, 0.07%)</title><rect x="34.7805%" y="1253" width="0.0714%" height="15" fill="rgb(245,62,40)" fg:x="9261" fg:w="19"/><text x="35.0305%" y="1263.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.07%)</title><rect x="34.7805%" y="1237" width="0.0714%" height="15" fill="rgb(228,27,24)" fg:x="9261" fg:w="19"/><text x="35.0305%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;graph_craft::document::NodeInput,alloc::alloc::Global&gt;&gt; (18 samples, 0.07%)</title><rect x="34.7842%" y="1221" width="0.0676%" height="15" fill="rgb(253,19,12)" fg:x="9262" fg:w="18"/><text x="35.0342%" y="1231.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.07%)</title><rect x="34.7842%" y="1205" width="0.0676%" height="15" fill="rgb(232,28,20)" fg:x="9262" fg:w="18"/><text x="35.0342%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeInput&gt;&gt; (18 samples, 0.07%)</title><rect x="34.7842%" y="1189" width="0.0676%" height="15" fill="rgb(218,35,51)" fg:x="9262" fg:w="18"/><text x="35.0342%" y="1199.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.07%)</title><rect x="34.7842%" y="1173" width="0.0676%" height="15" fill="rgb(212,90,40)" fg:x="9262" fg:w="18"/><text x="35.0342%" y="1183.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.07%)</title><rect x="34.7842%" y="1157" width="0.0676%" height="15" fill="rgb(220,172,12)" fg:x="9262" fg:w="18"/><text x="35.0342%" y="1167.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.07%)</title><rect x="34.7842%" y="1141" width="0.0676%" height="15" fill="rgb(226,159,20)" fg:x="9262" fg:w="18"/><text x="35.0342%" y="1151.50"></text></g><g><title>__rdl_dealloc (18 samples, 0.07%)</title><rect x="34.7842%" y="1125" width="0.0676%" height="15" fill="rgb(234,205,16)" fg:x="9262" fg:w="18"/><text x="35.0342%" y="1135.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (18 samples, 0.07%)</title><rect x="34.7842%" y="1109" width="0.0676%" height="15" fill="rgb(207,9,39)" fg:x="9262" fg:w="18"/><text x="35.0342%" y="1119.50"></text></g><g><title>cfree@GLIBC_2.2.5 (18 samples, 0.07%)</title><rect x="34.7842%" y="1093" width="0.0676%" height="15" fill="rgb(249,143,15)" fg:x="9262" fg:w="18"/><text x="35.0342%" y="1103.50"></text></g><g><title>_int_free (7 samples, 0.03%)</title><rect x="34.8256%" y="1077" width="0.0263%" height="15" fill="rgb(253,133,29)" fg:x="9273" fg:w="7"/><text x="35.0756%" y="1087.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.03%)</title><rect x="34.8856%" y="1205" width="0.0338%" height="15" fill="rgb(221,187,0)" fg:x="9289" fg:w="9"/><text x="35.1356%" y="1215.50"></text></g><g><title>_int_free (8 samples, 0.03%)</title><rect x="34.8894%" y="1189" width="0.0300%" height="15" fill="rgb(205,204,26)" fg:x="9290" fg:w="8"/><text x="35.1394%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::NodeInput&gt; (3 samples, 0.01%)</title><rect x="34.9194%" y="1205" width="0.0113%" height="15" fill="rgb(224,68,54)" fg:x="9298" fg:w="3"/><text x="35.1694%" y="1215.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.08%)</title><rect x="34.8631%" y="1237" width="0.0789%" height="15" fill="rgb(209,67,4)" fg:x="9283" fg:w="21"/><text x="35.1131%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;[graph_craft::document::NodeInput]&gt; (21 samples, 0.08%)</title><rect x="34.8631%" y="1221" width="0.0789%" height="15" fill="rgb(228,229,18)" fg:x="9283" fg:w="21"/><text x="35.1131%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::Type&gt; (3 samples, 0.01%)</title><rect x="34.9307%" y="1205" width="0.0113%" height="15" fill="rgb(231,89,13)" fg:x="9301" fg:w="3"/><text x="35.1807%" y="1215.50"></text></g><g><title>_int_free (6 samples, 0.02%)</title><rect x="34.9532%" y="1125" width="0.0225%" height="15" fill="rgb(210,182,18)" fg:x="9307" fg:w="6"/><text x="35.2032%" y="1135.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.05%)</title><rect x="34.9420%" y="1205" width="0.0526%" height="15" fill="rgb(240,105,2)" fg:x="9304" fg:w="14"/><text x="35.1920%" y="1215.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.05%)</title><rect x="34.9420%" y="1189" width="0.0526%" height="15" fill="rgb(207,170,50)" fg:x="9304" fg:w="14"/><text x="35.1920%" y="1199.50"></text></g><g><title>__rdl_dealloc (14 samples, 0.05%)</title><rect x="34.9420%" y="1173" width="0.0526%" height="15" fill="rgb(232,133,24)" fg:x="9304" fg:w="14"/><text x="35.1920%" y="1183.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (14 samples, 0.05%)</title><rect x="34.9420%" y="1157" width="0.0526%" height="15" fill="rgb(235,166,27)" fg:x="9304" fg:w="14"/><text x="35.1920%" y="1167.50"></text></g><g><title>cfree@GLIBC_2.2.5 (14 samples, 0.05%)</title><rect x="34.9420%" y="1141" width="0.0526%" height="15" fill="rgb(209,19,13)" fg:x="9304" fg:w="14"/><text x="35.1920%" y="1151.50"></text></g><g><title>_int_free_merge_chunk (5 samples, 0.02%)</title><rect x="34.9758%" y="1125" width="0.0188%" height="15" fill="rgb(226,79,39)" fg:x="9313" fg:w="5"/><text x="35.2258%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeInput&gt;&gt; (37 samples, 0.14%)</title><rect x="34.8631%" y="1253" width="0.1390%" height="15" fill="rgb(222,163,10)" fg:x="9283" fg:w="37"/><text x="35.1131%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeInput&gt;&gt; (16 samples, 0.06%)</title><rect x="34.9420%" y="1237" width="0.0601%" height="15" fill="rgb(214,44,19)" fg:x="9304" fg:w="16"/><text x="35.1920%" y="1247.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.06%)</title><rect x="34.9420%" y="1221" width="0.0601%" height="15" fill="rgb(210,217,13)" fg:x="9304" fg:w="16"/><text x="35.1920%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;graphene_core::types::Type&gt;&gt; (4 samples, 0.02%)</title><rect x="35.0021%" y="1253" width="0.0150%" height="15" fill="rgb(237,61,54)" fg:x="9320" fg:w="4"/><text x="35.2521%" y="1263.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.01%)</title><rect x="35.0058%" y="1237" width="0.0113%" height="15" fill="rgb(226,184,24)" fg:x="9321" fg:w="3"/><text x="35.2558%" y="1247.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="35.0058%" y="1221" width="0.0113%" height="15" fill="rgb(223,226,4)" fg:x="9321" fg:w="3"/><text x="35.2558%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::DocumentNode&gt; (58 samples, 0.22%)</title><rect x="34.8556%" y="1269" width="0.2178%" height="15" fill="rgb(210,26,41)" fg:x="9281" fg:w="58"/><text x="35.1056%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::DocumentNodeImplementation&gt; (15 samples, 0.06%)</title><rect x="35.0171%" y="1253" width="0.0563%" height="15" fill="rgb(220,221,6)" fg:x="9324" fg:w="15"/><text x="35.2671%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::ProtoNodeIdentifier&gt; (13 samples, 0.05%)</title><rect x="35.0246%" y="1237" width="0.0488%" height="15" fill="rgb(225,89,49)" fg:x="9326" fg:w="13"/><text x="35.2746%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (13 samples, 0.05%)</title><rect x="35.0246%" y="1221" width="0.0488%" height="15" fill="rgb(218,70,45)" fg:x="9326" fg:w="13"/><text x="35.2746%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (13 samples, 0.05%)</title><rect x="35.0246%" y="1205" width="0.0488%" height="15" fill="rgb(238,166,21)" fg:x="9326" fg:w="13"/><text x="35.2746%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (13 samples, 0.05%)</title><rect x="35.0246%" y="1189" width="0.0488%" height="15" fill="rgb(224,141,44)" fg:x="9326" fg:w="13"/><text x="35.2746%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (13 samples, 0.05%)</title><rect x="35.0246%" y="1173" width="0.0488%" height="15" fill="rgb(230,12,49)" fg:x="9326" fg:w="13"/><text x="35.2746%" y="1183.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.05%)</title><rect x="35.0246%" y="1157" width="0.0488%" height="15" fill="rgb(212,174,12)" fg:x="9326" fg:w="13"/><text x="35.2746%" y="1167.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.05%)</title><rect x="35.0246%" y="1141" width="0.0488%" height="15" fill="rgb(246,67,9)" fg:x="9326" fg:w="13"/><text x="35.2746%" y="1151.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.05%)</title><rect x="35.0246%" y="1125" width="0.0488%" height="15" fill="rgb(239,35,23)" fg:x="9326" fg:w="13"/><text x="35.2746%" y="1135.50"></text></g><g><title>__rdl_dealloc (13 samples, 0.05%)</title><rect x="35.0246%" y="1109" width="0.0488%" height="15" fill="rgb(211,167,0)" fg:x="9326" fg:w="13"/><text x="35.2746%" y="1119.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (13 samples, 0.05%)</title><rect x="35.0246%" y="1093" width="0.0488%" height="15" fill="rgb(225,119,45)" fg:x="9326" fg:w="13"/><text x="35.2746%" y="1103.50"></text></g><g><title>cfree@GLIBC_2.2.5 (13 samples, 0.05%)</title><rect x="35.0246%" y="1077" width="0.0488%" height="15" fill="rgb(210,162,6)" fg:x="9326" fg:w="13"/><text x="35.2746%" y="1087.50"></text></g><g><title>_int_free (10 samples, 0.04%)</title><rect x="35.0359%" y="1061" width="0.0376%" height="15" fill="rgb(208,118,35)" fg:x="9329" fg:w="10"/><text x="35.2859%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::OriginalLocation&gt; (3 samples, 0.01%)</title><rect x="35.0884%" y="1269" width="0.0113%" height="15" fill="rgb(239,4,53)" fg:x="9343" fg:w="3"/><text x="35.3384%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::IntoIter&lt;graph_craft::document::NodeId,graph_craft::document::DocumentNode&gt;&gt; (3 samples, 0.01%)</title><rect x="35.1035%" y="1269" width="0.0113%" height="15" fill="rgb(213,130,21)" fg:x="9347" fg:w="3"/><text x="35.3535%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;graph_craft::document::NodeId,graph_craft::document::DocumentNode&gt;&gt; (3 samples, 0.01%)</title><rect x="35.1035%" y="1253" width="0.0113%" height="15" fill="rgb(235,148,0)" fg:x="9347" fg:w="3"/><text x="35.3535%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawIntoIter&lt;(graph_craft::document::NodeId,graph_craft::document::DocumentNode)&gt;&gt; (3 samples, 0.01%)</title><rect x="35.1035%" y="1237" width="0.0113%" height="15" fill="rgb(244,224,18)" fg:x="9347" fg:w="3"/><text x="35.3535%" y="1247.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="35.1035%" y="1221" width="0.0113%" height="15" fill="rgb(211,214,4)" fg:x="9347" fg:w="3"/><text x="35.3535%" y="1231.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="35.1035%" y="1205" width="0.0113%" height="15" fill="rgb(206,119,25)" fg:x="9347" fg:w="3"/><text x="35.3535%" y="1215.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="35.1035%" y="1189" width="0.0113%" height="15" fill="rgb(243,93,47)" fg:x="9347" fg:w="3"/><text x="35.3535%" y="1199.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.01%)</title><rect x="35.1035%" y="1173" width="0.0113%" height="15" fill="rgb(224,194,6)" fg:x="9347" fg:w="3"/><text x="35.3535%" y="1183.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.01%)</title><rect x="35.1035%" y="1157" width="0.0113%" height="15" fill="rgb(243,229,6)" fg:x="9347" fg:w="3"/><text x="35.3535%" y="1167.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.01%)</title><rect x="35.1035%" y="1141" width="0.0113%" height="15" fill="rgb(207,23,50)" fg:x="9347" fg:w="3"/><text x="35.3535%" y="1151.50"></text></g><g><title>_int_free_merge_chunk (3 samples, 0.01%)</title><rect x="35.1035%" y="1125" width="0.0113%" height="15" fill="rgb(253,192,32)" fg:x="9347" fg:w="3"/><text x="35.3535%" y="1135.50"></text></g><g><title>_int_free_create_chunk (3 samples, 0.01%)</title><rect x="35.1035%" y="1109" width="0.0113%" height="15" fill="rgb(213,21,6)" fg:x="9347" fg:w="3"/><text x="35.3535%" y="1119.50"></text></g><g><title>__memmove_avx512_unaligned_erms (22 samples, 0.08%)</title><rect x="35.1373%" y="1253" width="0.0826%" height="15" fill="rgb(243,151,13)" fg:x="9356" fg:w="22"/><text x="35.3873%" y="1263.50"></text></g><g><title>cfree@GLIBC_2.2.5 (15 samples, 0.06%)</title><rect x="35.2199%" y="1253" width="0.0563%" height="15" fill="rgb(233,165,41)" fg:x="9378" fg:w="15"/><text x="35.4699%" y="1263.50"></text></g><g><title>_int_free (6 samples, 0.02%)</title><rect x="35.2537%" y="1237" width="0.0225%" height="15" fill="rgb(246,176,45)" fg:x="9387" fg:w="6"/><text x="35.5037%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::Type&gt; (7 samples, 0.03%)</title><rect x="35.2837%" y="1253" width="0.0263%" height="15" fill="rgb(217,170,52)" fg:x="9395" fg:w="7"/><text x="35.5337%" y="1263.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="35.3250%" y="1189" width="0.0263%" height="15" fill="rgb(214,203,54)" fg:x="9406" fg:w="7"/><text x="35.5750%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="35.3250%" y="1173" width="0.0263%" height="15" fill="rgb(248,215,49)" fg:x="9406" fg:w="7"/><text x="35.5750%" y="1183.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="35.3250%" y="1157" width="0.0263%" height="15" fill="rgb(208,46,10)" fg:x="9406" fg:w="7"/><text x="35.5750%" y="1167.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.01%)</title><rect x="35.3513%" y="1189" width="0.0113%" height="15" fill="rgb(254,5,31)" fg:x="9413" fg:w="3"/><text x="35.6013%" y="1199.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (8 samples, 0.03%)</title><rect x="35.3626%" y="1157" width="0.0300%" height="15" fill="rgb(222,104,33)" fg:x="9416" fg:w="8"/><text x="35.6126%" y="1167.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (7 samples, 0.03%)</title><rect x="35.3664%" y="1141" width="0.0263%" height="15" fill="rgb(248,49,16)" fg:x="9417" fg:w="7"/><text x="35.6164%" y="1151.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (7 samples, 0.03%)</title><rect x="35.3664%" y="1125" width="0.0263%" height="15" fill="rgb(232,198,41)" fg:x="9417" fg:w="7"/><text x="35.6164%" y="1135.50"></text></g><g><title>core::hash::Hasher::write_usize (7 samples, 0.03%)</title><rect x="35.3664%" y="1109" width="0.0263%" height="15" fill="rgb(214,125,3)" fg:x="9417" fg:w="7"/><text x="35.6164%" y="1119.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.03%)</title><rect x="35.3664%" y="1093" width="0.0263%" height="15" fill="rgb(229,220,28)" fg:x="9417" fg:w="7"/><text x="35.6164%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.03%)</title><rect x="35.3664%" y="1077" width="0.0263%" height="15" fill="rgb(222,64,37)" fg:x="9417" fg:w="7"/><text x="35.6164%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.03%)</title><rect x="35.3664%" y="1061" width="0.0263%" height="15" fill="rgb(249,184,13)" fg:x="9417" fg:w="7"/><text x="35.6164%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.02%)</title><rect x="35.4077%" y="1077" width="0.0150%" height="15" fill="rgb(252,176,6)" fg:x="9428" fg:w="4"/><text x="35.6577%" y="1087.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="35.4114%" y="1061" width="0.0113%" height="15" fill="rgb(228,153,7)" fg:x="9429" fg:w="3"/><text x="35.6614%" y="1071.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="35.3926%" y="1125" width="0.0338%" height="15" fill="rgb(242,193,5)" fg:x="9424" fg:w="9"/><text x="35.6426%" y="1135.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="35.3926%" y="1109" width="0.0338%" height="15" fill="rgb(232,140,9)" fg:x="9424" fg:w="9"/><text x="35.6426%" y="1119.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="35.3926%" y="1093" width="0.0338%" height="15" fill="rgb(213,222,16)" fg:x="9424" fg:w="9"/><text x="35.6426%" y="1103.50"></text></g><g><title>hashbrown::map::make_hash (32 samples, 0.12%)</title><rect x="35.3138%" y="1221" width="0.1202%" height="15" fill="rgb(222,75,50)" fg:x="9403" fg:w="32"/><text x="35.5638%" y="1231.50"></text></g><g><title>core::hash::BuildHasher::hash_one (32 samples, 0.12%)</title><rect x="35.3138%" y="1205" width="0.1202%" height="15" fill="rgb(205,180,2)" fg:x="9403" fg:w="32"/><text x="35.5638%" y="1215.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (19 samples, 0.07%)</title><rect x="35.3626%" y="1189" width="0.0714%" height="15" fill="rgb(216,34,7)" fg:x="9416" fg:w="19"/><text x="35.6126%" y="1199.50"></text></g><g><title>&lt;graph_craft::document::Source as core::hash::Hash&gt;::hash (19 samples, 0.07%)</title><rect x="35.3626%" y="1173" width="0.0714%" height="15" fill="rgb(253,16,32)" fg:x="9416" fg:w="19"/><text x="35.6126%" y="1183.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (11 samples, 0.04%)</title><rect x="35.3926%" y="1157" width="0.0413%" height="15" fill="rgb(208,97,28)" fg:x="9424" fg:w="11"/><text x="35.6426%" y="1167.50"></text></g><g><title>core::hash::Hasher::write_usize (11 samples, 0.04%)</title><rect x="35.3926%" y="1141" width="0.0413%" height="15" fill="rgb(225,92,11)" fg:x="9424" fg:w="11"/><text x="35.6426%" y="1151.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (25 samples, 0.09%)</title><rect x="35.4490%" y="1093" width="0.0939%" height="15" fill="rgb(243,38,12)" fg:x="9439" fg:w="25"/><text x="35.6990%" y="1103.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.09%)</title><rect x="35.4490%" y="1077" width="0.0939%" height="15" fill="rgb(208,139,16)" fg:x="9439" fg:w="25"/><text x="35.6990%" y="1087.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.09%)</title><rect x="35.4490%" y="1061" width="0.0939%" height="15" fill="rgb(227,24,9)" fg:x="9439" fg:w="25"/><text x="35.6990%" y="1071.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.09%)</title><rect x="35.4490%" y="1045" width="0.0939%" height="15" fill="rgb(206,62,11)" fg:x="9439" fg:w="25"/><text x="35.6990%" y="1055.50"></text></g><g><title>__rdl_alloc (25 samples, 0.09%)</title><rect x="35.4490%" y="1029" width="0.0939%" height="15" fill="rgb(228,134,27)" fg:x="9439" fg:w="25"/><text x="35.6990%" y="1039.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (25 samples, 0.09%)</title><rect x="35.4490%" y="1013" width="0.0939%" height="15" fill="rgb(205,55,33)" fg:x="9439" fg:w="25"/><text x="35.6990%" y="1023.50"></text></g><g><title>malloc (25 samples, 0.09%)</title><rect x="35.4490%" y="997" width="0.0939%" height="15" fill="rgb(243,75,43)" fg:x="9439" fg:w="25"/><text x="35.6990%" y="1007.50"></text></g><g><title>_int_malloc (18 samples, 0.07%)</title><rect x="35.4753%" y="981" width="0.0676%" height="15" fill="rgb(223,27,42)" fg:x="9446" fg:w="18"/><text x="35.7253%" y="991.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (27 samples, 0.10%)</title><rect x="35.4452%" y="1157" width="0.1014%" height="15" fill="rgb(232,189,33)" fg:x="9438" fg:w="27"/><text x="35.6952%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (27 samples, 0.10%)</title><rect x="35.4452%" y="1141" width="0.1014%" height="15" fill="rgb(210,9,39)" fg:x="9438" fg:w="27"/><text x="35.6952%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (27 samples, 0.10%)</title><rect x="35.4452%" y="1125" width="0.1014%" height="15" fill="rgb(242,85,26)" fg:x="9438" fg:w="27"/><text x="35.6952%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (26 samples, 0.10%)</title><rect x="35.4490%" y="1109" width="0.0976%" height="15" fill="rgb(248,44,4)" fg:x="9439" fg:w="26"/><text x="35.6990%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (30 samples, 0.11%)</title><rect x="35.4377%" y="1205" width="0.1127%" height="15" fill="rgb(250,96,46)" fg:x="9436" fg:w="30"/><text x="35.6877%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (30 samples, 0.11%)</title><rect x="35.4377%" y="1189" width="0.1127%" height="15" fill="rgb(229,116,26)" fg:x="9436" fg:w="30"/><text x="35.6877%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (28 samples, 0.11%)</title><rect x="35.4452%" y="1173" width="0.1052%" height="15" fill="rgb(246,94,34)" fg:x="9438" fg:w="28"/><text x="35.6952%" y="1183.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="35.5541%" y="1189" width="0.0300%" height="15" fill="rgb(251,73,21)" fg:x="9467" fg:w="8"/><text x="35.8041%" y="1199.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 0.03%)</title><rect x="35.5541%" y="1173" width="0.0300%" height="15" fill="rgb(254,121,25)" fg:x="9467" fg:w="8"/><text x="35.8041%" y="1183.50"></text></g><g><title>graph_craft::document::DocumentNode::populate_first_network_input (142 samples, 0.53%)</title><rect x="35.1147%" y="1269" width="0.5333%" height="15" fill="rgb(215,161,49)" fg:x="9350" fg:w="142"/><text x="35.3647%" y="1279.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (90 samples, 0.34%)</title><rect x="35.3100%" y="1253" width="0.3380%" height="15" fill="rgb(221,43,13)" fg:x="9402" fg:w="90"/><text x="35.5600%" y="1263.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (90 samples, 0.34%)</title><rect x="35.3100%" y="1237" width="0.3380%" height="15" fill="rgb(249,5,37)" fg:x="9402" fg:w="90"/><text x="35.5600%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (57 samples, 0.21%)</title><rect x="35.4340%" y="1221" width="0.2141%" height="15" fill="rgb(226,25,44)" fg:x="9435" fg:w="57"/><text x="35.6840%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (26 samples, 0.10%)</title><rect x="35.5504%" y="1205" width="0.0976%" height="15" fill="rgb(238,189,16)" fg:x="9466" fg:w="26"/><text x="35.8004%" y="1215.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (14 samples, 0.05%)</title><rect x="35.5954%" y="1189" width="0.0526%" height="15" fill="rgb(251,186,8)" fg:x="9478" fg:w="14"/><text x="35.8454%" y="1199.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.05%)</title><rect x="35.5954%" y="1173" width="0.0526%" height="15" fill="rgb(254,34,31)" fg:x="9478" fg:w="14"/><text x="35.8454%" y="1183.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.02%)</title><rect x="35.6518%" y="1237" width="0.0188%" height="15" fill="rgb(225,215,27)" fg:x="9493" fg:w="5"/><text x="35.9018%" y="1247.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5 samples, 0.02%)</title><rect x="35.6518%" y="1221" width="0.0188%" height="15" fill="rgb(221,192,48)" fg:x="9493" fg:w="5"/><text x="35.9018%" y="1231.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha20Rng as rand_core::RngCore&gt;::next_u64 (5 samples, 0.02%)</title><rect x="35.6518%" y="1205" width="0.0188%" height="15" fill="rgb(219,137,20)" fg:x="9493" fg:w="5"/><text x="35.9018%" y="1215.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (5 samples, 0.02%)</title><rect x="35.6518%" y="1189" width="0.0188%" height="15" fill="rgb(219,84,11)" fg:x="9493" fg:w="5"/><text x="35.9018%" y="1199.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (5 samples, 0.02%)</title><rect x="35.6518%" y="1173" width="0.0188%" height="15" fill="rgb(224,10,23)" fg:x="9493" fg:w="5"/><text x="35.9018%" y="1183.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha20Core as rand_core::block::BlockRngCore&gt;::generate (5 samples, 0.02%)</title><rect x="35.6518%" y="1157" width="0.0188%" height="15" fill="rgb(248,22,39)" fg:x="9493" fg:w="5"/><text x="35.9018%" y="1167.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (5 samples, 0.02%)</title><rect x="35.6518%" y="1141" width="0.0188%" height="15" fill="rgb(212,154,20)" fg:x="9493" fg:w="5"/><text x="35.9018%" y="1151.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (5 samples, 0.02%)</title><rect x="35.6518%" y="1125" width="0.0188%" height="15" fill="rgb(236,199,50)" fg:x="9493" fg:w="5"/><text x="35.9018%" y="1135.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (5 samples, 0.02%)</title><rect x="35.6518%" y="1109" width="0.0188%" height="15" fill="rgb(211,9,17)" fg:x="9493" fg:w="5"/><text x="35.9018%" y="1119.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (5 samples, 0.02%)</title><rect x="35.6518%" y="1093" width="0.0188%" height="15" fill="rgb(243,216,36)" fg:x="9493" fg:w="5"/><text x="35.9018%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;core::option::Option&lt;rand_chacha::chacha::ChaCha20Rng&gt;&gt;&gt; (16 samples, 0.06%)</title><rect x="35.6706%" y="1237" width="0.0601%" height="15" fill="rgb(250,2,10)" fg:x="9498" fg:w="16"/><text x="35.9206%" y="1247.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.06%)</title><rect x="35.6706%" y="1221" width="0.0601%" height="15" fill="rgb(226,50,48)" fg:x="9498" fg:w="16"/><text x="35.9206%" y="1231.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (16 samples, 0.06%)</title><rect x="35.6706%" y="1205" width="0.0601%" height="15" fill="rgb(243,81,16)" fg:x="9498" fg:w="16"/><text x="35.9206%" y="1215.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (4 samples, 0.02%)</title><rect x="35.7306%" y="1221" width="0.0150%" height="15" fill="rgb(250,14,2)" fg:x="9514" fg:w="4"/><text x="35.9806%" y="1231.50"></text></g><g><title>std::sync::poison::Flag::guard (4 samples, 0.02%)</title><rect x="35.7306%" y="1205" width="0.0150%" height="15" fill="rgb(233,135,29)" fg:x="9514" fg:w="4"/><text x="35.9806%" y="1215.50"></text></g><g><title>std::thread::panicking (4 samples, 0.02%)</title><rect x="35.7306%" y="1189" width="0.0150%" height="15" fill="rgb(224,64,43)" fg:x="9514" fg:w="4"/><text x="35.9806%" y="1199.50"></text></g><g><title>std::panicking::panicking (4 samples, 0.02%)</title><rect x="35.7306%" y="1173" width="0.0150%" height="15" fill="rgb(238,84,13)" fg:x="9514" fg:w="4"/><text x="35.9806%" y="1183.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (4 samples, 0.02%)</title><rect x="35.7306%" y="1157" width="0.0150%" height="15" fill="rgb(253,48,26)" fg:x="9514" fg:w="4"/><text x="35.9806%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.01%)</title><rect x="35.7344%" y="1141" width="0.0113%" height="15" fill="rgb(205,223,31)" fg:x="9515" fg:w="3"/><text x="35.9844%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.01%)</title><rect x="35.7344%" y="1125" width="0.0113%" height="15" fill="rgb(221,41,32)" fg:x="9515" fg:w="3"/><text x="35.9844%" y="1135.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten::_{{closure}} (47 samples, 0.18%)</title><rect x="35.6480%" y="1269" width="0.1765%" height="15" fill="rgb(213,158,31)" fg:x="9492" fg:w="47"/><text x="35.8980%" y="1279.50"></text></g><g><title>graphene_core::uuid::uuid_generation::generate_uuid (47 samples, 0.18%)</title><rect x="35.6480%" y="1253" width="0.1765%" height="15" fill="rgb(245,126,43)" fg:x="9492" fg:w="47"/><text x="35.8980%" y="1263.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (25 samples, 0.09%)</title><rect x="35.7306%" y="1237" width="0.0939%" height="15" fill="rgb(227,7,22)" fg:x="9514" fg:w="25"/><text x="35.9806%" y="1247.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (21 samples, 0.08%)</title><rect x="35.7457%" y="1221" width="0.0789%" height="15" fill="rgb(252,90,44)" fg:x="9518" fg:w="21"/><text x="35.9957%" y="1231.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (21 samples, 0.08%)</title><rect x="35.7457%" y="1205" width="0.0789%" height="15" fill="rgb(253,91,0)" fg:x="9518" fg:w="21"/><text x="35.9957%" y="1215.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (21 samples, 0.08%)</title><rect x="35.7457%" y="1189" width="0.0789%" height="15" fill="rgb(252,175,49)" fg:x="9518" fg:w="21"/><text x="35.9957%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (399 samples, 1.50%)</title><rect x="35.8471%" y="1253" width="1.4985%" height="15" fill="rgb(246,150,1)" fg:x="9545" fg:w="399"/><text x="36.0971%" y="1263.50"></text></g><g><title>core::ptr::read (62 samples, 0.23%)</title><rect x="37.3456%" y="1237" width="0.2328%" height="15" fill="rgb(241,192,25)" fg:x="9944" fg:w="62"/><text x="37.5956%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (60 samples, 0.23%)</title><rect x="37.3531%" y="1221" width="0.2253%" height="15" fill="rgb(239,187,11)" fg:x="9946" fg:w="60"/><text x="37.6031%" y="1231.50"></text></g><g><title>core::mem::replace (63 samples, 0.24%)</title><rect x="37.3456%" y="1253" width="0.2366%" height="15" fill="rgb(218,202,51)" fg:x="9944" fg:w="63"/><text x="37.5956%" y="1263.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.02%)</title><rect x="37.6084%" y="1109" width="0.0150%" height="15" fill="rgb(225,176,8)" fg:x="10014" fg:w="4"/><text x="37.8584%" y="1119.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="37.5934%" y="1173" width="0.0376%" height="15" fill="rgb(219,122,41)" fg:x="10010" fg:w="10"/><text x="37.8434%" y="1183.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="37.5934%" y="1157" width="0.0376%" height="15" fill="rgb(248,140,20)" fg:x="10010" fg:w="10"/><text x="37.8434%" y="1167.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="37.5934%" y="1141" width="0.0376%" height="15" fill="rgb(245,41,37)" fg:x="10010" fg:w="10"/><text x="37.8434%" y="1151.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.03%)</title><rect x="37.6047%" y="1125" width="0.0263%" height="15" fill="rgb(235,82,39)" fg:x="10013" fg:w="7"/><text x="37.8547%" y="1135.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.05%)</title><rect x="37.5934%" y="1205" width="0.0488%" height="15" fill="rgb(230,108,42)" fg:x="10010" fg:w="13"/><text x="37.8434%" y="1215.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.05%)</title><rect x="37.5934%" y="1189" width="0.0488%" height="15" fill="rgb(215,150,50)" fg:x="10010" fg:w="13"/><text x="37.8434%" y="1199.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 0.02%)</title><rect x="37.6422%" y="1157" width="0.0150%" height="15" fill="rgb(233,212,5)" fg:x="10023" fg:w="4"/><text x="37.8922%" y="1167.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (18 samples, 0.07%)</title><rect x="37.5934%" y="1253" width="0.0676%" height="15" fill="rgb(245,80,22)" fg:x="10010" fg:w="18"/><text x="37.8434%" y="1263.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (18 samples, 0.07%)</title><rect x="37.5934%" y="1237" width="0.0676%" height="15" fill="rgb(238,129,16)" fg:x="10010" fg:w="18"/><text x="37.8434%" y="1247.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (18 samples, 0.07%)</title><rect x="37.5934%" y="1221" width="0.0676%" height="15" fill="rgb(240,19,0)" fg:x="10010" fg:w="18"/><text x="37.8434%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (5 samples, 0.02%)</title><rect x="37.6422%" y="1205" width="0.0188%" height="15" fill="rgb(232,42,35)" fg:x="10023" fg:w="5"/><text x="37.8922%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.02%)</title><rect x="37.6422%" y="1189" width="0.0188%" height="15" fill="rgb(223,130,24)" fg:x="10023" fg:w="5"/><text x="37.8922%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5 samples, 0.02%)</title><rect x="37.6422%" y="1173" width="0.0188%" height="15" fill="rgb(237,16,22)" fg:x="10023" fg:w="5"/><text x="37.8922%" y="1183.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="37.6723%" y="1189" width="0.0376%" height="15" fill="rgb(248,192,20)" fg:x="10031" fg:w="10"/><text x="37.9223%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="37.6723%" y="1173" width="0.0376%" height="15" fill="rgb(233,167,2)" fg:x="10031" fg:w="10"/><text x="37.9223%" y="1183.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="37.6723%" y="1157" width="0.0376%" height="15" fill="rgb(252,71,44)" fg:x="10031" fg:w="10"/><text x="37.9223%" y="1167.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.02%)</title><rect x="37.7098%" y="1189" width="0.0150%" height="15" fill="rgb(238,37,47)" fg:x="10041" fg:w="4"/><text x="37.9598%" y="1199.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.08%)</title><rect x="37.6648%" y="1221" width="0.0751%" height="15" fill="rgb(214,202,54)" fg:x="10029" fg:w="20"/><text x="37.9148%" y="1231.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 0.07%)</title><rect x="37.6685%" y="1205" width="0.0714%" height="15" fill="rgb(254,165,40)" fg:x="10030" fg:w="19"/><text x="37.9185%" y="1215.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.02%)</title><rect x="37.7249%" y="1189" width="0.0150%" height="15" fill="rgb(246,173,38)" fg:x="10045" fg:w="4"/><text x="37.9749%" y="1199.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.02%)</title><rect x="37.7399%" y="1141" width="0.0188%" height="15" fill="rgb(215,3,27)" fg:x="10049" fg:w="5"/><text x="37.9899%" y="1151.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="37.7399%" y="1125" width="0.0188%" height="15" fill="rgb(239,169,51)" fg:x="10049" fg:w="5"/><text x="37.9899%" y="1135.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.02%)</title><rect x="37.7887%" y="1013" width="0.0150%" height="15" fill="rgb(212,5,25)" fg:x="10062" fg:w="4"/><text x="38.0387%" y="1023.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="37.7587%" y="1077" width="0.0526%" height="15" fill="rgb(243,45,17)" fg:x="10054" fg:w="14"/><text x="38.0087%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="37.7587%" y="1061" width="0.0526%" height="15" fill="rgb(242,97,9)" fg:x="10054" fg:w="14"/><text x="38.0087%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="37.7587%" y="1045" width="0.0526%" height="15" fill="rgb(228,71,31)" fg:x="10054" fg:w="14"/><text x="38.0087%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.03%)</title><rect x="37.7850%" y="1029" width="0.0263%" height="15" fill="rgb(252,184,16)" fg:x="10061" fg:w="7"/><text x="38.0350%" y="1039.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="37.8338%" y="949" width="0.0113%" height="15" fill="rgb(236,169,46)" fg:x="10074" fg:w="3"/><text x="38.0838%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (24 samples, 0.09%)</title><rect x="37.7587%" y="1141" width="0.0901%" height="15" fill="rgb(207,17,47)" fg:x="10054" fg:w="24"/><text x="38.0087%" y="1151.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (24 samples, 0.09%)</title><rect x="37.7587%" y="1125" width="0.0901%" height="15" fill="rgb(206,201,28)" fg:x="10054" fg:w="24"/><text x="38.0087%" y="1135.50"></text></g><g><title>hashbrown::map::make_hash (24 samples, 0.09%)</title><rect x="37.7587%" y="1109" width="0.0901%" height="15" fill="rgb(224,184,23)" fg:x="10054" fg:w="24"/><text x="38.0087%" y="1119.50"></text></g><g><title>core::hash::BuildHasher::hash_one (24 samples, 0.09%)</title><rect x="37.7587%" y="1093" width="0.0901%" height="15" fill="rgb(208,139,48)" fg:x="10054" fg:w="24"/><text x="38.0087%" y="1103.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.04%)</title><rect x="37.8112%" y="1077" width="0.0376%" height="15" fill="rgb(208,130,10)" fg:x="10068" fg:w="10"/><text x="38.0612%" y="1087.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (9 samples, 0.03%)</title><rect x="37.8150%" y="1061" width="0.0338%" height="15" fill="rgb(211,213,45)" fg:x="10069" fg:w="9"/><text x="38.0650%" y="1071.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (9 samples, 0.03%)</title><rect x="37.8150%" y="1045" width="0.0338%" height="15" fill="rgb(235,100,30)" fg:x="10069" fg:w="9"/><text x="38.0650%" y="1055.50"></text></g><g><title>core::hash::Hasher::write_u64 (9 samples, 0.03%)</title><rect x="37.8150%" y="1029" width="0.0338%" height="15" fill="rgb(206,144,31)" fg:x="10069" fg:w="9"/><text x="38.0650%" y="1039.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="37.8150%" y="1013" width="0.0338%" height="15" fill="rgb(224,200,26)" fg:x="10069" fg:w="9"/><text x="38.0650%" y="1023.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="37.8150%" y="997" width="0.0338%" height="15" fill="rgb(247,104,53)" fg:x="10069" fg:w="9"/><text x="38.0650%" y="1007.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="37.8150%" y="981" width="0.0338%" height="15" fill="rgb(220,14,17)" fg:x="10069" fg:w="9"/><text x="38.0650%" y="991.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.02%)</title><rect x="37.8338%" y="965" width="0.0150%" height="15" fill="rgb(230,140,40)" fg:x="10074" fg:w="4"/><text x="38.0838%" y="975.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (4 samples, 0.02%)</title><rect x="37.8488%" y="1125" width="0.0150%" height="15" fill="rgb(229,2,41)" fg:x="10078" fg:w="4"/><text x="38.0988%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (34 samples, 0.13%)</title><rect x="37.7399%" y="1205" width="0.1277%" height="15" fill="rgb(232,89,16)" fg:x="10049" fg:w="34"/><text x="37.9899%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (34 samples, 0.13%)</title><rect x="37.7399%" y="1189" width="0.1277%" height="15" fill="rgb(247,59,52)" fg:x="10049" fg:w="34"/><text x="37.9899%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (34 samples, 0.13%)</title><rect x="37.7399%" y="1173" width="0.1277%" height="15" fill="rgb(226,110,21)" fg:x="10049" fg:w="34"/><text x="37.9899%" y="1183.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (34 samples, 0.13%)</title><rect x="37.7399%" y="1157" width="0.1277%" height="15" fill="rgb(224,176,43)" fg:x="10049" fg:w="34"/><text x="37.9899%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (5 samples, 0.02%)</title><rect x="37.8488%" y="1141" width="0.0188%" height="15" fill="rgb(221,73,6)" fg:x="10078" fg:w="5"/><text x="38.0988%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.01%)</title><rect x="37.8788%" y="1189" width="0.0113%" height="15" fill="rgb(232,78,19)" fg:x="10086" fg:w="3"/><text x="38.1288%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3 samples, 0.01%)</title><rect x="37.8788%" y="1173" width="0.0113%" height="15" fill="rgb(233,112,48)" fg:x="10086" fg:w="3"/><text x="38.1288%" y="1183.50"></text></g><g><title>hashbrown::raw::is_full (3 samples, 0.01%)</title><rect x="37.8788%" y="1157" width="0.0113%" height="15" fill="rgb(243,131,47)" fg:x="10086" fg:w="3"/><text x="38.1288%" y="1167.50"></text></g><g><title>hashbrown::raw::h2 (5 samples, 0.02%)</title><rect x="37.8901%" y="1189" width="0.0188%" height="15" fill="rgb(226,51,1)" fg:x="10089" fg:w="5"/><text x="38.1401%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (49 samples, 0.18%)</title><rect x="37.7399%" y="1221" width="0.1840%" height="15" fill="rgb(247,58,7)" fg:x="10049" fg:w="49"/><text x="37.9899%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (15 samples, 0.06%)</title><rect x="37.8676%" y="1205" width="0.0563%" height="15" fill="rgb(209,7,32)" fg:x="10083" fg:w="15"/><text x="38.1176%" y="1215.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (83 samples, 0.31%)</title><rect x="37.6610%" y="1253" width="0.3117%" height="15" fill="rgb(209,39,41)" fg:x="10028" fg:w="83"/><text x="37.9110%" y="1263.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (83 samples, 0.31%)</title><rect x="37.6610%" y="1237" width="0.3117%" height="15" fill="rgb(226,182,46)" fg:x="10028" fg:w="83"/><text x="37.9110%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (13 samples, 0.05%)</title><rect x="37.9239%" y="1221" width="0.0488%" height="15" fill="rgb(230,219,10)" fg:x="10098" fg:w="13"/><text x="38.1739%" y="1231.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (13 samples, 0.05%)</title><rect x="37.9239%" y="1205" width="0.0488%" height="15" fill="rgb(227,175,30)" fg:x="10098" fg:w="13"/><text x="38.1739%" y="1215.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (13 samples, 0.05%)</title><rect x="37.9239%" y="1189" width="0.0488%" height="15" fill="rgb(217,2,50)" fg:x="10098" fg:w="13"/><text x="38.1739%" y="1199.50"></text></g><g><title>core::ptr::write (13 samples, 0.05%)</title><rect x="37.9239%" y="1173" width="0.0488%" height="15" fill="rgb(229,160,0)" fg:x="10098" fg:w="13"/><text x="38.1739%" y="1183.50"></text></g><g><title>__memmove_avx512_unaligned_erms (12 samples, 0.05%)</title><rect x="37.9277%" y="1157" width="0.0451%" height="15" fill="rgb(207,78,37)" fg:x="10099" fg:w="12"/><text x="38.1777%" y="1167.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="37.9915%" y="1141" width="0.0113%" height="15" fill="rgb(225,57,0)" fg:x="10116" fg:w="3"/><text x="38.2415%" y="1151.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 0.05%)</title><rect x="37.9727%" y="1189" width="0.0451%" height="15" fill="rgb(232,154,2)" fg:x="10111" fg:w="12"/><text x="38.2227%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 0.05%)</title><rect x="37.9727%" y="1173" width="0.0451%" height="15" fill="rgb(241,212,25)" fg:x="10111" fg:w="12"/><text x="38.2227%" y="1183.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 0.05%)</title><rect x="37.9727%" y="1157" width="0.0451%" height="15" fill="rgb(226,69,20)" fg:x="10111" fg:w="12"/><text x="38.2227%" y="1167.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.02%)</title><rect x="38.0028%" y="1141" width="0.0150%" height="15" fill="rgb(247,184,54)" fg:x="10119" fg:w="4"/><text x="38.2528%" y="1151.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="38.0216%" y="1125" width="0.0113%" height="15" fill="rgb(210,145,0)" fg:x="10124" fg:w="3"/><text x="38.2716%" y="1135.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="38.0216%" y="1109" width="0.0113%" height="15" fill="rgb(253,82,12)" fg:x="10124" fg:w="3"/><text x="38.2716%" y="1119.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="38.0216%" y="1093" width="0.0113%" height="15" fill="rgb(245,42,11)" fg:x="10124" fg:w="3"/><text x="38.2716%" y="1103.50"></text></g><g><title>hashbrown::map::make_hash (17 samples, 0.06%)</title><rect x="37.9727%" y="1221" width="0.0638%" height="15" fill="rgb(219,147,32)" fg:x="10111" fg:w="17"/><text x="38.2227%" y="1231.50"></text></g><g><title>core::hash::BuildHasher::hash_one (17 samples, 0.06%)</title><rect x="37.9727%" y="1205" width="0.0638%" height="15" fill="rgb(246,12,7)" fg:x="10111" fg:w="17"/><text x="38.2227%" y="1215.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.02%)</title><rect x="38.0178%" y="1189" width="0.0188%" height="15" fill="rgb(243,50,9)" fg:x="10123" fg:w="5"/><text x="38.2678%" y="1199.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (4 samples, 0.02%)</title><rect x="38.0216%" y="1173" width="0.0150%" height="15" fill="rgb(219,149,6)" fg:x="10124" fg:w="4"/><text x="38.2716%" y="1183.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (4 samples, 0.02%)</title><rect x="38.0216%" y="1157" width="0.0150%" height="15" fill="rgb(241,51,42)" fg:x="10124" fg:w="4"/><text x="38.2716%" y="1167.50"></text></g><g><title>core::hash::Hasher::write_u64 (4 samples, 0.02%)</title><rect x="38.0216%" y="1141" width="0.0150%" height="15" fill="rgb(226,128,27)" fg:x="10124" fg:w="4"/><text x="38.2716%" y="1151.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="38.0666%" y="1173" width="0.0225%" height="15" fill="rgb(244,144,4)" fg:x="10136" fg:w="6"/><text x="38.3166%" y="1183.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.02%)</title><rect x="38.0666%" y="1157" width="0.0225%" height="15" fill="rgb(221,4,13)" fg:x="10136" fg:w="6"/><text x="38.3166%" y="1167.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.02%)</title><rect x="38.1042%" y="1173" width="0.0150%" height="15" fill="rgb(208,170,28)" fg:x="10146" fg:w="4"/><text x="38.3542%" y="1183.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.02%)</title><rect x="38.1042%" y="1157" width="0.0150%" height="15" fill="rgb(226,131,13)" fg:x="10146" fg:w="4"/><text x="38.3542%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (22 samples, 0.08%)</title><rect x="38.0403%" y="1205" width="0.0826%" height="15" fill="rgb(215,72,41)" fg:x="10129" fg:w="22"/><text x="38.2903%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (22 samples, 0.08%)</title><rect x="38.0403%" y="1189" width="0.0826%" height="15" fill="rgb(243,108,20)" fg:x="10129" fg:w="22"/><text x="38.2903%" y="1199.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::read (6 samples, 0.02%)</title><rect x="38.1230%" y="1189" width="0.0225%" height="15" fill="rgb(230,189,17)" fg:x="10151" fg:w="6"/><text x="38.3730%" y="1199.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (6 samples, 0.02%)</title><rect x="38.1230%" y="1173" width="0.0225%" height="15" fill="rgb(220,50,17)" fg:x="10151" fg:w="6"/><text x="38.3730%" y="1183.50"></text></g><g><title>core::ptr::read (6 samples, 0.02%)</title><rect x="38.1230%" y="1157" width="0.0225%" height="15" fill="rgb(248,152,48)" fg:x="10151" fg:w="6"/><text x="38.3730%" y="1167.50"></text></g><g><title>__memmove_avx512_unaligned_erms (6 samples, 0.02%)</title><rect x="38.1230%" y="1141" width="0.0225%" height="15" fill="rgb(244,91,11)" fg:x="10151" fg:w="6"/><text x="38.3730%" y="1151.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten_with_fns (625 samples, 2.35%)</title><rect x="35.8245%" y="1269" width="2.3472%" height="15" fill="rgb(220,157,5)" fg:x="9539" fg:w="625"/><text x="36.0745%" y="1279.50">g..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove_entry (53 samples, 0.20%)</title><rect x="37.9727%" y="1253" width="0.1990%" height="15" fill="rgb(253,137,8)" fg:x="10111" fg:w="53"/><text x="38.2227%" y="1263.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (53 samples, 0.20%)</title><rect x="37.9727%" y="1237" width="0.1990%" height="15" fill="rgb(217,137,51)" fg:x="10111" fg:w="53"/><text x="38.2227%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (36 samples, 0.14%)</title><rect x="38.0366%" y="1221" width="0.1352%" height="15" fill="rgb(218,209,53)" fg:x="10128" fg:w="36"/><text x="38.2866%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (13 samples, 0.05%)</title><rect x="38.1230%" y="1205" width="0.0488%" height="15" fill="rgb(249,137,25)" fg:x="10151" fg:w="13"/><text x="38.3730%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (7 samples, 0.03%)</title><rect x="38.1455%" y="1189" width="0.0263%" height="15" fill="rgb(239,155,26)" fg:x="10157" fg:w="7"/><text x="38.3955%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (7 samples, 0.03%)</title><rect x="38.1455%" y="1173" width="0.0263%" height="15" fill="rgb(227,85,46)" fg:x="10157" fg:w="7"/><text x="38.3955%" y="1183.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="38.1868%" y="1125" width="0.0150%" height="15" fill="rgb(251,107,43)" fg:x="10168" fg:w="4"/><text x="38.4368%" y="1135.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="38.1868%" y="1109" width="0.0150%" height="15" fill="rgb(234,170,33)" fg:x="10168" fg:w="4"/><text x="38.4368%" y="1119.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="38.1868%" y="1093" width="0.0150%" height="15" fill="rgb(206,29,35)" fg:x="10168" fg:w="4"/><text x="38.4368%" y="1103.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::hash::Hash&gt;::hash (5 samples, 0.02%)</title><rect x="38.1868%" y="1173" width="0.0188%" height="15" fill="rgb(227,138,25)" fg:x="10168" fg:w="5"/><text x="38.4368%" y="1183.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (5 samples, 0.02%)</title><rect x="38.1868%" y="1157" width="0.0188%" height="15" fill="rgb(249,131,35)" fg:x="10168" fg:w="5"/><text x="38.4368%" y="1167.50"></text></g><g><title>core::hash::Hasher::write_u64 (5 samples, 0.02%)</title><rect x="38.1868%" y="1141" width="0.0188%" height="15" fill="rgb(239,6,40)" fg:x="10168" fg:w="5"/><text x="38.4368%" y="1151.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="38.2056%" y="1173" width="0.0113%" height="15" fill="rgb(246,136,47)" fg:x="10173" fg:w="3"/><text x="38.4556%" y="1183.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="38.2056%" y="1157" width="0.0113%" height="15" fill="rgb(253,58,26)" fg:x="10173" fg:w="3"/><text x="38.4556%" y="1167.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="38.2056%" y="1141" width="0.0113%" height="15" fill="rgb(237,141,10)" fg:x="10173" fg:w="3"/><text x="38.4556%" y="1151.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (12 samples, 0.05%)</title><rect x="38.1830%" y="1253" width="0.0451%" height="15" fill="rgb(234,156,12)" fg:x="10167" fg:w="12"/><text x="38.4330%" y="1263.50"></text></g><g><title>graph_craft::document::NodeNetwork::map_ids::_{{closure}} (11 samples, 0.04%)</title><rect x="38.1868%" y="1237" width="0.0413%" height="15" fill="rgb(243,224,36)" fg:x="10168" fg:w="11"/><text x="38.4368%" y="1247.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten_with_fns::_{{closure}} (11 samples, 0.04%)</title><rect x="38.1868%" y="1221" width="0.0413%" height="15" fill="rgb(205,229,51)" fg:x="10168" fg:w="11"/><text x="38.4368%" y="1231.50"></text></g><g><title>core::ops::function::Fn::call (11 samples, 0.04%)</title><rect x="38.1868%" y="1205" width="0.0413%" height="15" fill="rgb(223,189,4)" fg:x="10168" fg:w="11"/><text x="38.4368%" y="1215.50"></text></g><g><title>graph_craft::document::merge_ids (11 samples, 0.04%)</title><rect x="38.1868%" y="1189" width="0.0413%" height="15" fill="rgb(249,167,54)" fg:x="10168" fg:w="11"/><text x="38.4368%" y="1199.50"></text></g><g><title>std::hash::random::DefaultHasher::new (3 samples, 0.01%)</title><rect x="38.2168%" y="1173" width="0.0113%" height="15" fill="rgb(218,34,28)" fg:x="10176" fg:w="3"/><text x="38.4668%" y="1183.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (25 samples, 0.09%)</title><rect x="38.2281%" y="1253" width="0.0939%" height="15" fill="rgb(232,109,42)" fg:x="10179" fg:w="25"/><text x="38.4781%" y="1263.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (25 samples, 0.09%)</title><rect x="38.2281%" y="1237" width="0.0939%" height="15" fill="rgb(248,214,46)" fg:x="10179" fg:w="25"/><text x="38.4781%" y="1247.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (25 samples, 0.09%)</title><rect x="38.2281%" y="1221" width="0.0939%" height="15" fill="rgb(244,216,40)" fg:x="10179" fg:w="25"/><text x="38.4781%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_iter_from (25 samples, 0.09%)</title><rect x="38.2281%" y="1205" width="0.0939%" height="15" fill="rgb(231,226,31)" fg:x="10179" fg:w="25"/><text x="38.4781%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_allocation (25 samples, 0.09%)</title><rect x="38.2281%" y="1189" width="0.0939%" height="15" fill="rgb(238,38,43)" fg:x="10179" fg:w="25"/><text x="38.4781%" y="1199.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="38.4459%" y="1093" width="0.0113%" height="15" fill="rgb(208,88,43)" fg:x="10237" fg:w="3"/><text x="38.6959%" y="1103.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.16%)</title><rect x="38.3558%" y="1109" width="0.1577%" height="15" fill="rgb(205,136,37)" fg:x="10213" fg:w="42"/><text x="38.6058%" y="1119.50"></text></g><g><title>__memmove_avx512_unaligned_erms (15 samples, 0.06%)</title><rect x="38.4572%" y="1093" width="0.0563%" height="15" fill="rgb(237,34,14)" fg:x="10240" fg:w="15"/><text x="38.7072%" y="1103.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.02%)</title><rect x="38.5661%" y="949" width="0.0150%" height="15" fill="rgb(236,193,44)" fg:x="10269" fg:w="4"/><text x="38.8161%" y="959.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.03%)</title><rect x="38.5586%" y="965" width="0.0300%" height="15" fill="rgb(231,48,10)" fg:x="10267" fg:w="8"/><text x="38.8086%" y="975.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (17 samples, 0.06%)</title><rect x="38.5323%" y="1013" width="0.0638%" height="15" fill="rgb(213,141,34)" fg:x="10260" fg:w="17"/><text x="38.7823%" y="1023.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (17 samples, 0.06%)</title><rect x="38.5323%" y="997" width="0.0638%" height="15" fill="rgb(249,130,34)" fg:x="10260" fg:w="17"/><text x="38.7823%" y="1007.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (17 samples, 0.06%)</title><rect x="38.5323%" y="981" width="0.0638%" height="15" fill="rgb(219,42,41)" fg:x="10260" fg:w="17"/><text x="38.7823%" y="991.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.01%)</title><rect x="38.5962%" y="1013" width="0.0113%" height="15" fill="rgb(224,100,54)" fg:x="10277" fg:w="3"/><text x="38.8462%" y="1023.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.02%)</title><rect x="38.6976%" y="901" width="0.0225%" height="15" fill="rgb(229,200,27)" fg:x="10304" fg:w="6"/><text x="38.9476%" y="911.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.01%)</title><rect x="38.7088%" y="885" width="0.0113%" height="15" fill="rgb(217,118,10)" fg:x="10307" fg:w="3"/><text x="38.9588%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (25 samples, 0.09%)</title><rect x="38.6300%" y="949" width="0.0939%" height="15" fill="rgb(206,22,3)" fg:x="10286" fg:w="25"/><text x="38.8800%" y="959.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (25 samples, 0.09%)</title><rect x="38.6300%" y="933" width="0.0939%" height="15" fill="rgb(232,163,46)" fg:x="10286" fg:w="25"/><text x="38.8800%" y="943.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (25 samples, 0.09%)</title><rect x="38.6300%" y="917" width="0.0939%" height="15" fill="rgb(206,95,13)" fg:x="10286" fg:w="25"/><text x="38.8800%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (60 samples, 0.23%)</title><rect x="38.5323%" y="1045" width="0.2253%" height="15" fill="rgb(253,154,18)" fg:x="10260" fg:w="60"/><text x="38.7823%" y="1055.50"></text></g><g><title>core::hash::BuildHasher::hash_one (60 samples, 0.23%)</title><rect x="38.5323%" y="1029" width="0.2253%" height="15" fill="rgb(219,32,23)" fg:x="10260" fg:w="60"/><text x="38.7823%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (40 samples, 0.15%)</title><rect x="38.6074%" y="1013" width="0.1502%" height="15" fill="rgb(230,191,45)" fg:x="10280" fg:w="40"/><text x="38.8574%" y="1023.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (34 samples, 0.13%)</title><rect x="38.6300%" y="997" width="0.1277%" height="15" fill="rgb(229,64,36)" fg:x="10286" fg:w="34"/><text x="38.8800%" y="1007.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (34 samples, 0.13%)</title><rect x="38.6300%" y="981" width="0.1277%" height="15" fill="rgb(205,129,25)" fg:x="10286" fg:w="34"/><text x="38.8800%" y="991.50"></text></g><g><title>core::hash::Hasher::write_u64 (34 samples, 0.13%)</title><rect x="38.6300%" y="965" width="0.1277%" height="15" fill="rgb(254,112,7)" fg:x="10286" fg:w="34"/><text x="38.8800%" y="975.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_ne_bytes (9 samples, 0.03%)</title><rect x="38.7239%" y="949" width="0.0338%" height="15" fill="rgb(226,53,48)" fg:x="10311" fg:w="9"/><text x="38.9739%" y="959.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (5 samples, 0.02%)</title><rect x="38.7577%" y="1013" width="0.0188%" height="15" fill="rgb(214,153,38)" fg:x="10320" fg:w="5"/><text x="39.0077%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (5 samples, 0.02%)</title><rect x="38.7577%" y="997" width="0.0188%" height="15" fill="rgb(243,101,7)" fg:x="10320" fg:w="5"/><text x="39.0077%" y="1007.50"></text></g><g><title>hashbrown::raw::is_full (5 samples, 0.02%)</title><rect x="38.7577%" y="981" width="0.0188%" height="15" fill="rgb(240,140,22)" fg:x="10320" fg:w="5"/><text x="39.0077%" y="991.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (7 samples, 0.03%)</title><rect x="38.7577%" y="1045" width="0.0263%" height="15" fill="rgb(235,114,2)" fg:x="10320" fg:w="7"/><text x="39.0077%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (7 samples, 0.03%)</title><rect x="38.7577%" y="1029" width="0.0263%" height="15" fill="rgb(242,59,12)" fg:x="10320" fg:w="7"/><text x="39.0077%" y="1039.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (16 samples, 0.06%)</title><rect x="38.7839%" y="1029" width="0.0601%" height="15" fill="rgb(252,134,9)" fg:x="10327" fg:w="16"/><text x="39.0339%" y="1039.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (16 samples, 0.06%)</title><rect x="38.7839%" y="1013" width="0.0601%" height="15" fill="rgb(236,4,44)" fg:x="10327" fg:w="16"/><text x="39.0339%" y="1023.50"></text></g><g><title>core::ptr::write (16 samples, 0.06%)</title><rect x="38.7839%" y="997" width="0.0601%" height="15" fill="rgb(254,172,41)" fg:x="10327" fg:w="16"/><text x="39.0339%" y="1007.50"></text></g><g><title>__memmove_avx512_unaligned_erms (14 samples, 0.05%)</title><rect x="38.7915%" y="981" width="0.0526%" height="15" fill="rgb(244,63,20)" fg:x="10329" fg:w="14"/><text x="39.0415%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (89 samples, 0.33%)</title><rect x="38.5135%" y="1093" width="0.3342%" height="15" fill="rgb(250,73,31)" fg:x="10255" fg:w="89"/><text x="38.7635%" y="1103.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (89 samples, 0.33%)</title><rect x="38.5135%" y="1077" width="0.3342%" height="15" fill="rgb(241,38,36)" fg:x="10255" fg:w="89"/><text x="38.7635%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (88 samples, 0.33%)</title><rect x="38.5173%" y="1061" width="0.3305%" height="15" fill="rgb(245,211,2)" fg:x="10256" fg:w="88"/><text x="38.7673%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (17 samples, 0.06%)</title><rect x="38.7839%" y="1045" width="0.0638%" height="15" fill="rgb(206,120,28)" fg:x="10327" fg:w="17"/><text x="39.0339%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.03%)</title><rect x="39.1182%" y="885" width="0.0300%" height="15" fill="rgb(211,59,34)" fg:x="10416" fg:w="8"/><text x="39.3682%" y="895.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.02%)</title><rect x="39.1332%" y="869" width="0.0150%" height="15" fill="rgb(233,168,5)" fg:x="10420" fg:w="4"/><text x="39.3832%" y="879.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::hash::Hash&gt;::hash (17 samples, 0.06%)</title><rect x="39.0919%" y="981" width="0.0638%" height="15" fill="rgb(234,33,13)" fg:x="10409" fg:w="17"/><text x="39.3419%" y="991.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (17 samples, 0.06%)</title><rect x="39.0919%" y="965" width="0.0638%" height="15" fill="rgb(231,150,26)" fg:x="10409" fg:w="17"/><text x="39.3419%" y="975.50"></text></g><g><title>core::hash::Hasher::write_u64 (17 samples, 0.06%)</title><rect x="39.0919%" y="949" width="0.0638%" height="15" fill="rgb(217,191,4)" fg:x="10409" fg:w="17"/><text x="39.3419%" y="959.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.06%)</title><rect x="39.0919%" y="933" width="0.0638%" height="15" fill="rgb(246,198,38)" fg:x="10409" fg:w="17"/><text x="39.3419%" y="943.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (17 samples, 0.06%)</title><rect x="39.0919%" y="917" width="0.0638%" height="15" fill="rgb(245,64,37)" fg:x="10409" fg:w="17"/><text x="39.3419%" y="927.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.06%)</title><rect x="39.0919%" y="901" width="0.0638%" height="15" fill="rgb(250,30,36)" fg:x="10409" fg:w="17"/><text x="39.3419%" y="911.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.02%)</title><rect x="39.1783%" y="933" width="0.0188%" height="15" fill="rgb(217,86,53)" fg:x="10432" fg:w="5"/><text x="39.4283%" y="943.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.02%)</title><rect x="39.2158%" y="917" width="0.0188%" height="15" fill="rgb(228,157,16)" fg:x="10442" fg:w="5"/><text x="39.4658%" y="927.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (101 samples, 0.38%)</title><rect x="38.8628%" y="1077" width="0.3793%" height="15" fill="rgb(217,59,31)" fg:x="10348" fg:w="101"/><text x="39.1128%" y="1087.50"></text></g><g><title>graph_craft::document::NodeNetwork::map_ids::_{{closure}}::_{{closure}} (101 samples, 0.38%)</title><rect x="38.8628%" y="1061" width="0.3793%" height="15" fill="rgb(237,138,41)" fg:x="10348" fg:w="101"/><text x="39.1128%" y="1071.50"></text></g><g><title>graph_craft::document::NodeInput::map_ids (101 samples, 0.38%)</title><rect x="38.8628%" y="1045" width="0.3793%" height="15" fill="rgb(227,91,49)" fg:x="10348" fg:w="101"/><text x="39.1128%" y="1055.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten_with_fns::_{{closure}} (40 samples, 0.15%)</title><rect x="39.0919%" y="1029" width="0.1502%" height="15" fill="rgb(247,21,44)" fg:x="10409" fg:w="40"/><text x="39.3419%" y="1039.50"></text></g><g><title>core::ops::function::Fn::call (40 samples, 0.15%)</title><rect x="39.0919%" y="1013" width="0.1502%" height="15" fill="rgb(219,210,51)" fg:x="10409" fg:w="40"/><text x="39.3419%" y="1023.50"></text></g><g><title>graph_craft::document::merge_ids (40 samples, 0.15%)</title><rect x="39.0919%" y="997" width="0.1502%" height="15" fill="rgb(209,140,6)" fg:x="10409" fg:w="40"/><text x="39.3419%" y="1007.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (23 samples, 0.09%)</title><rect x="39.1557%" y="981" width="0.0864%" height="15" fill="rgb(221,188,24)" fg:x="10426" fg:w="23"/><text x="39.4057%" y="991.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (23 samples, 0.09%)</title><rect x="39.1557%" y="965" width="0.0864%" height="15" fill="rgb(232,154,20)" fg:x="10426" fg:w="23"/><text x="39.4057%" y="975.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (23 samples, 0.09%)</title><rect x="39.1557%" y="949" width="0.0864%" height="15" fill="rgb(244,137,50)" fg:x="10426" fg:w="23"/><text x="39.4057%" y="959.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12 samples, 0.05%)</title><rect x="39.1971%" y="933" width="0.0451%" height="15" fill="rgb(225,185,43)" fg:x="10437" fg:w="12"/><text x="39.4471%" y="943.50"></text></g><g><title>__memmove_avx512_unaligned_erms (46 samples, 0.17%)</title><rect x="39.2421%" y="1077" width="0.1728%" height="15" fill="rgb(213,205,38)" fg:x="10449" fg:w="46"/><text x="39.4921%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="39.4787%" y="933" width="0.0113%" height="15" fill="rgb(236,73,12)" fg:x="10512" fg:w="3"/><text x="39.7287%" y="943.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (18 samples, 0.07%)</title><rect x="39.4261%" y="981" width="0.0676%" height="15" fill="rgb(235,219,13)" fg:x="10498" fg:w="18"/><text x="39.6761%" y="991.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (18 samples, 0.07%)</title><rect x="39.4261%" y="965" width="0.0676%" height="15" fill="rgb(218,59,36)" fg:x="10498" fg:w="18"/><text x="39.6761%" y="975.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18 samples, 0.07%)</title><rect x="39.4261%" y="949" width="0.0676%" height="15" fill="rgb(205,110,39)" fg:x="10498" fg:w="18"/><text x="39.6761%" y="959.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::hash::Hash&gt;::hash (20 samples, 0.08%)</title><rect x="39.4261%" y="1029" width="0.0751%" height="15" fill="rgb(218,206,42)" fg:x="10498" fg:w="20"/><text x="39.6761%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (20 samples, 0.08%)</title><rect x="39.4261%" y="1013" width="0.0751%" height="15" fill="rgb(248,125,24)" fg:x="10498" fg:w="20"/><text x="39.6761%" y="1023.50"></text></g><g><title>core::hash::Hasher::write_u64 (20 samples, 0.08%)</title><rect x="39.4261%" y="997" width="0.0751%" height="15" fill="rgb(242,28,27)" fg:x="10498" fg:w="20"/><text x="39.6761%" y="1007.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="39.5426%" y="981" width="0.0113%" height="15" fill="rgb(216,228,15)" fg:x="10529" fg:w="3"/><text x="39.7926%" y="991.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12 samples, 0.05%)</title><rect x="39.5689%" y="965" width="0.0451%" height="15" fill="rgb(235,116,46)" fg:x="10536" fg:w="12"/><text x="39.8189%" y="975.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (33 samples, 0.12%)</title><rect x="39.5013%" y="1029" width="0.1239%" height="15" fill="rgb(224,18,32)" fg:x="10518" fg:w="33"/><text x="39.7513%" y="1039.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (33 samples, 0.12%)</title><rect x="39.5013%" y="1013" width="0.1239%" height="15" fill="rgb(252,5,12)" fg:x="10518" fg:w="33"/><text x="39.7513%" y="1023.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (33 samples, 0.12%)</title><rect x="39.5013%" y="997" width="0.1239%" height="15" fill="rgb(251,36,5)" fg:x="10518" fg:w="33"/><text x="39.7513%" y="1007.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (19 samples, 0.07%)</title><rect x="39.5538%" y="981" width="0.0714%" height="15" fill="rgb(217,53,14)" fg:x="10532" fg:w="19"/><text x="39.8038%" y="991.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.01%)</title><rect x="39.6139%" y="965" width="0.0113%" height="15" fill="rgb(215,86,45)" fg:x="10548" fg:w="3"/><text x="39.8639%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (341 samples, 1.28%)</title><rect x="38.3483%" y="1173" width="1.2807%" height="15" fill="rgb(242,169,11)" fg:x="10211" fg:w="341"/><text x="38.5983%" y="1183.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (340 samples, 1.28%)</title><rect x="38.3520%" y="1157" width="1.2769%" height="15" fill="rgb(211,213,45)" fg:x="10212" fg:w="340"/><text x="38.6020%" y="1167.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (340 samples, 1.28%)</title><rect x="38.3520%" y="1141" width="1.2769%" height="15" fill="rgb(205,88,11)" fg:x="10212" fg:w="340"/><text x="38.6020%" y="1151.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (339 samples, 1.27%)</title><rect x="38.3558%" y="1125" width="1.2731%" height="15" fill="rgb(252,69,26)" fg:x="10213" fg:w="339"/><text x="38.6058%" y="1135.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (297 samples, 1.12%)</title><rect x="38.5135%" y="1109" width="1.1154%" height="15" fill="rgb(246,123,37)" fg:x="10255" fg:w="297"/><text x="38.7635%" y="1119.50"></text></g><g><title>graph_craft::document::NodeNetwork::map_ids::_{{closure}} (208 samples, 0.78%)</title><rect x="38.8478%" y="1093" width="0.7812%" height="15" fill="rgb(212,205,5)" fg:x="10344" fg:w="208"/><text x="39.0978%" y="1103.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten_with_fns::_{{closure}} (57 samples, 0.21%)</title><rect x="39.4149%" y="1077" width="0.2141%" height="15" fill="rgb(253,148,0)" fg:x="10495" fg:w="57"/><text x="39.6649%" y="1087.50"></text></g><g><title>core::ops::function::Fn::call (56 samples, 0.21%)</title><rect x="39.4186%" y="1061" width="0.2103%" height="15" fill="rgb(239,22,4)" fg:x="10496" fg:w="56"/><text x="39.6686%" y="1071.50"></text></g><g><title>graph_craft::document::merge_ids (56 samples, 0.21%)</title><rect x="39.4186%" y="1045" width="0.2103%" height="15" fill="rgb(226,26,53)" fg:x="10496" fg:w="56"/><text x="39.6686%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (359 samples, 1.35%)</title><rect x="38.3483%" y="1189" width="1.3483%" height="15" fill="rgb(225,229,45)" fg:x="10211" fg:w="359"/><text x="38.5983%" y="1199.50"></text></g><g><title>cfree@GLIBC_2.2.5 (18 samples, 0.07%)</title><rect x="39.6289%" y="1173" width="0.0676%" height="15" fill="rgb(220,60,37)" fg:x="10552" fg:w="18"/><text x="39.8789%" y="1183.50"></text></g><g><title>_int_free_merge_chunk (16 samples, 0.06%)</title><rect x="39.6365%" y="1157" width="0.0601%" height="15" fill="rgb(217,180,35)" fg:x="10554" fg:w="16"/><text x="39.8865%" y="1167.50"></text></g><g><title>_int_free_create_chunk (15 samples, 0.06%)</title><rect x="39.6402%" y="1141" width="0.0563%" height="15" fill="rgb(229,7,53)" fg:x="10555" fg:w="15"/><text x="39.8902%" y="1151.50"></text></g><g><title>malloc_consolidate (33 samples, 0.12%)</title><rect x="40.3050%" y="933" width="0.1239%" height="15" fill="rgb(254,137,3)" fg:x="10732" fg:w="33"/><text x="40.5550%" y="943.50"></text></g><g><title>unlink_chunk.isra.0 (3 samples, 0.01%)</title><rect x="40.4176%" y="917" width="0.0113%" height="15" fill="rgb(215,140,41)" fg:x="10762" fg:w="3"/><text x="40.6676%" y="927.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (154 samples, 0.58%)</title><rect x="39.8543%" y="1077" width="0.5784%" height="15" fill="rgb(250,80,15)" fg:x="10612" fg:w="154"/><text x="40.1043%" y="1087.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (154 samples, 0.58%)</title><rect x="39.8543%" y="1061" width="0.5784%" height="15" fill="rgb(252,191,6)" fg:x="10612" fg:w="154"/><text x="40.1043%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (154 samples, 0.58%)</title><rect x="39.8543%" y="1045" width="0.5784%" height="15" fill="rgb(246,217,18)" fg:x="10612" fg:w="154"/><text x="40.1043%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (154 samples, 0.58%)</title><rect x="39.8543%" y="1029" width="0.5784%" height="15" fill="rgb(223,93,7)" fg:x="10612" fg:w="154"/><text x="40.1043%" y="1039.50"></text></g><g><title>alloc::alloc::alloc (154 samples, 0.58%)</title><rect x="39.8543%" y="1013" width="0.5784%" height="15" fill="rgb(225,55,52)" fg:x="10612" fg:w="154"/><text x="40.1043%" y="1023.50"></text></g><g><title>__rdl_alloc (154 samples, 0.58%)</title><rect x="39.8543%" y="997" width="0.5784%" height="15" fill="rgb(240,31,24)" fg:x="10612" fg:w="154"/><text x="40.1043%" y="1007.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (154 samples, 0.58%)</title><rect x="39.8543%" y="981" width="0.5784%" height="15" fill="rgb(205,56,52)" fg:x="10612" fg:w="154"/><text x="40.1043%" y="991.50"></text></g><g><title>malloc (154 samples, 0.58%)</title><rect x="39.8543%" y="965" width="0.5784%" height="15" fill="rgb(246,146,12)" fg:x="10612" fg:w="154"/><text x="40.1043%" y="975.50"></text></g><g><title>_int_malloc (153 samples, 0.57%)</title><rect x="39.8580%" y="949" width="0.5746%" height="15" fill="rgb(239,84,36)" fg:x="10613" fg:w="153"/><text x="40.1080%" y="959.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (163 samples, 0.61%)</title><rect x="39.8468%" y="1125" width="0.6122%" height="15" fill="rgb(207,41,40)" fg:x="10610" fg:w="163"/><text x="40.0968%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (163 samples, 0.61%)</title><rect x="39.8468%" y="1109" width="0.6122%" height="15" fill="rgb(241,179,25)" fg:x="10610" fg:w="163"/><text x="40.0968%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (163 samples, 0.61%)</title><rect x="39.8468%" y="1093" width="0.6122%" height="15" fill="rgb(210,0,34)" fg:x="10610" fg:w="163"/><text x="40.0968%" y="1103.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (7 samples, 0.03%)</title><rect x="40.4326%" y="1077" width="0.0263%" height="15" fill="rgb(225,217,29)" fg:x="10766" fg:w="7"/><text x="40.6826%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (572 samples, 2.15%)</title><rect x="38.3220%" y="1253" width="2.1482%" height="15" fill="rgb(216,191,38)" fg:x="10204" fg:w="572"/><text x="38.5720%" y="1263.50">c..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (572 samples, 2.15%)</title><rect x="38.3220%" y="1237" width="2.1482%" height="15" fill="rgb(232,140,52)" fg:x="10204" fg:w="572"/><text x="38.5720%" y="1247.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (565 samples, 2.12%)</title><rect x="38.3483%" y="1221" width="2.1219%" height="15" fill="rgb(223,158,51)" fg:x="10211" fg:w="565"/><text x="38.5983%" y="1231.50">&lt;..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (565 samples, 2.12%)</title><rect x="38.3483%" y="1205" width="2.1219%" height="15" fill="rgb(235,29,51)" fg:x="10211" fg:w="565"/><text x="38.5983%" y="1215.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (206 samples, 0.77%)</title><rect x="39.6965%" y="1189" width="0.7737%" height="15" fill="rgb(215,181,18)" fg:x="10570" fg:w="206"/><text x="39.9465%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (206 samples, 0.77%)</title><rect x="39.6965%" y="1173" width="0.7737%" height="15" fill="rgb(227,125,34)" fg:x="10570" fg:w="206"/><text x="39.9465%" y="1183.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (181 samples, 0.68%)</title><rect x="39.7904%" y="1157" width="0.6798%" height="15" fill="rgb(230,197,49)" fg:x="10595" fg:w="181"/><text x="40.0404%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (170 samples, 0.64%)</title><rect x="39.8317%" y="1141" width="0.6384%" height="15" fill="rgb(239,141,16)" fg:x="10606" fg:w="170"/><text x="40.0817%" y="1151.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (3 samples, 0.01%)</title><rect x="40.4589%" y="1125" width="0.0113%" height="15" fill="rgb(225,105,43)" fg:x="10773" fg:w="3"/><text x="40.7089%" y="1135.50"></text></g><g><title>graph_craft::document::NodeNetwork::map_ids (616 samples, 2.31%)</title><rect x="38.1718%" y="1269" width="2.3134%" height="15" fill="rgb(214,131,14)" fg:x="10164" fg:w="616"/><text x="38.4218%" y="1279.50">g..</text></g><g><title>graph_craft::document::NodeNetwork::replace_network_outputs (5 samples, 0.02%)</title><rect x="40.4852%" y="1269" width="0.0188%" height="15" fill="rgb(229,177,11)" fg:x="10780" fg:w="5"/><text x="40.7352%" y="1279.50"></text></g><g><title>&lt;graph_craft::document::NodeInput as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="40.4927%" y="1253" width="0.0113%" height="15" fill="rgb(231,180,14)" fg:x="10782" fg:w="3"/><text x="40.7427%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (27 samples, 0.10%)</title><rect x="41.1500%" y="1253" width="0.1014%" height="15" fill="rgb(232,88,2)" fg:x="10957" fg:w="27"/><text x="41.4000%" y="1263.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (538 samples, 2.02%)</title><rect x="41.2514%" y="1237" width="2.0205%" height="15" fill="rgb(205,220,8)" fg:x="10984" fg:w="538"/><text x="41.5014%" y="1247.50">&lt;..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (522 samples, 1.96%)</title><rect x="41.3115%" y="1221" width="1.9604%" height="15" fill="rgb(225,23,53)" fg:x="11000" fg:w="522"/><text x="41.5615%" y="1231.50">&lt;..</text></g><g><title>&lt;graph_craft::document::NodeInput as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="44.1206%" y="1221" width="0.0113%" height="15" fill="rgb(213,62,29)" fg:x="11748" fg:w="3"/><text x="44.3706%" y="1231.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (56 samples, 0.21%)</title><rect x="53.4345%" y="1189" width="0.2103%" height="15" fill="rgb(227,75,7)" fg:x="14228" fg:w="56"/><text x="53.6845%" y="1199.50"></text></g><g><title>&lt;graph_craft::document::NodeInput as core::cmp::PartialEq&gt;::eq (2,535 samples, 9.52%)</title><rect x="44.1319%" y="1221" width="9.5204%" height="15" fill="rgb(207,105,14)" fg:x="11751" fg:w="2535"/><text x="44.3819%" y="1231.50">&lt;graph_craft::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (58 samples, 0.22%)</title><rect x="53.4345%" y="1205" width="0.2178%" height="15" fill="rgb(245,62,29)" fg:x="14228" fg:w="58"/><text x="53.6845%" y="1215.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (3,316 samples, 12.45%)</title><rect x="41.2514%" y="1253" width="12.4535%" height="15" fill="rgb(236,202,4)" fg:x="10984" fg:w="3316"/><text x="41.5014%" y="1263.50">&lt;core::slice::iter:..</text></g><g><title>graph_craft::document::NodeNetwork::replace_node_inputs::_{{closure}} (2,778 samples, 10.43%)</title><rect x="43.2719%" y="1237" width="10.4330%" height="15" fill="rgb(250,67,1)" fg:x="11522" fg:w="2778"/><text x="43.5219%" y="1247.50">graph_craft::do..</text></g><g><title>__memmove_avx512_unaligned_erms (14 samples, 0.05%)</title><rect x="53.6523%" y="1221" width="0.0526%" height="15" fill="rgb(253,115,44)" fg:x="14286" fg:w="14"/><text x="53.9023%" y="1231.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (70 samples, 0.26%)</title><rect x="53.8701%" y="1157" width="0.2629%" height="15" fill="rgb(251,139,18)" fg:x="14344" fg:w="70"/><text x="54.1201%" y="1167.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (6 samples, 0.02%)</title><rect x="54.1105%" y="1141" width="0.0225%" height="15" fill="rgb(218,22,32)" fg:x="14408" fg:w="6"/><text x="54.3605%" y="1151.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (6 samples, 0.02%)</title><rect x="54.1105%" y="1125" width="0.0225%" height="15" fill="rgb(243,53,5)" fg:x="14408" fg:w="6"/><text x="54.3605%" y="1135.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (116 samples, 0.44%)</title><rect x="53.8701%" y="1173" width="0.4356%" height="15" fill="rgb(227,56,16)" fg:x="14344" fg:w="116"/><text x="54.1201%" y="1183.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (46 samples, 0.17%)</title><rect x="54.1330%" y="1157" width="0.1728%" height="15" fill="rgb(245,53,0)" fg:x="14414" fg:w="46"/><text x="54.3830%" y="1167.50"></text></g><g><title>core::num::&lt;impl isize&gt;::unchecked_neg (39 samples, 0.15%)</title><rect x="54.3058%" y="1141" width="0.1465%" height="15" fill="rgb(216,170,35)" fg:x="14460" fg:w="39"/><text x="54.5558%" y="1151.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (44 samples, 0.17%)</title><rect x="54.3058%" y="1173" width="0.1652%" height="15" fill="rgb(211,200,8)" fg:x="14460" fg:w="44"/><text x="54.5558%" y="1183.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (44 samples, 0.17%)</title><rect x="54.3058%" y="1157" width="0.1652%" height="15" fill="rgb(228,204,44)" fg:x="14460" fg:w="44"/><text x="54.5558%" y="1167.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.02%)</title><rect x="54.4522%" y="1141" width="0.0188%" height="15" fill="rgb(214,121,17)" fg:x="14499" fg:w="5"/><text x="54.7022%" y="1151.50"></text></g><g><title>&lt;std::collections::hash::map::ValuesMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (281 samples, 1.06%)</title><rect x="53.7049%" y="1253" width="1.0553%" height="15" fill="rgb(233,64,38)" fg:x="14300" fg:w="281"/><text x="53.9549%" y="1263.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (281 samples, 1.06%)</title><rect x="53.7049%" y="1237" width="1.0553%" height="15" fill="rgb(253,54,19)" fg:x="14300" fg:w="281"/><text x="53.9549%" y="1247.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (281 samples, 1.06%)</title><rect x="53.7049%" y="1221" width="1.0553%" height="15" fill="rgb(253,94,18)" fg:x="14300" fg:w="281"/><text x="53.9549%" y="1231.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (281 samples, 1.06%)</title><rect x="53.7049%" y="1205" width="1.0553%" height="15" fill="rgb(227,57,52)" fg:x="14300" fg:w="281"/><text x="53.9549%" y="1215.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (237 samples, 0.89%)</title><rect x="53.8701%" y="1189" width="0.8901%" height="15" fill="rgb(230,228,50)" fg:x="14344" fg:w="237"/><text x="54.1201%" y="1199.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (77 samples, 0.29%)</title><rect x="54.4710%" y="1173" width="0.2892%" height="15" fill="rgb(217,205,27)" fg:x="14504" fg:w="77"/><text x="54.7210%" y="1183.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (77 samples, 0.29%)</title><rect x="54.4710%" y="1157" width="0.2892%" height="15" fill="rgb(252,71,50)" fg:x="14504" fg:w="77"/><text x="54.7210%" y="1167.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (77 samples, 0.29%)</title><rect x="54.4710%" y="1141" width="0.2892%" height="15" fill="rgb(209,86,4)" fg:x="14504" fg:w="77"/><text x="54.7210%" y="1151.50"></text></g><g><title>graph_craft::document::NodeNetwork::replace_node_inputs (3,803 samples, 14.28%)</title><rect x="40.5040%" y="1269" width="14.2825%" height="15" fill="rgb(229,94,0)" fg:x="10785" fg:w="3803"/><text x="40.7540%" y="1279.50">graph_craft::document:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::values_mut (5 samples, 0.02%)</title><rect x="54.7677%" y="1253" width="0.0188%" height="15" fill="rgb(252,223,21)" fg:x="14583" fg:w="5"/><text x="55.0177%" y="1263.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter_mut (5 samples, 0.02%)</title><rect x="54.7677%" y="1237" width="0.0188%" height="15" fill="rgb(230,210,4)" fg:x="14583" fg:w="5"/><text x="55.0177%" y="1247.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter_mut (5 samples, 0.02%)</title><rect x="54.7677%" y="1221" width="0.0188%" height="15" fill="rgb(240,149,38)" fg:x="14583" fg:w="5"/><text x="55.0177%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (5 samples, 0.02%)</title><rect x="54.7677%" y="1205" width="0.0188%" height="15" fill="rgb(254,105,20)" fg:x="14583" fg:w="5"/><text x="55.0177%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (5 samples, 0.02%)</title><rect x="54.7677%" y="1189" width="0.0188%" height="15" fill="rgb(253,87,46)" fg:x="14583" fg:w="5"/><text x="55.0177%" y="1199.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (5 samples, 0.02%)</title><rect x="54.7677%" y="1173" width="0.0188%" height="15" fill="rgb(253,116,33)" fg:x="14583" fg:w="5"/><text x="55.0177%" y="1183.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (5 samples, 0.02%)</title><rect x="54.7677%" y="1157" width="0.0188%" height="15" fill="rgb(229,198,5)" fg:x="14583" fg:w="5"/><text x="55.0177%" y="1167.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (3 samples, 0.01%)</title><rect x="54.7752%" y="1141" width="0.0113%" height="15" fill="rgb(242,38,37)" fg:x="14585" fg:w="3"/><text x="55.0252%" y="1151.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.01%)</title><rect x="54.7752%" y="1125" width="0.0113%" height="15" fill="rgb(242,69,53)" fg:x="14585" fg:w="3"/><text x="55.0252%" y="1135.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="54.8278%" y="1205" width="0.0150%" height="15" fill="rgb(249,80,16)" fg:x="14599" fg:w="4"/><text x="55.0778%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="54.8278%" y="1189" width="0.0150%" height="15" fill="rgb(206,128,11)" fg:x="14599" fg:w="4"/><text x="55.0778%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="54.8278%" y="1173" width="0.0150%" height="15" fill="rgb(212,35,20)" fg:x="14599" fg:w="4"/><text x="55.0778%" y="1183.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (7 samples, 0.03%)</title><rect x="54.8428%" y="1205" width="0.0263%" height="15" fill="rgb(236,79,13)" fg:x="14603" fg:w="7"/><text x="55.0928%" y="1215.50"></text></g><g><title>hashbrown::map::make_hash (40 samples, 0.15%)</title><rect x="54.8128%" y="1237" width="0.1502%" height="15" fill="rgb(233,123,3)" fg:x="14595" fg:w="40"/><text x="55.0628%" y="1247.50"></text></g><g><title>core::hash::BuildHasher::hash_one (40 samples, 0.15%)</title><rect x="54.8128%" y="1221" width="0.1502%" height="15" fill="rgb(214,93,52)" fg:x="14595" fg:w="40"/><text x="55.0628%" y="1231.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (25 samples, 0.09%)</title><rect x="54.8691%" y="1205" width="0.0939%" height="15" fill="rgb(251,37,40)" fg:x="14610" fg:w="25"/><text x="55.1191%" y="1215.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (24 samples, 0.09%)</title><rect x="54.8729%" y="1189" width="0.0901%" height="15" fill="rgb(227,80,54)" fg:x="14611" fg:w="24"/><text x="55.1229%" y="1199.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (24 samples, 0.09%)</title><rect x="54.8729%" y="1173" width="0.0901%" height="15" fill="rgb(254,48,11)" fg:x="14611" fg:w="24"/><text x="55.1229%" y="1183.50"></text></g><g><title>core::hash::Hasher::write_u64 (24 samples, 0.09%)</title><rect x="54.8729%" y="1157" width="0.0901%" height="15" fill="rgb(235,193,26)" fg:x="14611" fg:w="24"/><text x="55.1229%" y="1167.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (24 samples, 0.09%)</title><rect x="54.8729%" y="1141" width="0.0901%" height="15" fill="rgb(229,99,21)" fg:x="14611" fg:w="24"/><text x="55.1229%" y="1151.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (24 samples, 0.09%)</title><rect x="54.8729%" y="1125" width="0.0901%" height="15" fill="rgb(211,140,41)" fg:x="14611" fg:w="24"/><text x="55.1229%" y="1135.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.06%)</title><rect x="54.9067%" y="1109" width="0.0563%" height="15" fill="rgb(240,227,30)" fg:x="14620" fg:w="15"/><text x="55.1567%" y="1119.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.02%)</title><rect x="54.9442%" y="1093" width="0.0188%" height="15" fill="rgb(215,224,45)" fg:x="14630" fg:w="5"/><text x="55.1942%" y="1103.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.02%)</title><rect x="54.9480%" y="1077" width="0.0150%" height="15" fill="rgb(206,123,31)" fg:x="14631" fg:w="4"/><text x="55.1980%" y="1087.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 0.11%)</title><rect x="54.9668%" y="1157" width="0.1127%" height="15" fill="rgb(210,138,16)" fg:x="14636" fg:w="30"/><text x="55.2168%" y="1167.50"></text></g><g><title>__memmove_avx512_unaligned_erms (29 samples, 0.11%)</title><rect x="54.9705%" y="1141" width="0.1089%" height="15" fill="rgb(228,57,28)" fg:x="14637" fg:w="29"/><text x="55.2205%" y="1151.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.02%)</title><rect x="55.1283%" y="1029" width="0.0188%" height="15" fill="rgb(242,170,10)" fg:x="14679" fg:w="5"/><text x="55.3783%" y="1039.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (19 samples, 0.07%)</title><rect x="55.0794%" y="1093" width="0.0714%" height="15" fill="rgb(228,214,39)" fg:x="14666" fg:w="19"/><text x="55.3294%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (19 samples, 0.07%)</title><rect x="55.0794%" y="1077" width="0.0714%" height="15" fill="rgb(218,179,33)" fg:x="14666" fg:w="19"/><text x="55.3294%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (19 samples, 0.07%)</title><rect x="55.0794%" y="1061" width="0.0714%" height="15" fill="rgb(235,193,39)" fg:x="14666" fg:w="19"/><text x="55.3294%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.03%)</title><rect x="55.1207%" y="1045" width="0.0300%" height="15" fill="rgb(219,221,36)" fg:x="14677" fg:w="8"/><text x="55.3707%" y="1055.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.06%)</title><rect x="55.1696%" y="1029" width="0.0638%" height="15" fill="rgb(248,218,19)" fg:x="14690" fg:w="17"/><text x="55.4196%" y="1039.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (17 samples, 0.06%)</title><rect x="55.1696%" y="1013" width="0.0638%" height="15" fill="rgb(205,50,9)" fg:x="14690" fg:w="17"/><text x="55.4196%" y="1023.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.06%)</title><rect x="55.1696%" y="997" width="0.0638%" height="15" fill="rgb(238,81,28)" fg:x="14690" fg:w="17"/><text x="55.4196%" y="1007.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.03%)</title><rect x="55.2034%" y="981" width="0.0300%" height="15" fill="rgb(235,110,19)" fg:x="14699" fg:w="8"/><text x="55.4534%" y="991.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (47 samples, 0.18%)</title><rect x="55.0794%" y="1141" width="0.1765%" height="15" fill="rgb(214,7,14)" fg:x="14666" fg:w="47"/><text x="55.3294%" y="1151.50"></text></g><g><title>hashbrown::map::make_hash (47 samples, 0.18%)</title><rect x="55.0794%" y="1125" width="0.1765%" height="15" fill="rgb(211,77,3)" fg:x="14666" fg:w="47"/><text x="55.3294%" y="1135.50"></text></g><g><title>core::hash::BuildHasher::hash_one (47 samples, 0.18%)</title><rect x="55.0794%" y="1109" width="0.1765%" height="15" fill="rgb(229,5,9)" fg:x="14666" fg:w="47"/><text x="55.3294%" y="1119.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (26 samples, 0.10%)</title><rect x="55.1583%" y="1093" width="0.0976%" height="15" fill="rgb(225,90,11)" fg:x="14687" fg:w="26"/><text x="55.4083%" y="1103.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (23 samples, 0.09%)</title><rect x="55.1696%" y="1077" width="0.0864%" height="15" fill="rgb(242,56,8)" fg:x="14690" fg:w="23"/><text x="55.4196%" y="1087.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (23 samples, 0.09%)</title><rect x="55.1696%" y="1061" width="0.0864%" height="15" fill="rgb(249,212,39)" fg:x="14690" fg:w="23"/><text x="55.4196%" y="1071.50"></text></g><g><title>core::hash::Hasher::write_u64 (23 samples, 0.09%)</title><rect x="55.1696%" y="1045" width="0.0864%" height="15" fill="rgb(236,90,9)" fg:x="14690" fg:w="23"/><text x="55.4196%" y="1055.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_ne_bytes (6 samples, 0.02%)</title><rect x="55.2334%" y="1029" width="0.0225%" height="15" fill="rgb(206,88,35)" fg:x="14707" fg:w="6"/><text x="55.4834%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (48 samples, 0.18%)</title><rect x="55.0794%" y="1157" width="0.1803%" height="15" fill="rgb(205,126,30)" fg:x="14666" fg:w="48"/><text x="55.3294%" y="1167.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (4 samples, 0.02%)</title><rect x="55.2597%" y="1125" width="0.0150%" height="15" fill="rgb(230,176,12)" fg:x="14714" fg:w="4"/><text x="55.5097%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (11 samples, 0.04%)</title><rect x="55.2747%" y="1125" width="0.0413%" height="15" fill="rgb(243,19,9)" fg:x="14718" fg:w="11"/><text x="55.5247%" y="1135.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (8 samples, 0.03%)</title><rect x="55.2860%" y="1109" width="0.0300%" height="15" fill="rgb(245,171,17)" fg:x="14721" fg:w="8"/><text x="55.5360%" y="1119.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.03%)</title><rect x="55.2860%" y="1093" width="0.0300%" height="15" fill="rgb(227,52,21)" fg:x="14721" fg:w="8"/><text x="55.5360%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (8 samples, 0.03%)</title><rect x="55.3160%" y="1125" width="0.0300%" height="15" fill="rgb(238,69,14)" fg:x="14729" fg:w="8"/><text x="55.5660%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (24 samples, 0.09%)</title><rect x="55.2597%" y="1141" width="0.0901%" height="15" fill="rgb(241,156,39)" fg:x="14714" fg:w="24"/><text x="55.5097%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (26 samples, 0.10%)</title><rect x="55.2597%" y="1157" width="0.0976%" height="15" fill="rgb(212,227,28)" fg:x="14714" fg:w="26"/><text x="55.5097%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (109 samples, 0.41%)</title><rect x="54.9668%" y="1221" width="0.4094%" height="15" fill="rgb(209,118,27)" fg:x="14636" fg:w="109"/><text x="55.2168%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (109 samples, 0.41%)</title><rect x="54.9668%" y="1205" width="0.4094%" height="15" fill="rgb(226,102,5)" fg:x="14636" fg:w="109"/><text x="55.2168%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (109 samples, 0.41%)</title><rect x="54.9668%" y="1189" width="0.4094%" height="15" fill="rgb(223,34,3)" fg:x="14636" fg:w="109"/><text x="55.2168%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (109 samples, 0.41%)</title><rect x="54.9668%" y="1173" width="0.4094%" height="15" fill="rgb(221,81,38)" fg:x="14636" fg:w="109"/><text x="55.2168%" y="1183.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (5 samples, 0.02%)</title><rect x="55.3573%" y="1157" width="0.0188%" height="15" fill="rgb(236,219,28)" fg:x="14740" fg:w="5"/><text x="55.6073%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (5 samples, 0.02%)</title><rect x="55.3573%" y="1141" width="0.0188%" height="15" fill="rgb(213,200,14)" fg:x="14740" fg:w="5"/><text x="55.6073%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (5 samples, 0.02%)</title><rect x="55.3573%" y="1125" width="0.0188%" height="15" fill="rgb(240,33,19)" fg:x="14740" fg:w="5"/><text x="55.6073%" y="1135.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5 samples, 0.02%)</title><rect x="55.3573%" y="1109" width="0.0188%" height="15" fill="rgb(233,113,27)" fg:x="14740" fg:w="5"/><text x="55.6073%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.02%)</title><rect x="55.3573%" y="1093" width="0.0188%" height="15" fill="rgb(220,221,18)" fg:x="14740" fg:w="5"/><text x="55.6073%" y="1103.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.02%)</title><rect x="55.3573%" y="1077" width="0.0188%" height="15" fill="rgb(238,92,8)" fg:x="14740" fg:w="5"/><text x="55.6073%" y="1087.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="55.3573%" y="1061" width="0.0188%" height="15" fill="rgb(222,164,16)" fg:x="14740" fg:w="5"/><text x="55.6073%" y="1071.50"></text></g><g><title>__rdl_alloc (5 samples, 0.02%)</title><rect x="55.3573%" y="1045" width="0.0188%" height="15" fill="rgb(241,119,3)" fg:x="14740" fg:w="5"/><text x="55.6073%" y="1055.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.02%)</title><rect x="55.3573%" y="1029" width="0.0188%" height="15" fill="rgb(241,44,8)" fg:x="14740" fg:w="5"/><text x="55.6073%" y="1039.50"></text></g><g><title>malloc (5 samples, 0.02%)</title><rect x="55.3573%" y="1013" width="0.0188%" height="15" fill="rgb(230,36,40)" fg:x="14740" fg:w="5"/><text x="55.6073%" y="1023.50"></text></g><g><title>_int_malloc (5 samples, 0.02%)</title><rect x="55.3573%" y="997" width="0.0188%" height="15" fill="rgb(243,16,36)" fg:x="14740" fg:w="5"/><text x="55.6073%" y="1007.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="55.3799%" y="1205" width="0.0150%" height="15" fill="rgb(231,4,26)" fg:x="14746" fg:w="4"/><text x="55.6299%" y="1215.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.02%)</title><rect x="55.3799%" y="1189" width="0.0150%" height="15" fill="rgb(240,9,31)" fg:x="14746" fg:w="4"/><text x="55.6299%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (119 samples, 0.45%)</title><rect x="54.9668%" y="1237" width="0.4469%" height="15" fill="rgb(207,173,15)" fg:x="14636" fg:w="119"/><text x="55.2168%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (10 samples, 0.04%)</title><rect x="55.3761%" y="1221" width="0.0376%" height="15" fill="rgb(224,192,53)" fg:x="14745" fg:w="10"/><text x="55.6261%" y="1231.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (195 samples, 0.73%)</title><rect x="54.7978%" y="1269" width="0.7323%" height="15" fill="rgb(223,67,28)" fg:x="14591" fg:w="195"/><text x="55.0478%" y="1279.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (194 samples, 0.73%)</title><rect x="54.8015%" y="1253" width="0.7286%" height="15" fill="rgb(211,20,47)" fg:x="14592" fg:w="194"/><text x="55.0515%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (31 samples, 0.12%)</title><rect x="55.4137%" y="1237" width="0.1164%" height="15" fill="rgb(240,228,2)" fg:x="14755" fg:w="31"/><text x="55.6637%" y="1247.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (31 samples, 0.12%)</title><rect x="55.4137%" y="1221" width="0.1164%" height="15" fill="rgb(248,151,12)" fg:x="14755" fg:w="31"/><text x="55.6637%" y="1231.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (31 samples, 0.12%)</title><rect x="55.4137%" y="1205" width="0.1164%" height="15" fill="rgb(244,8,39)" fg:x="14755" fg:w="31"/><text x="55.6637%" y="1215.50"></text></g><g><title>core::ptr::write (31 samples, 0.12%)</title><rect x="55.4137%" y="1189" width="0.1164%" height="15" fill="rgb(222,26,8)" fg:x="14755" fg:w="31"/><text x="55.6637%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (14 samples, 0.05%)</title><rect x="55.4775%" y="1173" width="0.0526%" height="15" fill="rgb(213,106,44)" fg:x="14772" fg:w="14"/><text x="55.7275%" y="1183.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="55.5376%" y="1237" width="0.0113%" height="15" fill="rgb(214,129,20)" fg:x="14788" fg:w="3"/><text x="55.7876%" y="1247.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="55.5376%" y="1221" width="0.0113%" height="15" fill="rgb(212,32,13)" fg:x="14788" fg:w="3"/><text x="55.7876%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.03%)</title><rect x="55.5489%" y="1221" width="0.0338%" height="15" fill="rgb(208,168,33)" fg:x="14791" fg:w="9"/><text x="55.7989%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (9 samples, 0.03%)</title><rect x="55.5489%" y="1205" width="0.0338%" height="15" fill="rgb(231,207,8)" fg:x="14791" fg:w="9"/><text x="55.7989%" y="1215.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::read (6 samples, 0.02%)</title><rect x="55.5827%" y="1205" width="0.0225%" height="15" fill="rgb(235,219,23)" fg:x="14800" fg:w="6"/><text x="55.8327%" y="1215.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (6 samples, 0.02%)</title><rect x="55.5827%" y="1189" width="0.0225%" height="15" fill="rgb(226,216,26)" fg:x="14800" fg:w="6"/><text x="55.8327%" y="1199.50"></text></g><g><title>core::ptr::read (6 samples, 0.02%)</title><rect x="55.5827%" y="1173" width="0.0225%" height="15" fill="rgb(239,137,16)" fg:x="14800" fg:w="6"/><text x="55.8327%" y="1183.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="55.5864%" y="1157" width="0.0188%" height="15" fill="rgb(207,12,36)" fg:x="14801" fg:w="5"/><text x="55.8364%" y="1167.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::leading_zeros (3 samples, 0.01%)</title><rect x="55.6127%" y="1173" width="0.0113%" height="15" fill="rgb(210,214,24)" fg:x="14808" fg:w="3"/><text x="55.8627%" y="1183.50"></text></g><g><title>core::num::&lt;impl u16&gt;::leading_zeros (3 samples, 0.01%)</title><rect x="55.6127%" y="1157" width="0.0113%" height="15" fill="rgb(206,56,30)" fg:x="14808" fg:w="3"/><text x="55.8627%" y="1167.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten (6,561 samples, 24.64%)</title><rect x="30.9873%" y="1301" width="24.6404%" height="15" fill="rgb(228,143,26)" fg:x="8251" fg:w="6561"/><text x="31.2373%" y="1311.50">graph_craft::document::NodeNetwork::fla..</text></g><g><title>graph_craft::document::NodeNetwork::flatten_with_fns (6,557 samples, 24.63%)</title><rect x="31.0024%" y="1285" width="24.6254%" height="15" fill="rgb(216,218,46)" fg:x="8255" fg:w="6557"/><text x="31.2524%" y="1295.50">graph_craft::document::NodeNetwork::fla..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove_entry (24 samples, 0.09%)</title><rect x="55.5376%" y="1269" width="0.0901%" height="15" fill="rgb(206,6,19)" fg:x="14788" fg:w="24"/><text x="55.7876%" y="1279.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (24 samples, 0.09%)</title><rect x="55.5376%" y="1253" width="0.0901%" height="15" fill="rgb(239,177,51)" fg:x="14788" fg:w="24"/><text x="55.7876%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (21 samples, 0.08%)</title><rect x="55.5489%" y="1237" width="0.0789%" height="15" fill="rgb(216,55,25)" fg:x="14791" fg:w="21"/><text x="55.7989%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (12 samples, 0.05%)</title><rect x="55.5827%" y="1221" width="0.0451%" height="15" fill="rgb(231,163,29)" fg:x="14800" fg:w="12"/><text x="55.8327%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (6 samples, 0.02%)</title><rect x="55.6052%" y="1205" width="0.0225%" height="15" fill="rgb(232,149,50)" fg:x="14806" fg:w="6"/><text x="55.8552%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (6 samples, 0.02%)</title><rect x="55.6052%" y="1189" width="0.0225%" height="15" fill="rgb(223,142,48)" fg:x="14806" fg:w="6"/><text x="55.8552%" y="1199.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.04%)</title><rect x="55.6353%" y="1173" width="0.0376%" height="15" fill="rgb(245,83,23)" fg:x="14814" fg:w="10"/><text x="55.8853%" y="1183.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.04%)</title><rect x="55.6353%" y="1157" width="0.0376%" height="15" fill="rgb(224,63,2)" fg:x="14814" fg:w="10"/><text x="55.8853%" y="1167.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.04%)</title><rect x="55.6353%" y="1141" width="0.0376%" height="15" fill="rgb(218,65,53)" fg:x="14814" fg:w="10"/><text x="55.8853%" y="1151.50"></text></g><g><title>__memmove_avx512_unaligned_erms (9 samples, 0.03%)</title><rect x="55.6390%" y="1125" width="0.0338%" height="15" fill="rgb(221,84,29)" fg:x="14815" fg:w="9"/><text x="55.8890%" y="1135.50"></text></g><g><title>__memmove_avx512_unaligned_erms (86 samples, 0.32%)</title><rect x="55.6766%" y="1157" width="0.3230%" height="15" fill="rgb(234,0,32)" fg:x="14825" fg:w="86"/><text x="55.9266%" y="1167.50"></text></g><g><title>__memmove_avx512_unaligned_erms (128 samples, 0.48%)</title><rect x="56.0108%" y="1125" width="0.4807%" height="15" fill="rgb(206,20,16)" fg:x="14914" fg:w="128"/><text x="56.2608%" y="1135.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (112 samples, 0.42%)</title><rect x="56.5516%" y="1061" width="0.4206%" height="15" fill="rgb(244,172,18)" fg:x="15058" fg:w="112"/><text x="56.8016%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (112 samples, 0.42%)</title><rect x="56.5516%" y="1045" width="0.4206%" height="15" fill="rgb(254,133,1)" fg:x="15058" fg:w="112"/><text x="56.8016%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (112 samples, 0.42%)</title><rect x="56.5516%" y="1029" width="0.4206%" height="15" fill="rgb(222,206,41)" fg:x="15058" fg:w="112"/><text x="56.8016%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (112 samples, 0.42%)</title><rect x="56.5516%" y="1013" width="0.4206%" height="15" fill="rgb(212,3,42)" fg:x="15058" fg:w="112"/><text x="56.8016%" y="1023.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 samples, 0.42%)</title><rect x="56.5554%" y="997" width="0.4169%" height="15" fill="rgb(241,11,4)" fg:x="15059" fg:w="111"/><text x="56.8054%" y="1007.50"></text></g><g><title>malloc (109 samples, 0.41%)</title><rect x="56.5629%" y="981" width="0.4094%" height="15" fill="rgb(205,19,26)" fg:x="15061" fg:w="109"/><text x="56.8129%" y="991.50"></text></g><g><title>_int_malloc (103 samples, 0.39%)</title><rect x="56.5854%" y="965" width="0.3868%" height="15" fill="rgb(210,179,32)" fg:x="15067" fg:w="103"/><text x="56.8354%" y="975.50"></text></g><g><title>unlink_chunk.isra.0 (8 samples, 0.03%)</title><rect x="56.9422%" y="949" width="0.0300%" height="15" fill="rgb(227,116,49)" fg:x="15162" fg:w="8"/><text x="57.1922%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (114 samples, 0.43%)</title><rect x="56.5479%" y="1109" width="0.4281%" height="15" fill="rgb(211,146,6)" fg:x="15057" fg:w="114"/><text x="56.7979%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (114 samples, 0.43%)</title><rect x="56.5479%" y="1093" width="0.4281%" height="15" fill="rgb(219,44,39)" fg:x="15057" fg:w="114"/><text x="56.7979%" y="1103.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (114 samples, 0.43%)</title><rect x="56.5479%" y="1077" width="0.4281%" height="15" fill="rgb(234,128,11)" fg:x="15057" fg:w="114"/><text x="56.7979%" y="1087.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="56.9760%" y="1093" width="0.0113%" height="15" fill="rgb(220,183,53)" fg:x="15171" fg:w="3"/><text x="57.2260%" y="1103.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="56.9760%" y="1077" width="0.0113%" height="15" fill="rgb(213,219,32)" fg:x="15171" fg:w="3"/><text x="57.2260%" y="1087.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (6 samples, 0.02%)</title><rect x="56.9760%" y="1109" width="0.0225%" height="15" fill="rgb(232,156,16)" fg:x="15171" fg:w="6"/><text x="57.2260%" y="1119.50"></text></g><g><title>graph_craft::document::DocumentNode::resolve_proto_node::_{{closure}} (3 samples, 0.01%)</title><rect x="56.9873%" y="1093" width="0.0113%" height="15" fill="rgb(246,135,34)" fg:x="15174" fg:w="3"/><text x="57.2373%" y="1103.50"></text></g><g><title>__memmove_avx512_unaligned_erms (220 samples, 0.83%)</title><rect x="56.9985%" y="1109" width="0.8262%" height="15" fill="rgb(241,99,0)" fg:x="15177" fg:w="220"/><text x="57.2485%" y="1119.50"></text></g><g><title>core::intrinsics::copy (7 samples, 0.03%)</title><rect x="57.8248%" y="1093" width="0.0263%" height="15" fill="rgb(222,103,45)" fg:x="15397" fg:w="7"/><text x="58.0748%" y="1103.50"></text></g><g><title>__memmove_avx512_unaligned_erms (7 samples, 0.03%)</title><rect x="57.8248%" y="1077" width="0.0263%" height="15" fill="rgb(212,57,4)" fg:x="15397" fg:w="7"/><text x="58.0748%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (33 samples, 0.12%)</title><rect x="57.8248%" y="1109" width="0.1239%" height="15" fill="rgb(215,68,47)" fg:x="15397" fg:w="33"/><text x="58.0748%" y="1119.50"></text></g><g><title>core::ptr::read (25 samples, 0.09%)</title><rect x="57.8548%" y="1093" width="0.0939%" height="15" fill="rgb(230,84,2)" fg:x="15405" fg:w="25"/><text x="58.1048%" y="1103.50"></text></g><g><title>__memmove_avx512_unaligned_erms (25 samples, 0.09%)</title><rect x="57.8548%" y="1077" width="0.0939%" height="15" fill="rgb(220,102,14)" fg:x="15405" fg:w="25"/><text x="58.1048%" y="1087.50"></text></g><g><title>_int_free_create_chunk (8 samples, 0.03%)</title><rect x="57.9712%" y="965" width="0.0300%" height="15" fill="rgb(240,10,32)" fg:x="15436" fg:w="8"/><text x="58.2212%" y="975.50"></text></g><g><title>unlink_chunk.isra.0 (5 samples, 0.02%)</title><rect x="57.9825%" y="949" width="0.0188%" height="15" fill="rgb(215,47,27)" fg:x="15439" fg:w="5"/><text x="58.2325%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeInput&gt;&gt; (18 samples, 0.07%)</title><rect x="57.9487%" y="1109" width="0.0676%" height="15" fill="rgb(233,188,43)" fg:x="15430" fg:w="18"/><text x="58.1987%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeInput&gt;&gt; (18 samples, 0.07%)</title><rect x="57.9487%" y="1093" width="0.0676%" height="15" fill="rgb(253,190,1)" fg:x="15430" fg:w="18"/><text x="58.1987%" y="1103.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.07%)</title><rect x="57.9487%" y="1077" width="0.0676%" height="15" fill="rgb(206,114,52)" fg:x="15430" fg:w="18"/><text x="58.1987%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.07%)</title><rect x="57.9487%" y="1061" width="0.0676%" height="15" fill="rgb(233,120,37)" fg:x="15430" fg:w="18"/><text x="58.1987%" y="1071.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.07%)</title><rect x="57.9487%" y="1045" width="0.0676%" height="15" fill="rgb(214,52,39)" fg:x="15430" fg:w="18"/><text x="58.1987%" y="1055.50"></text></g><g><title>__rdl_dealloc (18 samples, 0.07%)</title><rect x="57.9487%" y="1029" width="0.0676%" height="15" fill="rgb(223,80,29)" fg:x="15430" fg:w="18"/><text x="58.1987%" y="1039.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (18 samples, 0.07%)</title><rect x="57.9487%" y="1013" width="0.0676%" height="15" fill="rgb(230,101,40)" fg:x="15430" fg:w="18"/><text x="58.1987%" y="1023.50"></text></g><g><title>cfree@GLIBC_2.2.5 (18 samples, 0.07%)</title><rect x="57.9487%" y="997" width="0.0676%" height="15" fill="rgb(219,211,8)" fg:x="15430" fg:w="18"/><text x="58.1987%" y="1007.50"></text></g><g><title>_int_free_merge_chunk (13 samples, 0.05%)</title><rect x="57.9675%" y="981" width="0.0488%" height="15" fill="rgb(252,126,28)" fg:x="15435" fg:w="13"/><text x="58.2175%" y="991.50"></text></g><g><title>unlink_chunk.isra.0 (4 samples, 0.02%)</title><rect x="58.0013%" y="965" width="0.0150%" height="15" fill="rgb(215,56,38)" fg:x="15444" fg:w="4"/><text x="58.2513%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (636 samples, 2.39%)</title><rect x="55.6353%" y="1189" width="2.3886%" height="15" fill="rgb(249,55,44)" fg:x="14814" fg:w="636"/><text x="55.8853%" y="1199.50">&lt;c..</text></g><g><title>core::option::Option&lt;T&gt;::map (626 samples, 2.35%)</title><rect x="55.6728%" y="1173" width="2.3510%" height="15" fill="rgb(220,221,32)" fg:x="14824" fg:w="626"/><text x="55.9228%" y="1183.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (539 samples, 2.02%)</title><rect x="55.9995%" y="1157" width="2.0243%" height="15" fill="rgb(212,216,41)" fg:x="14911" fg:w="539"/><text x="56.2495%" y="1167.50">c..</text></g><g><title>graph_craft::document::NodeNetwork::into_proto_networks::_{{closure}} (539 samples, 2.02%)</title><rect x="55.9995%" y="1141" width="2.0243%" height="15" fill="rgb(228,213,43)" fg:x="14911" fg:w="539"/><text x="56.2495%" y="1151.50">g..</text></g><g><title>graph_craft::document::DocumentNode::resolve_proto_node (408 samples, 1.53%)</title><rect x="56.4915%" y="1125" width="1.5323%" height="15" fill="rgb(211,31,26)" fg:x="15042" fg:w="408"/><text x="56.7415%" y="1135.50"></text></g><g><title>__memmove_avx512_unaligned_erms (27 samples, 0.10%)</title><rect x="58.0238%" y="1189" width="0.1014%" height="15" fill="rgb(229,202,19)" fg:x="15450" fg:w="27"/><text x="58.2738%" y="1199.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (721 samples, 2.71%)</title><rect x="55.6277%" y="1221" width="2.7078%" height="15" fill="rgb(229,105,46)" fg:x="14812" fg:w="721"/><text x="55.8777%" y="1231.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (721 samples, 2.71%)</title><rect x="55.6277%" y="1205" width="2.7078%" height="15" fill="rgb(235,108,1)" fg:x="14812" fg:w="721"/><text x="55.8777%" y="1215.50">al..</text></g><g><title>core::ptr::write (55 samples, 0.21%)</title><rect x="58.1290%" y="1189" width="0.2066%" height="15" fill="rgb(245,111,35)" fg:x="15478" fg:w="55"/><text x="58.3790%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (55 samples, 0.21%)</title><rect x="58.1290%" y="1173" width="0.2066%" height="15" fill="rgb(219,185,31)" fg:x="15478" fg:w="55"/><text x="58.3790%" y="1183.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="58.3355%" y="1221" width="0.0113%" height="15" fill="rgb(214,4,43)" fg:x="15533" fg:w="3"/><text x="58.5855%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.04%)</title><rect x="58.3468%" y="1221" width="0.0413%" height="15" fill="rgb(235,227,40)" fg:x="15536" fg:w="11"/><text x="58.5968%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.04%)</title><rect x="58.3468%" y="1205" width="0.0413%" height="15" fill="rgb(230,88,30)" fg:x="15536" fg:w="11"/><text x="58.5968%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.04%)</title><rect x="58.3468%" y="1189" width="0.0413%" height="15" fill="rgb(216,217,1)" fg:x="15536" fg:w="11"/><text x="58.5968%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (11 samples, 0.04%)</title><rect x="58.3468%" y="1173" width="0.0413%" height="15" fill="rgb(248,139,50)" fg:x="15536" fg:w="11"/><text x="58.5968%" y="1183.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.04%)</title><rect x="58.3468%" y="1157" width="0.0413%" height="15" fill="rgb(233,1,21)" fg:x="15536" fg:w="11"/><text x="58.5968%" y="1167.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.04%)</title><rect x="58.3468%" y="1141" width="0.0413%" height="15" fill="rgb(215,183,12)" fg:x="15536" fg:w="11"/><text x="58.5968%" y="1151.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.04%)</title><rect x="58.3468%" y="1125" width="0.0413%" height="15" fill="rgb(229,104,42)" fg:x="15536" fg:w="11"/><text x="58.5968%" y="1135.50"></text></g><g><title>__rdl_alloc (11 samples, 0.04%)</title><rect x="58.3468%" y="1109" width="0.0413%" height="15" fill="rgb(243,34,48)" fg:x="15536" fg:w="11"/><text x="58.5968%" y="1119.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (11 samples, 0.04%)</title><rect x="58.3468%" y="1093" width="0.0413%" height="15" fill="rgb(239,11,44)" fg:x="15536" fg:w="11"/><text x="58.5968%" y="1103.50"></text></g><g><title>malloc (11 samples, 0.04%)</title><rect x="58.3468%" y="1077" width="0.0413%" height="15" fill="rgb(231,98,35)" fg:x="15536" fg:w="11"/><text x="58.5968%" y="1087.50"></text></g><g><title>_int_malloc (11 samples, 0.04%)</title><rect x="58.3468%" y="1061" width="0.0413%" height="15" fill="rgb(233,28,25)" fg:x="15536" fg:w="11"/><text x="58.5968%" y="1071.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (736 samples, 2.76%)</title><rect x="55.6277%" y="1285" width="2.7641%" height="15" fill="rgb(234,123,11)" fg:x="14812" fg:w="736"/><text x="55.8777%" y="1295.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (736 samples, 2.76%)</title><rect x="55.6277%" y="1269" width="2.7641%" height="15" fill="rgb(220,69,3)" fg:x="14812" fg:w="736"/><text x="55.8777%" y="1279.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (736 samples, 2.76%)</title><rect x="55.6277%" y="1253" width="2.7641%" height="15" fill="rgb(214,64,36)" fg:x="14812" fg:w="736"/><text x="55.8777%" y="1263.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (736 samples, 2.76%)</title><rect x="55.6277%" y="1237" width="2.7641%" height="15" fill="rgb(211,138,32)" fg:x="14812" fg:w="736"/><text x="55.8777%" y="1247.50">&lt;a..</text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (4 samples, 0.02%)</title><rect x="58.3919%" y="1237" width="0.0150%" height="15" fill="rgb(213,118,47)" fg:x="15548" fg:w="4"/><text x="58.6419%" y="1247.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (4 samples, 0.02%)</title><rect x="58.3919%" y="1221" width="0.0150%" height="15" fill="rgb(243,124,49)" fg:x="15548" fg:w="4"/><text x="58.6419%" y="1231.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_fallback (4 samples, 0.02%)</title><rect x="58.3919%" y="1205" width="0.0150%" height="15" fill="rgb(221,30,28)" fg:x="15548" fg:w="4"/><text x="58.6419%" y="1215.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (4 samples, 0.02%)</title><rect x="58.3919%" y="1189" width="0.0150%" height="15" fill="rgb(246,37,13)" fg:x="15548" fg:w="4"/><text x="58.6419%" y="1199.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (4 samples, 0.02%)</title><rect x="58.3919%" y="1173" width="0.0150%" height="15" fill="rgb(249,66,14)" fg:x="15548" fg:w="4"/><text x="58.6419%" y="1183.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (6 samples, 0.02%)</title><rect x="58.4069%" y="1221" width="0.0225%" height="15" fill="rgb(213,166,5)" fg:x="15552" fg:w="6"/><text x="58.6569%" y="1231.50"></text></g><g><title>core::ptr::swap (6 samples, 0.02%)</title><rect x="58.4069%" y="1205" width="0.0225%" height="15" fill="rgb(221,66,24)" fg:x="15552" fg:w="6"/><text x="58.6569%" y="1215.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.02%)</title><rect x="58.4144%" y="1189" width="0.0150%" height="15" fill="rgb(210,132,17)" fg:x="15554" fg:w="4"/><text x="58.6644%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="58.4144%" y="1173" width="0.0150%" height="15" fill="rgb(243,202,5)" fg:x="15554" fg:w="4"/><text x="58.6644%" y="1183.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.12%)</title><rect x="58.4632%" y="1205" width="0.1164%" height="15" fill="rgb(233,70,48)" fg:x="15567" fg:w="31"/><text x="58.7132%" y="1215.50"></text></g><g><title>__memmove_avx512_unaligned_erms (29 samples, 0.11%)</title><rect x="58.4707%" y="1189" width="0.1089%" height="15" fill="rgb(238,41,26)" fg:x="15569" fg:w="29"/><text x="58.7207%" y="1199.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (51 samples, 0.19%)</title><rect x="58.4069%" y="1237" width="0.1915%" height="15" fill="rgb(241,19,31)" fg:x="15552" fg:w="51"/><text x="58.6569%" y="1247.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_hoare_branchy_cyclic (45 samples, 0.17%)</title><rect x="58.4294%" y="1221" width="0.1690%" height="15" fill="rgb(214,76,10)" fg:x="15558" fg:w="45"/><text x="58.6794%" y="1231.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (5 samples, 0.02%)</title><rect x="58.5796%" y="1205" width="0.0188%" height="15" fill="rgb(254,202,22)" fg:x="15598" fg:w="5"/><text x="58.8296%" y="1215.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (5 samples, 0.02%)</title><rect x="58.5796%" y="1189" width="0.0188%" height="15" fill="rgb(214,72,24)" fg:x="15598" fg:w="5"/><text x="58.8296%" y="1199.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.07%)</title><rect x="58.6022%" y="1141" width="0.0676%" height="15" fill="rgb(221,92,46)" fg:x="15604" fg:w="18"/><text x="58.8522%" y="1151.50"></text></g><g><title>__memmove_avx512_unaligned_erms (18 samples, 0.07%)</title><rect x="58.6022%" y="1125" width="0.0676%" height="15" fill="rgb(246,13,50)" fg:x="15604" fg:w="18"/><text x="58.8522%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (3 samples, 0.01%)</title><rect x="58.6698%" y="1141" width="0.0113%" height="15" fill="rgb(240,165,38)" fg:x="15622" fg:w="3"/><text x="58.9198%" y="1151.50"></text></g><g><title>&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="58.6698%" y="1125" width="0.0113%" height="15" fill="rgb(241,24,51)" fg:x="15622" fg:w="3"/><text x="58.9198%" y="1135.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="58.6698%" y="1109" width="0.0113%" height="15" fill="rgb(227,51,44)" fg:x="15622" fg:w="3"/><text x="58.9198%" y="1119.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="58.6698%" y="1093" width="0.0113%" height="15" fill="rgb(231,121,3)" fg:x="15622" fg:w="3"/><text x="58.9198%" y="1103.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (23 samples, 0.09%)</title><rect x="58.5984%" y="1221" width="0.0864%" height="15" fill="rgb(245,3,41)" fg:x="15603" fg:w="23"/><text x="58.8484%" y="1231.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (23 samples, 0.09%)</title><rect x="58.5984%" y="1205" width="0.0864%" height="15" fill="rgb(214,13,26)" fg:x="15603" fg:w="23"/><text x="58.8484%" y="1215.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_fallback (23 samples, 0.09%)</title><rect x="58.5984%" y="1189" width="0.0864%" height="15" fill="rgb(252,75,11)" fg:x="15603" fg:w="23"/><text x="58.8484%" y="1199.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (23 samples, 0.09%)</title><rect x="58.5984%" y="1173" width="0.0864%" height="15" fill="rgb(218,226,17)" fg:x="15603" fg:w="23"/><text x="58.8484%" y="1183.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (23 samples, 0.09%)</title><rect x="58.5984%" y="1157" width="0.0864%" height="15" fill="rgb(248,89,38)" fg:x="15603" fg:w="23"/><text x="58.8484%" y="1167.50"></text></g><g><title>core::intrinsics::copy (3 samples, 0.01%)</title><rect x="58.6885%" y="1173" width="0.0113%" height="15" fill="rgb(237,73,46)" fg:x="15627" fg:w="3"/><text x="58.9385%" y="1183.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="58.6885%" y="1157" width="0.0113%" height="15" fill="rgb(242,78,33)" fg:x="15627" fg:w="3"/><text x="58.9385%" y="1167.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (6 samples, 0.02%)</title><rect x="58.6885%" y="1205" width="0.0225%" height="15" fill="rgb(235,60,3)" fg:x="15627" fg:w="6"/><text x="58.9385%" y="1215.50"></text></g><g><title>core::ptr::swap (6 samples, 0.02%)</title><rect x="58.6885%" y="1189" width="0.0225%" height="15" fill="rgb(216,172,19)" fg:x="15627" fg:w="6"/><text x="58.9385%" y="1199.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="58.6998%" y="1173" width="0.0113%" height="15" fill="rgb(227,6,42)" fg:x="15630" fg:w="3"/><text x="58.9498%" y="1183.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="58.6998%" y="1157" width="0.0113%" height="15" fill="rgb(223,207,42)" fg:x="15630" fg:w="3"/><text x="58.9498%" y="1167.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (51 samples, 0.19%)</title><rect x="58.6885%" y="1221" width="0.1915%" height="15" fill="rgb(246,138,30)" fg:x="15627" fg:w="51"/><text x="58.9385%" y="1231.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_hoare_branchy_cyclic (45 samples, 0.17%)</title><rect x="58.7111%" y="1205" width="0.1690%" height="15" fill="rgb(251,199,47)" fg:x="15633" fg:w="45"/><text x="58.9611%" y="1215.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 0.14%)</title><rect x="58.7411%" y="1189" width="0.1390%" height="15" fill="rgb(228,218,44)" fg:x="15641" fg:w="37"/><text x="58.9911%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (37 samples, 0.14%)</title><rect x="58.7411%" y="1173" width="0.1390%" height="15" fill="rgb(220,68,6)" fg:x="15641" fg:w="37"/><text x="58.9911%" y="1183.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.05%)</title><rect x="58.8838%" y="1125" width="0.0451%" height="15" fill="rgb(240,60,26)" fg:x="15679" fg:w="12"/><text x="59.1338%" y="1135.50"></text></g><g><title>__memmove_avx512_unaligned_erms (12 samples, 0.05%)</title><rect x="58.8838%" y="1109" width="0.0451%" height="15" fill="rgb(211,200,19)" fg:x="15679" fg:w="12"/><text x="59.1338%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (8 samples, 0.03%)</title><rect x="58.9289%" y="1125" width="0.0300%" height="15" fill="rgb(242,145,30)" fg:x="15691" fg:w="8"/><text x="59.1789%" y="1135.50"></text></g><g><title>&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.03%)</title><rect x="58.9289%" y="1109" width="0.0300%" height="15" fill="rgb(225,64,13)" fg:x="15691" fg:w="8"/><text x="59.1789%" y="1119.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.03%)</title><rect x="58.9289%" y="1093" width="0.0300%" height="15" fill="rgb(218,103,35)" fg:x="15691" fg:w="8"/><text x="59.1789%" y="1103.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="58.9402%" y="1077" width="0.0188%" height="15" fill="rgb(216,93,46)" fg:x="15694" fg:w="5"/><text x="59.1902%" y="1087.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (3 samples, 0.01%)</title><rect x="58.9590%" y="1125" width="0.0113%" height="15" fill="rgb(225,159,27)" fg:x="15699" fg:w="3"/><text x="59.2090%" y="1135.50"></text></g><g><title>core::ptr::read (3 samples, 0.01%)</title><rect x="58.9590%" y="1109" width="0.0113%" height="15" fill="rgb(225,204,11)" fg:x="15699" fg:w="3"/><text x="59.2090%" y="1119.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="58.9590%" y="1093" width="0.0113%" height="15" fill="rgb(205,56,4)" fg:x="15699" fg:w="3"/><text x="59.2090%" y="1103.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (24 samples, 0.09%)</title><rect x="58.8838%" y="1205" width="0.0901%" height="15" fill="rgb(206,6,35)" fg:x="15679" fg:w="24"/><text x="59.1338%" y="1215.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (24 samples, 0.09%)</title><rect x="58.8838%" y="1189" width="0.0901%" height="15" fill="rgb(247,73,52)" fg:x="15679" fg:w="24"/><text x="59.1338%" y="1199.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_fallback (24 samples, 0.09%)</title><rect x="58.8838%" y="1173" width="0.0901%" height="15" fill="rgb(246,97,4)" fg:x="15679" fg:w="24"/><text x="59.1338%" y="1183.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (24 samples, 0.09%)</title><rect x="58.8838%" y="1157" width="0.0901%" height="15" fill="rgb(212,37,15)" fg:x="15679" fg:w="24"/><text x="59.1338%" y="1167.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (24 samples, 0.09%)</title><rect x="58.8838%" y="1141" width="0.0901%" height="15" fill="rgb(208,130,40)" fg:x="15679" fg:w="24"/><text x="59.1338%" y="1151.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (10 samples, 0.04%)</title><rect x="58.9740%" y="1189" width="0.0376%" height="15" fill="rgb(236,55,29)" fg:x="15703" fg:w="10"/><text x="59.2240%" y="1199.50"></text></g><g><title>core::ptr::swap (10 samples, 0.04%)</title><rect x="58.9740%" y="1173" width="0.0376%" height="15" fill="rgb(209,156,45)" fg:x="15703" fg:w="10"/><text x="59.2240%" y="1183.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.04%)</title><rect x="58.9740%" y="1157" width="0.0376%" height="15" fill="rgb(249,107,4)" fg:x="15703" fg:w="10"/><text x="59.2240%" y="1167.50"></text></g><g><title>__memmove_avx512_unaligned_erms (10 samples, 0.04%)</title><rect x="58.9740%" y="1141" width="0.0376%" height="15" fill="rgb(227,7,13)" fg:x="15703" fg:w="10"/><text x="59.2240%" y="1151.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.09%)</title><rect x="59.0453%" y="1173" width="0.0864%" height="15" fill="rgb(250,129,14)" fg:x="15722" fg:w="23"/><text x="59.2953%" y="1183.50"></text></g><g><title>__memmove_avx512_unaligned_erms (21 samples, 0.08%)</title><rect x="59.0528%" y="1157" width="0.0789%" height="15" fill="rgb(229,92,13)" fg:x="15724" fg:w="21"/><text x="59.3028%" y="1167.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (3 samples, 0.01%)</title><rect x="59.1317%" y="1173" width="0.0113%" height="15" fill="rgb(245,98,39)" fg:x="15745" fg:w="3"/><text x="59.3817%" y="1183.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="59.1317%" y="1157" width="0.0113%" height="15" fill="rgb(234,135,48)" fg:x="15745" fg:w="3"/><text x="59.3817%" y="1167.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (48 samples, 0.18%)</title><rect x="58.9740%" y="1205" width="0.1803%" height="15" fill="rgb(230,98,28)" fg:x="15703" fg:w="48"/><text x="59.2240%" y="1215.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_hoare_branchy_cyclic (38 samples, 0.14%)</title><rect x="59.0115%" y="1189" width="0.1427%" height="15" fill="rgb(223,121,0)" fg:x="15713" fg:w="38"/><text x="59.2615%" y="1199.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.06%)</title><rect x="59.1542%" y="1109" width="0.0638%" height="15" fill="rgb(234,173,33)" fg:x="15751" fg:w="17"/><text x="59.4042%" y="1119.50"></text></g><g><title>__memmove_avx512_unaligned_erms (15 samples, 0.06%)</title><rect x="59.1618%" y="1093" width="0.0563%" height="15" fill="rgb(245,47,8)" fg:x="15753" fg:w="15"/><text x="59.4118%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (8 samples, 0.03%)</title><rect x="59.2181%" y="1109" width="0.0300%" height="15" fill="rgb(205,17,20)" fg:x="15768" fg:w="8"/><text x="59.4681%" y="1119.50"></text></g><g><title>&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.03%)</title><rect x="59.2181%" y="1093" width="0.0300%" height="15" fill="rgb(232,151,16)" fg:x="15768" fg:w="8"/><text x="59.4681%" y="1103.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.03%)</title><rect x="59.2181%" y="1077" width="0.0300%" height="15" fill="rgb(208,30,32)" fg:x="15768" fg:w="8"/><text x="59.4681%" y="1087.50"></text></g><g><title>__memmove_avx512_unaligned_erms (8 samples, 0.03%)</title><rect x="59.2181%" y="1061" width="0.0300%" height="15" fill="rgb(254,26,3)" fg:x="15768" fg:w="8"/><text x="59.4681%" y="1071.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (13 samples, 0.05%)</title><rect x="59.2481%" y="1109" width="0.0488%" height="15" fill="rgb(240,177,30)" fg:x="15776" fg:w="13"/><text x="59.4981%" y="1119.50"></text></g><g><title>core::ptr::read (13 samples, 0.05%)</title><rect x="59.2481%" y="1093" width="0.0488%" height="15" fill="rgb(248,76,44)" fg:x="15776" fg:w="13"/><text x="59.4981%" y="1103.50"></text></g><g><title>__memmove_avx512_unaligned_erms (13 samples, 0.05%)</title><rect x="59.2481%" y="1077" width="0.0488%" height="15" fill="rgb(241,186,54)" fg:x="15776" fg:w="13"/><text x="59.4981%" y="1087.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (39 samples, 0.15%)</title><rect x="59.1542%" y="1189" width="0.1465%" height="15" fill="rgb(249,171,29)" fg:x="15751" fg:w="39"/><text x="59.4042%" y="1199.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (39 samples, 0.15%)</title><rect x="59.1542%" y="1173" width="0.1465%" height="15" fill="rgb(237,151,44)" fg:x="15751" fg:w="39"/><text x="59.4042%" y="1183.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_fallback (39 samples, 0.15%)</title><rect x="59.1542%" y="1157" width="0.1465%" height="15" fill="rgb(228,174,30)" fg:x="15751" fg:w="39"/><text x="59.4042%" y="1167.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (39 samples, 0.15%)</title><rect x="59.1542%" y="1141" width="0.1465%" height="15" fill="rgb(252,14,37)" fg:x="15751" fg:w="39"/><text x="59.4042%" y="1151.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (39 samples, 0.15%)</title><rect x="59.1542%" y="1125" width="0.1465%" height="15" fill="rgb(207,111,40)" fg:x="15751" fg:w="39"/><text x="59.4042%" y="1135.50"></text></g><g><title>core::intrinsics::copy (3 samples, 0.01%)</title><rect x="59.3007%" y="1141" width="0.0113%" height="15" fill="rgb(248,171,54)" fg:x="15790" fg:w="3"/><text x="59.5507%" y="1151.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="59.3007%" y="1125" width="0.0113%" height="15" fill="rgb(211,127,2)" fg:x="15790" fg:w="3"/><text x="59.5507%" y="1135.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (4 samples, 0.02%)</title><rect x="59.3007%" y="1173" width="0.0150%" height="15" fill="rgb(236,87,47)" fg:x="15790" fg:w="4"/><text x="59.5507%" y="1183.50"></text></g><g><title>core::ptr::swap (4 samples, 0.02%)</title><rect x="59.3007%" y="1157" width="0.0150%" height="15" fill="rgb(223,190,45)" fg:x="15790" fg:w="4"/><text x="59.5507%" y="1167.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.05%)</title><rect x="59.3232%" y="1157" width="0.0451%" height="15" fill="rgb(215,5,16)" fg:x="15796" fg:w="12"/><text x="59.5732%" y="1167.50"></text></g><g><title>__memmove_avx512_unaligned_erms (12 samples, 0.05%)</title><rect x="59.3232%" y="1141" width="0.0451%" height="15" fill="rgb(252,82,33)" fg:x="15796" fg:w="12"/><text x="59.5732%" y="1151.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (22 samples, 0.08%)</title><rect x="59.3007%" y="1189" width="0.0826%" height="15" fill="rgb(247,213,44)" fg:x="15790" fg:w="22"/><text x="59.5507%" y="1199.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_hoare_branchy_cyclic (18 samples, 0.07%)</title><rect x="59.3157%" y="1173" width="0.0676%" height="15" fill="rgb(205,196,44)" fg:x="15794" fg:w="18"/><text x="59.5657%" y="1183.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.07%)</title><rect x="59.3833%" y="1093" width="0.0714%" height="15" fill="rgb(237,96,54)" fg:x="15812" fg:w="19"/><text x="59.6333%" y="1103.50"></text></g><g><title>__memmove_avx512_unaligned_erms (18 samples, 0.07%)</title><rect x="59.3871%" y="1077" width="0.0676%" height="15" fill="rgb(230,113,34)" fg:x="15813" fg:w="18"/><text x="59.6371%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (8 samples, 0.03%)</title><rect x="59.4547%" y="1093" width="0.0300%" height="15" fill="rgb(221,224,12)" fg:x="15831" fg:w="8"/><text x="59.7047%" y="1103.50"></text></g><g><title>&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.03%)</title><rect x="59.4547%" y="1077" width="0.0300%" height="15" fill="rgb(219,112,44)" fg:x="15831" fg:w="8"/><text x="59.7047%" y="1087.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.03%)</title><rect x="59.4547%" y="1061" width="0.0300%" height="15" fill="rgb(210,31,13)" fg:x="15831" fg:w="8"/><text x="59.7047%" y="1071.50"></text></g><g><title>__memmove_avx512_unaligned_erms (8 samples, 0.03%)</title><rect x="59.4547%" y="1045" width="0.0300%" height="15" fill="rgb(230,25,16)" fg:x="15831" fg:w="8"/><text x="59.7047%" y="1055.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (30 samples, 0.11%)</title><rect x="59.3833%" y="1173" width="0.1127%" height="15" fill="rgb(246,108,53)" fg:x="15812" fg:w="30"/><text x="59.6333%" y="1183.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (30 samples, 0.11%)</title><rect x="59.3833%" y="1157" width="0.1127%" height="15" fill="rgb(241,172,50)" fg:x="15812" fg:w="30"/><text x="59.6333%" y="1167.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_fallback (30 samples, 0.11%)</title><rect x="59.3833%" y="1141" width="0.1127%" height="15" fill="rgb(235,141,10)" fg:x="15812" fg:w="30"/><text x="59.6333%" y="1151.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (30 samples, 0.11%)</title><rect x="59.3833%" y="1125" width="0.1127%" height="15" fill="rgb(220,174,43)" fg:x="15812" fg:w="30"/><text x="59.6333%" y="1135.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (30 samples, 0.11%)</title><rect x="59.3833%" y="1109" width="0.1127%" height="15" fill="rgb(215,181,40)" fg:x="15812" fg:w="30"/><text x="59.6333%" y="1119.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (3 samples, 0.01%)</title><rect x="59.4847%" y="1093" width="0.0113%" height="15" fill="rgb(230,97,2)" fg:x="15839" fg:w="3"/><text x="59.7347%" y="1103.50"></text></g><g><title>core::ptr::read (3 samples, 0.01%)</title><rect x="59.4847%" y="1077" width="0.0113%" height="15" fill="rgb(211,25,27)" fg:x="15839" fg:w="3"/><text x="59.7347%" y="1087.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="59.4847%" y="1061" width="0.0113%" height="15" fill="rgb(230,87,26)" fg:x="15839" fg:w="3"/><text x="59.7347%" y="1071.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (7 samples, 0.03%)</title><rect x="59.4960%" y="1173" width="0.0263%" height="15" fill="rgb(227,160,17)" fg:x="15842" fg:w="7"/><text x="59.7460%" y="1183.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_hoare_branchy_cyclic (6 samples, 0.02%)</title><rect x="59.4998%" y="1157" width="0.0225%" height="15" fill="rgb(244,85,34)" fg:x="15843" fg:w="6"/><text x="59.7498%" y="1167.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.02%)</title><rect x="59.4998%" y="1141" width="0.0225%" height="15" fill="rgb(207,70,0)" fg:x="15843" fg:w="6"/><text x="59.7498%" y="1151.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="59.5035%" y="1125" width="0.0188%" height="15" fill="rgb(223,129,7)" fg:x="15844" fg:w="5"/><text x="59.7535%" y="1135.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.03%)</title><rect x="59.5260%" y="1077" width="0.0263%" height="15" fill="rgb(246,105,7)" fg:x="15850" fg:w="7"/><text x="59.7760%" y="1087.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="59.5336%" y="1061" width="0.0188%" height="15" fill="rgb(215,154,42)" fg:x="15852" fg:w="5"/><text x="59.7836%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (3 samples, 0.01%)</title><rect x="59.5523%" y="1077" width="0.0113%" height="15" fill="rgb(220,215,30)" fg:x="15857" fg:w="3"/><text x="59.8023%" y="1087.50"></text></g><g><title>&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="59.5523%" y="1061" width="0.0113%" height="15" fill="rgb(228,81,51)" fg:x="15857" fg:w="3"/><text x="59.8023%" y="1071.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="59.5523%" y="1045" width="0.0113%" height="15" fill="rgb(247,71,54)" fg:x="15857" fg:w="3"/><text x="59.8023%" y="1055.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="59.5523%" y="1029" width="0.0113%" height="15" fill="rgb(234,176,34)" fg:x="15857" fg:w="3"/><text x="59.8023%" y="1039.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (12 samples, 0.05%)</title><rect x="59.5260%" y="1157" width="0.0451%" height="15" fill="rgb(241,103,54)" fg:x="15850" fg:w="12"/><text x="59.7760%" y="1167.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (12 samples, 0.05%)</title><rect x="59.5260%" y="1141" width="0.0451%" height="15" fill="rgb(228,22,34)" fg:x="15850" fg:w="12"/><text x="59.7760%" y="1151.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_fallback (12 samples, 0.05%)</title><rect x="59.5260%" y="1125" width="0.0451%" height="15" fill="rgb(241,179,48)" fg:x="15850" fg:w="12"/><text x="59.7760%" y="1135.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (12 samples, 0.05%)</title><rect x="59.5260%" y="1109" width="0.0451%" height="15" fill="rgb(235,167,37)" fg:x="15850" fg:w="12"/><text x="59.7760%" y="1119.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (12 samples, 0.05%)</title><rect x="59.5260%" y="1093" width="0.0451%" height="15" fill="rgb(213,109,30)" fg:x="15850" fg:w="12"/><text x="59.7760%" y="1103.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (4 samples, 0.02%)</title><rect x="59.5711%" y="1157" width="0.0150%" height="15" fill="rgb(222,172,16)" fg:x="15862" fg:w="4"/><text x="59.8211%" y="1167.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_hoare_branchy_cyclic (4 samples, 0.02%)</title><rect x="59.5711%" y="1141" width="0.0150%" height="15" fill="rgb(233,192,5)" fg:x="15862" fg:w="4"/><text x="59.8211%" y="1151.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.02%)</title><rect x="59.5711%" y="1125" width="0.0150%" height="15" fill="rgb(247,189,41)" fg:x="15862" fg:w="4"/><text x="59.8211%" y="1135.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="59.5711%" y="1109" width="0.0150%" height="15" fill="rgb(218,134,47)" fg:x="15862" fg:w="4"/><text x="59.8211%" y="1119.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.02%)</title><rect x="59.5861%" y="1061" width="0.0150%" height="15" fill="rgb(216,29,3)" fg:x="15866" fg:w="4"/><text x="59.8361%" y="1071.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="59.5861%" y="1045" width="0.0150%" height="15" fill="rgb(246,140,12)" fg:x="15866" fg:w="4"/><text x="59.8361%" y="1055.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (6 samples, 0.02%)</title><rect x="59.5861%" y="1141" width="0.0225%" height="15" fill="rgb(230,136,11)" fg:x="15866" fg:w="6"/><text x="59.8361%" y="1151.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (6 samples, 0.02%)</title><rect x="59.5861%" y="1125" width="0.0225%" height="15" fill="rgb(247,22,47)" fg:x="15866" fg:w="6"/><text x="59.8361%" y="1135.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_fallback (6 samples, 0.02%)</title><rect x="59.5861%" y="1109" width="0.0225%" height="15" fill="rgb(218,84,22)" fg:x="15866" fg:w="6"/><text x="59.8361%" y="1119.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (6 samples, 0.02%)</title><rect x="59.5861%" y="1093" width="0.0225%" height="15" fill="rgb(216,87,39)" fg:x="15866" fg:w="6"/><text x="59.8361%" y="1103.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (6 samples, 0.02%)</title><rect x="59.5861%" y="1077" width="0.0225%" height="15" fill="rgb(221,178,8)" fg:x="15866" fg:w="6"/><text x="59.8361%" y="1087.50"></text></g><g><title>graph_craft::document::NodeNetwork::into_proto_networks (1,062 samples, 3.99%)</title><rect x="55.6277%" y="1301" width="3.9884%" height="15" fill="rgb(230,42,11)" fg:x="14812" fg:w="1062"/><text x="55.8777%" y="1311.50">grap..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (326 samples, 1.22%)</title><rect x="58.3919%" y="1285" width="1.2243%" height="15" fill="rgb(237,229,4)" fg:x="15548" fg:w="326"/><text x="58.6419%" y="1295.50"></text></g><g><title>core::slice::sort::unstable::sort (326 samples, 1.22%)</title><rect x="58.3919%" y="1269" width="1.2243%" height="15" fill="rgb(222,31,33)" fg:x="15548" fg:w="326"/><text x="58.6419%" y="1279.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (326 samples, 1.22%)</title><rect x="58.3919%" y="1253" width="1.2243%" height="15" fill="rgb(210,17,39)" fg:x="15548" fg:w="326"/><text x="58.6419%" y="1263.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (271 samples, 1.02%)</title><rect x="58.5984%" y="1237" width="1.0178%" height="15" fill="rgb(244,93,20)" fg:x="15603" fg:w="271"/><text x="58.8484%" y="1247.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (196 samples, 0.74%)</title><rect x="58.8801%" y="1221" width="0.7361%" height="15" fill="rgb(210,40,47)" fg:x="15678" fg:w="196"/><text x="59.1301%" y="1231.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (123 samples, 0.46%)</title><rect x="59.1542%" y="1205" width="0.4619%" height="15" fill="rgb(239,211,47)" fg:x="15751" fg:w="123"/><text x="59.4042%" y="1215.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (62 samples, 0.23%)</title><rect x="59.3833%" y="1189" width="0.2328%" height="15" fill="rgb(251,223,49)" fg:x="15812" fg:w="62"/><text x="59.6333%" y="1199.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (25 samples, 0.09%)</title><rect x="59.5223%" y="1173" width="0.0939%" height="15" fill="rgb(221,149,5)" fg:x="15849" fg:w="25"/><text x="59.7723%" y="1183.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (8 samples, 0.03%)</title><rect x="59.5861%" y="1157" width="0.0300%" height="15" fill="rgb(219,224,51)" fg:x="15866" fg:w="8"/><text x="59.8361%" y="1167.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="59.6800%" y="1205" width="0.0338%" height="15" fill="rgb(223,7,8)" fg:x="15891" fg:w="9"/><text x="59.9300%" y="1215.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (9 samples, 0.03%)</title><rect x="59.6800%" y="1189" width="0.0338%" height="15" fill="rgb(241,217,22)" fg:x="15891" fg:w="9"/><text x="59.9300%" y="1199.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (7 samples, 0.03%)</title><rect x="59.6875%" y="1173" width="0.0263%" height="15" fill="rgb(248,209,0)" fg:x="15893" fg:w="7"/><text x="59.9375%" y="1183.50"></text></g><g><title>graph_craft::document::NodeNetwork::remove_dead_nodes::_{{closure}} (7 samples, 0.03%)</title><rect x="59.6875%" y="1157" width="0.0263%" height="15" fill="rgb(217,205,4)" fg:x="15893" fg:w="7"/><text x="59.9375%" y="1167.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.04%)</title><rect x="59.6800%" y="1221" width="0.0413%" height="15" fill="rgb(228,124,39)" fg:x="15891" fg:w="11"/><text x="59.9300%" y="1231.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.01%)</title><rect x="59.7251%" y="1141" width="0.0113%" height="15" fill="rgb(250,116,42)" fg:x="15903" fg:w="3"/><text x="59.9751%" y="1151.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.01%)</title><rect x="59.7251%" y="1125" width="0.0113%" height="15" fill="rgb(223,202,9)" fg:x="15903" fg:w="3"/><text x="59.9751%" y="1135.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.01%)</title><rect x="59.7251%" y="1109" width="0.0113%" height="15" fill="rgb(242,222,40)" fg:x="15903" fg:w="3"/><text x="59.9751%" y="1119.50"></text></g><g><title>__rdl_realloc (3 samples, 0.01%)</title><rect x="59.7251%" y="1093" width="0.0113%" height="15" fill="rgb(229,99,46)" fg:x="15903" fg:w="3"/><text x="59.9751%" y="1103.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.01%)</title><rect x="59.7251%" y="1077" width="0.0113%" height="15" fill="rgb(225,56,46)" fg:x="15903" fg:w="3"/><text x="59.9751%" y="1087.50"></text></g><g><title>realloc (3 samples, 0.01%)</title><rect x="59.7251%" y="1061" width="0.0113%" height="15" fill="rgb(227,94,5)" fg:x="15903" fg:w="3"/><text x="59.9751%" y="1071.50"></text></g><g><title>_int_realloc (3 samples, 0.01%)</title><rect x="59.7251%" y="1045" width="0.0113%" height="15" fill="rgb(205,112,38)" fg:x="15903" fg:w="3"/><text x="59.9751%" y="1055.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="59.7251%" y="1029" width="0.0113%" height="15" fill="rgb(231,133,46)" fg:x="15903" fg:w="3"/><text x="59.9751%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (16 samples, 0.06%)</title><rect x="59.6800%" y="1285" width="0.0601%" height="15" fill="rgb(217,16,9)" fg:x="15891" fg:w="16"/><text x="59.9300%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (16 samples, 0.06%)</title><rect x="59.6800%" y="1269" width="0.0601%" height="15" fill="rgb(249,173,9)" fg:x="15891" fg:w="16"/><text x="59.9300%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16 samples, 0.06%)</title><rect x="59.6800%" y="1253" width="0.0601%" height="15" fill="rgb(205,163,53)" fg:x="15891" fg:w="16"/><text x="59.9300%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (16 samples, 0.06%)</title><rect x="59.6800%" y="1237" width="0.0601%" height="15" fill="rgb(217,54,41)" fg:x="15891" fg:w="16"/><text x="59.9300%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.02%)</title><rect x="59.7213%" y="1221" width="0.0188%" height="15" fill="rgb(228,216,12)" fg:x="15902" fg:w="5"/><text x="59.9713%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.02%)</title><rect x="59.7213%" y="1205" width="0.0188%" height="15" fill="rgb(244,228,15)" fg:x="15902" fg:w="5"/><text x="59.9713%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.02%)</title><rect x="59.7213%" y="1189" width="0.0188%" height="15" fill="rgb(221,176,53)" fg:x="15902" fg:w="5"/><text x="59.9713%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.02%)</title><rect x="59.7251%" y="1173" width="0.0150%" height="15" fill="rgb(205,94,34)" fg:x="15903" fg:w="4"/><text x="59.9751%" y="1183.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.02%)</title><rect x="59.7251%" y="1157" width="0.0150%" height="15" fill="rgb(213,110,48)" fg:x="15903" fg:w="4"/><text x="59.9751%" y="1167.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="59.7439%" y="1285" width="0.0150%" height="15" fill="rgb(236,142,28)" fg:x="15908" fg:w="4"/><text x="59.9939%" y="1295.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="59.7439%" y="1269" width="0.0150%" height="15" fill="rgb(225,135,29)" fg:x="15908" fg:w="4"/><text x="59.9939%" y="1279.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="59.7439%" y="1253" width="0.0150%" height="15" fill="rgb(252,45,31)" fg:x="15908" fg:w="4"/><text x="59.9939%" y="1263.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (4 samples, 0.02%)</title><rect x="59.7439%" y="1237" width="0.0150%" height="15" fill="rgb(211,187,50)" fg:x="15908" fg:w="4"/><text x="59.9939%" y="1247.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="59.7439%" y="1221" width="0.0150%" height="15" fill="rgb(229,109,7)" fg:x="15908" fg:w="4"/><text x="59.9939%" y="1231.50"></text></g><g><title>__memmove_avx512_unaligned_erms (122 samples, 0.46%)</title><rect x="59.7589%" y="1285" width="0.4582%" height="15" fill="rgb(251,131,51)" fg:x="15912" fg:w="122"/><text x="60.0089%" y="1295.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.01%)</title><rect x="60.2171%" y="1285" width="0.0113%" height="15" fill="rgb(251,180,35)" fg:x="16034" fg:w="3"/><text x="60.4671%" y="1295.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="60.2396%" y="1189" width="0.0113%" height="15" fill="rgb(211,46,32)" fg:x="16040" fg:w="3"/><text x="60.4896%" y="1199.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3 samples, 0.01%)</title><rect x="60.2396%" y="1173" width="0.0113%" height="15" fill="rgb(248,123,17)" fg:x="16040" fg:w="3"/><text x="60.4896%" y="1183.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.02%)</title><rect x="60.2584%" y="1077" width="0.0150%" height="15" fill="rgb(227,141,18)" fg:x="16045" fg:w="4"/><text x="60.5084%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::NodeInput&gt; (3 samples, 0.01%)</title><rect x="60.2734%" y="1077" width="0.0113%" height="15" fill="rgb(216,102,9)" fg:x="16049" fg:w="3"/><text x="60.5234%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.05%)</title><rect x="60.2509%" y="1109" width="0.0451%" height="15" fill="rgb(253,47,13)" fg:x="16043" fg:w="12"/><text x="60.5009%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;[graph_craft::document::NodeInput]&gt; (10 samples, 0.04%)</title><rect x="60.2584%" y="1093" width="0.0376%" height="15" fill="rgb(226,93,23)" fg:x="16045" fg:w="10"/><text x="60.5084%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::value::TaggedValue&gt; (3 samples, 0.01%)</title><rect x="60.2847%" y="1077" width="0.0113%" height="15" fill="rgb(247,104,17)" fg:x="16052" fg:w="3"/><text x="60.5347%" y="1087.50"></text></g><g><title>_int_free_create_chunk (6 samples, 0.02%)</title><rect x="60.2959%" y="981" width="0.0225%" height="15" fill="rgb(233,203,26)" fg:x="16055" fg:w="6"/><text x="60.5459%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeInput&gt;&gt; (20 samples, 0.08%)</title><rect x="60.2509%" y="1125" width="0.0751%" height="15" fill="rgb(244,98,49)" fg:x="16043" fg:w="20"/><text x="60.5009%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeInput&gt;&gt; (8 samples, 0.03%)</title><rect x="60.2959%" y="1109" width="0.0300%" height="15" fill="rgb(235,134,22)" fg:x="16055" fg:w="8"/><text x="60.5459%" y="1119.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.03%)</title><rect x="60.2959%" y="1093" width="0.0300%" height="15" fill="rgb(221,70,32)" fg:x="16055" fg:w="8"/><text x="60.5459%" y="1103.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.03%)</title><rect x="60.2959%" y="1077" width="0.0300%" height="15" fill="rgb(238,15,50)" fg:x="16055" fg:w="8"/><text x="60.5459%" y="1087.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.03%)</title><rect x="60.2959%" y="1061" width="0.0300%" height="15" fill="rgb(215,221,48)" fg:x="16055" fg:w="8"/><text x="60.5459%" y="1071.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.03%)</title><rect x="60.2959%" y="1045" width="0.0300%" height="15" fill="rgb(236,73,3)" fg:x="16055" fg:w="8"/><text x="60.5459%" y="1055.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.03%)</title><rect x="60.2959%" y="1029" width="0.0300%" height="15" fill="rgb(250,107,11)" fg:x="16055" fg:w="8"/><text x="60.5459%" y="1039.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 0.03%)</title><rect x="60.2959%" y="1013" width="0.0300%" height="15" fill="rgb(242,39,14)" fg:x="16055" fg:w="8"/><text x="60.5459%" y="1023.50"></text></g><g><title>_int_free_merge_chunk (8 samples, 0.03%)</title><rect x="60.2959%" y="997" width="0.0300%" height="15" fill="rgb(248,164,37)" fg:x="16055" fg:w="8"/><text x="60.5459%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (24 samples, 0.09%)</title><rect x="60.2396%" y="1205" width="0.0901%" height="15" fill="rgb(217,60,12)" fg:x="16040" fg:w="24"/><text x="60.4896%" y="1215.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (21 samples, 0.08%)</title><rect x="60.2509%" y="1189" width="0.0789%" height="15" fill="rgb(240,125,29)" fg:x="16043" fg:w="21"/><text x="60.5009%" y="1199.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (21 samples, 0.08%)</title><rect x="60.2509%" y="1173" width="0.0789%" height="15" fill="rgb(208,207,28)" fg:x="16043" fg:w="21"/><text x="60.5009%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,graph_craft::document::DocumentNode)&gt; (21 samples, 0.08%)</title><rect x="60.2509%" y="1157" width="0.0789%" height="15" fill="rgb(209,159,27)" fg:x="16043" fg:w="21"/><text x="60.5009%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::DocumentNode&gt; (21 samples, 0.08%)</title><rect x="60.2509%" y="1141" width="0.0789%" height="15" fill="rgb(251,176,53)" fg:x="16043" fg:w="21"/><text x="60.5009%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graph_craft::document::NodeId,graph_craft::document::DocumentNode&gt;&gt; (27 samples, 0.10%)</title><rect x="60.2396%" y="1285" width="0.1014%" height="15" fill="rgb(211,85,7)" fg:x="16040" fg:w="27"/><text x="60.4896%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graph_craft::document::NodeId,graph_craft::document::DocumentNode,std::hash::random::RandomState&gt;&gt; (27 samples, 0.10%)</title><rect x="60.2396%" y="1269" width="0.1014%" height="15" fill="rgb(216,64,54)" fg:x="16040" fg:w="27"/><text x="60.4896%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graph_craft::document::NodeId,graph_craft::document::DocumentNode)&gt;&gt; (27 samples, 0.10%)</title><rect x="60.2396%" y="1253" width="0.1014%" height="15" fill="rgb(217,54,24)" fg:x="16040" fg:w="27"/><text x="60.4896%" y="1263.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.10%)</title><rect x="60.2396%" y="1237" width="0.1014%" height="15" fill="rgb(208,206,53)" fg:x="16040" fg:w="27"/><text x="60.4896%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (27 samples, 0.10%)</title><rect x="60.2396%" y="1221" width="0.1014%" height="15" fill="rgb(251,74,39)" fg:x="16040" fg:w="27"/><text x="60.4896%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3 samples, 0.01%)</title><rect x="60.3297%" y="1205" width="0.0113%" height="15" fill="rgb(226,47,5)" fg:x="16064" fg:w="3"/><text x="60.5797%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.02%)</title><rect x="60.3673%" y="1173" width="0.0188%" height="15" fill="rgb(234,111,33)" fg:x="16074" fg:w="5"/><text x="60.6173%" y="1183.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="60.3861%" y="1157" width="0.0113%" height="15" fill="rgb(251,14,10)" fg:x="16079" fg:w="3"/><text x="60.6361%" y="1167.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (16 samples, 0.06%)</title><rect x="60.3410%" y="1221" width="0.0601%" height="15" fill="rgb(232,43,0)" fg:x="16067" fg:w="16"/><text x="60.5910%" y="1231.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (16 samples, 0.06%)</title><rect x="60.3410%" y="1205" width="0.0601%" height="15" fill="rgb(222,68,43)" fg:x="16067" fg:w="16"/><text x="60.5910%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (16 samples, 0.06%)</title><rect x="60.3410%" y="1189" width="0.0601%" height="15" fill="rgb(217,24,23)" fg:x="16067" fg:w="16"/><text x="60.5910%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.02%)</title><rect x="60.3861%" y="1173" width="0.0150%" height="15" fill="rgb(229,209,14)" fg:x="16079" fg:w="4"/><text x="60.6361%" y="1183.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="60.4161%" y="1109" width="0.0113%" height="15" fill="rgb(250,149,48)" fg:x="16087" fg:w="3"/><text x="60.6661%" y="1119.50"></text></g><g><title>hashbrown::map::make_hash (25 samples, 0.09%)</title><rect x="60.3410%" y="1253" width="0.0939%" height="15" fill="rgb(210,120,37)" fg:x="16067" fg:w="25"/><text x="60.5910%" y="1263.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25 samples, 0.09%)</title><rect x="60.3410%" y="1237" width="0.0939%" height="15" fill="rgb(210,21,8)" fg:x="16067" fg:w="25"/><text x="60.5910%" y="1247.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (9 samples, 0.03%)</title><rect x="60.4011%" y="1221" width="0.0338%" height="15" fill="rgb(243,145,7)" fg:x="16083" fg:w="9"/><text x="60.6511%" y="1231.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (8 samples, 0.03%)</title><rect x="60.4049%" y="1205" width="0.0300%" height="15" fill="rgb(238,178,32)" fg:x="16084" fg:w="8"/><text x="60.6549%" y="1215.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (8 samples, 0.03%)</title><rect x="60.4049%" y="1189" width="0.0300%" height="15" fill="rgb(222,4,10)" fg:x="16084" fg:w="8"/><text x="60.6549%" y="1199.50"></text></g><g><title>core::hash::Hasher::write_u64 (8 samples, 0.03%)</title><rect x="60.4049%" y="1173" width="0.0300%" height="15" fill="rgb(239,7,37)" fg:x="16084" fg:w="8"/><text x="60.6549%" y="1183.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="60.4049%" y="1157" width="0.0300%" height="15" fill="rgb(215,31,37)" fg:x="16084" fg:w="8"/><text x="60.6549%" y="1167.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="60.4049%" y="1141" width="0.0300%" height="15" fill="rgb(224,83,33)" fg:x="16084" fg:w="8"/><text x="60.6549%" y="1151.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="60.4049%" y="1125" width="0.0300%" height="15" fill="rgb(239,55,3)" fg:x="16084" fg:w="8"/><text x="60.6549%" y="1135.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (50 samples, 0.19%)</title><rect x="60.4424%" y="1173" width="0.1878%" height="15" fill="rgb(247,92,11)" fg:x="16094" fg:w="50"/><text x="60.6924%" y="1183.50"></text></g><g><title>__memmove_avx512_unaligned_erms (49 samples, 0.18%)</title><rect x="60.4462%" y="1157" width="0.1840%" height="15" fill="rgb(239,200,7)" fg:x="16095" fg:w="49"/><text x="60.6962%" y="1167.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.02%)</title><rect x="60.6978%" y="1061" width="0.0150%" height="15" fill="rgb(227,115,8)" fg:x="16162" fg:w="4"/><text x="60.9478%" y="1071.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.02%)</title><rect x="60.7353%" y="1045" width="0.0188%" height="15" fill="rgb(215,189,27)" fg:x="16172" fg:w="5"/><text x="60.9853%" y="1055.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (34 samples, 0.13%)</title><rect x="60.6377%" y="1109" width="0.1277%" height="15" fill="rgb(251,216,39)" fg:x="16146" fg:w="34"/><text x="60.8877%" y="1119.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (34 samples, 0.13%)</title><rect x="60.6377%" y="1093" width="0.1277%" height="15" fill="rgb(207,29,47)" fg:x="16146" fg:w="34"/><text x="60.8877%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (34 samples, 0.13%)</title><rect x="60.6377%" y="1077" width="0.1277%" height="15" fill="rgb(210,71,34)" fg:x="16146" fg:w="34"/><text x="60.8877%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (14 samples, 0.05%)</title><rect x="60.7128%" y="1061" width="0.0526%" height="15" fill="rgb(253,217,51)" fg:x="16166" fg:w="14"/><text x="60.9628%" y="1071.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.01%)</title><rect x="60.7541%" y="1045" width="0.0113%" height="15" fill="rgb(222,117,46)" fg:x="16177" fg:w="3"/><text x="61.0041%" y="1055.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (8 samples, 0.03%)</title><rect x="60.7654%" y="1109" width="0.0300%" height="15" fill="rgb(226,132,6)" fg:x="16180" fg:w="8"/><text x="61.0154%" y="1119.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4 samples, 0.02%)</title><rect x="60.7804%" y="1093" width="0.0150%" height="15" fill="rgb(254,145,51)" fg:x="16184" fg:w="4"/><text x="61.0304%" y="1103.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.02%)</title><rect x="60.7804%" y="1077" width="0.0150%" height="15" fill="rgb(231,199,27)" fg:x="16184" fg:w="4"/><text x="61.0304%" y="1087.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 0.02%)</title><rect x="60.7804%" y="1061" width="0.0150%" height="15" fill="rgb(245,158,14)" fg:x="16184" fg:w="4"/><text x="61.0304%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.02%)</title><rect x="60.8668%" y="997" width="0.0225%" height="15" fill="rgb(240,113,14)" fg:x="16207" fg:w="6"/><text x="61.1168%" y="1007.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.09%)</title><rect x="60.8105%" y="1045" width="0.0864%" height="15" fill="rgb(210,20,13)" fg:x="16192" fg:w="23"/><text x="61.0605%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (23 samples, 0.09%)</title><rect x="60.8105%" y="1029" width="0.0864%" height="15" fill="rgb(241,144,13)" fg:x="16192" fg:w="23"/><text x="61.0605%" y="1039.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (23 samples, 0.09%)</title><rect x="60.8105%" y="1013" width="0.0864%" height="15" fill="rgb(235,43,34)" fg:x="16192" fg:w="23"/><text x="61.0605%" y="1023.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (70 samples, 0.26%)</title><rect x="60.6377%" y="1157" width="0.2629%" height="15" fill="rgb(208,36,20)" fg:x="16146" fg:w="70"/><text x="60.8877%" y="1167.50"></text></g><g><title>hashbrown::map::make_hash (70 samples, 0.26%)</title><rect x="60.6377%" y="1141" width="0.2629%" height="15" fill="rgb(239,204,10)" fg:x="16146" fg:w="70"/><text x="60.8877%" y="1151.50"></text></g><g><title>core::hash::BuildHasher::hash_one (70 samples, 0.26%)</title><rect x="60.6377%" y="1125" width="0.2629%" height="15" fill="rgb(217,84,43)" fg:x="16146" fg:w="70"/><text x="60.8877%" y="1135.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (28 samples, 0.11%)</title><rect x="60.7954%" y="1109" width="0.1052%" height="15" fill="rgb(241,170,50)" fg:x="16188" fg:w="28"/><text x="61.0454%" y="1119.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (24 samples, 0.09%)</title><rect x="60.8105%" y="1093" width="0.0901%" height="15" fill="rgb(226,205,29)" fg:x="16192" fg:w="24"/><text x="61.0605%" y="1103.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (24 samples, 0.09%)</title><rect x="60.8105%" y="1077" width="0.0901%" height="15" fill="rgb(233,113,1)" fg:x="16192" fg:w="24"/><text x="61.0605%" y="1087.50"></text></g><g><title>core::hash::Hasher::write_u64 (24 samples, 0.09%)</title><rect x="60.8105%" y="1061" width="0.0901%" height="15" fill="rgb(253,98,13)" fg:x="16192" fg:w="24"/><text x="61.0605%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (71 samples, 0.27%)</title><rect x="60.6377%" y="1173" width="0.2666%" height="15" fill="rgb(211,115,12)" fg:x="16146" fg:w="71"/><text x="60.8877%" y="1183.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (8 samples, 0.03%)</title><rect x="60.9081%" y="1141" width="0.0300%" height="15" fill="rgb(208,12,16)" fg:x="16218" fg:w="8"/><text x="61.1581%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (4 samples, 0.02%)</title><rect x="60.9381%" y="1141" width="0.0150%" height="15" fill="rgb(237,193,54)" fg:x="16226" fg:w="4"/><text x="61.1881%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (6 samples, 0.02%)</title><rect x="60.9532%" y="1141" width="0.0225%" height="15" fill="rgb(243,22,42)" fg:x="16230" fg:w="6"/><text x="61.2032%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (21 samples, 0.08%)</title><rect x="60.9081%" y="1157" width="0.0789%" height="15" fill="rgb(233,151,36)" fg:x="16218" fg:w="21"/><text x="61.1581%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (24 samples, 0.09%)</title><rect x="60.9081%" y="1173" width="0.0901%" height="15" fill="rgb(237,57,45)" fg:x="16218" fg:w="24"/><text x="61.1581%" y="1183.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (3 samples, 0.01%)</title><rect x="60.9870%" y="1157" width="0.0113%" height="15" fill="rgb(221,88,17)" fg:x="16239" fg:w="3"/><text x="61.2370%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (3 samples, 0.01%)</title><rect x="60.9870%" y="1141" width="0.0113%" height="15" fill="rgb(230,79,15)" fg:x="16239" fg:w="3"/><text x="61.2370%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (182 samples, 0.68%)</title><rect x="60.4387%" y="1237" width="0.6835%" height="15" fill="rgb(213,57,13)" fg:x="16093" fg:w="182"/><text x="60.6887%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (182 samples, 0.68%)</title><rect x="60.4387%" y="1221" width="0.6835%" height="15" fill="rgb(222,116,39)" fg:x="16093" fg:w="182"/><text x="60.6887%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (182 samples, 0.68%)</title><rect x="60.4387%" y="1205" width="0.6835%" height="15" fill="rgb(245,107,2)" fg:x="16093" fg:w="182"/><text x="60.6887%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (182 samples, 0.68%)</title><rect x="60.4387%" y="1189" width="0.6835%" height="15" fill="rgb(238,1,10)" fg:x="16093" fg:w="182"/><text x="60.6887%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (33 samples, 0.12%)</title><rect x="60.9982%" y="1173" width="0.1239%" height="15" fill="rgb(249,4,48)" fg:x="16242" fg:w="33"/><text x="61.2482%" y="1183.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (33 samples, 0.12%)</title><rect x="60.9982%" y="1157" width="0.1239%" height="15" fill="rgb(223,151,18)" fg:x="16242" fg:w="33"/><text x="61.2482%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (33 samples, 0.12%)</title><rect x="60.9982%" y="1141" width="0.1239%" height="15" fill="rgb(227,65,43)" fg:x="16242" fg:w="33"/><text x="61.2482%" y="1151.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (33 samples, 0.12%)</title><rect x="60.9982%" y="1125" width="0.1239%" height="15" fill="rgb(218,40,45)" fg:x="16242" fg:w="33"/><text x="61.2482%" y="1135.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 0.12%)</title><rect x="60.9982%" y="1109" width="0.1239%" height="15" fill="rgb(252,121,31)" fg:x="16242" fg:w="33"/><text x="61.2482%" y="1119.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.12%)</title><rect x="60.9982%" y="1093" width="0.1239%" height="15" fill="rgb(219,158,43)" fg:x="16242" fg:w="33"/><text x="61.2482%" y="1103.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.12%)</title><rect x="60.9982%" y="1077" width="0.1239%" height="15" fill="rgb(231,162,42)" fg:x="16242" fg:w="33"/><text x="61.2482%" y="1087.50"></text></g><g><title>__rdl_alloc (33 samples, 0.12%)</title><rect x="60.9982%" y="1061" width="0.1239%" height="15" fill="rgb(217,179,25)" fg:x="16242" fg:w="33"/><text x="61.2482%" y="1071.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (33 samples, 0.12%)</title><rect x="60.9982%" y="1045" width="0.1239%" height="15" fill="rgb(206,212,31)" fg:x="16242" fg:w="33"/><text x="61.2482%" y="1055.50"></text></g><g><title>malloc (33 samples, 0.12%)</title><rect x="60.9982%" y="1029" width="0.1239%" height="15" fill="rgb(235,144,12)" fg:x="16242" fg:w="33"/><text x="61.2482%" y="1039.50"></text></g><g><title>_int_malloc (33 samples, 0.12%)</title><rect x="60.9982%" y="1013" width="0.1239%" height="15" fill="rgb(213,51,10)" fg:x="16242" fg:w="33"/><text x="61.2482%" y="1023.50"></text></g><g><title>unlink_chunk.isra.0 (3 samples, 0.01%)</title><rect x="61.1109%" y="997" width="0.0113%" height="15" fill="rgb(231,145,14)" fg:x="16272" fg:w="3"/><text x="61.3609%" y="1007.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="61.1222%" y="1221" width="0.0150%" height="15" fill="rgb(235,15,28)" fg:x="16275" fg:w="4"/><text x="61.3722%" y="1231.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.02%)</title><rect x="61.1222%" y="1205" width="0.0150%" height="15" fill="rgb(237,206,10)" fg:x="16275" fg:w="4"/><text x="61.3722%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (9 samples, 0.03%)</title><rect x="61.1522%" y="1221" width="0.0338%" height="15" fill="rgb(236,227,27)" fg:x="16283" fg:w="9"/><text x="61.4022%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (7 samples, 0.03%)</title><rect x="61.1597%" y="1205" width="0.0263%" height="15" fill="rgb(246,83,35)" fg:x="16285" fg:w="7"/><text x="61.4097%" y="1215.50"></text></g><g><title>hashbrown::raw::is_full (7 samples, 0.03%)</title><rect x="61.1597%" y="1189" width="0.0263%" height="15" fill="rgb(220,136,24)" fg:x="16285" fg:w="7"/><text x="61.4097%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (205 samples, 0.77%)</title><rect x="60.4349%" y="1253" width="0.7699%" height="15" fill="rgb(217,3,25)" fg:x="16092" fg:w="205"/><text x="60.6849%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (22 samples, 0.08%)</title><rect x="61.1222%" y="1237" width="0.0826%" height="15" fill="rgb(239,24,14)" fg:x="16275" fg:w="22"/><text x="61.3722%" y="1247.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.01%)</title><rect x="61.1935%" y="1221" width="0.0113%" height="15" fill="rgb(244,16,53)" fg:x="16294" fg:w="3"/><text x="61.4435%" y="1231.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.01%)</title><rect x="61.1935%" y="1205" width="0.0113%" height="15" fill="rgb(208,175,44)" fg:x="16294" fg:w="3"/><text x="61.4435%" y="1215.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (255 samples, 0.96%)</title><rect x="60.3410%" y="1285" width="0.9577%" height="15" fill="rgb(252,18,48)" fg:x="16067" fg:w="255"/><text x="60.5910%" y="1295.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (255 samples, 0.96%)</title><rect x="60.3410%" y="1269" width="0.9577%" height="15" fill="rgb(234,199,32)" fg:x="16067" fg:w="255"/><text x="60.5910%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (25 samples, 0.09%)</title><rect x="61.2048%" y="1253" width="0.0939%" height="15" fill="rgb(225,77,54)" fg:x="16297" fg:w="25"/><text x="61.4548%" y="1263.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (25 samples, 0.09%)</title><rect x="61.2048%" y="1237" width="0.0939%" height="15" fill="rgb(225,42,25)" fg:x="16297" fg:w="25"/><text x="61.4548%" y="1247.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (25 samples, 0.09%)</title><rect x="61.2048%" y="1221" width="0.0939%" height="15" fill="rgb(242,227,46)" fg:x="16297" fg:w="25"/><text x="61.4548%" y="1231.50"></text></g><g><title>core::ptr::write (25 samples, 0.09%)</title><rect x="61.2048%" y="1205" width="0.0939%" height="15" fill="rgb(246,197,35)" fg:x="16297" fg:w="25"/><text x="61.4548%" y="1215.50"></text></g><g><title>__memmove_avx512_unaligned_erms (16 samples, 0.06%)</title><rect x="61.2386%" y="1189" width="0.0601%" height="15" fill="rgb(215,159,26)" fg:x="16306" fg:w="16"/><text x="61.4886%" y="1199.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (6 samples, 0.02%)</title><rect x="61.2987%" y="1221" width="0.0225%" height="15" fill="rgb(212,194,50)" fg:x="16322" fg:w="6"/><text x="61.5487%" y="1231.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (6 samples, 0.02%)</title><rect x="61.2987%" y="1205" width="0.0225%" height="15" fill="rgb(246,132,1)" fg:x="16322" fg:w="6"/><text x="61.5487%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6 samples, 0.02%)</title><rect x="61.2987%" y="1189" width="0.0225%" height="15" fill="rgb(217,71,7)" fg:x="16322" fg:w="6"/><text x="61.5487%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.02%)</title><rect x="61.3062%" y="1173" width="0.0150%" height="15" fill="rgb(252,59,32)" fg:x="16324" fg:w="4"/><text x="61.5562%" y="1183.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="61.3099%" y="1157" width="0.0113%" height="15" fill="rgb(253,204,25)" fg:x="16325" fg:w="3"/><text x="61.5599%" y="1167.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="61.3325%" y="1093" width="0.0113%" height="15" fill="rgb(232,21,16)" fg:x="16331" fg:w="3"/><text x="61.5825%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.02%)</title><rect x="61.3325%" y="1109" width="0.0188%" height="15" fill="rgb(248,90,29)" fg:x="16331" fg:w="5"/><text x="61.5825%" y="1119.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="61.3287%" y="1157" width="0.0300%" height="15" fill="rgb(249,223,7)" fg:x="16330" fg:w="8"/><text x="61.5787%" y="1167.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="61.3287%" y="1141" width="0.0300%" height="15" fill="rgb(231,119,42)" fg:x="16330" fg:w="8"/><text x="61.5787%" y="1151.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="61.3287%" y="1125" width="0.0300%" height="15" fill="rgb(215,41,35)" fg:x="16330" fg:w="8"/><text x="61.5787%" y="1135.50"></text></g><g><title>hashbrown::map::make_hash (18 samples, 0.07%)</title><rect x="61.2987%" y="1253" width="0.0676%" height="15" fill="rgb(220,44,45)" fg:x="16322" fg:w="18"/><text x="61.5487%" y="1263.50"></text></g><g><title>core::hash::BuildHasher::hash_one (18 samples, 0.07%)</title><rect x="61.2987%" y="1237" width="0.0676%" height="15" fill="rgb(253,197,36)" fg:x="16322" fg:w="18"/><text x="61.5487%" y="1247.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.04%)</title><rect x="61.3287%" y="1221" width="0.0376%" height="15" fill="rgb(245,225,54)" fg:x="16330" fg:w="10"/><text x="61.5787%" y="1231.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (10 samples, 0.04%)</title><rect x="61.3287%" y="1205" width="0.0376%" height="15" fill="rgb(239,94,37)" fg:x="16330" fg:w="10"/><text x="61.5787%" y="1215.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (10 samples, 0.04%)</title><rect x="61.3287%" y="1189" width="0.0376%" height="15" fill="rgb(242,217,10)" fg:x="16330" fg:w="10"/><text x="61.5787%" y="1199.50"></text></g><g><title>core::hash::Hasher::write_u64 (10 samples, 0.04%)</title><rect x="61.3287%" y="1173" width="0.0376%" height="15" fill="rgb(250,193,7)" fg:x="16330" fg:w="10"/><text x="61.5787%" y="1183.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="61.4827%" y="1205" width="0.0113%" height="15" fill="rgb(230,104,19)" fg:x="16371" fg:w="3"/><text x="61.7327%" y="1215.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.01%)</title><rect x="61.4827%" y="1189" width="0.0113%" height="15" fill="rgb(230,181,4)" fg:x="16371" fg:w="3"/><text x="61.7327%" y="1199.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (3 samples, 0.01%)</title><rect x="61.4940%" y="1189" width="0.0113%" height="15" fill="rgb(216,219,49)" fg:x="16374" fg:w="3"/><text x="61.7440%" y="1199.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.01%)</title><rect x="61.4940%" y="1173" width="0.0113%" height="15" fill="rgb(254,144,0)" fg:x="16374" fg:w="3"/><text x="61.7440%" y="1183.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.01%)</title><rect x="61.4940%" y="1157" width="0.0113%" height="15" fill="rgb(205,209,38)" fg:x="16374" fg:w="3"/><text x="61.7440%" y="1167.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="61.4940%" y="1141" width="0.0113%" height="15" fill="rgb(240,21,42)" fg:x="16374" fg:w="3"/><text x="61.7440%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (5 samples, 0.02%)</title><rect x="61.4940%" y="1205" width="0.0188%" height="15" fill="rgb(241,132,3)" fg:x="16374" fg:w="5"/><text x="61.7440%" y="1215.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.01%)</title><rect x="61.5128%" y="1205" width="0.0113%" height="15" fill="rgb(225,14,2)" fg:x="16379" fg:w="3"/><text x="61.7628%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (47 samples, 0.18%)</title><rect x="61.3700%" y="1237" width="0.1765%" height="15" fill="rgb(210,141,35)" fg:x="16341" fg:w="47"/><text x="61.6200%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (47 samples, 0.18%)</title><rect x="61.3700%" y="1221" width="0.1765%" height="15" fill="rgb(251,14,44)" fg:x="16341" fg:w="47"/><text x="61.6200%" y="1231.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (6 samples, 0.02%)</title><rect x="61.5240%" y="1205" width="0.0225%" height="15" fill="rgb(247,48,18)" fg:x="16382" fg:w="6"/><text x="61.7740%" y="1215.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.02%)</title><rect x="61.5240%" y="1189" width="0.0225%" height="15" fill="rgb(225,0,40)" fg:x="16382" fg:w="6"/><text x="61.7740%" y="1199.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::read (9 samples, 0.03%)</title><rect x="61.5466%" y="1221" width="0.0338%" height="15" fill="rgb(221,31,33)" fg:x="16388" fg:w="9"/><text x="61.7966%" y="1231.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (9 samples, 0.03%)</title><rect x="61.5466%" y="1205" width="0.0338%" height="15" fill="rgb(237,42,40)" fg:x="16388" fg:w="9"/><text x="61.7966%" y="1215.50"></text></g><g><title>core::ptr::read (9 samples, 0.03%)</title><rect x="61.5466%" y="1189" width="0.0338%" height="15" fill="rgb(233,51,29)" fg:x="16388" fg:w="9"/><text x="61.7966%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (9 samples, 0.03%)</title><rect x="61.5466%" y="1173" width="0.0338%" height="15" fill="rgb(226,58,20)" fg:x="16388" fg:w="9"/><text x="61.7966%" y="1183.50"></text></g><g><title>graph_craft::document::NodeNetwork::remove_dead_nodes (529 samples, 1.99%)</title><rect x="59.6162%" y="1301" width="1.9867%" height="15" fill="rgb(208,98,7)" fg:x="15874" fg:w="529"/><text x="59.8662%" y="1311.50">g..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove_entry (81 samples, 0.30%)</title><rect x="61.2987%" y="1285" width="0.3042%" height="15" fill="rgb(228,143,44)" fg:x="16322" fg:w="81"/><text x="61.5487%" y="1295.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (81 samples, 0.30%)</title><rect x="61.2987%" y="1269" width="0.3042%" height="15" fill="rgb(246,55,38)" fg:x="16322" fg:w="81"/><text x="61.5487%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (63 samples, 0.24%)</title><rect x="61.3663%" y="1253" width="0.2366%" height="15" fill="rgb(247,87,16)" fg:x="16340" fg:w="63"/><text x="61.6163%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (15 samples, 0.06%)</title><rect x="61.5466%" y="1237" width="0.0563%" height="15" fill="rgb(234,129,42)" fg:x="16388" fg:w="15"/><text x="61.7966%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (6 samples, 0.02%)</title><rect x="61.5804%" y="1221" width="0.0225%" height="15" fill="rgb(220,82,16)" fg:x="16397" fg:w="6"/><text x="61.8304%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (6 samples, 0.02%)</title><rect x="61.5804%" y="1205" width="0.0225%" height="15" fill="rgb(211,88,4)" fg:x="16397" fg:w="6"/><text x="61.8304%" y="1215.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="61.6029%" y="1157" width="0.0113%" height="15" fill="rgb(248,151,21)" fg:x="16403" fg:w="3"/><text x="61.8529%" y="1167.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="61.6029%" y="1141" width="0.0113%" height="15" fill="rgb(238,163,6)" fg:x="16403" fg:w="3"/><text x="61.8529%" y="1151.50"></text></g><g><title>graph_craft::document::NodeNetwork::remove_redundant_id_nodes (12 samples, 0.05%)</title><rect x="61.6029%" y="1301" width="0.0451%" height="15" fill="rgb(209,183,11)" fg:x="16403" fg:w="12"/><text x="61.8529%" y="1311.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (12 samples, 0.05%)</title><rect x="61.6029%" y="1285" width="0.0451%" height="15" fill="rgb(219,37,20)" fg:x="16403" fg:w="12"/><text x="61.8529%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (12 samples, 0.05%)</title><rect x="61.6029%" y="1269" width="0.0451%" height="15" fill="rgb(210,158,4)" fg:x="16403" fg:w="12"/><text x="61.8529%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.05%)</title><rect x="61.6029%" y="1253" width="0.0451%" height="15" fill="rgb(221,167,53)" fg:x="16403" fg:w="12"/><text x="61.8529%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (12 samples, 0.05%)</title><rect x="61.6029%" y="1237" width="0.0451%" height="15" fill="rgb(237,151,45)" fg:x="16403" fg:w="12"/><text x="61.8529%" y="1247.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.05%)</title><rect x="61.6029%" y="1221" width="0.0451%" height="15" fill="rgb(231,39,3)" fg:x="16403" fg:w="12"/><text x="61.8529%" y="1231.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.05%)</title><rect x="61.6029%" y="1205" width="0.0451%" height="15" fill="rgb(212,167,28)" fg:x="16403" fg:w="12"/><text x="61.8529%" y="1215.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (12 samples, 0.05%)</title><rect x="61.6029%" y="1189" width="0.0451%" height="15" fill="rgb(232,178,8)" fg:x="16403" fg:w="12"/><text x="61.8529%" y="1199.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (12 samples, 0.05%)</title><rect x="61.6029%" y="1173" width="0.0451%" height="15" fill="rgb(225,151,20)" fg:x="16403" fg:w="12"/><text x="61.8529%" y="1183.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (9 samples, 0.03%)</title><rect x="61.6142%" y="1157" width="0.0338%" height="15" fill="rgb(238,3,37)" fg:x="16406" fg:w="9"/><text x="61.8642%" y="1167.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (9 samples, 0.03%)</title><rect x="61.6142%" y="1141" width="0.0338%" height="15" fill="rgb(251,147,42)" fg:x="16406" fg:w="9"/><text x="61.8642%" y="1151.50"></text></g><g><title>graph_craft::document::NodeNetwork::remove_redundant_id_nodes::_{{closure}} (9 samples, 0.03%)</title><rect x="61.6142%" y="1125" width="0.0338%" height="15" fill="rgb(208,173,10)" fg:x="16406" fg:w="9"/><text x="61.8642%" y="1135.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.02%)</title><rect x="61.6292%" y="1109" width="0.0188%" height="15" fill="rgb(246,225,4)" fg:x="16410" fg:w="5"/><text x="61.8792%" y="1119.50"></text></g><g><title>&lt;graphene_core::types::ProtoNodeIdentifier as core::cmp::PartialEq&gt;::eq (5 samples, 0.02%)</title><rect x="61.6292%" y="1093" width="0.0188%" height="15" fill="rgb(248,102,6)" fg:x="16410" fg:w="5"/><text x="61.8792%" y="1103.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::cmp::PartialEq&lt;alloc::borrow::Cow&lt;C&gt;&gt;&gt;::eq (5 samples, 0.02%)</title><rect x="61.6292%" y="1077" width="0.0188%" height="15" fill="rgb(232,6,21)" fg:x="16410" fg:w="5"/><text x="61.8792%" y="1087.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (4 samples, 0.02%)</title><rect x="61.6329%" y="1061" width="0.0150%" height="15" fill="rgb(221,179,22)" fg:x="16411" fg:w="4"/><text x="61.8829%" y="1071.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.02%)</title><rect x="61.6329%" y="1045" width="0.0150%" height="15" fill="rgb(252,50,20)" fg:x="16411" fg:w="4"/><text x="61.8829%" y="1055.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (4 samples, 0.02%)</title><rect x="61.6329%" y="1029" width="0.0150%" height="15" fill="rgb(222,56,38)" fg:x="16411" fg:w="4"/><text x="61.8829%" y="1039.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.02%)</title><rect x="61.6329%" y="1013" width="0.0150%" height="15" fill="rgb(206,193,29)" fg:x="16411" fg:w="4"/><text x="61.8829%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (15,652 samples, 58.78%)</title><rect x="2.9406%" y="1493" width="58.7824%" height="15" fill="rgb(239,192,45)" fg:x="783" fg:w="15652"/><text x="3.1906%" y="1503.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15,652 samples, 58.78%)</title><rect x="2.9406%" y="1477" width="58.7824%" height="15" fill="rgb(254,18,36)" fg:x="783" fg:w="15652"/><text x="3.1906%" y="1487.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (15,652 samples, 58.78%)</title><rect x="2.9406%" y="1461" width="58.7824%" height="15" fill="rgb(221,127,11)" fg:x="783" fg:w="15652"/><text x="3.1906%" y="1471.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15,652 samples, 58.78%)</title><rect x="2.9406%" y="1445" width="58.7824%" height="15" fill="rgb(234,146,35)" fg:x="783" fg:w="15652"/><text x="3.1906%" y="1455.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15,652 samples, 58.78%)</title><rect x="2.9406%" y="1429" width="58.7824%" height="15" fill="rgb(254,201,37)" fg:x="783" fg:w="15652"/><text x="3.1906%" y="1439.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15,652 samples, 58.78%)</title><rect x="2.9406%" y="1413" width="58.7824%" height="15" fill="rgb(211,202,23)" fg:x="783" fg:w="15652"/><text x="3.1906%" y="1423.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (15,652 samples, 58.78%)</title><rect x="2.9406%" y="1397" width="58.7824%" height="15" fill="rgb(237,91,2)" fg:x="783" fg:w="15652"/><text x="3.1906%" y="1407.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (15,652 samples, 58.78%)</title><rect x="2.9406%" y="1381" width="58.7824%" height="15" fill="rgb(226,228,36)" fg:x="783" fg:w="15652"/><text x="3.1906%" y="1391.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (15,652 samples, 58.78%)</title><rect x="2.9406%" y="1365" width="58.7824%" height="15" fill="rgb(213,63,50)" fg:x="783" fg:w="15652"/><text x="3.1906%" y="1375.50">compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}}</text></g><g><title>compile_demo_art::compile (15,652 samples, 58.78%)</title><rect x="2.9406%" y="1349" width="58.7824%" height="15" fill="rgb(235,194,19)" fg:x="783" fg:w="15652"/><text x="3.1906%" y="1359.50">compile_demo_art::compile</text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (15,652 samples, 58.78%)</title><rect x="2.9406%" y="1333" width="58.7824%" height="15" fill="rgb(207,204,18)" fg:x="783" fg:w="15652"/><text x="3.1906%" y="1343.50">graph_craft::graphene_compiler::Compiler::compile_single</text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (15,652 samples, 58.78%)</title><rect x="2.9406%" y="1317" width="58.7824%" height="15" fill="rgb(248,8,7)" fg:x="783" fg:w="15652"/><text x="3.1906%" y="1327.50">graph_craft::graphene_compiler::Compiler::compile</text></g><g><title>graph_craft::document::NodeNetwork::resolve_scope_inputs (20 samples, 0.08%)</title><rect x="61.6480%" y="1301" width="0.0751%" height="15" fill="rgb(223,145,47)" fg:x="16415" fg:w="20"/><text x="61.8980%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.03%)</title><rect x="61.7381%" y="1157" width="0.0338%" height="15" fill="rgb(228,84,11)" fg:x="16439" fg:w="9"/><text x="61.9881%" y="1167.50"></text></g><g><title>__rdl_alloc (4 samples, 0.02%)</title><rect x="61.8883%" y="853" width="0.0150%" height="15" fill="rgb(218,76,45)" fg:x="16479" fg:w="4"/><text x="62.1383%" y="863.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.02%)</title><rect x="61.8883%" y="837" width="0.0150%" height="15" fill="rgb(223,80,15)" fg:x="16479" fg:w="4"/><text x="62.1383%" y="847.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="61.8883%" y="821" width="0.0150%" height="15" fill="rgb(219,218,33)" fg:x="16479" fg:w="4"/><text x="62.1383%" y="831.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="61.8921%" y="805" width="0.0113%" height="15" fill="rgb(208,51,11)" fg:x="16480" fg:w="3"/><text x="62.1421%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.02%)</title><rect x="61.8883%" y="949" width="0.0188%" height="15" fill="rgb(229,165,39)" fg:x="16479" fg:w="5"/><text x="62.1383%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.02%)</title><rect x="61.8883%" y="933" width="0.0188%" height="15" fill="rgb(241,100,24)" fg:x="16479" fg:w="5"/><text x="62.1383%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (5 samples, 0.02%)</title><rect x="61.8883%" y="917" width="0.0188%" height="15" fill="rgb(228,14,23)" fg:x="16479" fg:w="5"/><text x="62.1383%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.02%)</title><rect x="61.8883%" y="901" width="0.0188%" height="15" fill="rgb(247,116,52)" fg:x="16479" fg:w="5"/><text x="62.1383%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.02%)</title><rect x="61.8883%" y="885" width="0.0188%" height="15" fill="rgb(216,149,33)" fg:x="16479" fg:w="5"/><text x="62.1383%" y="895.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="61.8883%" y="869" width="0.0188%" height="15" fill="rgb(238,142,29)" fg:x="16479" fg:w="5"/><text x="62.1383%" y="879.50"></text></g><g><title>&lt;graphene_core::vector::style::Fill as core::clone::Clone&gt;::clone (7 samples, 0.03%)</title><rect x="61.8846%" y="1061" width="0.0263%" height="15" fill="rgb(224,83,40)" fg:x="16478" fg:w="7"/><text x="62.1346%" y="1071.50"></text></g><g><title>&lt;graphene_core::vector::style::Gradient as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="61.8883%" y="1045" width="0.0225%" height="15" fill="rgb(234,165,11)" fg:x="16479" fg:w="6"/><text x="62.1383%" y="1055.50"></text></g><g><title>&lt;graphene_core::vector::style::GradientStops as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="61.8883%" y="1029" width="0.0225%" height="15" fill="rgb(215,96,23)" fg:x="16479" fg:w="6"/><text x="62.1383%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="61.8883%" y="1013" width="0.0225%" height="15" fill="rgb(233,179,26)" fg:x="16479" fg:w="6"/><text x="62.1383%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.02%)</title><rect x="61.8883%" y="997" width="0.0225%" height="15" fill="rgb(225,129,33)" fg:x="16479" fg:w="6"/><text x="62.1383%" y="1007.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.02%)</title><rect x="61.8883%" y="981" width="0.0225%" height="15" fill="rgb(237,49,13)" fg:x="16479" fg:w="6"/><text x="62.1383%" y="991.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.02%)</title><rect x="61.8883%" y="965" width="0.0225%" height="15" fill="rgb(211,3,31)" fg:x="16479" fg:w="6"/><text x="62.1383%" y="975.50"></text></g><g><title>&lt;graphene_core::vector::style::GradientStops as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="61.9108%" y="1045" width="0.0188%" height="15" fill="rgb(216,152,19)" fg:x="16485" fg:w="5"/><text x="62.1608%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="61.9108%" y="1029" width="0.0188%" height="15" fill="rgb(251,121,35)" fg:x="16485" fg:w="5"/><text x="62.1608%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.02%)</title><rect x="61.9146%" y="1013" width="0.0150%" height="15" fill="rgb(210,217,47)" fg:x="16486" fg:w="4"/><text x="62.1646%" y="1023.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.02%)</title><rect x="61.9146%" y="997" width="0.0150%" height="15" fill="rgb(244,116,22)" fg:x="16486" fg:w="4"/><text x="62.1646%" y="1007.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.02%)</title><rect x="61.9146%" y="981" width="0.0150%" height="15" fill="rgb(228,17,21)" fg:x="16486" fg:w="4"/><text x="62.1646%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="61.9146%" y="965" width="0.0150%" height="15" fill="rgb(240,149,34)" fg:x="16486" fg:w="4"/><text x="62.1646%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="61.9146%" y="949" width="0.0150%" height="15" fill="rgb(208,125,47)" fg:x="16486" fg:w="4"/><text x="62.1646%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (4 samples, 0.02%)</title><rect x="61.9146%" y="933" width="0.0150%" height="15" fill="rgb(249,186,39)" fg:x="16486" fg:w="4"/><text x="62.1646%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.02%)</title><rect x="61.9146%" y="917" width="0.0150%" height="15" fill="rgb(240,220,33)" fg:x="16486" fg:w="4"/><text x="62.1646%" y="927.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.02%)</title><rect x="61.9146%" y="901" width="0.0150%" height="15" fill="rgb(243,110,23)" fg:x="16486" fg:w="4"/><text x="62.1646%" y="911.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.02%)</title><rect x="61.9146%" y="885" width="0.0150%" height="15" fill="rgb(219,163,46)" fg:x="16486" fg:w="4"/><text x="62.1646%" y="895.50"></text></g><g><title>__rdl_alloc (4 samples, 0.02%)</title><rect x="61.9146%" y="869" width="0.0150%" height="15" fill="rgb(216,126,30)" fg:x="16486" fg:w="4"/><text x="62.1646%" y="879.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.02%)</title><rect x="61.9146%" y="853" width="0.0150%" height="15" fill="rgb(208,139,11)" fg:x="16486" fg:w="4"/><text x="62.1646%" y="863.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="61.9146%" y="837" width="0.0150%" height="15" fill="rgb(213,118,36)" fg:x="16486" fg:w="4"/><text x="62.1646%" y="847.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="61.9146%" y="821" width="0.0150%" height="15" fill="rgb(226,43,17)" fg:x="16486" fg:w="4"/><text x="62.1646%" y="831.50"></text></g><g><title>&lt;graphene_core::vector::style::Gradient as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="61.9108%" y="1061" width="0.0225%" height="15" fill="rgb(254,217,4)" fg:x="16485" fg:w="6"/><text x="62.1608%" y="1071.50"></text></g><g><title>&lt;glam::f64::daffine2::DAffine2 as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="61.9446%" y="1045" width="0.0225%" height="15" fill="rgb(210,134,47)" fg:x="16494" fg:w="6"/><text x="62.1946%" y="1055.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="61.9784%" y="1029" width="0.0113%" height="15" fill="rgb(237,24,49)" fg:x="16503" fg:w="3"/><text x="62.2284%" y="1039.50"></text></g><g><title>&lt;graphene_core::vector::style::Stroke as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="61.9784%" y="1013" width="0.0113%" height="15" fill="rgb(251,39,46)" fg:x="16503" fg:w="3"/><text x="62.2284%" y="1023.50"></text></g><g><title>&lt;graphene_core::vector::style::PathStyle as core::clone::Clone&gt;::clone (7 samples, 0.03%)</title><rect x="61.9672%" y="1045" width="0.0263%" height="15" fill="rgb(251,220,3)" fg:x="16500" fg:w="7"/><text x="62.2172%" y="1055.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointDomain as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="61.9935%" y="1045" width="0.0150%" height="15" fill="rgb(228,105,12)" fg:x="16507" fg:w="4"/><text x="62.2435%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="61.9935%" y="1029" width="0.0150%" height="15" fill="rgb(215,196,1)" fg:x="16507" fg:w="4"/><text x="62.2435%" y="1039.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::SegmentDomain as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="62.0122%" y="1045" width="0.0113%" height="15" fill="rgb(214,33,39)" fg:x="16512" fg:w="3"/><text x="62.2622%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="62.0122%" y="1029" width="0.0113%" height="15" fill="rgb(220,19,52)" fg:x="16512" fg:w="3"/><text x="62.2622%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.01%)</title><rect x="62.0122%" y="1013" width="0.0113%" height="15" fill="rgb(221,78,38)" fg:x="16512" fg:w="3"/><text x="62.2622%" y="1023.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.01%)</title><rect x="62.0122%" y="997" width="0.0113%" height="15" fill="rgb(253,30,16)" fg:x="16512" fg:w="3"/><text x="62.2622%" y="1007.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="62.0122%" y="981" width="0.0113%" height="15" fill="rgb(242,65,0)" fg:x="16512" fg:w="3"/><text x="62.2622%" y="991.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.01%)</title><rect x="62.0122%" y="965" width="0.0113%" height="15" fill="rgb(235,201,12)" fg:x="16512" fg:w="3"/><text x="62.2622%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="62.0122%" y="949" width="0.0113%" height="15" fill="rgb(233,161,9)" fg:x="16512" fg:w="3"/><text x="62.2622%" y="959.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::VectorData as core::clone::Clone&gt;::clone (25 samples, 0.09%)</title><rect x="61.9334%" y="1061" width="0.0939%" height="15" fill="rgb(241,207,41)" fg:x="16491" fg:w="25"/><text x="62.1834%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="62.0385%" y="1029" width="0.0150%" height="15" fill="rgb(212,69,46)" fg:x="16519" fg:w="4"/><text x="62.2885%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.02%)</title><rect x="62.0385%" y="1013" width="0.0150%" height="15" fill="rgb(239,69,45)" fg:x="16519" fg:w="4"/><text x="62.2885%" y="1023.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.02%)</title><rect x="62.0385%" y="997" width="0.0150%" height="15" fill="rgb(242,117,48)" fg:x="16519" fg:w="4"/><text x="62.2885%" y="1007.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.02%)</title><rect x="62.0385%" y="981" width="0.0150%" height="15" fill="rgb(228,41,36)" fg:x="16519" fg:w="4"/><text x="62.2885%" y="991.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::PointModification as core::clone::Clone&gt;::clone (12 samples, 0.05%)</title><rect x="62.0385%" y="1045" width="0.0451%" height="15" fill="rgb(212,3,32)" fg:x="16519" fg:w="12"/><text x="62.2885%" y="1055.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="62.0536%" y="1029" width="0.0300%" height="15" fill="rgb(233,41,49)" fg:x="16523" fg:w="8"/><text x="62.3036%" y="1039.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="62.0686%" y="1013" width="0.0150%" height="15" fill="rgb(252,170,49)" fg:x="16527" fg:w="4"/><text x="62.3186%" y="1023.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="62.0686%" y="997" width="0.0150%" height="15" fill="rgb(229,53,26)" fg:x="16527" fg:w="4"/><text x="62.3186%" y="1007.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (3 samples, 0.01%)</title><rect x="62.0911%" y="981" width="0.0113%" height="15" fill="rgb(217,157,12)" fg:x="16533" fg:w="3"/><text x="62.3411%" y="991.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::RegionModification as core::clone::Clone&gt;::clone (10 samples, 0.04%)</title><rect x="62.0836%" y="1045" width="0.0376%" height="15" fill="rgb(227,17,9)" fg:x="16531" fg:w="10"/><text x="62.3336%" y="1055.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="62.0874%" y="1029" width="0.0338%" height="15" fill="rgb(218,84,12)" fg:x="16532" fg:w="9"/><text x="62.3374%" y="1039.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="62.0874%" y="1013" width="0.0338%" height="15" fill="rgb(212,79,24)" fg:x="16532" fg:w="9"/><text x="62.3374%" y="1023.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="62.0874%" y="997" width="0.0338%" height="15" fill="rgb(217,222,37)" fg:x="16532" fg:w="9"/><text x="62.3374%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (5 samples, 0.02%)</title><rect x="62.1024%" y="981" width="0.0188%" height="15" fill="rgb(246,208,8)" fg:x="16536" fg:w="5"/><text x="62.3524%" y="991.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (5 samples, 0.02%)</title><rect x="62.1024%" y="965" width="0.0188%" height="15" fill="rgb(244,133,10)" fg:x="16536" fg:w="5"/><text x="62.3524%" y="975.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5 samples, 0.02%)</title><rect x="62.1024%" y="949" width="0.0188%" height="15" fill="rgb(209,219,41)" fg:x="16536" fg:w="5"/><text x="62.3524%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.02%)</title><rect x="62.1024%" y="933" width="0.0188%" height="15" fill="rgb(253,175,45)" fg:x="16536" fg:w="5"/><text x="62.3524%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.02%)</title><rect x="62.1024%" y="917" width="0.0188%" height="15" fill="rgb(235,100,37)" fg:x="16536" fg:w="5"/><text x="62.3524%" y="927.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="62.1024%" y="901" width="0.0188%" height="15" fill="rgb(225,87,19)" fg:x="16536" fg:w="5"/><text x="62.3524%" y="911.50"></text></g><g><title>__rdl_alloc (5 samples, 0.02%)</title><rect x="62.1024%" y="885" width="0.0188%" height="15" fill="rgb(217,152,17)" fg:x="16536" fg:w="5"/><text x="62.3524%" y="895.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.02%)</title><rect x="62.1024%" y="869" width="0.0188%" height="15" fill="rgb(235,72,13)" fg:x="16536" fg:w="5"/><text x="62.3524%" y="879.50"></text></g><g><title>malloc (5 samples, 0.02%)</title><rect x="62.1024%" y="853" width="0.0188%" height="15" fill="rgb(233,140,18)" fg:x="16536" fg:w="5"/><text x="62.3524%" y="863.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="62.1061%" y="837" width="0.0150%" height="15" fill="rgb(207,212,28)" fg:x="16537" fg:w="4"/><text x="62.3561%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="62.1212%" y="1029" width="0.0113%" height="15" fill="rgb(220,130,25)" fg:x="16541" fg:w="3"/><text x="62.3712%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.01%)</title><rect x="62.1212%" y="1013" width="0.0113%" height="15" fill="rgb(205,55,34)" fg:x="16541" fg:w="3"/><text x="62.3712%" y="1023.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.01%)</title><rect x="62.1212%" y="997" width="0.0113%" height="15" fill="rgb(237,54,35)" fg:x="16541" fg:w="3"/><text x="62.3712%" y="1007.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="62.1212%" y="981" width="0.0113%" height="15" fill="rgb(208,67,23)" fg:x="16541" fg:w="3"/><text x="62.3712%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="62.1212%" y="965" width="0.0113%" height="15" fill="rgb(206,207,50)" fg:x="16541" fg:w="3"/><text x="62.3712%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="62.1212%" y="949" width="0.0113%" height="15" fill="rgb(213,211,42)" fg:x="16541" fg:w="3"/><text x="62.3712%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.01%)</title><rect x="62.1212%" y="933" width="0.0113%" height="15" fill="rgb(252,197,50)" fg:x="16541" fg:w="3"/><text x="62.3712%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="62.1212%" y="917" width="0.0113%" height="15" fill="rgb(251,211,41)" fg:x="16541" fg:w="3"/><text x="62.3712%" y="927.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="62.1212%" y="901" width="0.0113%" height="15" fill="rgb(229,211,5)" fg:x="16541" fg:w="3"/><text x="62.3712%" y="911.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="62.1212%" y="885" width="0.0113%" height="15" fill="rgb(239,36,31)" fg:x="16541" fg:w="3"/><text x="62.3712%" y="895.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="62.1212%" y="869" width="0.0113%" height="15" fill="rgb(248,67,31)" fg:x="16541" fg:w="3"/><text x="62.3712%" y="879.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="62.1212%" y="853" width="0.0113%" height="15" fill="rgb(249,55,44)" fg:x="16541" fg:w="3"/><text x="62.3712%" y="863.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="62.1212%" y="837" width="0.0113%" height="15" fill="rgb(216,82,12)" fg:x="16541" fg:w="3"/><text x="62.3712%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (15 samples, 0.06%)</title><rect x="62.1324%" y="981" width="0.0563%" height="15" fill="rgb(242,174,1)" fg:x="16544" fg:w="15"/><text x="62.3824%" y="991.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (14 samples, 0.05%)</title><rect x="62.1362%" y="965" width="0.0526%" height="15" fill="rgb(208,120,29)" fg:x="16545" fg:w="14"/><text x="62.3862%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.05%)</title><rect x="62.1362%" y="949" width="0.0526%" height="15" fill="rgb(221,105,43)" fg:x="16545" fg:w="14"/><text x="62.3862%" y="959.50"></text></g><g><title>__memmove_avx512_unaligned_erms (13 samples, 0.05%)</title><rect x="62.1399%" y="933" width="0.0488%" height="15" fill="rgb(234,124,22)" fg:x="16546" fg:w="13"/><text x="62.3899%" y="943.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (47 samples, 0.18%)</title><rect x="62.1324%" y="1029" width="0.1765%" height="15" fill="rgb(212,23,30)" fg:x="16544" fg:w="47"/><text x="62.3824%" y="1039.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (47 samples, 0.18%)</title><rect x="62.1324%" y="1013" width="0.1765%" height="15" fill="rgb(219,122,53)" fg:x="16544" fg:w="47"/><text x="62.3824%" y="1023.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (47 samples, 0.18%)</title><rect x="62.1324%" y="997" width="0.1765%" height="15" fill="rgb(248,84,24)" fg:x="16544" fg:w="47"/><text x="62.3824%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (32 samples, 0.12%)</title><rect x="62.1888%" y="981" width="0.1202%" height="15" fill="rgb(245,115,18)" fg:x="16559" fg:w="32"/><text x="62.4388%" y="991.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (32 samples, 0.12%)</title><rect x="62.1888%" y="965" width="0.1202%" height="15" fill="rgb(227,176,51)" fg:x="16559" fg:w="32"/><text x="62.4388%" y="975.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (32 samples, 0.12%)</title><rect x="62.1888%" y="949" width="0.1202%" height="15" fill="rgb(229,63,42)" fg:x="16559" fg:w="32"/><text x="62.4388%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.12%)</title><rect x="62.1888%" y="933" width="0.1202%" height="15" fill="rgb(247,202,24)" fg:x="16559" fg:w="32"/><text x="62.4388%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.12%)</title><rect x="62.1888%" y="917" width="0.1202%" height="15" fill="rgb(244,173,20)" fg:x="16559" fg:w="32"/><text x="62.4388%" y="927.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.12%)</title><rect x="62.1888%" y="901" width="0.1202%" height="15" fill="rgb(242,81,47)" fg:x="16559" fg:w="32"/><text x="62.4388%" y="911.50"></text></g><g><title>__rdl_alloc (32 samples, 0.12%)</title><rect x="62.1888%" y="885" width="0.1202%" height="15" fill="rgb(231,185,54)" fg:x="16559" fg:w="32"/><text x="62.4388%" y="895.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (32 samples, 0.12%)</title><rect x="62.1888%" y="869" width="0.1202%" height="15" fill="rgb(243,55,32)" fg:x="16559" fg:w="32"/><text x="62.4388%" y="879.50"></text></g><g><title>malloc (32 samples, 0.12%)</title><rect x="62.1888%" y="853" width="0.1202%" height="15" fill="rgb(208,167,19)" fg:x="16559" fg:w="32"/><text x="62.4388%" y="863.50"></text></g><g><title>_int_malloc (30 samples, 0.11%)</title><rect x="62.1963%" y="837" width="0.1127%" height="15" fill="rgb(231,72,35)" fg:x="16561" fg:w="30"/><text x="62.4463%" y="847.50"></text></g><g><title>unlink_chunk.isra.0 (4 samples, 0.02%)</title><rect x="62.2939%" y="821" width="0.0150%" height="15" fill="rgb(250,173,51)" fg:x="16587" fg:w="4"/><text x="62.5439%" y="831.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::SegmentModification as core::clone::Clone&gt;::clone (51 samples, 0.19%)</title><rect x="62.1212%" y="1045" width="0.1915%" height="15" fill="rgb(209,5,22)" fg:x="16541" fg:w="51"/><text x="62.3712%" y="1055.50"></text></g><g><title>&lt;graph_craft::document::value::TaggedValue as core::clone::Clone&gt;::clone (122 samples, 0.46%)</title><rect x="61.8620%" y="1077" width="0.4582%" height="15" fill="rgb(250,174,19)" fg:x="16472" fg:w="122"/><text x="62.1120%" y="1087.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::VectorModification as core::clone::Clone&gt;::clone (78 samples, 0.29%)</title><rect x="62.0273%" y="1061" width="0.2929%" height="15" fill="rgb(217,3,49)" fg:x="16516" fg:w="78"/><text x="62.2773%" y="1071.50"></text></g><g><title>&lt;graph_craft::document::NodeInput as core::clone::Clone&gt;::clone (251 samples, 0.94%)</title><rect x="61.7832%" y="1109" width="0.9427%" height="15" fill="rgb(218,225,5)" fg:x="16451" fg:w="251"/><text x="62.0332%" y="1119.50"></text></g><g><title>&lt;graphene_core::memo::MemoHash&lt;T&gt; as core::clone::Clone&gt;::clone (240 samples, 0.90%)</title><rect x="61.8245%" y="1093" width="0.9013%" height="15" fill="rgb(236,89,11)" fg:x="16462" fg:w="240"/><text x="62.0745%" y="1103.50"></text></g><g><title>__memmove_avx512_unaligned_erms (108 samples, 0.41%)</title><rect x="62.3202%" y="1077" width="0.4056%" height="15" fill="rgb(206,33,28)" fg:x="16594" fg:w="108"/><text x="62.5702%" y="1087.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="62.8310%" y="949" width="0.0225%" height="15" fill="rgb(241,56,42)" fg:x="16730" fg:w="6"/><text x="63.0810%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (50 samples, 0.19%)</title><rect x="62.7258%" y="1109" width="0.1878%" height="15" fill="rgb(222,44,11)" fg:x="16702" fg:w="50"/><text x="62.9758%" y="1119.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (50 samples, 0.19%)</title><rect x="62.7258%" y="1093" width="0.1878%" height="15" fill="rgb(234,111,20)" fg:x="16702" fg:w="50"/><text x="62.9758%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (50 samples, 0.19%)</title><rect x="62.7258%" y="1077" width="0.1878%" height="15" fill="rgb(237,77,6)" fg:x="16702" fg:w="50"/><text x="62.9758%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (47 samples, 0.18%)</title><rect x="62.7371%" y="1061" width="0.1765%" height="15" fill="rgb(235,111,23)" fg:x="16705" fg:w="47"/><text x="62.9871%" y="1071.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.18%)</title><rect x="62.7371%" y="1045" width="0.1765%" height="15" fill="rgb(251,135,29)" fg:x="16705" fg:w="47"/><text x="62.9871%" y="1055.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.18%)</title><rect x="62.7371%" y="1029" width="0.1765%" height="15" fill="rgb(217,57,1)" fg:x="16705" fg:w="47"/><text x="62.9871%" y="1039.50"></text></g><g><title>__rdl_alloc (47 samples, 0.18%)</title><rect x="62.7371%" y="1013" width="0.1765%" height="15" fill="rgb(249,119,31)" fg:x="16705" fg:w="47"/><text x="62.9871%" y="1023.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (47 samples, 0.18%)</title><rect x="62.7371%" y="997" width="0.1765%" height="15" fill="rgb(233,164,33)" fg:x="16705" fg:w="47"/><text x="62.9871%" y="1007.50"></text></g><g><title>malloc (45 samples, 0.17%)</title><rect x="62.7446%" y="981" width="0.1690%" height="15" fill="rgb(250,217,43)" fg:x="16707" fg:w="45"/><text x="62.9946%" y="991.50"></text></g><g><title>_int_malloc (44 samples, 0.17%)</title><rect x="62.7483%" y="965" width="0.1652%" height="15" fill="rgb(232,154,50)" fg:x="16708" fg:w="44"/><text x="62.9983%" y="975.50"></text></g><g><title>unlink_chunk.isra.0 (16 samples, 0.06%)</title><rect x="62.8535%" y="949" width="0.0601%" height="15" fill="rgb(227,190,8)" fg:x="16736" fg:w="16"/><text x="63.1035%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (397 samples, 1.49%)</title><rect x="61.7381%" y="1173" width="1.4910%" height="15" fill="rgb(209,217,32)" fg:x="16439" fg:w="397"/><text x="61.9881%" y="1183.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (388 samples, 1.46%)</title><rect x="61.7719%" y="1157" width="1.4572%" height="15" fill="rgb(243,203,50)" fg:x="16448" fg:w="388"/><text x="62.0219%" y="1167.50"></text></g><g><title>alloc::slice::hack::to_vec (388 samples, 1.46%)</title><rect x="61.7719%" y="1141" width="1.4572%" height="15" fill="rgb(232,152,27)" fg:x="16448" fg:w="388"/><text x="62.0219%" y="1151.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (388 samples, 1.46%)</title><rect x="61.7719%" y="1125" width="1.4572%" height="15" fill="rgb(240,34,29)" fg:x="16448" fg:w="388"/><text x="62.0219%" y="1135.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (84 samples, 0.32%)</title><rect x="62.9136%" y="1109" width="0.3155%" height="15" fill="rgb(215,185,52)" fg:x="16752" fg:w="84"/><text x="63.1636%" y="1119.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="63.2178%" y="1093" width="0.0113%" height="15" fill="rgb(240,89,49)" fg:x="16833" fg:w="3"/><text x="63.4678%" y="1103.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (11 samples, 0.04%)</title><rect x="63.2291%" y="1173" width="0.0413%" height="15" fill="rgb(225,12,52)" fg:x="16836" fg:w="11"/><text x="63.4791%" y="1183.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="63.2403%" y="1157" width="0.0300%" height="15" fill="rgb(239,128,45)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="1167.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="63.2403%" y="1141" width="0.0300%" height="15" fill="rgb(211,78,47)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="1151.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="63.2403%" y="1125" width="0.0300%" height="15" fill="rgb(232,31,21)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="1135.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (8 samples, 0.03%)</title><rect x="63.2403%" y="1109" width="0.0300%" height="15" fill="rgb(222,168,14)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (8 samples, 0.03%)</title><rect x="63.2403%" y="1093" width="0.0300%" height="15" fill="rgb(209,128,24)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8 samples, 0.03%)</title><rect x="63.2403%" y="1077" width="0.0300%" height="15" fill="rgb(249,35,13)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.03%)</title><rect x="63.2403%" y="1061" width="0.0300%" height="15" fill="rgb(218,7,2)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="1071.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.03%)</title><rect x="63.2403%" y="1045" width="0.0300%" height="15" fill="rgb(238,107,27)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="1055.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.03%)</title><rect x="63.2403%" y="1029" width="0.0300%" height="15" fill="rgb(217,88,38)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.03%)</title><rect x="63.2403%" y="1013" width="0.0300%" height="15" fill="rgb(230,207,0)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.03%)</title><rect x="63.2403%" y="997" width="0.0300%" height="15" fill="rgb(249,64,54)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (8 samples, 0.03%)</title><rect x="63.2403%" y="981" width="0.0300%" height="15" fill="rgb(231,7,11)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.03%)</title><rect x="63.2403%" y="965" width="0.0300%" height="15" fill="rgb(205,149,21)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.03%)</title><rect x="63.2403%" y="949" width="0.0300%" height="15" fill="rgb(215,126,34)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="959.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.03%)</title><rect x="63.2403%" y="933" width="0.0300%" height="15" fill="rgb(241,132,45)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="943.50"></text></g><g><title>__rdl_alloc (8 samples, 0.03%)</title><rect x="63.2403%" y="917" width="0.0300%" height="15" fill="rgb(252,69,32)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="927.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.03%)</title><rect x="63.2403%" y="901" width="0.0300%" height="15" fill="rgb(232,204,19)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="911.50"></text></g><g><title>malloc (8 samples, 0.03%)</title><rect x="63.2403%" y="885" width="0.0300%" height="15" fill="rgb(249,15,47)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="895.50"></text></g><g><title>_int_malloc (8 samples, 0.03%)</title><rect x="63.2403%" y="869" width="0.0300%" height="15" fill="rgb(209,227,23)" fg:x="16839" fg:w="8"/><text x="63.4903%" y="879.50"></text></g><g><title>&lt;graph_craft::document::NodeInput as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="63.3830%" y="1077" width="0.0113%" height="15" fill="rgb(248,92,24)" fg:x="16877" fg:w="3"/><text x="63.6330%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (29 samples, 0.11%)</title><rect x="63.4018%" y="1077" width="0.1089%" height="15" fill="rgb(247,59,2)" fg:x="16882" fg:w="29"/><text x="63.6518%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (29 samples, 0.11%)</title><rect x="63.4018%" y="1061" width="0.1089%" height="15" fill="rgb(221,30,5)" fg:x="16882" fg:w="29"/><text x="63.6518%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (29 samples, 0.11%)</title><rect x="63.4018%" y="1045" width="0.1089%" height="15" fill="rgb(208,108,53)" fg:x="16882" fg:w="29"/><text x="63.6518%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.11%)</title><rect x="63.4018%" y="1029" width="0.1089%" height="15" fill="rgb(211,183,26)" fg:x="16882" fg:w="29"/><text x="63.6518%" y="1039.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.11%)</title><rect x="63.4018%" y="1013" width="0.1089%" height="15" fill="rgb(232,132,4)" fg:x="16882" fg:w="29"/><text x="63.6518%" y="1023.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.11%)</title><rect x="63.4018%" y="997" width="0.1089%" height="15" fill="rgb(253,128,37)" fg:x="16882" fg:w="29"/><text x="63.6518%" y="1007.50"></text></g><g><title>__rdl_alloc (29 samples, 0.11%)</title><rect x="63.4018%" y="981" width="0.1089%" height="15" fill="rgb(221,58,24)" fg:x="16882" fg:w="29"/><text x="63.6518%" y="991.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (29 samples, 0.11%)</title><rect x="63.4018%" y="965" width="0.1089%" height="15" fill="rgb(230,54,45)" fg:x="16882" fg:w="29"/><text x="63.6518%" y="975.50"></text></g><g><title>malloc (28 samples, 0.11%)</title><rect x="63.4056%" y="949" width="0.1052%" height="15" fill="rgb(254,21,18)" fg:x="16883" fg:w="28"/><text x="63.6556%" y="959.50"></text></g><g><title>_int_malloc (27 samples, 0.10%)</title><rect x="63.4093%" y="933" width="0.1014%" height="15" fill="rgb(221,108,0)" fg:x="16884" fg:w="27"/><text x="63.6593%" y="943.50"></text></g><g><title>unlink_chunk.isra.0 (7 samples, 0.03%)</title><rect x="63.4844%" y="917" width="0.0263%" height="15" fill="rgb(206,95,1)" fg:x="16904" fg:w="7"/><text x="63.7344%" y="927.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (27 samples, 0.10%)</title><rect x="63.5107%" y="1077" width="0.1014%" height="15" fill="rgb(237,52,5)" fg:x="16911" fg:w="27"/><text x="63.7607%" y="1087.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="63.5933%" y="1061" width="0.0188%" height="15" fill="rgb(218,150,34)" fg:x="16933" fg:w="5"/><text x="63.8433%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (65 samples, 0.24%)</title><rect x="63.3718%" y="1141" width="0.2441%" height="15" fill="rgb(235,194,28)" fg:x="16874" fg:w="65"/><text x="63.6218%" y="1151.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (65 samples, 0.24%)</title><rect x="63.3718%" y="1125" width="0.2441%" height="15" fill="rgb(245,92,18)" fg:x="16874" fg:w="65"/><text x="63.6218%" y="1135.50"></text></g><g><title>alloc::slice::hack::to_vec (65 samples, 0.24%)</title><rect x="63.3718%" y="1109" width="0.2441%" height="15" fill="rgb(253,203,53)" fg:x="16874" fg:w="65"/><text x="63.6218%" y="1119.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (65 samples, 0.24%)</title><rect x="63.3718%" y="1093" width="0.2441%" height="15" fill="rgb(249,185,47)" fg:x="16874" fg:w="65"/><text x="63.6218%" y="1103.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="63.8525%" y="965" width="0.0300%" height="15" fill="rgb(252,194,52)" fg:x="17002" fg:w="8"/><text x="64.1025%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.03%)</title><rect x="64.2356%" y="821" width="0.0300%" height="15" fill="rgb(210,53,36)" fg:x="17104" fg:w="8"/><text x="64.4856%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.03%)</title><rect x="64.2356%" y="805" width="0.0300%" height="15" fill="rgb(237,37,25)" fg:x="17104" fg:w="8"/><text x="64.4856%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (8 samples, 0.03%)</title><rect x="64.2356%" y="789" width="0.0300%" height="15" fill="rgb(242,116,27)" fg:x="17104" fg:w="8"/><text x="64.4856%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.03%)</title><rect x="64.2356%" y="773" width="0.0300%" height="15" fill="rgb(213,185,26)" fg:x="17104" fg:w="8"/><text x="64.4856%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.03%)</title><rect x="64.2356%" y="757" width="0.0300%" height="15" fill="rgb(225,204,8)" fg:x="17104" fg:w="8"/><text x="64.4856%" y="767.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.03%)</title><rect x="64.2356%" y="741" width="0.0300%" height="15" fill="rgb(254,111,37)" fg:x="17104" fg:w="8"/><text x="64.4856%" y="751.50"></text></g><g><title>__rdl_alloc (8 samples, 0.03%)</title><rect x="64.2356%" y="725" width="0.0300%" height="15" fill="rgb(242,35,9)" fg:x="17104" fg:w="8"/><text x="64.4856%" y="735.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.03%)</title><rect x="64.2356%" y="709" width="0.0300%" height="15" fill="rgb(232,138,49)" fg:x="17104" fg:w="8"/><text x="64.4856%" y="719.50"></text></g><g><title>malloc (8 samples, 0.03%)</title><rect x="64.2356%" y="693" width="0.0300%" height="15" fill="rgb(247,56,4)" fg:x="17104" fg:w="8"/><text x="64.4856%" y="703.50"></text></g><g><title>_int_malloc (7 samples, 0.03%)</title><rect x="64.2393%" y="677" width="0.0263%" height="15" fill="rgb(226,179,17)" fg:x="17105" fg:w="7"/><text x="64.4893%" y="687.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (25 samples, 0.09%)</title><rect x="64.2356%" y="933" width="0.0939%" height="15" fill="rgb(216,163,45)" fg:x="17104" fg:w="25"/><text x="64.4856%" y="943.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (25 samples, 0.09%)</title><rect x="64.2356%" y="917" width="0.0939%" height="15" fill="rgb(211,157,3)" fg:x="17104" fg:w="25"/><text x="64.4856%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (25 samples, 0.09%)</title><rect x="64.2356%" y="901" width="0.0939%" height="15" fill="rgb(234,44,20)" fg:x="17104" fg:w="25"/><text x="64.4856%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (25 samples, 0.09%)</title><rect x="64.2356%" y="885" width="0.0939%" height="15" fill="rgb(254,138,23)" fg:x="17104" fg:w="25"/><text x="64.4856%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25 samples, 0.09%)</title><rect x="64.2356%" y="869" width="0.0939%" height="15" fill="rgb(206,119,39)" fg:x="17104" fg:w="25"/><text x="64.4856%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.09%)</title><rect x="64.2356%" y="853" width="0.0939%" height="15" fill="rgb(231,105,52)" fg:x="17104" fg:w="25"/><text x="64.4856%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (25 samples, 0.09%)</title><rect x="64.2356%" y="837" width="0.0939%" height="15" fill="rgb(250,20,5)" fg:x="17104" fg:w="25"/><text x="64.4856%" y="847.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (17 samples, 0.06%)</title><rect x="64.2656%" y="821" width="0.0638%" height="15" fill="rgb(215,198,30)" fg:x="17112" fg:w="17"/><text x="64.5156%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.06%)</title><rect x="64.2656%" y="805" width="0.0638%" height="15" fill="rgb(246,142,8)" fg:x="17112" fg:w="17"/><text x="64.5156%" y="815.50"></text></g><g><title>__memmove_avx512_unaligned_erms (17 samples, 0.06%)</title><rect x="64.2656%" y="789" width="0.0638%" height="15" fill="rgb(243,26,38)" fg:x="17112" fg:w="17"/><text x="64.5156%" y="799.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="64.3294%" y="933" width="0.0113%" height="15" fill="rgb(205,133,28)" fg:x="17129" fg:w="3"/><text x="64.5794%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (73 samples, 0.27%)</title><rect x="64.3482%" y="805" width="0.2742%" height="15" fill="rgb(212,34,0)" fg:x="17134" fg:w="73"/><text x="64.5982%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (73 samples, 0.27%)</title><rect x="64.3482%" y="789" width="0.2742%" height="15" fill="rgb(251,226,22)" fg:x="17134" fg:w="73"/><text x="64.5982%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (73 samples, 0.27%)</title><rect x="64.3482%" y="773" width="0.2742%" height="15" fill="rgb(252,119,9)" fg:x="17134" fg:w="73"/><text x="64.5982%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (73 samples, 0.27%)</title><rect x="64.3482%" y="757" width="0.2742%" height="15" fill="rgb(213,150,50)" fg:x="17134" fg:w="73"/><text x="64.5982%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (73 samples, 0.27%)</title><rect x="64.3482%" y="741" width="0.2742%" height="15" fill="rgb(212,24,39)" fg:x="17134" fg:w="73"/><text x="64.5982%" y="751.50"></text></g><g><title>alloc::alloc::alloc (73 samples, 0.27%)</title><rect x="64.3482%" y="725" width="0.2742%" height="15" fill="rgb(213,46,39)" fg:x="17134" fg:w="73"/><text x="64.5982%" y="735.50"></text></g><g><title>__rdl_alloc (73 samples, 0.27%)</title><rect x="64.3482%" y="709" width="0.2742%" height="15" fill="rgb(239,106,12)" fg:x="17134" fg:w="73"/><text x="64.5982%" y="719.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (73 samples, 0.27%)</title><rect x="64.3482%" y="693" width="0.2742%" height="15" fill="rgb(249,229,21)" fg:x="17134" fg:w="73"/><text x="64.5982%" y="703.50"></text></g><g><title>malloc (72 samples, 0.27%)</title><rect x="64.3520%" y="677" width="0.2704%" height="15" fill="rgb(212,158,3)" fg:x="17135" fg:w="72"/><text x="64.6020%" y="687.50"></text></g><g><title>_int_malloc (66 samples, 0.25%)</title><rect x="64.3745%" y="661" width="0.2479%" height="15" fill="rgb(253,26,48)" fg:x="17141" fg:w="66"/><text x="64.6245%" y="671.50"></text></g><g><title>unlink_chunk.isra.0 (9 samples, 0.03%)</title><rect x="64.5886%" y="645" width="0.0338%" height="15" fill="rgb(238,178,20)" fg:x="17198" fg:w="9"/><text x="64.8386%" y="655.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (90 samples, 0.34%)</title><rect x="64.3407%" y="917" width="0.3380%" height="15" fill="rgb(208,86,15)" fg:x="17132" fg:w="90"/><text x="64.5907%" y="927.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (88 samples, 0.33%)</title><rect x="64.3482%" y="901" width="0.3305%" height="15" fill="rgb(239,42,53)" fg:x="17134" fg:w="88"/><text x="64.5982%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (88 samples, 0.33%)</title><rect x="64.3482%" y="885" width="0.3305%" height="15" fill="rgb(245,226,8)" fg:x="17134" fg:w="88"/><text x="64.5982%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (88 samples, 0.33%)</title><rect x="64.3482%" y="869" width="0.3305%" height="15" fill="rgb(216,176,32)" fg:x="17134" fg:w="88"/><text x="64.5982%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (88 samples, 0.33%)</title><rect x="64.3482%" y="853" width="0.3305%" height="15" fill="rgb(231,186,21)" fg:x="17134" fg:w="88"/><text x="64.5982%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (88 samples, 0.33%)</title><rect x="64.3482%" y="837" width="0.3305%" height="15" fill="rgb(205,95,49)" fg:x="17134" fg:w="88"/><text x="64.5982%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (88 samples, 0.33%)</title><rect x="64.3482%" y="821" width="0.3305%" height="15" fill="rgb(217,145,8)" fg:x="17134" fg:w="88"/><text x="64.5982%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (15 samples, 0.06%)</title><rect x="64.6224%" y="805" width="0.0563%" height="15" fill="rgb(239,144,48)" fg:x="17207" fg:w="15"/><text x="64.8724%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.06%)</title><rect x="64.6224%" y="789" width="0.0563%" height="15" fill="rgb(214,189,23)" fg:x="17207" fg:w="15"/><text x="64.8724%" y="799.50"></text></g><g><title>__memmove_avx512_unaligned_erms (14 samples, 0.05%)</title><rect x="64.6261%" y="773" width="0.0526%" height="15" fill="rgb(229,157,17)" fg:x="17208" fg:w="14"/><text x="64.8761%" y="783.50"></text></g><g><title>&lt;graph_craft::document::NodeInput as core::clone::Clone&gt;::clone (214 samples, 0.80%)</title><rect x="63.8825%" y="965" width="0.8037%" height="15" fill="rgb(230,5,48)" fg:x="17010" fg:w="214"/><text x="64.1325%" y="975.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (131 samples, 0.49%)</title><rect x="64.1942%" y="949" width="0.4920%" height="15" fill="rgb(224,156,48)" fg:x="17093" fg:w="131"/><text x="64.4442%" y="959.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (92 samples, 0.35%)</title><rect x="64.3407%" y="933" width="0.3455%" height="15" fill="rgb(223,14,29)" fg:x="17132" fg:w="92"/><text x="64.5907%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="64.9228%" y="805" width="0.0113%" height="15" fill="rgb(229,96,36)" fg:x="17287" fg:w="3"/><text x="65.1728%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (89 samples, 0.33%)</title><rect x="64.6937%" y="965" width="0.3342%" height="15" fill="rgb(231,102,53)" fg:x="17226" fg:w="89"/><text x="64.9437%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (88 samples, 0.33%)</title><rect x="64.6975%" y="949" width="0.3305%" height="15" fill="rgb(210,77,38)" fg:x="17227" fg:w="88"/><text x="64.9475%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (88 samples, 0.33%)</title><rect x="64.6975%" y="933" width="0.3305%" height="15" fill="rgb(235,131,6)" fg:x="17227" fg:w="88"/><text x="64.9475%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (86 samples, 0.32%)</title><rect x="64.7050%" y="917" width="0.3230%" height="15" fill="rgb(252,55,38)" fg:x="17229" fg:w="86"/><text x="64.9550%" y="927.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (86 samples, 0.32%)</title><rect x="64.7050%" y="901" width="0.3230%" height="15" fill="rgb(246,38,14)" fg:x="17229" fg:w="86"/><text x="64.9550%" y="911.50"></text></g><g><title>alloc::alloc::alloc (86 samples, 0.32%)</title><rect x="64.7050%" y="885" width="0.3230%" height="15" fill="rgb(242,27,5)" fg:x="17229" fg:w="86"/><text x="64.9550%" y="895.50"></text></g><g><title>__rdl_alloc (86 samples, 0.32%)</title><rect x="64.7050%" y="869" width="0.3230%" height="15" fill="rgb(228,65,35)" fg:x="17229" fg:w="86"/><text x="64.9550%" y="879.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (86 samples, 0.32%)</title><rect x="64.7050%" y="853" width="0.3230%" height="15" fill="rgb(245,93,11)" fg:x="17229" fg:w="86"/><text x="64.9550%" y="863.50"></text></g><g><title>malloc (86 samples, 0.32%)</title><rect x="64.7050%" y="837" width="0.3230%" height="15" fill="rgb(213,1,31)" fg:x="17229" fg:w="86"/><text x="64.9550%" y="847.50"></text></g><g><title>_int_malloc (83 samples, 0.31%)</title><rect x="64.7163%" y="821" width="0.3117%" height="15" fill="rgb(237,205,14)" fg:x="17232" fg:w="83"/><text x="64.9663%" y="831.50"></text></g><g><title>unlink_chunk.isra.0 (25 samples, 0.09%)</title><rect x="64.9341%" y="805" width="0.0939%" height="15" fill="rgb(232,118,45)" fg:x="17290" fg:w="25"/><text x="65.1841%" y="815.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (157 samples, 0.59%)</title><rect x="65.0280%" y="965" width="0.5896%" height="15" fill="rgb(218,5,6)" fg:x="17315" fg:w="157"/><text x="65.2780%" y="975.50"></text></g><g><title>__memmove_avx512_unaligned_erms (33 samples, 0.12%)</title><rect x="65.4937%" y="949" width="0.1239%" height="15" fill="rgb(251,87,51)" fg:x="17439" fg:w="33"/><text x="65.7437%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (483 samples, 1.81%)</title><rect x="63.8224%" y="1029" width="1.8139%" height="15" fill="rgb(207,225,20)" fg:x="16994" fg:w="483"/><text x="64.0724%" y="1039.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (480 samples, 1.80%)</title><rect x="63.8337%" y="1013" width="1.8027%" height="15" fill="rgb(222,78,54)" fg:x="16997" fg:w="480"/><text x="64.0837%" y="1023.50">a..</text></g><g><title>alloc::slice::hack::to_vec (480 samples, 1.80%)</title><rect x="63.8337%" y="997" width="1.8027%" height="15" fill="rgb(232,85,16)" fg:x="16997" fg:w="480"/><text x="64.0837%" y="1007.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (480 samples, 1.80%)</title><rect x="63.8337%" y="981" width="1.8027%" height="15" fill="rgb(244,25,33)" fg:x="16997" fg:w="480"/><text x="64.0837%" y="991.50">&lt;..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (5 samples, 0.02%)</title><rect x="65.6176%" y="965" width="0.0188%" height="15" fill="rgb(233,24,36)" fg:x="17472" fg:w="5"/><text x="65.8676%" y="975.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (5 samples, 0.02%)</title><rect x="65.6176%" y="949" width="0.0188%" height="15" fill="rgb(253,49,54)" fg:x="17472" fg:w="5"/><text x="65.8676%" y="959.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.02%)</title><rect x="65.6176%" y="933" width="0.0188%" height="15" fill="rgb(245,12,22)" fg:x="17472" fg:w="5"/><text x="65.8676%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.06%)</title><rect x="65.6927%" y="885" width="0.0601%" height="15" fill="rgb(253,141,28)" fg:x="17492" fg:w="16"/><text x="65.9427%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.06%)</title><rect x="65.6927%" y="869" width="0.0601%" height="15" fill="rgb(225,207,27)" fg:x="17492" fg:w="16"/><text x="65.9427%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (16 samples, 0.06%)</title><rect x="65.6927%" y="853" width="0.0601%" height="15" fill="rgb(220,84,2)" fg:x="17492" fg:w="16"/><text x="65.9427%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.06%)</title><rect x="65.6927%" y="837" width="0.0601%" height="15" fill="rgb(224,37,37)" fg:x="17492" fg:w="16"/><text x="65.9427%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.06%)</title><rect x="65.6927%" y="821" width="0.0601%" height="15" fill="rgb(220,143,18)" fg:x="17492" fg:w="16"/><text x="65.9427%" y="831.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.06%)</title><rect x="65.6927%" y="805" width="0.0601%" height="15" fill="rgb(210,88,33)" fg:x="17492" fg:w="16"/><text x="65.9427%" y="815.50"></text></g><g><title>__rdl_alloc (16 samples, 0.06%)</title><rect x="65.6927%" y="789" width="0.0601%" height="15" fill="rgb(219,87,51)" fg:x="17492" fg:w="16"/><text x="65.9427%" y="799.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16 samples, 0.06%)</title><rect x="65.6927%" y="773" width="0.0601%" height="15" fill="rgb(211,7,35)" fg:x="17492" fg:w="16"/><text x="65.9427%" y="783.50"></text></g><g><title>malloc (15 samples, 0.06%)</title><rect x="65.6965%" y="757" width="0.0563%" height="15" fill="rgb(232,77,2)" fg:x="17493" fg:w="15"/><text x="65.9465%" y="767.50"></text></g><g><title>_int_malloc (14 samples, 0.05%)</title><rect x="65.7002%" y="741" width="0.0526%" height="15" fill="rgb(249,94,25)" fg:x="17494" fg:w="14"/><text x="65.9502%" y="751.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (24 samples, 0.09%)</title><rect x="65.6890%" y="997" width="0.0901%" height="15" fill="rgb(215,112,2)" fg:x="17491" fg:w="24"/><text x="65.9390%" y="1007.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (23 samples, 0.09%)</title><rect x="65.6927%" y="981" width="0.0864%" height="15" fill="rgb(226,115,48)" fg:x="17492" fg:w="23"/><text x="65.9427%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (23 samples, 0.09%)</title><rect x="65.6927%" y="965" width="0.0864%" height="15" fill="rgb(249,196,10)" fg:x="17492" fg:w="23"/><text x="65.9427%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (23 samples, 0.09%)</title><rect x="65.6927%" y="949" width="0.0864%" height="15" fill="rgb(237,109,14)" fg:x="17492" fg:w="23"/><text x="65.9427%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (23 samples, 0.09%)</title><rect x="65.6927%" y="933" width="0.0864%" height="15" fill="rgb(217,103,53)" fg:x="17492" fg:w="23"/><text x="65.9427%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (23 samples, 0.09%)</title><rect x="65.6927%" y="917" width="0.0864%" height="15" fill="rgb(244,137,9)" fg:x="17492" fg:w="23"/><text x="65.9427%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (23 samples, 0.09%)</title><rect x="65.6927%" y="901" width="0.0864%" height="15" fill="rgb(227,201,3)" fg:x="17492" fg:w="23"/><text x="65.9427%" y="911.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7 samples, 0.03%)</title><rect x="65.7528%" y="885" width="0.0263%" height="15" fill="rgb(243,94,6)" fg:x="17508" fg:w="7"/><text x="66.0028%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.03%)</title><rect x="65.7528%" y="869" width="0.0263%" height="15" fill="rgb(235,118,5)" fg:x="17508" fg:w="7"/><text x="66.0028%" y="879.50"></text></g><g><title>__memmove_avx512_unaligned_erms (7 samples, 0.03%)</title><rect x="65.7528%" y="853" width="0.0263%" height="15" fill="rgb(247,10,30)" fg:x="17508" fg:w="7"/><text x="66.0028%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20 samples, 0.08%)</title><rect x="65.7791%" y="869" width="0.0751%" height="15" fill="rgb(205,26,28)" fg:x="17515" fg:w="20"/><text x="66.0291%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.08%)</title><rect x="65.7791%" y="853" width="0.0751%" height="15" fill="rgb(206,99,35)" fg:x="17515" fg:w="20"/><text x="66.0291%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (20 samples, 0.08%)</title><rect x="65.7791%" y="837" width="0.0751%" height="15" fill="rgb(238,130,40)" fg:x="17515" fg:w="20"/><text x="66.0291%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.08%)</title><rect x="65.7791%" y="821" width="0.0751%" height="15" fill="rgb(224,126,31)" fg:x="17515" fg:w="20"/><text x="66.0291%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.08%)</title><rect x="65.7791%" y="805" width="0.0751%" height="15" fill="rgb(254,105,17)" fg:x="17515" fg:w="20"/><text x="66.0291%" y="815.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.08%)</title><rect x="65.7791%" y="789" width="0.0751%" height="15" fill="rgb(216,87,36)" fg:x="17515" fg:w="20"/><text x="66.0291%" y="799.50"></text></g><g><title>__rdl_alloc (20 samples, 0.08%)</title><rect x="65.7791%" y="773" width="0.0751%" height="15" fill="rgb(240,21,12)" fg:x="17515" fg:w="20"/><text x="66.0291%" y="783.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.08%)</title><rect x="65.7791%" y="757" width="0.0751%" height="15" fill="rgb(245,192,34)" fg:x="17515" fg:w="20"/><text x="66.0291%" y="767.50"></text></g><g><title>malloc (19 samples, 0.07%)</title><rect x="65.7829%" y="741" width="0.0714%" height="15" fill="rgb(226,100,49)" fg:x="17516" fg:w="19"/><text x="66.0329%" y="751.50"></text></g><g><title>_int_malloc (17 samples, 0.06%)</title><rect x="65.7904%" y="725" width="0.0638%" height="15" fill="rgb(245,188,27)" fg:x="17518" fg:w="17"/><text x="66.0404%" y="735.50"></text></g><g><title>unlink_chunk.isra.0 (4 samples, 0.02%)</title><rect x="65.8392%" y="709" width="0.0150%" height="15" fill="rgb(212,170,8)" fg:x="17531" fg:w="4"/><text x="66.0892%" y="719.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (62 samples, 0.23%)</title><rect x="65.6364%" y="1029" width="0.2328%" height="15" fill="rgb(217,113,29)" fg:x="17477" fg:w="62"/><text x="65.8864%" y="1039.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (49 samples, 0.18%)</title><rect x="65.6852%" y="1013" width="0.1840%" height="15" fill="rgb(237,30,3)" fg:x="17490" fg:w="49"/><text x="65.9352%" y="1023.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (24 samples, 0.09%)</title><rect x="65.7791%" y="997" width="0.0901%" height="15" fill="rgb(227,19,28)" fg:x="17515" fg:w="24"/><text x="66.0291%" y="1007.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (24 samples, 0.09%)</title><rect x="65.7791%" y="981" width="0.0901%" height="15" fill="rgb(239,172,45)" fg:x="17515" fg:w="24"/><text x="66.0291%" y="991.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (24 samples, 0.09%)</title><rect x="65.7791%" y="965" width="0.0901%" height="15" fill="rgb(254,55,39)" fg:x="17515" fg:w="24"/><text x="66.0291%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (24 samples, 0.09%)</title><rect x="65.7791%" y="949" width="0.0901%" height="15" fill="rgb(249,208,12)" fg:x="17515" fg:w="24"/><text x="66.0291%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (24 samples, 0.09%)</title><rect x="65.7791%" y="933" width="0.0901%" height="15" fill="rgb(240,52,13)" fg:x="17515" fg:w="24"/><text x="66.0291%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (24 samples, 0.09%)</title><rect x="65.7791%" y="917" width="0.0901%" height="15" fill="rgb(252,149,13)" fg:x="17515" fg:w="24"/><text x="66.0291%" y="927.50"></text></g><g><title>alloc::slice::hack::to_vec (24 samples, 0.09%)</title><rect x="65.7791%" y="901" width="0.0901%" height="15" fill="rgb(232,81,48)" fg:x="17515" fg:w="24"/><text x="66.0291%" y="911.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (24 samples, 0.09%)</title><rect x="65.7791%" y="885" width="0.0901%" height="15" fill="rgb(222,144,2)" fg:x="17515" fg:w="24"/><text x="66.0291%" y="895.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.02%)</title><rect x="65.8542%" y="869" width="0.0150%" height="15" fill="rgb(216,81,32)" fg:x="17535" fg:w="4"/><text x="66.1042%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.02%)</title><rect x="65.8542%" y="853" width="0.0150%" height="15" fill="rgb(244,78,51)" fg:x="17535" fg:w="4"/><text x="66.1042%" y="863.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="65.8542%" y="837" width="0.0150%" height="15" fill="rgb(217,66,21)" fg:x="17535" fg:w="4"/><text x="66.1042%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.04%)</title><rect x="65.8730%" y="885" width="0.0413%" height="15" fill="rgb(247,101,42)" fg:x="17540" fg:w="11"/><text x="66.1230%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.04%)</title><rect x="65.8730%" y="869" width="0.0413%" height="15" fill="rgb(227,81,39)" fg:x="17540" fg:w="11"/><text x="66.1230%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (11 samples, 0.04%)</title><rect x="65.8730%" y="853" width="0.0413%" height="15" fill="rgb(220,223,44)" fg:x="17540" fg:w="11"/><text x="66.1230%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.04%)</title><rect x="65.8767%" y="837" width="0.0376%" height="15" fill="rgb(205,218,2)" fg:x="17541" fg:w="10"/><text x="66.1267%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.04%)</title><rect x="65.8767%" y="821" width="0.0376%" height="15" fill="rgb(212,207,28)" fg:x="17541" fg:w="10"/><text x="66.1267%" y="831.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.04%)</title><rect x="65.8767%" y="805" width="0.0376%" height="15" fill="rgb(224,12,41)" fg:x="17541" fg:w="10"/><text x="66.1267%" y="815.50"></text></g><g><title>__rdl_alloc (10 samples, 0.04%)</title><rect x="65.8767%" y="789" width="0.0376%" height="15" fill="rgb(216,118,12)" fg:x="17541" fg:w="10"/><text x="66.1267%" y="799.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (10 samples, 0.04%)</title><rect x="65.8767%" y="773" width="0.0376%" height="15" fill="rgb(252,97,46)" fg:x="17541" fg:w="10"/><text x="66.1267%" y="783.50"></text></g><g><title>malloc (10 samples, 0.04%)</title><rect x="65.8767%" y="757" width="0.0376%" height="15" fill="rgb(244,206,19)" fg:x="17541" fg:w="10"/><text x="66.1267%" y="767.50"></text></g><g><title>_int_malloc (6 samples, 0.02%)</title><rect x="65.8918%" y="741" width="0.0225%" height="15" fill="rgb(231,84,31)" fg:x="17545" fg:w="6"/><text x="66.1418%" y="751.50"></text></g><g><title>&lt;graph_craft::document::DocumentNodeImplementation as core::clone::Clone&gt;::clone (31 samples, 0.12%)</title><rect x="65.8692%" y="1029" width="0.1164%" height="15" fill="rgb(244,133,0)" fg:x="17539" fg:w="31"/><text x="66.1192%" y="1039.50"></text></g><g><title>&lt;graphene_core::types::ProtoNodeIdentifier as core::clone::Clone&gt;::clone (30 samples, 0.11%)</title><rect x="65.8730%" y="1013" width="0.1127%" height="15" fill="rgb(223,15,50)" fg:x="17540" fg:w="30"/><text x="66.1230%" y="1023.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (30 samples, 0.11%)</title><rect x="65.8730%" y="997" width="0.1127%" height="15" fill="rgb(250,118,49)" fg:x="17540" fg:w="30"/><text x="66.1230%" y="1007.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (30 samples, 0.11%)</title><rect x="65.8730%" y="981" width="0.1127%" height="15" fill="rgb(248,25,38)" fg:x="17540" fg:w="30"/><text x="66.1230%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (30 samples, 0.11%)</title><rect x="65.8730%" y="965" width="0.1127%" height="15" fill="rgb(215,70,14)" fg:x="17540" fg:w="30"/><text x="66.1230%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (30 samples, 0.11%)</title><rect x="65.8730%" y="949" width="0.1127%" height="15" fill="rgb(215,28,15)" fg:x="17540" fg:w="30"/><text x="66.1230%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (30 samples, 0.11%)</title><rect x="65.8730%" y="933" width="0.1127%" height="15" fill="rgb(243,6,28)" fg:x="17540" fg:w="30"/><text x="66.1230%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (30 samples, 0.11%)</title><rect x="65.8730%" y="917" width="0.1127%" height="15" fill="rgb(222,130,1)" fg:x="17540" fg:w="30"/><text x="66.1230%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (30 samples, 0.11%)</title><rect x="65.8730%" y="901" width="0.1127%" height="15" fill="rgb(236,166,44)" fg:x="17540" fg:w="30"/><text x="66.1230%" y="911.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (19 samples, 0.07%)</title><rect x="65.9143%" y="885" width="0.0714%" height="15" fill="rgb(221,108,14)" fg:x="17551" fg:w="19"/><text x="66.1643%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.07%)</title><rect x="65.9143%" y="869" width="0.0714%" height="15" fill="rgb(252,3,45)" fg:x="17551" fg:w="19"/><text x="66.1643%" y="879.50"></text></g><g><title>__memmove_avx512_unaligned_erms (15 samples, 0.06%)</title><rect x="65.9293%" y="853" width="0.0563%" height="15" fill="rgb(237,68,30)" fg:x="17555" fg:w="15"/><text x="66.1793%" y="863.50"></text></g><g><title>core::clone::Clone::clone (620 samples, 2.33%)</title><rect x="63.6647%" y="1061" width="2.3285%" height="15" fill="rgb(211,79,22)" fg:x="16952" fg:w="620"/><text x="63.9147%" y="1071.50">c..</text></g><g><title>&lt;graph_craft::document::DocumentNode as core::clone::Clone&gt;::clone (610 samples, 2.29%)</title><rect x="63.7023%" y="1045" width="2.2909%" height="15" fill="rgb(252,185,21)" fg:x="16962" fg:w="610"/><text x="63.9523%" y="1055.50">&lt;..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (4 samples, 0.02%)</title><rect x="65.9932%" y="1061" width="0.0150%" height="15" fill="rgb(225,189,26)" fg:x="17572" fg:w="4"/><text x="66.2432%" y="1071.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.02%)</title><rect x="65.9932%" y="1045" width="0.0150%" height="15" fill="rgb(241,30,40)" fg:x="17572" fg:w="4"/><text x="66.2432%" y="1055.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="65.9932%" y="1029" width="0.0150%" height="15" fill="rgb(235,215,44)" fg:x="17572" fg:w="4"/><text x="66.2432%" y="1039.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (646 samples, 2.43%)</title><rect x="63.6572%" y="1093" width="2.4261%" height="15" fill="rgb(205,8,29)" fg:x="16950" fg:w="646"/><text x="63.9072%" y="1103.50">&lt;h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (646 samples, 2.43%)</title><rect x="63.6572%" y="1077" width="2.4261%" height="15" fill="rgb(241,137,42)" fg:x="16950" fg:w="646"/><text x="63.9072%" y="1087.50">ha..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (20 samples, 0.08%)</title><rect x="66.0082%" y="1061" width="0.0751%" height="15" fill="rgb(237,155,2)" fg:x="17576" fg:w="20"/><text x="66.2582%" y="1071.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (20 samples, 0.08%)</title><rect x="66.0082%" y="1045" width="0.0751%" height="15" fill="rgb(245,29,42)" fg:x="17576" fg:w="20"/><text x="66.2582%" y="1055.50"></text></g><g><title>core::ptr::write (20 samples, 0.08%)</title><rect x="66.0082%" y="1029" width="0.0751%" height="15" fill="rgb(234,101,35)" fg:x="17576" fg:w="20"/><text x="66.2582%" y="1039.50"></text></g><g><title>&lt;graph_craft::document::NodeNetwork as core::clone::Clone&gt;::clone (770 samples, 2.89%)</title><rect x="63.3680%" y="1157" width="2.8918%" height="15" fill="rgb(228,64,37)" fg:x="16873" fg:w="770"/><text x="63.6180%" y="1167.50">&lt;g..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (704 samples, 2.64%)</title><rect x="63.6159%" y="1141" width="2.6439%" height="15" fill="rgb(217,214,36)" fg:x="16939" fg:w="704"/><text x="63.8659%" y="1151.50">&lt;s..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (695 samples, 2.61%)</title><rect x="63.6497%" y="1125" width="2.6101%" height="15" fill="rgb(243,70,3)" fg:x="16948" fg:w="695"/><text x="63.8997%" y="1135.50">&lt;h..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (694 samples, 2.61%)</title><rect x="63.6534%" y="1109" width="2.6064%" height="15" fill="rgb(253,158,52)" fg:x="16949" fg:w="694"/><text x="63.9034%" y="1119.50">&lt;h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (47 samples, 0.18%)</title><rect x="66.0833%" y="1093" width="0.1765%" height="15" fill="rgb(234,111,54)" fg:x="17596" fg:w="47"/><text x="66.3333%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (47 samples, 0.18%)</title><rect x="66.0833%" y="1077" width="0.1765%" height="15" fill="rgb(217,70,32)" fg:x="17596" fg:w="47"/><text x="66.3333%" y="1087.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (45 samples, 0.17%)</title><rect x="66.0908%" y="1061" width="0.1690%" height="15" fill="rgb(234,18,33)" fg:x="17598" fg:w="45"/><text x="66.3408%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.17%)</title><rect x="66.0908%" y="1045" width="0.1690%" height="15" fill="rgb(234,12,49)" fg:x="17598" fg:w="45"/><text x="66.3408%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.17%)</title><rect x="66.0908%" y="1029" width="0.1690%" height="15" fill="rgb(236,10,21)" fg:x="17598" fg:w="45"/><text x="66.3408%" y="1039.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.17%)</title><rect x="66.0908%" y="1013" width="0.1690%" height="15" fill="rgb(248,182,45)" fg:x="17598" fg:w="45"/><text x="66.3408%" y="1023.50"></text></g><g><title>__rdl_alloc (45 samples, 0.17%)</title><rect x="66.0908%" y="997" width="0.1690%" height="15" fill="rgb(217,95,36)" fg:x="17598" fg:w="45"/><text x="66.3408%" y="1007.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (45 samples, 0.17%)</title><rect x="66.0908%" y="981" width="0.1690%" height="15" fill="rgb(212,110,31)" fg:x="17598" fg:w="45"/><text x="66.3408%" y="991.50"></text></g><g><title>malloc (45 samples, 0.17%)</title><rect x="66.0908%" y="965" width="0.1690%" height="15" fill="rgb(206,32,53)" fg:x="17598" fg:w="45"/><text x="66.3408%" y="975.50"></text></g><g><title>_int_malloc (45 samples, 0.17%)</title><rect x="66.0908%" y="949" width="0.1690%" height="15" fill="rgb(246,141,37)" fg:x="17598" fg:w="45"/><text x="66.3408%" y="959.50"></text></g><g><title>unlink_chunk.isra.0 (7 samples, 0.03%)</title><rect x="66.2335%" y="933" width="0.0263%" height="15" fill="rgb(219,16,7)" fg:x="17636" fg:w="7"/><text x="66.4835%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.03%)</title><rect x="66.2598%" y="1029" width="0.0263%" height="15" fill="rgb(230,205,45)" fg:x="17643" fg:w="7"/><text x="66.5098%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.03%)</title><rect x="66.2598%" y="1013" width="0.0263%" height="15" fill="rgb(231,43,49)" fg:x="17643" fg:w="7"/><text x="66.5098%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (7 samples, 0.03%)</title><rect x="66.2598%" y="997" width="0.0263%" height="15" fill="rgb(212,106,34)" fg:x="17643" fg:w="7"/><text x="66.5098%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.03%)</title><rect x="66.2598%" y="981" width="0.0263%" height="15" fill="rgb(206,83,17)" fg:x="17643" fg:w="7"/><text x="66.5098%" y="991.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.03%)</title><rect x="66.2598%" y="965" width="0.0263%" height="15" fill="rgb(244,154,49)" fg:x="17643" fg:w="7"/><text x="66.5098%" y="975.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.03%)</title><rect x="66.2598%" y="949" width="0.0263%" height="15" fill="rgb(244,149,49)" fg:x="17643" fg:w="7"/><text x="66.5098%" y="959.50"></text></g><g><title>__rdl_alloc (7 samples, 0.03%)</title><rect x="66.2598%" y="933" width="0.0263%" height="15" fill="rgb(227,134,18)" fg:x="17643" fg:w="7"/><text x="66.5098%" y="943.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.03%)</title><rect x="66.2598%" y="917" width="0.0263%" height="15" fill="rgb(237,116,36)" fg:x="17643" fg:w="7"/><text x="66.5098%" y="927.50"></text></g><g><title>malloc (7 samples, 0.03%)</title><rect x="66.2598%" y="901" width="0.0263%" height="15" fill="rgb(205,129,40)" fg:x="17643" fg:w="7"/><text x="66.5098%" y="911.50"></text></g><g><title>_int_malloc (7 samples, 0.03%)</title><rect x="66.2598%" y="885" width="0.0263%" height="15" fill="rgb(236,178,4)" fg:x="17643" fg:w="7"/><text x="66.5098%" y="895.50"></text></g><g><title>&lt;graph_craft::document::DocumentNodeImplementation as core::clone::Clone&gt;::clone (804 samples, 3.02%)</title><rect x="63.2704%" y="1173" width="3.0195%" height="15" fill="rgb(251,76,53)" fg:x="16847" fg:w="804"/><text x="63.5204%" y="1183.50">&lt;gr..</text></g><g><title>&lt;graphene_core::types::ProtoNodeIdentifier as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="66.2598%" y="1157" width="0.0300%" height="15" fill="rgb(242,92,40)" fg:x="17643" fg:w="8"/><text x="66.5098%" y="1167.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="66.2598%" y="1141" width="0.0300%" height="15" fill="rgb(209,45,30)" fg:x="17643" fg:w="8"/><text x="66.5098%" y="1151.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (8 samples, 0.03%)</title><rect x="66.2598%" y="1125" width="0.0300%" height="15" fill="rgb(218,157,36)" fg:x="17643" fg:w="8"/><text x="66.5098%" y="1135.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (8 samples, 0.03%)</title><rect x="66.2598%" y="1109" width="0.0300%" height="15" fill="rgb(222,186,16)" fg:x="17643" fg:w="8"/><text x="66.5098%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8 samples, 0.03%)</title><rect x="66.2598%" y="1093" width="0.0300%" height="15" fill="rgb(254,72,35)" fg:x="17643" fg:w="8"/><text x="66.5098%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.03%)</title><rect x="66.2598%" y="1077" width="0.0300%" height="15" fill="rgb(224,25,35)" fg:x="17643" fg:w="8"/><text x="66.5098%" y="1087.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.03%)</title><rect x="66.2598%" y="1061" width="0.0300%" height="15" fill="rgb(206,135,52)" fg:x="17643" fg:w="8"/><text x="66.5098%" y="1071.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.03%)</title><rect x="66.2598%" y="1045" width="0.0300%" height="15" fill="rgb(229,174,47)" fg:x="17643" fg:w="8"/><text x="66.5098%" y="1055.50"></text></g><g><title>core::clone::Clone::clone (1,217 samples, 4.57%)</title><rect x="61.7306%" y="1205" width="4.5705%" height="15" fill="rgb(242,184,21)" fg:x="16437" fg:w="1217"/><text x="61.9806%" y="1215.50">core:..</text></g><g><title>&lt;graph_craft::document::DocumentNode as core::clone::Clone&gt;::clone (1,215 samples, 4.56%)</title><rect x="61.7381%" y="1189" width="4.5630%" height="15" fill="rgb(213,22,45)" fg:x="16439" fg:w="1215"/><text x="61.9881%" y="1199.50">&lt;grap..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (1,219 samples, 4.58%)</title><rect x="61.7306%" y="1237" width="4.5781%" height="15" fill="rgb(237,81,54)" fg:x="16437" fg:w="1219"/><text x="61.9806%" y="1247.50">&lt;hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1,219 samples, 4.58%)</title><rect x="61.7306%" y="1221" width="4.5781%" height="15" fill="rgb(248,177,18)" fg:x="16437" fg:w="1219"/><text x="61.9806%" y="1231.50">hashb..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,222 samples, 4.59%)</title><rect x="61.7231%" y="1429" width="4.5893%" height="15" fill="rgb(254,31,16)" fg:x="16435" fg:w="1222"/><text x="61.9731%" y="1439.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1,222 samples, 4.59%)</title><rect x="61.7231%" y="1413" width="4.5893%" height="15" fill="rgb(235,20,31)" fg:x="16435" fg:w="1222"/><text x="61.9731%" y="1423.50">alloc..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,222 samples, 4.59%)</title><rect x="61.7231%" y="1397" width="4.5893%" height="15" fill="rgb(240,56,43)" fg:x="16435" fg:w="1222"/><text x="61.9731%" y="1407.50">core:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,222 samples, 4.59%)</title><rect x="61.7231%" y="1381" width="4.5893%" height="15" fill="rgb(237,197,51)" fg:x="16435" fg:w="1222"/><text x="61.9731%" y="1391.50">&lt;core..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,222 samples, 4.59%)</title><rect x="61.7231%" y="1365" width="4.5893%" height="15" fill="rgb(241,162,44)" fg:x="16435" fg:w="1222"/><text x="61.9731%" y="1375.50">core:..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1,222 samples, 4.59%)</title><rect x="61.7231%" y="1349" width="4.5893%" height="15" fill="rgb(224,23,20)" fg:x="16435" fg:w="1222"/><text x="61.9731%" y="1359.50">core:..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched::_{{closure}} (1,222 samples, 4.59%)</title><rect x="61.7231%" y="1333" width="4.5893%" height="15" fill="rgb(250,109,34)" fg:x="16435" fg:w="1222"/><text x="61.9731%" y="1343.50">crite..</text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (1,222 samples, 4.59%)</title><rect x="61.7231%" y="1317" width="4.5893%" height="15" fill="rgb(214,175,50)" fg:x="16435" fg:w="1222"/><text x="61.9731%" y="1327.50">compi..</text></g><g><title>&lt;graph_craft::document::NodeNetwork as core::clone::Clone&gt;::clone (1,222 samples, 4.59%)</title><rect x="61.7231%" y="1301" width="4.5893%" height="15" fill="rgb(213,182,5)" fg:x="16435" fg:w="1222"/><text x="61.9731%" y="1311.50">&lt;grap..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,222 samples, 4.59%)</title><rect x="61.7231%" y="1285" width="4.5893%" height="15" fill="rgb(209,199,19)" fg:x="16435" fg:w="1222"/><text x="61.9731%" y="1295.50">&lt;std:..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1,222 samples, 4.59%)</title><rect x="61.7231%" y="1269" width="4.5893%" height="15" fill="rgb(236,224,42)" fg:x="16435" fg:w="1222"/><text x="61.9731%" y="1279.50">&lt;hash..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,221 samples, 4.59%)</title><rect x="61.7268%" y="1253" width="4.5856%" height="15" fill="rgb(246,226,29)" fg:x="16436" fg:w="1221"/><text x="61.9768%" y="1263.50">&lt;hash..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,224 samples, 4.60%)</title><rect x="61.7231%" y="1493" width="4.5968%" height="15" fill="rgb(227,223,11)" fg:x="16435" fg:w="1224"/><text x="61.9731%" y="1503.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,224 samples, 4.60%)</title><rect x="61.7231%" y="1477" width="4.5968%" height="15" fill="rgb(219,7,51)" fg:x="16435" fg:w="1224"/><text x="61.9731%" y="1487.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,224 samples, 4.60%)</title><rect x="61.7231%" y="1461" width="4.5968%" height="15" fill="rgb(245,167,10)" fg:x="16435" fg:w="1224"/><text x="61.9731%" y="1471.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,224 samples, 4.60%)</title><rect x="61.7231%" y="1445" width="4.5968%" height="15" fill="rgb(237,224,16)" fg:x="16435" fg:w="1224"/><text x="61.9731%" y="1455.50">&lt;allo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (10 samples, 0.04%)</title><rect x="66.3950%" y="1333" width="0.0376%" height="15" fill="rgb(226,132,13)" fg:x="17679" fg:w="10"/><text x="66.6450%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (10 samples, 0.04%)</title><rect x="66.3950%" y="1317" width="0.0376%" height="15" fill="rgb(214,140,3)" fg:x="17679" fg:w="10"/><text x="66.6450%" y="1327.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.04%)</title><rect x="66.3950%" y="1301" width="0.0376%" height="15" fill="rgb(221,177,4)" fg:x="17679" fg:w="10"/><text x="66.6450%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (10 samples, 0.04%)</title><rect x="66.3950%" y="1285" width="0.0376%" height="15" fill="rgb(238,139,3)" fg:x="17679" fg:w="10"/><text x="66.6450%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="66.4326%" y="1333" width="0.0150%" height="15" fill="rgb(216,17,39)" fg:x="17689" fg:w="4"/><text x="66.6826%" y="1343.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (20 samples, 0.08%)</title><rect x="66.4889%" y="1237" width="0.0751%" height="15" fill="rgb(238,120,9)" fg:x="17704" fg:w="20"/><text x="66.7389%" y="1247.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (20 samples, 0.08%)</title><rect x="66.4889%" y="1221" width="0.0751%" height="15" fill="rgb(244,92,53)" fg:x="17704" fg:w="20"/><text x="66.7389%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::Source,usize)&gt; (20 samples, 0.08%)</title><rect x="66.4889%" y="1205" width="0.0751%" height="15" fill="rgb(224,148,33)" fg:x="17704" fg:w="20"/><text x="66.7389%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::Source&gt; (20 samples, 0.08%)</title><rect x="66.4889%" y="1189" width="0.0751%" height="15" fill="rgb(243,6,36)" fg:x="17704" fg:w="20"/><text x="66.7389%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt; (20 samples, 0.08%)</title><rect x="66.4889%" y="1173" width="0.0751%" height="15" fill="rgb(230,102,11)" fg:x="17704" fg:w="20"/><text x="66.7389%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeId&gt;&gt; (20 samples, 0.08%)</title><rect x="66.4889%" y="1157" width="0.0751%" height="15" fill="rgb(234,148,36)" fg:x="17704" fg:w="20"/><text x="66.7389%" y="1167.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.08%)</title><rect x="66.4889%" y="1141" width="0.0751%" height="15" fill="rgb(251,153,25)" fg:x="17704" fg:w="20"/><text x="66.7389%" y="1151.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (20 samples, 0.08%)</title><rect x="66.4889%" y="1125" width="0.0751%" height="15" fill="rgb(215,129,8)" fg:x="17704" fg:w="20"/><text x="66.7389%" y="1135.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.01%)</title><rect x="66.5640%" y="1205" width="0.0113%" height="15" fill="rgb(224,128,35)" fg:x="17724" fg:w="3"/><text x="66.8140%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (43 samples, 0.16%)</title><rect x="66.4814%" y="1253" width="0.1615%" height="15" fill="rgb(237,56,52)" fg:x="17702" fg:w="43"/><text x="66.7314%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (21 samples, 0.08%)</title><rect x="66.5640%" y="1237" width="0.0789%" height="15" fill="rgb(234,213,19)" fg:x="17724" fg:w="21"/><text x="66.8140%" y="1247.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (21 samples, 0.08%)</title><rect x="66.5640%" y="1221" width="0.0789%" height="15" fill="rgb(252,82,23)" fg:x="17724" fg:w="21"/><text x="66.8140%" y="1231.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (18 samples, 0.07%)</title><rect x="66.5753%" y="1205" width="0.0676%" height="15" fill="rgb(254,201,21)" fg:x="17727" fg:w="18"/><text x="66.8253%" y="1215.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (17 samples, 0.06%)</title><rect x="66.5790%" y="1189" width="0.0638%" height="15" fill="rgb(250,186,11)" fg:x="17728" fg:w="17"/><text x="66.8290%" y="1199.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.06%)</title><rect x="66.5790%" y="1173" width="0.0638%" height="15" fill="rgb(211,174,5)" fg:x="17728" fg:w="17"/><text x="66.8290%" y="1183.50"></text></g><g><title>_int_free (9 samples, 0.03%)</title><rect x="66.7030%" y="1157" width="0.0338%" height="15" fill="rgb(214,121,10)" fg:x="17761" fg:w="9"/><text x="66.9530%" y="1167.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (30 samples, 0.11%)</title><rect x="66.7368%" y="1157" width="0.1127%" height="15" fill="rgb(241,66,2)" fg:x="17770" fg:w="30"/><text x="66.9868%" y="1167.50"></text></g><g><title>malloc_consolidate (30 samples, 0.11%)</title><rect x="66.7368%" y="1141" width="0.1127%" height="15" fill="rgb(220,167,19)" fg:x="17770" fg:w="30"/><text x="66.9868%" y="1151.50"></text></g><g><title>unlink_chunk.isra.0 (10 samples, 0.04%)</title><rect x="66.8119%" y="1125" width="0.0376%" height="15" fill="rgb(231,54,50)" fg:x="17790" fg:w="10"/><text x="67.0619%" y="1135.50"></text></g><g><title>_int_free_create_chunk (12 samples, 0.05%)</title><rect x="66.9020%" y="1141" width="0.0451%" height="15" fill="rgb(239,217,53)" fg:x="17814" fg:w="12"/><text x="67.1520%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::OriginalLocation&gt; (162 samples, 0.61%)</title><rect x="66.3950%" y="1349" width="0.6084%" height="15" fill="rgb(248,8,0)" fg:x="17679" fg:w="162"/><text x="66.6450%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graph_craft::document::Source,usize&gt;&gt; (148 samples, 0.56%)</title><rect x="66.4476%" y="1333" width="0.5558%" height="15" fill="rgb(229,118,37)" fg:x="17693" fg:w="148"/><text x="66.6976%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graph_craft::document::Source,usize,std::hash::random::RandomState&gt;&gt; (148 samples, 0.56%)</title><rect x="66.4476%" y="1317" width="0.5558%" height="15" fill="rgb(253,223,43)" fg:x="17693" fg:w="148"/><text x="66.6976%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graph_craft::document::Source,usize)&gt;&gt; (148 samples, 0.56%)</title><rect x="66.4476%" y="1301" width="0.5558%" height="15" fill="rgb(211,77,36)" fg:x="17693" fg:w="148"/><text x="66.6976%" y="1311.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (148 samples, 0.56%)</title><rect x="66.4476%" y="1285" width="0.5558%" height="15" fill="rgb(219,3,53)" fg:x="17693" fg:w="148"/><text x="66.6976%" y="1295.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (148 samples, 0.56%)</title><rect x="66.4476%" y="1269" width="0.5558%" height="15" fill="rgb(244,45,42)" fg:x="17693" fg:w="148"/><text x="66.6976%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (96 samples, 0.36%)</title><rect x="66.6429%" y="1253" width="0.3605%" height="15" fill="rgb(225,95,27)" fg:x="17745" fg:w="96"/><text x="66.8929%" y="1263.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (96 samples, 0.36%)</title><rect x="66.6429%" y="1237" width="0.3605%" height="15" fill="rgb(207,74,8)" fg:x="17745" fg:w="96"/><text x="66.8929%" y="1247.50"></text></g><g><title>alloc::alloc::dealloc (96 samples, 0.36%)</title><rect x="66.6429%" y="1221" width="0.3605%" height="15" fill="rgb(243,63,36)" fg:x="17745" fg:w="96"/><text x="66.8929%" y="1231.50"></text></g><g><title>__rdl_dealloc (96 samples, 0.36%)</title><rect x="66.6429%" y="1205" width="0.3605%" height="15" fill="rgb(211,180,12)" fg:x="17745" fg:w="96"/><text x="66.8929%" y="1215.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (96 samples, 0.36%)</title><rect x="66.6429%" y="1189" width="0.3605%" height="15" fill="rgb(254,166,49)" fg:x="17745" fg:w="96"/><text x="66.8929%" y="1199.50"></text></g><g><title>cfree@GLIBC_2.2.5 (96 samples, 0.36%)</title><rect x="66.6429%" y="1173" width="0.3605%" height="15" fill="rgb(205,19,0)" fg:x="17745" fg:w="96"/><text x="66.8929%" y="1183.50"></text></g><g><title>_int_free_merge_chunk (41 samples, 0.15%)</title><rect x="66.8494%" y="1157" width="0.1540%" height="15" fill="rgb(224,172,32)" fg:x="17800" fg:w="41"/><text x="67.0994%" y="1167.50"></text></g><g><title>unlink_chunk.isra.0 (15 samples, 0.06%)</title><rect x="66.9471%" y="1141" width="0.0563%" height="15" fill="rgb(254,136,30)" fg:x="17826" fg:w="15"/><text x="67.1971%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(graph_craft::document::NodeId,bool)&gt;&gt; (38 samples, 0.14%)</title><rect x="67.0184%" y="1333" width="0.1427%" height="15" fill="rgb(246,19,35)" fg:x="17845" fg:w="38"/><text x="67.2684%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(graph_craft::document::NodeId,bool)&gt;&gt; (38 samples, 0.14%)</title><rect x="67.0184%" y="1317" width="0.1427%" height="15" fill="rgb(219,24,36)" fg:x="17845" fg:w="38"/><text x="67.2684%" y="1327.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.14%)</title><rect x="67.0184%" y="1301" width="0.1427%" height="15" fill="rgb(251,55,1)" fg:x="17845" fg:w="38"/><text x="67.2684%" y="1311.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (38 samples, 0.14%)</title><rect x="67.0184%" y="1285" width="0.1427%" height="15" fill="rgb(218,117,39)" fg:x="17845" fg:w="38"/><text x="67.2684%" y="1295.50"></text></g><g><title>alloc::alloc::dealloc (38 samples, 0.14%)</title><rect x="67.0184%" y="1269" width="0.1427%" height="15" fill="rgb(248,169,11)" fg:x="17845" fg:w="38"/><text x="67.2684%" y="1279.50"></text></g><g><title>__rdl_dealloc (38 samples, 0.14%)</title><rect x="67.0184%" y="1253" width="0.1427%" height="15" fill="rgb(244,40,44)" fg:x="17845" fg:w="38"/><text x="67.2684%" y="1263.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (38 samples, 0.14%)</title><rect x="67.0184%" y="1237" width="0.1427%" height="15" fill="rgb(234,62,37)" fg:x="17845" fg:w="38"/><text x="67.2684%" y="1247.50"></text></g><g><title>cfree@GLIBC_2.2.5 (34 samples, 0.13%)</title><rect x="67.0335%" y="1221" width="0.1277%" height="15" fill="rgb(207,117,42)" fg:x="17849" fg:w="34"/><text x="67.2835%" y="1231.50"></text></g><g><title>_int_free (24 samples, 0.09%)</title><rect x="67.0710%" y="1205" width="0.0901%" height="15" fill="rgb(213,43,2)" fg:x="17859" fg:w="24"/><text x="67.3210%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::value::TaggedValue&gt; (11 samples, 0.04%)</title><rect x="67.1874%" y="1317" width="0.0413%" height="15" fill="rgb(244,202,51)" fg:x="17890" fg:w="11"/><text x="67.4374%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::VectorData&gt; (4 samples, 0.02%)</title><rect x="67.2325%" y="1317" width="0.0150%" height="15" fill="rgb(253,174,46)" fg:x="17902" fg:w="4"/><text x="67.4825%" y="1327.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (3 samples, 0.01%)</title><rect x="67.2701%" y="1285" width="0.0113%" height="15" fill="rgb(251,23,1)" fg:x="17912" fg:w="3"/><text x="67.5201%" y="1295.50"></text></g><g><title>malloc_consolidate (3 samples, 0.01%)</title><rect x="67.2701%" y="1269" width="0.0113%" height="15" fill="rgb(253,26,1)" fg:x="17912" fg:w="3"/><text x="67.5201%" y="1279.50"></text></g><g><title>_int_free_create_chunk (4 samples, 0.02%)</title><rect x="67.2851%" y="1269" width="0.0150%" height="15" fill="rgb(216,89,31)" fg:x="17916" fg:w="4"/><text x="67.5351%" y="1279.50"></text></g><g><title>cfree@GLIBC_2.2.5 (17 samples, 0.06%)</title><rect x="67.2550%" y="1301" width="0.0638%" height="15" fill="rgb(209,109,5)" fg:x="17908" fg:w="17"/><text x="67.5050%" y="1311.50"></text></g><g><title>_int_free_merge_chunk (10 samples, 0.04%)</title><rect x="67.2813%" y="1285" width="0.0376%" height="15" fill="rgb(229,63,13)" fg:x="17915" fg:w="10"/><text x="67.5313%" y="1295.50"></text></g><g><title>unlink_chunk.isra.0 (5 samples, 0.02%)</title><rect x="67.3001%" y="1269" width="0.0188%" height="15" fill="rgb(238,137,54)" fg:x="17920" fg:w="5"/><text x="67.5501%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graphene_core::vector::vector_data::attributes::PointId&gt;&gt; (6 samples, 0.02%)</title><rect x="67.3189%" y="1285" width="0.0225%" height="15" fill="rgb(228,1,9)" fg:x="17925" fg:w="6"/><text x="67.5689%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graphene_core::vector::vector_data::attributes::PointId&gt;&gt; (6 samples, 0.02%)</title><rect x="67.3189%" y="1269" width="0.0225%" height="15" fill="rgb(249,120,48)" fg:x="17925" fg:w="6"/><text x="67.5689%" y="1279.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="67.3189%" y="1253" width="0.0225%" height="15" fill="rgb(209,72,36)" fg:x="17925" fg:w="6"/><text x="67.5689%" y="1263.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.02%)</title><rect x="67.3189%" y="1237" width="0.0225%" height="15" fill="rgb(247,98,49)" fg:x="17925" fg:w="6"/><text x="67.5689%" y="1247.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.02%)</title><rect x="67.3189%" y="1221" width="0.0225%" height="15" fill="rgb(233,75,36)" fg:x="17925" fg:w="6"/><text x="67.5689%" y="1231.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.02%)</title><rect x="67.3189%" y="1205" width="0.0225%" height="15" fill="rgb(225,14,24)" fg:x="17925" fg:w="6"/><text x="67.5689%" y="1215.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.02%)</title><rect x="67.3189%" y="1189" width="0.0225%" height="15" fill="rgb(237,193,20)" fg:x="17925" fg:w="6"/><text x="67.5689%" y="1199.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 0.02%)</title><rect x="67.3189%" y="1173" width="0.0225%" height="15" fill="rgb(239,122,19)" fg:x="17925" fg:w="6"/><text x="67.5689%" y="1183.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (20 samples, 0.08%)</title><rect x="67.3489%" y="1109" width="0.0751%" height="15" fill="rgb(231,220,10)" fg:x="17933" fg:w="20"/><text x="67.5989%" y="1119.50"></text></g><g><title>malloc_consolidate (20 samples, 0.08%)</title><rect x="67.3489%" y="1093" width="0.0751%" height="15" fill="rgb(220,66,15)" fg:x="17933" fg:w="20"/><text x="67.5989%" y="1103.50"></text></g><g><title>unlink_chunk.isra.0 (5 samples, 0.02%)</title><rect x="67.4053%" y="1077" width="0.0188%" height="15" fill="rgb(215,171,52)" fg:x="17948" fg:w="5"/><text x="67.6553%" y="1087.50"></text></g><g><title>_int_free_create_chunk (5 samples, 0.02%)</title><rect x="67.4391%" y="1093" width="0.0188%" height="15" fill="rgb(241,169,50)" fg:x="17957" fg:w="5"/><text x="67.6891%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2&gt;&gt; (33 samples, 0.12%)</title><rect x="67.3414%" y="1285" width="0.1239%" height="15" fill="rgb(236,189,0)" fg:x="17931" fg:w="33"/><text x="67.5914%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2,std::hash::random::RandomState&gt;&gt; (33 samples, 0.12%)</title><rect x="67.3414%" y="1269" width="0.1239%" height="15" fill="rgb(217,147,20)" fg:x="17931" fg:w="33"/><text x="67.5914%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2)&gt;&gt; (33 samples, 0.12%)</title><rect x="67.3414%" y="1253" width="0.1239%" height="15" fill="rgb(206,188,39)" fg:x="17931" fg:w="33"/><text x="67.5914%" y="1263.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.12%)</title><rect x="67.3414%" y="1237" width="0.1239%" height="15" fill="rgb(227,118,25)" fg:x="17931" fg:w="33"/><text x="67.5914%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (33 samples, 0.12%)</title><rect x="67.3414%" y="1221" width="0.1239%" height="15" fill="rgb(248,171,40)" fg:x="17931" fg:w="33"/><text x="67.5914%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (33 samples, 0.12%)</title><rect x="67.3414%" y="1205" width="0.1239%" height="15" fill="rgb(251,90,54)" fg:x="17931" fg:w="33"/><text x="67.5914%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (33 samples, 0.12%)</title><rect x="67.3414%" y="1189" width="0.1239%" height="15" fill="rgb(234,11,46)" fg:x="17931" fg:w="33"/><text x="67.5914%" y="1199.50"></text></g><g><title>alloc::alloc::dealloc (33 samples, 0.12%)</title><rect x="67.3414%" y="1173" width="0.1239%" height="15" fill="rgb(229,134,13)" fg:x="17931" fg:w="33"/><text x="67.5914%" y="1183.50"></text></g><g><title>__rdl_dealloc (33 samples, 0.12%)</title><rect x="67.3414%" y="1157" width="0.1239%" height="15" fill="rgb(223,129,3)" fg:x="17931" fg:w="33"/><text x="67.5914%" y="1167.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (33 samples, 0.12%)</title><rect x="67.3414%" y="1141" width="0.1239%" height="15" fill="rgb(221,124,13)" fg:x="17931" fg:w="33"/><text x="67.5914%" y="1151.50"></text></g><g><title>cfree@GLIBC_2.2.5 (33 samples, 0.12%)</title><rect x="67.3414%" y="1125" width="0.1239%" height="15" fill="rgb(234,3,18)" fg:x="17931" fg:w="33"/><text x="67.5914%" y="1135.50"></text></g><g><title>_int_free_merge_chunk (11 samples, 0.04%)</title><rect x="67.4240%" y="1109" width="0.0413%" height="15" fill="rgb(249,199,20)" fg:x="17953" fg:w="11"/><text x="67.6740%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::PointModification&gt; (41 samples, 0.15%)</title><rect x="67.3189%" y="1301" width="0.1540%" height="15" fill="rgb(224,134,6)" fg:x="17925" fg:w="41"/><text x="67.5689%" y="1311.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.02%)</title><rect x="67.4729%" y="1237" width="0.0188%" height="15" fill="rgb(254,83,26)" fg:x="17966" fg:w="5"/><text x="67.7229%" y="1247.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.02%)</title><rect x="67.4729%" y="1221" width="0.0188%" height="15" fill="rgb(217,88,9)" fg:x="17966" fg:w="5"/><text x="67.7229%" y="1231.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.02%)</title><rect x="67.4729%" y="1205" width="0.0188%" height="15" fill="rgb(225,73,2)" fg:x="17966" fg:w="5"/><text x="67.7229%" y="1215.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.02%)</title><rect x="67.4729%" y="1189" width="0.0188%" height="15" fill="rgb(226,44,39)" fg:x="17966" fg:w="5"/><text x="67.7229%" y="1199.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.02%)</title><rect x="67.4729%" y="1173" width="0.0188%" height="15" fill="rgb(228,53,17)" fg:x="17966" fg:w="5"/><text x="67.7229%" y="1183.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="67.4804%" y="1157" width="0.0113%" height="15" fill="rgb(212,27,27)" fg:x="17968" fg:w="3"/><text x="67.7304%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graphene_core::vector::vector_data::attributes::RegionId&gt;&gt; (6 samples, 0.02%)</title><rect x="67.4729%" y="1285" width="0.0225%" height="15" fill="rgb(241,50,6)" fg:x="17966" fg:w="6"/><text x="67.7229%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graphene_core::vector::vector_data::attributes::RegionId&gt;&gt; (6 samples, 0.02%)</title><rect x="67.4729%" y="1269" width="0.0225%" height="15" fill="rgb(225,28,51)" fg:x="17966" fg:w="6"/><text x="67.7229%" y="1279.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="67.4729%" y="1253" width="0.0225%" height="15" fill="rgb(215,33,16)" fg:x="17966" fg:w="6"/><text x="67.7229%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::RegionId,core::ops::range::RangeInclusive&lt;graphene_core::vector::vector_data::attributes::SegmentId&gt;&gt;&gt; (7 samples, 0.03%)</title><rect x="67.4954%" y="1285" width="0.0263%" height="15" fill="rgb(243,40,39)" fg:x="17972" fg:w="7"/><text x="67.7454%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::RegionId,core::ops::range::RangeInclusive&lt;graphene_core::vector::vector_data::attributes::SegmentId&gt;,std::hash::random::RandomState&gt;&gt; (7 samples, 0.03%)</title><rect x="67.4954%" y="1269" width="0.0263%" height="15" fill="rgb(225,11,42)" fg:x="17972" fg:w="7"/><text x="67.7454%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::RegionId,core::ops::range::RangeInclusive&lt;graphene_core::vector::vector_data::attributes::SegmentId&gt;)&gt;&gt; (7 samples, 0.03%)</title><rect x="67.4954%" y="1253" width="0.0263%" height="15" fill="rgb(241,220,38)" fg:x="17972" fg:w="7"/><text x="67.7454%" y="1263.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.03%)</title><rect x="67.4954%" y="1237" width="0.0263%" height="15" fill="rgb(244,52,35)" fg:x="17972" fg:w="7"/><text x="67.7454%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (7 samples, 0.03%)</title><rect x="67.4954%" y="1221" width="0.0263%" height="15" fill="rgb(246,42,46)" fg:x="17972" fg:w="7"/><text x="67.7454%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (7 samples, 0.03%)</title><rect x="67.4954%" y="1205" width="0.0263%" height="15" fill="rgb(205,184,13)" fg:x="17972" fg:w="7"/><text x="67.7454%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.03%)</title><rect x="67.4954%" y="1189" width="0.0263%" height="15" fill="rgb(209,48,36)" fg:x="17972" fg:w="7"/><text x="67.7454%" y="1199.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.03%)</title><rect x="67.4954%" y="1173" width="0.0263%" height="15" fill="rgb(244,34,51)" fg:x="17972" fg:w="7"/><text x="67.7454%" y="1183.50"></text></g><g><title>__rdl_dealloc (7 samples, 0.03%)</title><rect x="67.4954%" y="1157" width="0.0263%" height="15" fill="rgb(221,107,33)" fg:x="17972" fg:w="7"/><text x="67.7454%" y="1167.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7 samples, 0.03%)</title><rect x="67.4954%" y="1141" width="0.0263%" height="15" fill="rgb(224,203,12)" fg:x="17972" fg:w="7"/><text x="67.7454%" y="1151.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7 samples, 0.03%)</title><rect x="67.4954%" y="1125" width="0.0263%" height="15" fill="rgb(230,215,18)" fg:x="17972" fg:w="7"/><text x="67.7454%" y="1135.50"></text></g><g><title>_int_free_merge_chunk (4 samples, 0.02%)</title><rect x="67.5067%" y="1109" width="0.0150%" height="15" fill="rgb(206,185,35)" fg:x="17975" fg:w="4"/><text x="67.7567%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::RegionModification&gt; (14 samples, 0.05%)</title><rect x="67.4729%" y="1301" width="0.0526%" height="15" fill="rgb(228,140,34)" fg:x="17966" fg:w="14"/><text x="67.7229%" y="1311.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (3 samples, 0.01%)</title><rect x="67.5330%" y="1157" width="0.0113%" height="15" fill="rgb(208,93,13)" fg:x="17982" fg:w="3"/><text x="67.7830%" y="1167.50"></text></g><g><title>malloc_consolidate (3 samples, 0.01%)</title><rect x="67.5330%" y="1141" width="0.0113%" height="15" fill="rgb(221,193,39)" fg:x="17982" fg:w="3"/><text x="67.7830%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graphene_core::vector::vector_data::attributes::SegmentId&gt;&gt; (6 samples, 0.02%)</title><rect x="67.5292%" y="1285" width="0.0225%" height="15" fill="rgb(241,132,34)" fg:x="17981" fg:w="6"/><text x="67.7792%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graphene_core::vector::vector_data::attributes::SegmentId&gt;&gt; (6 samples, 0.02%)</title><rect x="67.5292%" y="1269" width="0.0225%" height="15" fill="rgb(221,141,10)" fg:x="17981" fg:w="6"/><text x="67.7792%" y="1279.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="67.5292%" y="1253" width="0.0225%" height="15" fill="rgb(226,90,31)" fg:x="17981" fg:w="6"/><text x="67.7792%" y="1263.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.02%)</title><rect x="67.5292%" y="1237" width="0.0225%" height="15" fill="rgb(243,75,5)" fg:x="17981" fg:w="6"/><text x="67.7792%" y="1247.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.02%)</title><rect x="67.5292%" y="1221" width="0.0225%" height="15" fill="rgb(227,156,21)" fg:x="17981" fg:w="6"/><text x="67.7792%" y="1231.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.02%)</title><rect x="67.5292%" y="1205" width="0.0225%" height="15" fill="rgb(250,195,8)" fg:x="17981" fg:w="6"/><text x="67.7792%" y="1215.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.02%)</title><rect x="67.5292%" y="1189" width="0.0225%" height="15" fill="rgb(220,134,5)" fg:x="17981" fg:w="6"/><text x="67.7792%" y="1199.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 0.02%)</title><rect x="67.5292%" y="1173" width="0.0225%" height="15" fill="rgb(246,106,34)" fg:x="17981" fg:w="6"/><text x="67.7792%" y="1183.50"></text></g><g><title>_int_free (5 samples, 0.02%)</title><rect x="67.5592%" y="1109" width="0.0188%" height="15" fill="rgb(205,1,4)" fg:x="17989" fg:w="5"/><text x="67.8092%" y="1119.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (14 samples, 0.05%)</title><rect x="67.5780%" y="1109" width="0.0526%" height="15" fill="rgb(224,151,29)" fg:x="17994" fg:w="14"/><text x="67.8280%" y="1119.50"></text></g><g><title>malloc_consolidate (14 samples, 0.05%)</title><rect x="67.5780%" y="1093" width="0.0526%" height="15" fill="rgb(251,196,0)" fg:x="17994" fg:w="14"/><text x="67.8280%" y="1103.50"></text></g><g><title>unlink_chunk.isra.0 (5 samples, 0.02%)</title><rect x="67.6118%" y="1077" width="0.0188%" height="15" fill="rgb(212,127,0)" fg:x="18003" fg:w="5"/><text x="67.8618%" y="1087.50"></text></g><g><title>_int_free_create_chunk (14 samples, 0.05%)</title><rect x="67.6531%" y="1093" width="0.0526%" height="15" fill="rgb(236,71,53)" fg:x="18014" fg:w="14"/><text x="67.9031%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;&gt;&gt; (45 samples, 0.17%)</title><rect x="67.5517%" y="1285" width="0.1690%" height="15" fill="rgb(227,99,0)" fg:x="17987" fg:w="45"/><text x="67.8017%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;,std::hash::random::RandomState&gt;&gt; (45 samples, 0.17%)</title><rect x="67.5517%" y="1269" width="0.1690%" height="15" fill="rgb(239,89,21)" fg:x="17987" fg:w="45"/><text x="67.8017%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;)&gt;&gt; (45 samples, 0.17%)</title><rect x="67.5517%" y="1253" width="0.1690%" height="15" fill="rgb(243,122,19)" fg:x="17987" fg:w="45"/><text x="67.8017%" y="1263.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.17%)</title><rect x="67.5517%" y="1237" width="0.1690%" height="15" fill="rgb(229,192,45)" fg:x="17987" fg:w="45"/><text x="67.8017%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (45 samples, 0.17%)</title><rect x="67.5517%" y="1221" width="0.1690%" height="15" fill="rgb(235,165,35)" fg:x="17987" fg:w="45"/><text x="67.8017%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (45 samples, 0.17%)</title><rect x="67.5517%" y="1205" width="0.1690%" height="15" fill="rgb(253,202,0)" fg:x="17987" fg:w="45"/><text x="67.8017%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (45 samples, 0.17%)</title><rect x="67.5517%" y="1189" width="0.1690%" height="15" fill="rgb(235,51,20)" fg:x="17987" fg:w="45"/><text x="67.8017%" y="1199.50"></text></g><g><title>alloc::alloc::dealloc (45 samples, 0.17%)</title><rect x="67.5517%" y="1173" width="0.1690%" height="15" fill="rgb(218,95,46)" fg:x="17987" fg:w="45"/><text x="67.8017%" y="1183.50"></text></g><g><title>__rdl_dealloc (45 samples, 0.17%)</title><rect x="67.5517%" y="1157" width="0.1690%" height="15" fill="rgb(212,81,10)" fg:x="17987" fg:w="45"/><text x="67.8017%" y="1167.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (45 samples, 0.17%)</title><rect x="67.5517%" y="1141" width="0.1690%" height="15" fill="rgb(240,59,0)" fg:x="17987" fg:w="45"/><text x="67.8017%" y="1151.50"></text></g><g><title>cfree@GLIBC_2.2.5 (45 samples, 0.17%)</title><rect x="67.5517%" y="1125" width="0.1690%" height="15" fill="rgb(212,191,42)" fg:x="17987" fg:w="45"/><text x="67.8017%" y="1135.50"></text></g><g><title>_int_free_merge_chunk (24 samples, 0.09%)</title><rect x="67.6306%" y="1109" width="0.0901%" height="15" fill="rgb(233,140,3)" fg:x="18008" fg:w="24"/><text x="67.8806%" y="1119.50"></text></g><g><title>unlink_chunk.isra.0 (4 samples, 0.02%)</title><rect x="67.7057%" y="1093" width="0.0150%" height="15" fill="rgb(215,69,23)" fg:x="18028" fg:w="4"/><text x="67.9557%" y="1103.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (12 samples, 0.05%)</title><rect x="67.7508%" y="1109" width="0.0451%" height="15" fill="rgb(240,202,20)" fg:x="18040" fg:w="12"/><text x="68.0008%" y="1119.50"></text></g><g><title>malloc_consolidate (12 samples, 0.05%)</title><rect x="67.7508%" y="1093" width="0.0451%" height="15" fill="rgb(209,146,50)" fg:x="18040" fg:w="12"/><text x="68.0008%" y="1103.50"></text></g><g><title>unlink_chunk.isra.0 (6 samples, 0.02%)</title><rect x="67.7733%" y="1077" width="0.0225%" height="15" fill="rgb(253,102,54)" fg:x="18046" fg:w="6"/><text x="68.0233%" y="1087.50"></text></g><g><title>_int_free_create_chunk (6 samples, 0.02%)</title><rect x="67.8109%" y="1093" width="0.0225%" height="15" fill="rgb(250,173,47)" fg:x="18056" fg:w="6"/><text x="68.0609%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId&gt;&gt; (31 samples, 0.12%)</title><rect x="67.7207%" y="1285" width="0.1164%" height="15" fill="rgb(232,142,7)" fg:x="18032" fg:w="31"/><text x="67.9707%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId,std::hash::random::RandomState&gt;&gt; (31 samples, 0.12%)</title><rect x="67.7207%" y="1269" width="0.1164%" height="15" fill="rgb(230,157,47)" fg:x="18032" fg:w="31"/><text x="67.9707%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId)&gt;&gt; (31 samples, 0.12%)</title><rect x="67.7207%" y="1253" width="0.1164%" height="15" fill="rgb(214,177,35)" fg:x="18032" fg:w="31"/><text x="67.9707%" y="1263.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.12%)</title><rect x="67.7207%" y="1237" width="0.1164%" height="15" fill="rgb(234,119,46)" fg:x="18032" fg:w="31"/><text x="67.9707%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (31 samples, 0.12%)</title><rect x="67.7207%" y="1221" width="0.1164%" height="15" fill="rgb(241,180,50)" fg:x="18032" fg:w="31"/><text x="67.9707%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (28 samples, 0.11%)</title><rect x="67.7320%" y="1205" width="0.1052%" height="15" fill="rgb(221,54,25)" fg:x="18035" fg:w="28"/><text x="67.9820%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (28 samples, 0.11%)</title><rect x="67.7320%" y="1189" width="0.1052%" height="15" fill="rgb(209,157,44)" fg:x="18035" fg:w="28"/><text x="67.9820%" y="1199.50"></text></g><g><title>alloc::alloc::dealloc (28 samples, 0.11%)</title><rect x="67.7320%" y="1173" width="0.1052%" height="15" fill="rgb(246,115,41)" fg:x="18035" fg:w="28"/><text x="67.9820%" y="1183.50"></text></g><g><title>__rdl_dealloc (28 samples, 0.11%)</title><rect x="67.7320%" y="1157" width="0.1052%" height="15" fill="rgb(229,86,1)" fg:x="18035" fg:w="28"/><text x="67.9820%" y="1167.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (28 samples, 0.11%)</title><rect x="67.7320%" y="1141" width="0.1052%" height="15" fill="rgb(240,108,53)" fg:x="18035" fg:w="28"/><text x="67.9820%" y="1151.50"></text></g><g><title>cfree@GLIBC_2.2.5 (28 samples, 0.11%)</title><rect x="67.7320%" y="1125" width="0.1052%" height="15" fill="rgb(227,134,2)" fg:x="18035" fg:w="28"/><text x="67.9820%" y="1135.50"></text></g><g><title>_int_free_merge_chunk (11 samples, 0.04%)</title><rect x="67.7958%" y="1109" width="0.0413%" height="15" fill="rgb(213,129,25)" fg:x="18052" fg:w="11"/><text x="68.0458%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::SegmentModification&gt; (84 samples, 0.32%)</title><rect x="67.5254%" y="1301" width="0.3155%" height="15" fill="rgb(226,35,21)" fg:x="17980" fg:w="84"/><text x="67.7754%" y="1311.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.02%)</title><rect x="67.8447%" y="1189" width="0.0188%" height="15" fill="rgb(208,129,26)" fg:x="18065" fg:w="5"/><text x="68.0947%" y="1199.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.02%)</title><rect x="67.8447%" y="1173" width="0.0188%" height="15" fill="rgb(224,83,6)" fg:x="18065" fg:w="5"/><text x="68.0947%" y="1183.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.02%)</title><rect x="67.8447%" y="1157" width="0.0188%" height="15" fill="rgb(227,52,39)" fg:x="18065" fg:w="5"/><text x="68.0947%" y="1167.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.02%)</title><rect x="67.8447%" y="1141" width="0.0188%" height="15" fill="rgb(241,30,17)" fg:x="18065" fg:w="5"/><text x="68.0947%" y="1151.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.02%)</title><rect x="67.8447%" y="1125" width="0.0188%" height="15" fill="rgb(246,186,42)" fg:x="18065" fg:w="5"/><text x="68.0947%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ConstructionArgs&gt; (230 samples, 0.86%)</title><rect x="67.0034%" y="1349" width="0.8638%" height="15" fill="rgb(221,169,15)" fg:x="17841" fg:w="230"/><text x="67.2534%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::memo::MemoHash&lt;graph_craft::document::value::TaggedValue&gt;&gt; (188 samples, 0.71%)</title><rect x="67.1612%" y="1333" width="0.7061%" height="15" fill="rgb(235,108,21)" fg:x="17883" fg:w="188"/><text x="67.4112%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::VectorModification&gt; (165 samples, 0.62%)</title><rect x="67.2475%" y="1317" width="0.6197%" height="15" fill="rgb(219,148,30)" fg:x="17906" fg:w="165"/><text x="67.4975%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;[graphene_core::vector::vector_data::HandleId: 2]&gt;&gt; (7 samples, 0.03%)</title><rect x="67.8409%" y="1301" width="0.0263%" height="15" fill="rgb(220,109,5)" fg:x="18064" fg:w="7"/><text x="68.0909%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;[graphene_core::vector::vector_data::HandleId: 2],std::hash::random::RandomState&gt;&gt; (7 samples, 0.03%)</title><rect x="67.8409%" y="1285" width="0.0263%" height="15" fill="rgb(213,203,48)" fg:x="18064" fg:w="7"/><text x="68.0909%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;[graphene_core::vector::vector_data::HandleId: 2],(),std::hash::random::RandomState&gt;&gt; (7 samples, 0.03%)</title><rect x="67.8409%" y="1269" width="0.0263%" height="15" fill="rgb(244,71,33)" fg:x="18064" fg:w="7"/><text x="68.0909%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;([graphene_core::vector::vector_data::HandleId: 2],())&gt;&gt; (7 samples, 0.03%)</title><rect x="67.8409%" y="1253" width="0.0263%" height="15" fill="rgb(209,23,2)" fg:x="18064" fg:w="7"/><text x="68.0909%" y="1263.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.03%)</title><rect x="67.8409%" y="1237" width="0.0263%" height="15" fill="rgb(219,97,7)" fg:x="18064" fg:w="7"/><text x="68.0909%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (7 samples, 0.03%)</title><rect x="67.8409%" y="1221" width="0.0263%" height="15" fill="rgb(216,161,23)" fg:x="18064" fg:w="7"/><text x="68.0909%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (6 samples, 0.02%)</title><rect x="67.8447%" y="1205" width="0.0225%" height="15" fill="rgb(207,45,42)" fg:x="18065" fg:w="6"/><text x="68.0947%" y="1215.50"></text></g><g><title>cfree@GLIBC_2.2.5 (29 samples, 0.11%)</title><rect x="67.8935%" y="1333" width="0.1089%" height="15" fill="rgb(241,61,4)" fg:x="18078" fg:w="29"/><text x="68.1435%" y="1343.50"></text></g><g><title>_int_free (17 samples, 0.06%)</title><rect x="67.9386%" y="1317" width="0.0638%" height="15" fill="rgb(236,170,1)" fg:x="18090" fg:w="17"/><text x="68.1886%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (3 samples, 0.01%)</title><rect x="68.0212%" y="1317" width="0.0113%" height="15" fill="rgb(239,72,5)" fg:x="18112" fg:w="3"/><text x="68.2712%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNodeInput&gt; (51 samples, 0.19%)</title><rect x="67.8672%" y="1349" width="0.1915%" height="15" fill="rgb(214,13,50)" fg:x="18071" fg:w="51"/><text x="68.1172%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::Type&gt; (15 samples, 0.06%)</title><rect x="68.0024%" y="1333" width="0.0563%" height="15" fill="rgb(224,88,9)" fg:x="18107" fg:w="15"/><text x="68.2524%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::TypeDescriptor&gt; (7 samples, 0.03%)</title><rect x="68.0324%" y="1317" width="0.0263%" height="15" fill="rgb(238,192,34)" fg:x="18115" fg:w="7"/><text x="68.2824%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (7 samples, 0.03%)</title><rect x="68.0324%" y="1301" width="0.0263%" height="15" fill="rgb(217,203,50)" fg:x="18115" fg:w="7"/><text x="68.2824%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (500 samples, 1.88%)</title><rect x="66.3199%" y="1413" width="1.8778%" height="15" fill="rgb(241,123,32)" fg:x="17659" fg:w="500"/><text x="66.5699%" y="1423.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)]&gt; (500 samples, 1.88%)</title><rect x="66.3199%" y="1397" width="1.8778%" height="15" fill="rgb(248,151,39)" fg:x="17659" fg:w="500"/><text x="66.5699%" y="1407.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt; (494 samples, 1.86%)</title><rect x="66.3424%" y="1381" width="1.8553%" height="15" fill="rgb(208,89,6)" fg:x="17665" fg:w="494"/><text x="66.5924%" y="1391.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNode&gt; (480 samples, 1.80%)</title><rect x="66.3950%" y="1365" width="1.8027%" height="15" fill="rgb(254,43,26)" fg:x="17679" fg:w="480"/><text x="66.6450%" y="1375.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::ProtoNodeIdentifier&gt; (37 samples, 0.14%)</title><rect x="68.0587%" y="1349" width="0.1390%" height="15" fill="rgb(216,158,13)" fg:x="18122" fg:w="37"/><text x="68.3087%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (37 samples, 0.14%)</title><rect x="68.0587%" y="1333" width="0.1390%" height="15" fill="rgb(212,47,37)" fg:x="18122" fg:w="37"/><text x="68.3087%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (35 samples, 0.13%)</title><rect x="68.0662%" y="1317" width="0.1314%" height="15" fill="rgb(254,16,10)" fg:x="18124" fg:w="35"/><text x="68.3162%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (35 samples, 0.13%)</title><rect x="68.0662%" y="1301" width="0.1314%" height="15" fill="rgb(223,228,16)" fg:x="18124" fg:w="35"/><text x="68.3162%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (35 samples, 0.13%)</title><rect x="68.0662%" y="1285" width="0.1314%" height="15" fill="rgb(249,108,50)" fg:x="18124" fg:w="35"/><text x="68.3162%" y="1295.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.13%)</title><rect x="68.0662%" y="1269" width="0.1314%" height="15" fill="rgb(208,220,5)" fg:x="18124" fg:w="35"/><text x="68.3162%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (35 samples, 0.13%)</title><rect x="68.0662%" y="1253" width="0.1314%" height="15" fill="rgb(217,89,48)" fg:x="18124" fg:w="35"/><text x="68.3162%" y="1263.50"></text></g><g><title>alloc::alloc::dealloc (35 samples, 0.13%)</title><rect x="68.0662%" y="1237" width="0.1314%" height="15" fill="rgb(212,113,41)" fg:x="18124" fg:w="35"/><text x="68.3162%" y="1247.50"></text></g><g><title>__rdl_dealloc (35 samples, 0.13%)</title><rect x="68.0662%" y="1221" width="0.1314%" height="15" fill="rgb(231,127,5)" fg:x="18124" fg:w="35"/><text x="68.3162%" y="1231.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (35 samples, 0.13%)</title><rect x="68.0662%" y="1205" width="0.1314%" height="15" fill="rgb(217,141,17)" fg:x="18124" fg:w="35"/><text x="68.3162%" y="1215.50"></text></g><g><title>cfree@GLIBC_2.2.5 (35 samples, 0.13%)</title><rect x="68.0662%" y="1189" width="0.1314%" height="15" fill="rgb(245,125,54)" fg:x="18124" fg:w="35"/><text x="68.3162%" y="1199.50"></text></g><g><title>_int_free (19 samples, 0.07%)</title><rect x="68.1263%" y="1173" width="0.0714%" height="15" fill="rgb(248,125,3)" fg:x="18140" fg:w="19"/><text x="68.3763%" y="1183.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1733" width="65.3172%" height="15" fill="rgb(236,119,51)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1743.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench</text></g><g><title>core::iter::traits::iterator::Iterator::collect (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1717" width="65.3172%" height="15" fill="rgb(239,99,8)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1727.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1701" width="65.3172%" height="15" fill="rgb(224,228,4)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1711.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1685" width="65.3172%" height="15" fill="rgb(220,131,45)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1695.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1669" width="65.3172%" height="15" fill="rgb(215,62,5)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1679.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1653" width="65.3172%" height="15" fill="rgb(253,12,24)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1663.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1637" width="65.3172%" height="15" fill="rgb(248,120,50)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1647.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1621" width="65.3172%" height="15" fill="rgb(245,194,10)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1631.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1605" width="65.3172%" height="15" fill="rgb(241,149,38)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1615.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1589" width="65.3172%" height="15" fill="rgb(219,215,7)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1599.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1573" width="65.3172%" height="15" fill="rgb(208,120,31)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1583.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure}} (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1557" width="65.3172%" height="15" fill="rgb(244,30,8)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1567.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure}}</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1541" width="65.3172%" height="15" fill="rgb(238,35,44)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1551.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}}</text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}} (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1525" width="65.3172%" height="15" fill="rgb(243,218,37)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1535.50">compile_demo_art::compile_to_proto::_{{closure}}</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (17,392 samples, 65.32%)</title><rect x="2.9406%" y="1509" width="65.3172%" height="15" fill="rgb(218,169,10)" fg:x="783" fg:w="17392"/><text x="3.1906%" y="1519.50">criterion::bencher::Bencher&lt;M&gt;::iter_batched</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::proto::ProtoNetwork&gt;&gt; (516 samples, 1.94%)</title><rect x="66.3199%" y="1493" width="1.9379%" height="15" fill="rgb(221,144,10)" fg:x="17659" fg:w="516"/><text x="66.5699%" y="1503.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (516 samples, 1.94%)</title><rect x="66.3199%" y="1477" width="1.9379%" height="15" fill="rgb(226,41,38)" fg:x="17659" fg:w="516"/><text x="66.5699%" y="1487.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[graph_craft::proto::ProtoNetwork]&gt; (516 samples, 1.94%)</title><rect x="66.3199%" y="1461" width="1.9379%" height="15" fill="rgb(228,3,1)" fg:x="17659" fg:w="516"/><text x="66.5699%" y="1471.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNetwork&gt; (516 samples, 1.94%)</title><rect x="66.3199%" y="1445" width="1.9379%" height="15" fill="rgb(209,129,12)" fg:x="17659" fg:w="516"/><text x="66.5699%" y="1455.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (516 samples, 1.94%)</title><rect x="66.3199%" y="1429" width="1.9379%" height="15" fill="rgb(213,136,33)" fg:x="17659" fg:w="516"/><text x="66.5699%" y="1439.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (16 samples, 0.06%)</title><rect x="68.1977%" y="1413" width="0.0601%" height="15" fill="rgb(209,181,29)" fg:x="18159" fg:w="16"/><text x="68.4477%" y="1423.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.06%)</title><rect x="68.1977%" y="1397" width="0.0601%" height="15" fill="rgb(234,173,18)" fg:x="18159" fg:w="16"/><text x="68.4477%" y="1407.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.06%)</title><rect x="68.1977%" y="1381" width="0.0601%" height="15" fill="rgb(227,73,47)" fg:x="18159" fg:w="16"/><text x="68.4477%" y="1391.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.06%)</title><rect x="68.1977%" y="1365" width="0.0601%" height="15" fill="rgb(234,9,34)" fg:x="18159" fg:w="16"/><text x="68.4477%" y="1375.50"></text></g><g><title>__rdl_dealloc (16 samples, 0.06%)</title><rect x="68.1977%" y="1349" width="0.0601%" height="15" fill="rgb(235,172,15)" fg:x="18159" fg:w="16"/><text x="68.4477%" y="1359.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (16 samples, 0.06%)</title><rect x="68.1977%" y="1333" width="0.0601%" height="15" fill="rgb(245,61,2)" fg:x="18159" fg:w="16"/><text x="68.4477%" y="1343.50"></text></g><g><title>cfree@GLIBC_2.2.5 (16 samples, 0.06%)</title><rect x="68.1977%" y="1317" width="0.0601%" height="15" fill="rgb(238,39,47)" fg:x="18159" fg:w="16"/><text x="68.4477%" y="1327.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (16 samples, 0.06%)</title><rect x="68.1977%" y="1301" width="0.0601%" height="15" fill="rgb(234,37,24)" fg:x="18159" fg:w="16"/><text x="68.4477%" y="1311.50"></text></g><g><title>malloc_consolidate (16 samples, 0.06%)</title><rect x="68.1977%" y="1285" width="0.0601%" height="15" fill="rgb(248,223,24)" fg:x="18159" fg:w="16"/><text x="68.4477%" y="1295.50"></text></g><g><title>unlink_chunk.isra.0 (9 samples, 0.03%)</title><rect x="68.2240%" y="1269" width="0.0338%" height="15" fill="rgb(223,12,15)" fg:x="18166" fg:w="9"/><text x="68.4740%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.01%)</title><rect x="68.2578%" y="1413" width="0.0113%" height="15" fill="rgb(249,6,3)" fg:x="18175" fg:w="3"/><text x="68.5078%" y="1423.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3 samples, 0.01%)</title><rect x="68.2578%" y="1397" width="0.0113%" height="15" fill="rgb(237,105,33)" fg:x="18175" fg:w="3"/><text x="68.5078%" y="1407.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (16 samples, 0.06%)</title><rect x="68.2578%" y="1461" width="0.0601%" height="15" fill="rgb(252,208,35)" fg:x="18175" fg:w="16"/><text x="68.5078%" y="1471.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.06%)</title><rect x="68.2578%" y="1445" width="0.0601%" height="15" fill="rgb(215,181,35)" fg:x="18175" fg:w="16"/><text x="68.5078%" y="1455.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (16 samples, 0.06%)</title><rect x="68.2578%" y="1429" width="0.0601%" height="15" fill="rgb(246,212,3)" fg:x="18175" fg:w="16"/><text x="68.5078%" y="1439.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (13 samples, 0.05%)</title><rect x="68.2691%" y="1413" width="0.0488%" height="15" fill="rgb(247,156,24)" fg:x="18178" fg:w="13"/><text x="68.5191%" y="1423.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.05%)</title><rect x="68.2691%" y="1397" width="0.0488%" height="15" fill="rgb(248,9,31)" fg:x="18178" fg:w="13"/><text x="68.5191%" y="1407.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.05%)</title><rect x="68.2691%" y="1381" width="0.0488%" height="15" fill="rgb(234,26,45)" fg:x="18178" fg:w="13"/><text x="68.5191%" y="1391.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (13 samples, 0.05%)</title><rect x="68.2691%" y="1365" width="0.0488%" height="15" fill="rgb(249,11,32)" fg:x="18178" fg:w="13"/><text x="68.5191%" y="1375.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.05%)</title><rect x="68.2691%" y="1349" width="0.0488%" height="15" fill="rgb(249,162,33)" fg:x="18178" fg:w="13"/><text x="68.5191%" y="1359.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.05%)</title><rect x="68.2691%" y="1333" width="0.0488%" height="15" fill="rgb(232,4,32)" fg:x="18178" fg:w="13"/><text x="68.5191%" y="1343.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.05%)</title><rect x="68.2691%" y="1317" width="0.0488%" height="15" fill="rgb(212,5,45)" fg:x="18178" fg:w="13"/><text x="68.5191%" y="1327.50"></text></g><g><title>__rdl_alloc (13 samples, 0.05%)</title><rect x="68.2691%" y="1301" width="0.0488%" height="15" fill="rgb(227,95,13)" fg:x="18178" fg:w="13"/><text x="68.5191%" y="1311.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (13 samples, 0.05%)</title><rect x="68.2691%" y="1285" width="0.0488%" height="15" fill="rgb(223,205,10)" fg:x="18178" fg:w="13"/><text x="68.5191%" y="1295.50"></text></g><g><title>malloc (13 samples, 0.05%)</title><rect x="68.2691%" y="1269" width="0.0488%" height="15" fill="rgb(222,178,8)" fg:x="18178" fg:w="13"/><text x="68.5191%" y="1279.50"></text></g><g><title>_int_malloc (13 samples, 0.05%)</title><rect x="68.2691%" y="1253" width="0.0488%" height="15" fill="rgb(216,13,22)" fg:x="18178" fg:w="13"/><text x="68.5191%" y="1263.50"></text></g><g><title>cfree@GLIBC_2.2.5 (28 samples, 0.11%)</title><rect x="68.3179%" y="1317" width="0.1052%" height="15" fill="rgb(240,167,12)" fg:x="18191" fg:w="28"/><text x="68.5679%" y="1327.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (28 samples, 0.11%)</title><rect x="68.3179%" y="1301" width="0.1052%" height="15" fill="rgb(235,68,35)" fg:x="18191" fg:w="28"/><text x="68.5679%" y="1311.50"></text></g><g><title>malloc_consolidate (28 samples, 0.11%)</title><rect x="68.3179%" y="1285" width="0.1052%" height="15" fill="rgb(253,40,27)" fg:x="18191" fg:w="28"/><text x="68.5679%" y="1295.50"></text></g><g><title>unlink_chunk.isra.0 (7 samples, 0.03%)</title><rect x="68.3967%" y="1269" width="0.0263%" height="15" fill="rgb(214,19,28)" fg:x="18212" fg:w="7"/><text x="68.6467%" y="1279.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (5 samples, 0.02%)</title><rect x="68.4343%" y="1061" width="0.0188%" height="15" fill="rgb(210,167,45)" fg:x="18222" fg:w="5"/><text x="68.6843%" y="1071.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (5 samples, 0.02%)</title><rect x="68.4343%" y="1045" width="0.0188%" height="15" fill="rgb(232,97,40)" fg:x="18222" fg:w="5"/><text x="68.6843%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::Source,usize)&gt; (5 samples, 0.02%)</title><rect x="68.4343%" y="1029" width="0.0188%" height="15" fill="rgb(250,35,23)" fg:x="18222" fg:w="5"/><text x="68.6843%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::Source&gt; (5 samples, 0.02%)</title><rect x="68.4343%" y="1013" width="0.0188%" height="15" fill="rgb(248,47,53)" fg:x="18222" fg:w="5"/><text x="68.6843%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt; (5 samples, 0.02%)</title><rect x="68.4343%" y="997" width="0.0188%" height="15" fill="rgb(226,58,50)" fg:x="18222" fg:w="5"/><text x="68.6843%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeId&gt;&gt; (5 samples, 0.02%)</title><rect x="68.4343%" y="981" width="0.0188%" height="15" fill="rgb(217,105,26)" fg:x="18222" fg:w="5"/><text x="68.6843%" y="991.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="68.4343%" y="965" width="0.0188%" height="15" fill="rgb(208,64,1)" fg:x="18222" fg:w="5"/><text x="68.6843%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.02%)</title><rect x="68.4343%" y="949" width="0.0188%" height="15" fill="rgb(214,80,1)" fg:x="18222" fg:w="5"/><text x="68.6843%" y="959.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (6 samples, 0.02%)</title><rect x="68.4343%" y="1077" width="0.0225%" height="15" fill="rgb(206,175,26)" fg:x="18222" fg:w="6"/><text x="68.6843%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.04%)</title><rect x="68.4568%" y="1061" width="0.0413%" height="15" fill="rgb(235,156,37)" fg:x="18228" fg:w="11"/><text x="68.7068%" y="1071.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.04%)</title><rect x="68.4568%" y="1045" width="0.0413%" height="15" fill="rgb(213,100,9)" fg:x="18228" fg:w="11"/><text x="68.7068%" y="1055.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.04%)</title><rect x="68.4568%" y="1029" width="0.0413%" height="15" fill="rgb(241,15,13)" fg:x="18228" fg:w="11"/><text x="68.7068%" y="1039.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.04%)</title><rect x="68.4568%" y="1013" width="0.0413%" height="15" fill="rgb(205,97,43)" fg:x="18228" fg:w="11"/><text x="68.7068%" y="1023.50"></text></g><g><title>cfree@GLIBC_2.2.5 (11 samples, 0.04%)</title><rect x="68.4568%" y="997" width="0.0413%" height="15" fill="rgb(216,106,32)" fg:x="18228" fg:w="11"/><text x="68.7068%" y="1007.50"></text></g><g><title>_int_free_merge_chunk (6 samples, 0.02%)</title><rect x="68.4756%" y="981" width="0.0225%" height="15" fill="rgb(226,200,8)" fg:x="18233" fg:w="6"/><text x="68.7256%" y="991.50"></text></g><g><title>_int_free_create_chunk (6 samples, 0.02%)</title><rect x="68.4756%" y="965" width="0.0225%" height="15" fill="rgb(244,54,29)" fg:x="18233" fg:w="6"/><text x="68.7256%" y="975.50"></text></g><g><title>unlink_chunk.isra.0 (3 samples, 0.01%)</title><rect x="68.4869%" y="949" width="0.0113%" height="15" fill="rgb(252,169,12)" fg:x="18236" fg:w="3"/><text x="68.7369%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::OriginalLocation&gt; (21 samples, 0.08%)</title><rect x="68.4230%" y="1173" width="0.0789%" height="15" fill="rgb(231,199,11)" fg:x="18219" fg:w="21"/><text x="68.6730%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graph_craft::document::Source,usize&gt;&gt; (19 samples, 0.07%)</title><rect x="68.4305%" y="1157" width="0.0714%" height="15" fill="rgb(233,191,18)" fg:x="18221" fg:w="19"/><text x="68.6805%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graph_craft::document::Source,usize,std::hash::random::RandomState&gt;&gt; (19 samples, 0.07%)</title><rect x="68.4305%" y="1141" width="0.0714%" height="15" fill="rgb(215,83,47)" fg:x="18221" fg:w="19"/><text x="68.6805%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graph_craft::document::Source,usize)&gt;&gt; (19 samples, 0.07%)</title><rect x="68.4305%" y="1125" width="0.0714%" height="15" fill="rgb(251,67,19)" fg:x="18221" fg:w="19"/><text x="68.6805%" y="1135.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.07%)</title><rect x="68.4305%" y="1109" width="0.0714%" height="15" fill="rgb(240,7,20)" fg:x="18221" fg:w="19"/><text x="68.6805%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (19 samples, 0.07%)</title><rect x="68.4305%" y="1093" width="0.0714%" height="15" fill="rgb(210,150,26)" fg:x="18221" fg:w="19"/><text x="68.6805%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (12 samples, 0.05%)</title><rect x="68.4568%" y="1077" width="0.0451%" height="15" fill="rgb(228,75,42)" fg:x="18228" fg:w="12"/><text x="68.7068%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(graph_craft::document::NodeId,bool)&gt;&gt; (9 samples, 0.03%)</title><rect x="68.5057%" y="1157" width="0.0338%" height="15" fill="rgb(237,134,48)" fg:x="18241" fg:w="9"/><text x="68.7557%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(graph_craft::document::NodeId,bool)&gt;&gt; (9 samples, 0.03%)</title><rect x="68.5057%" y="1141" width="0.0338%" height="15" fill="rgb(205,80,50)" fg:x="18241" fg:w="9"/><text x="68.7557%" y="1151.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="68.5057%" y="1125" width="0.0338%" height="15" fill="rgb(217,74,48)" fg:x="18241" fg:w="9"/><text x="68.7557%" y="1135.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.03%)</title><rect x="68.5057%" y="1109" width="0.0338%" height="15" fill="rgb(205,82,50)" fg:x="18241" fg:w="9"/><text x="68.7557%" y="1119.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.03%)</title><rect x="68.5057%" y="1093" width="0.0338%" height="15" fill="rgb(228,1,33)" fg:x="18241" fg:w="9"/><text x="68.7557%" y="1103.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.03%)</title><rect x="68.5057%" y="1077" width="0.0338%" height="15" fill="rgb(214,50,23)" fg:x="18241" fg:w="9"/><text x="68.7557%" y="1087.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.03%)</title><rect x="68.5057%" y="1061" width="0.0338%" height="15" fill="rgb(210,62,9)" fg:x="18241" fg:w="9"/><text x="68.7557%" y="1071.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.03%)</title><rect x="68.5057%" y="1045" width="0.0338%" height="15" fill="rgb(210,104,37)" fg:x="18241" fg:w="9"/><text x="68.7557%" y="1055.50"></text></g><g><title>_int_free (4 samples, 0.02%)</title><rect x="68.5244%" y="1029" width="0.0150%" height="15" fill="rgb(232,104,43)" fg:x="18246" fg:w="4"/><text x="68.7744%" y="1039.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.01%)</title><rect x="68.5582%" y="1125" width="0.0113%" height="15" fill="rgb(244,52,6)" fg:x="18255" fg:w="3"/><text x="68.8082%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graphene_core::vector::vector_data::attributes::PointId&gt;&gt; (3 samples, 0.01%)</title><rect x="68.5695%" y="1109" width="0.0113%" height="15" fill="rgb(211,174,52)" fg:x="18258" fg:w="3"/><text x="68.8195%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graphene_core::vector::vector_data::attributes::PointId&gt;&gt; (3 samples, 0.01%)</title><rect x="68.5695%" y="1093" width="0.0113%" height="15" fill="rgb(229,48,4)" fg:x="18258" fg:w="3"/><text x="68.8195%" y="1103.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="68.5695%" y="1077" width="0.0113%" height="15" fill="rgb(205,155,16)" fg:x="18258" fg:w="3"/><text x="68.8195%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="68.5695%" y="1061" width="0.0113%" height="15" fill="rgb(211,141,53)" fg:x="18258" fg:w="3"/><text x="68.8195%" y="1071.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="68.5695%" y="1045" width="0.0113%" height="15" fill="rgb(240,148,11)" fg:x="18258" fg:w="3"/><text x="68.8195%" y="1055.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.01%)</title><rect x="68.5695%" y="1029" width="0.0113%" height="15" fill="rgb(214,45,23)" fg:x="18258" fg:w="3"/><text x="68.8195%" y="1039.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.01%)</title><rect x="68.5695%" y="1013" width="0.0113%" height="15" fill="rgb(248,74,26)" fg:x="18258" fg:w="3"/><text x="68.8195%" y="1023.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.01%)</title><rect x="68.5695%" y="997" width="0.0113%" height="15" fill="rgb(218,121,16)" fg:x="18258" fg:w="3"/><text x="68.8195%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::PointModification&gt; (6 samples, 0.02%)</title><rect x="68.5695%" y="1125" width="0.0225%" height="15" fill="rgb(218,10,47)" fg:x="18258" fg:w="6"/><text x="68.8195%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2&gt;&gt; (3 samples, 0.01%)</title><rect x="68.5808%" y="1109" width="0.0113%" height="15" fill="rgb(227,99,14)" fg:x="18261" fg:w="3"/><text x="68.8308%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2,std::hash::random::RandomState&gt;&gt; (3 samples, 0.01%)</title><rect x="68.5808%" y="1093" width="0.0113%" height="15" fill="rgb(229,83,46)" fg:x="18261" fg:w="3"/><text x="68.8308%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2)&gt;&gt; (3 samples, 0.01%)</title><rect x="68.5808%" y="1077" width="0.0113%" height="15" fill="rgb(228,25,1)" fg:x="18261" fg:w="3"/><text x="68.8308%" y="1087.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="68.5808%" y="1061" width="0.0113%" height="15" fill="rgb(252,190,15)" fg:x="18261" fg:w="3"/><text x="68.8308%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (3 samples, 0.01%)</title><rect x="68.5808%" y="1045" width="0.0113%" height="15" fill="rgb(213,103,51)" fg:x="18261" fg:w="3"/><text x="68.8308%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3 samples, 0.01%)</title><rect x="68.5808%" y="1029" width="0.0113%" height="15" fill="rgb(220,38,44)" fg:x="18261" fg:w="3"/><text x="68.8308%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="68.5808%" y="1013" width="0.0113%" height="15" fill="rgb(210,45,26)" fg:x="18261" fg:w="3"/><text x="68.8308%" y="1023.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="68.5808%" y="997" width="0.0113%" height="15" fill="rgb(205,95,48)" fg:x="18261" fg:w="3"/><text x="68.8308%" y="1007.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.01%)</title><rect x="68.5808%" y="981" width="0.0113%" height="15" fill="rgb(225,179,37)" fg:x="18261" fg:w="3"/><text x="68.8308%" y="991.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.01%)</title><rect x="68.5808%" y="965" width="0.0113%" height="15" fill="rgb(230,209,3)" fg:x="18261" fg:w="3"/><text x="68.8308%" y="975.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.01%)</title><rect x="68.5808%" y="949" width="0.0113%" height="15" fill="rgb(248,12,46)" fg:x="18261" fg:w="3"/><text x="68.8308%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;&gt;&gt; (5 samples, 0.02%)</title><rect x="68.6033%" y="1109" width="0.0188%" height="15" fill="rgb(234,18,0)" fg:x="18267" fg:w="5"/><text x="68.8533%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;,std::hash::random::RandomState&gt;&gt; (5 samples, 0.02%)</title><rect x="68.6033%" y="1093" width="0.0188%" height="15" fill="rgb(238,197,14)" fg:x="18267" fg:w="5"/><text x="68.8533%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;)&gt;&gt; (5 samples, 0.02%)</title><rect x="68.6033%" y="1077" width="0.0188%" height="15" fill="rgb(251,162,48)" fg:x="18267" fg:w="5"/><text x="68.8533%" y="1087.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="68.6033%" y="1061" width="0.0188%" height="15" fill="rgb(237,73,42)" fg:x="18267" fg:w="5"/><text x="68.8533%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (5 samples, 0.02%)</title><rect x="68.6033%" y="1045" width="0.0188%" height="15" fill="rgb(211,108,8)" fg:x="18267" fg:w="5"/><text x="68.8533%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (5 samples, 0.02%)</title><rect x="68.6033%" y="1029" width="0.0188%" height="15" fill="rgb(213,45,22)" fg:x="18267" fg:w="5"/><text x="68.8533%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.02%)</title><rect x="68.6033%" y="1013" width="0.0188%" height="15" fill="rgb(252,154,5)" fg:x="18267" fg:w="5"/><text x="68.8533%" y="1023.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.02%)</title><rect x="68.6033%" y="997" width="0.0188%" height="15" fill="rgb(221,79,52)" fg:x="18267" fg:w="5"/><text x="68.8533%" y="1007.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.02%)</title><rect x="68.6033%" y="981" width="0.0188%" height="15" fill="rgb(229,220,36)" fg:x="18267" fg:w="5"/><text x="68.8533%" y="991.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.02%)</title><rect x="68.6033%" y="965" width="0.0188%" height="15" fill="rgb(211,17,16)" fg:x="18267" fg:w="5"/><text x="68.8533%" y="975.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.02%)</title><rect x="68.6033%" y="949" width="0.0188%" height="15" fill="rgb(222,55,31)" fg:x="18267" fg:w="5"/><text x="68.8533%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::SegmentModification&gt; (9 samples, 0.03%)</title><rect x="68.5995%" y="1125" width="0.0338%" height="15" fill="rgb(221,221,31)" fg:x="18266" fg:w="9"/><text x="68.8495%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId&gt;&gt; (3 samples, 0.01%)</title><rect x="68.6221%" y="1109" width="0.0113%" height="15" fill="rgb(227,168,26)" fg:x="18272" fg:w="3"/><text x="68.8721%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId,std::hash::random::RandomState&gt;&gt; (3 samples, 0.01%)</title><rect x="68.6221%" y="1093" width="0.0113%" height="15" fill="rgb(224,139,9)" fg:x="18272" fg:w="3"/><text x="68.8721%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId)&gt;&gt; (3 samples, 0.01%)</title><rect x="68.6221%" y="1077" width="0.0113%" height="15" fill="rgb(254,172,0)" fg:x="18272" fg:w="3"/><text x="68.8721%" y="1087.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="68.6221%" y="1061" width="0.0113%" height="15" fill="rgb(235,203,1)" fg:x="18272" fg:w="3"/><text x="68.8721%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ConstructionArgs&gt; (36 samples, 0.14%)</title><rect x="68.5019%" y="1173" width="0.1352%" height="15" fill="rgb(216,205,24)" fg:x="18240" fg:w="36"/><text x="68.7519%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::memo::MemoHash&lt;graph_craft::document::value::TaggedValue&gt;&gt; (26 samples, 0.10%)</title><rect x="68.5395%" y="1157" width="0.0976%" height="15" fill="rgb(233,24,6)" fg:x="18250" fg:w="26"/><text x="68.7895%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::VectorModification&gt; (21 samples, 0.08%)</title><rect x="68.5582%" y="1141" width="0.0789%" height="15" fill="rgb(244,110,9)" fg:x="18255" fg:w="21"/><text x="68.8082%" y="1151.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 0.02%)</title><rect x="68.6409%" y="1157" width="0.0225%" height="15" fill="rgb(239,222,42)" fg:x="18277" fg:w="6"/><text x="68.8909%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNodeInput&gt; (9 samples, 0.03%)</title><rect x="68.6371%" y="1173" width="0.0338%" height="15" fill="rgb(218,145,13)" fg:x="18276" fg:w="9"/><text x="68.8871%" y="1183.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (105 samples, 0.39%)</title><rect x="68.3179%" y="1349" width="0.3943%" height="15" fill="rgb(207,69,11)" fg:x="18191" fg:w="105"/><text x="68.5679%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (105 samples, 0.39%)</title><rect x="68.3179%" y="1333" width="0.3943%" height="15" fill="rgb(220,223,22)" fg:x="18191" fg:w="105"/><text x="68.5679%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::GenericShunt&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;graph_craft::document::NodeInput&gt;,graph_craft::document::NodeNetwork::into_proto_networks::{{closure}}&gt;,graph_craft::graphene_compiler::Compiler::compile::{{closure}}&gt;,core::result::Result&lt;core::convert::Infallible,alloc::string::String&gt;&gt;&gt; (77 samples, 0.29%)</title><rect x="68.4230%" y="1317" width="0.2892%" height="15" fill="rgb(245,102,5)" fg:x="18219" fg:w="77"/><text x="68.6730%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;graph_craft::document::NodeInput&gt;,graph_craft::document::NodeNetwork::into_proto_networks::{{closure}}&gt;,graph_craft::graphene_compiler::Compiler::compile::{{closure}}&gt;&gt; (77 samples, 0.29%)</title><rect x="68.4230%" y="1301" width="0.2892%" height="15" fill="rgb(211,148,2)" fg:x="18219" fg:w="77"/><text x="68.6730%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;graph_craft::document::NodeInput&gt;,graph_craft::document::NodeNetwork::into_proto_networks::{{closure}}&gt;&gt; (77 samples, 0.29%)</title><rect x="68.4230%" y="1285" width="0.2892%" height="15" fill="rgb(241,13,44)" fg:x="18219" fg:w="77"/><text x="68.6730%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::NodeNetwork::into_proto_networks::{{closure}}&gt; (77 samples, 0.29%)</title><rect x="68.4230%" y="1269" width="0.2892%" height="15" fill="rgb(219,137,21)" fg:x="18219" fg:w="77"/><text x="68.6730%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (77 samples, 0.29%)</title><rect x="68.4230%" y="1253" width="0.2892%" height="15" fill="rgb(242,206,5)" fg:x="18219" fg:w="77"/><text x="68.6730%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 0.29%)</title><rect x="68.4230%" y="1237" width="0.2892%" height="15" fill="rgb(217,114,22)" fg:x="18219" fg:w="77"/><text x="68.6730%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)]&gt; (77 samples, 0.29%)</title><rect x="68.4230%" y="1221" width="0.2892%" height="15" fill="rgb(253,206,42)" fg:x="18219" fg:w="77"/><text x="68.6730%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt; (77 samples, 0.29%)</title><rect x="68.4230%" y="1205" width="0.2892%" height="15" fill="rgb(236,102,18)" fg:x="18219" fg:w="77"/><text x="68.6730%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNode&gt; (77 samples, 0.29%)</title><rect x="68.4230%" y="1189" width="0.2892%" height="15" fill="rgb(208,59,49)" fg:x="18219" fg:w="77"/><text x="68.6730%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::ProtoNodeIdentifier&gt; (11 samples, 0.04%)</title><rect x="68.6709%" y="1173" width="0.0413%" height="15" fill="rgb(215,194,28)" fg:x="18285" fg:w="11"/><text x="68.9209%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (11 samples, 0.04%)</title><rect x="68.6709%" y="1157" width="0.0413%" height="15" fill="rgb(243,207,11)" fg:x="18285" fg:w="11"/><text x="68.9209%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (10 samples, 0.04%)</title><rect x="68.6747%" y="1141" width="0.0376%" height="15" fill="rgb(254,179,35)" fg:x="18286" fg:w="10"/><text x="68.9247%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (10 samples, 0.04%)</title><rect x="68.6747%" y="1125" width="0.0376%" height="15" fill="rgb(235,97,3)" fg:x="18286" fg:w="10"/><text x="68.9247%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (10 samples, 0.04%)</title><rect x="68.6747%" y="1109" width="0.0376%" height="15" fill="rgb(215,155,33)" fg:x="18286" fg:w="10"/><text x="68.9247%" y="1119.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.04%)</title><rect x="68.6747%" y="1093" width="0.0376%" height="15" fill="rgb(223,128,12)" fg:x="18286" fg:w="10"/><text x="68.9247%" y="1103.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.04%)</title><rect x="68.6747%" y="1077" width="0.0376%" height="15" fill="rgb(208,157,18)" fg:x="18286" fg:w="10"/><text x="68.9247%" y="1087.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.04%)</title><rect x="68.6747%" y="1061" width="0.0376%" height="15" fill="rgb(249,70,54)" fg:x="18286" fg:w="10"/><text x="68.9247%" y="1071.50"></text></g><g><title>__rdl_dealloc (10 samples, 0.04%)</title><rect x="68.6747%" y="1045" width="0.0376%" height="15" fill="rgb(244,118,24)" fg:x="18286" fg:w="10"/><text x="68.9247%" y="1055.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (10 samples, 0.04%)</title><rect x="68.6747%" y="1029" width="0.0376%" height="15" fill="rgb(211,54,0)" fg:x="18286" fg:w="10"/><text x="68.9247%" y="1039.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.03%)</title><rect x="68.6784%" y="1013" width="0.0338%" height="15" fill="rgb(245,137,45)" fg:x="18287" fg:w="9"/><text x="68.9284%" y="1023.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7 samples, 0.03%)</title><rect x="68.7160%" y="1205" width="0.0263%" height="15" fill="rgb(232,154,31)" fg:x="18297" fg:w="7"/><text x="68.9660%" y="1215.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (7 samples, 0.03%)</title><rect x="68.7160%" y="1189" width="0.0263%" height="15" fill="rgb(253,6,39)" fg:x="18297" fg:w="7"/><text x="68.9660%" y="1199.50"></text></g><g><title>malloc_consolidate (7 samples, 0.03%)</title><rect x="68.7160%" y="1173" width="0.0263%" height="15" fill="rgb(234,183,24)" fg:x="18297" fg:w="7"/><text x="68.9660%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt;&gt; (9 samples, 0.03%)</title><rect x="68.7460%" y="1189" width="0.0338%" height="15" fill="rgb(252,84,40)" fg:x="18305" fg:w="9"/><text x="68.9960%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;,std::hash::random::RandomState&gt;&gt; (9 samples, 0.03%)</title><rect x="68.7460%" y="1173" width="0.0338%" height="15" fill="rgb(224,65,2)" fg:x="18305" fg:w="9"/><text x="68.9960%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;)&gt;&gt; (9 samples, 0.03%)</title><rect x="68.7460%" y="1157" width="0.0338%" height="15" fill="rgb(229,38,24)" fg:x="18305" fg:w="9"/><text x="68.9960%" y="1167.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="68.7460%" y="1141" width="0.0338%" height="15" fill="rgb(218,131,50)" fg:x="18305" fg:w="9"/><text x="68.9960%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (9 samples, 0.03%)</title><rect x="68.7460%" y="1125" width="0.0338%" height="15" fill="rgb(233,106,18)" fg:x="18305" fg:w="9"/><text x="68.9960%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (9 samples, 0.03%)</title><rect x="68.7460%" y="1109" width="0.0338%" height="15" fill="rgb(220,216,11)" fg:x="18305" fg:w="9"/><text x="68.9960%" y="1119.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (8 samples, 0.03%)</title><rect x="68.7498%" y="1093" width="0.0300%" height="15" fill="rgb(251,100,45)" fg:x="18306" fg:w="8"/><text x="68.9998%" y="1103.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (8 samples, 0.03%)</title><rect x="68.7498%" y="1077" width="0.0300%" height="15" fill="rgb(235,143,32)" fg:x="18306" fg:w="8"/><text x="68.9998%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;)&gt; (8 samples, 0.03%)</title><rect x="68.7498%" y="1061" width="0.0300%" height="15" fill="rgb(248,124,34)" fg:x="18306" fg:w="8"/><text x="68.9998%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt; (8 samples, 0.03%)</title><rect x="68.7498%" y="1045" width="0.0300%" height="15" fill="rgb(225,221,4)" fg:x="18306" fg:w="8"/><text x="68.9998%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeId&gt;&gt; (8 samples, 0.03%)</title><rect x="68.7498%" y="1029" width="0.0300%" height="15" fill="rgb(242,27,43)" fg:x="18306" fg:w="8"/><text x="68.9998%" y="1039.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.03%)</title><rect x="68.7498%" y="1013" width="0.0300%" height="15" fill="rgb(227,54,8)" fg:x="18306" fg:w="8"/><text x="68.9998%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.03%)</title><rect x="68.7498%" y="997" width="0.0300%" height="15" fill="rgb(253,139,49)" fg:x="18306" fg:w="8"/><text x="68.9998%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.03%)</title><rect x="68.7498%" y="981" width="0.0300%" height="15" fill="rgb(231,26,43)" fg:x="18306" fg:w="8"/><text x="68.9998%" y="991.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.03%)</title><rect x="68.7498%" y="965" width="0.0300%" height="15" fill="rgb(207,121,39)" fg:x="18306" fg:w="8"/><text x="68.9998%" y="975.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.03%)</title><rect x="68.7498%" y="949" width="0.0300%" height="15" fill="rgb(223,101,35)" fg:x="18306" fg:w="8"/><text x="68.9998%" y="959.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 0.03%)</title><rect x="68.7498%" y="933" width="0.0300%" height="15" fill="rgb(232,87,23)" fg:x="18306" fg:w="8"/><text x="68.9998%" y="943.50"></text></g><g><title>_int_free (4 samples, 0.02%)</title><rect x="68.7648%" y="917" width="0.0150%" height="15" fill="rgb(225,180,29)" fg:x="18310" fg:w="4"/><text x="69.0148%" y="927.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="68.8023%" y="1157" width="0.0113%" height="15" fill="rgb(225,25,17)" fg:x="18320" fg:w="3"/><text x="69.0523%" y="1167.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.05%)</title><rect x="68.7948%" y="1173" width="0.0526%" height="15" fill="rgb(223,8,52)" fg:x="18318" fg:w="14"/><text x="69.0448%" y="1183.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (9 samples, 0.03%)</title><rect x="68.8136%" y="1157" width="0.0338%" height="15" fill="rgb(246,42,21)" fg:x="18323" fg:w="9"/><text x="69.0636%" y="1167.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (9 samples, 0.03%)</title><rect x="68.8136%" y="1141" width="0.0338%" height="15" fill="rgb(205,64,43)" fg:x="18323" fg:w="9"/><text x="69.0636%" y="1151.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (9 samples, 0.03%)</title><rect x="68.8136%" y="1125" width="0.0338%" height="15" fill="rgb(221,160,13)" fg:x="18323" fg:w="9"/><text x="69.0636%" y="1135.50"></text></g><g><title>alloc::raw_vec::finish_grow (43 samples, 0.16%)</title><rect x="68.8737%" y="1125" width="0.1615%" height="15" fill="rgb(239,58,35)" fg:x="18339" fg:w="43"/><text x="69.1237%" y="1135.50"></text></g><g><title>malloc (40 samples, 0.15%)</title><rect x="68.8850%" y="1109" width="0.1502%" height="15" fill="rgb(251,26,40)" fg:x="18342" fg:w="40"/><text x="69.1350%" y="1119.50"></text></g><g><title>_int_malloc (26 samples, 0.10%)</title><rect x="68.9375%" y="1093" width="0.0976%" height="15" fill="rgb(247,0,4)" fg:x="18356" fg:w="26"/><text x="69.1875%" y="1103.50"></text></g><g><title>unlink_chunk.isra.0 (5 samples, 0.02%)</title><rect x="69.0164%" y="1077" width="0.0188%" height="15" fill="rgb(218,130,10)" fg:x="18377" fg:w="5"/><text x="69.2664%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (47 samples, 0.18%)</title><rect x="68.8662%" y="1157" width="0.1765%" height="15" fill="rgb(239,32,7)" fg:x="18337" fg:w="47"/><text x="69.1162%" y="1167.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (46 samples, 0.17%)</title><rect x="68.8699%" y="1141" width="0.1728%" height="15" fill="rgb(210,192,24)" fg:x="18338" fg:w="46"/><text x="69.1199%" y="1151.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (55 samples, 0.21%)</title><rect x="68.8474%" y="1173" width="0.2066%" height="15" fill="rgb(226,212,17)" fg:x="18332" fg:w="55"/><text x="69.0974%" y="1183.50"></text></g><g><title>core::ptr::write (3 samples, 0.01%)</title><rect x="69.0427%" y="1157" width="0.0113%" height="15" fill="rgb(219,201,28)" fg:x="18384" fg:w="3"/><text x="69.2927%" y="1167.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="69.6849%" y="1141" width="0.0150%" height="15" fill="rgb(235,207,41)" fg:x="18555" fg:w="4"/><text x="69.9349%" y="1151.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.02%)</title><rect x="69.6849%" y="1125" width="0.0150%" height="15" fill="rgb(241,95,54)" fg:x="18555" fg:w="4"/><text x="69.9349%" y="1135.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (352 samples, 1.32%)</title><rect x="69.0540%" y="1157" width="1.3220%" height="15" fill="rgb(248,12,23)" fg:x="18387" fg:w="352"/><text x="69.3040%" y="1167.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref::_{{closure}} (180 samples, 0.68%)</title><rect x="69.6999%" y="1141" width="0.6760%" height="15" fill="rgb(228,173,4)" fg:x="18559" fg:w="180"/><text x="69.9499%" y="1151.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (180 samples, 0.68%)</title><rect x="69.6999%" y="1125" width="0.6760%" height="15" fill="rgb(254,99,5)" fg:x="18559" fg:w="180"/><text x="69.9499%" y="1135.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (180 samples, 0.68%)</title><rect x="69.6999%" y="1109" width="0.6760%" height="15" fill="rgb(212,184,17)" fg:x="18559" fg:w="180"/><text x="69.9499%" y="1119.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref (353 samples, 1.33%)</title><rect x="69.0540%" y="1173" width="1.3257%" height="15" fill="rgb(252,174,1)" fg:x="18387" fg:w="353"/><text x="69.3040%" y="1183.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4 samples, 0.02%)</title><rect x="70.3797%" y="1109" width="0.0150%" height="15" fill="rgb(241,118,51)" fg:x="18740" fg:w="4"/><text x="70.6297%" y="1119.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 0.02%)</title><rect x="70.3797%" y="1093" width="0.0150%" height="15" fill="rgb(227,94,47)" fg:x="18740" fg:w="4"/><text x="70.6297%" y="1103.50"></text></g><g><title>core::ptr::write (4 samples, 0.02%)</title><rect x="70.3797%" y="1077" width="0.0150%" height="15" fill="rgb(229,104,2)" fg:x="18740" fg:w="4"/><text x="70.6297%" y="1087.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (8 samples, 0.03%)</title><rect x="70.3797%" y="1173" width="0.0300%" height="15" fill="rgb(219,28,31)" fg:x="18740" fg:w="8"/><text x="70.6297%" y="1183.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (8 samples, 0.03%)</title><rect x="70.3797%" y="1157" width="0.0300%" height="15" fill="rgb(233,109,36)" fg:x="18740" fg:w="8"/><text x="70.6297%" y="1167.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (8 samples, 0.03%)</title><rect x="70.3797%" y="1141" width="0.0300%" height="15" fill="rgb(246,88,11)" fg:x="18740" fg:w="8"/><text x="70.6297%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (8 samples, 0.03%)</title><rect x="70.3797%" y="1125" width="0.0300%" height="15" fill="rgb(209,212,17)" fg:x="18740" fg:w="8"/><text x="70.6297%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (4 samples, 0.02%)</title><rect x="70.3947%" y="1109" width="0.0150%" height="15" fill="rgb(243,59,29)" fg:x="18744" fg:w="4"/><text x="70.6447%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (4 samples, 0.02%)</title><rect x="70.3947%" y="1093" width="0.0150%" height="15" fill="rgb(244,205,48)" fg:x="18744" fg:w="4"/><text x="70.6447%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (4 samples, 0.02%)</title><rect x="70.3947%" y="1077" width="0.0150%" height="15" fill="rgb(227,30,6)" fg:x="18744" fg:w="4"/><text x="70.6447%" y="1087.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (4 samples, 0.02%)</title><rect x="70.3947%" y="1061" width="0.0150%" height="15" fill="rgb(220,205,48)" fg:x="18744" fg:w="4"/><text x="70.6447%" y="1071.50"></text></g><g><title>hashbrown::raw::is_full (4 samples, 0.02%)</title><rect x="70.3947%" y="1045" width="0.0150%" height="15" fill="rgb(250,94,14)" fg:x="18744" fg:w="4"/><text x="70.6447%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.02%)</title><rect x="70.4360%" y="949" width="0.0150%" height="15" fill="rgb(216,119,42)" fg:x="18755" fg:w="4"/><text x="70.6860%" y="959.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="70.4398%" y="933" width="0.0113%" height="15" fill="rgb(232,155,0)" fg:x="18756" fg:w="3"/><text x="70.6898%" y="943.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="70.4210%" y="997" width="0.0526%" height="15" fill="rgb(212,24,32)" fg:x="18751" fg:w="14"/><text x="70.6710%" y="1007.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="70.4210%" y="981" width="0.0526%" height="15" fill="rgb(216,69,20)" fg:x="18751" fg:w="14"/><text x="70.6710%" y="991.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="70.4210%" y="965" width="0.0526%" height="15" fill="rgb(229,73,31)" fg:x="18751" fg:w="14"/><text x="70.6710%" y="975.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 0.02%)</title><rect x="70.4510%" y="949" width="0.0225%" height="15" fill="rgb(224,219,20)" fg:x="18759" fg:w="6"/><text x="70.7010%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (19 samples, 0.07%)</title><rect x="70.4210%" y="1061" width="0.0714%" height="15" fill="rgb(215,146,41)" fg:x="18751" fg:w="19"/><text x="70.6710%" y="1071.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (19 samples, 0.07%)</title><rect x="70.4210%" y="1045" width="0.0714%" height="15" fill="rgb(244,71,31)" fg:x="18751" fg:w="19"/><text x="70.6710%" y="1055.50"></text></g><g><title>hashbrown::map::make_hash (19 samples, 0.07%)</title><rect x="70.4210%" y="1029" width="0.0714%" height="15" fill="rgb(224,24,11)" fg:x="18751" fg:w="19"/><text x="70.6710%" y="1039.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 0.07%)</title><rect x="70.4210%" y="1013" width="0.0714%" height="15" fill="rgb(229,76,15)" fg:x="18751" fg:w="19"/><text x="70.6710%" y="1023.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.02%)</title><rect x="70.4773%" y="997" width="0.0150%" height="15" fill="rgb(209,93,2)" fg:x="18766" fg:w="4"/><text x="70.7273%" y="1007.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (4 samples, 0.02%)</title><rect x="70.4773%" y="981" width="0.0150%" height="15" fill="rgb(216,200,50)" fg:x="18766" fg:w="4"/><text x="70.7273%" y="991.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (4 samples, 0.02%)</title><rect x="70.4773%" y="965" width="0.0150%" height="15" fill="rgb(211,67,34)" fg:x="18766" fg:w="4"/><text x="70.7273%" y="975.50"></text></g><g><title>core::hash::Hasher::write_u64 (4 samples, 0.02%)</title><rect x="70.4773%" y="949" width="0.0150%" height="15" fill="rgb(225,87,47)" fg:x="18766" fg:w="4"/><text x="70.7273%" y="959.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="70.4773%" y="933" width="0.0150%" height="15" fill="rgb(217,185,16)" fg:x="18766" fg:w="4"/><text x="70.7273%" y="943.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="70.4773%" y="917" width="0.0150%" height="15" fill="rgb(205,0,0)" fg:x="18766" fg:w="4"/><text x="70.7273%" y="927.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="70.4773%" y="901" width="0.0150%" height="15" fill="rgb(207,116,45)" fg:x="18766" fg:w="4"/><text x="70.7273%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3 samples, 0.01%)</title><rect x="70.4999%" y="1029" width="0.0113%" height="15" fill="rgb(221,156,26)" fg:x="18772" fg:w="3"/><text x="70.7499%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (8 samples, 0.03%)</title><rect x="70.5111%" y="1029" width="0.0300%" height="15" fill="rgb(213,140,4)" fg:x="18775" fg:w="8"/><text x="70.7611%" y="1039.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (7 samples, 0.03%)</title><rect x="70.5149%" y="1013" width="0.0263%" height="15" fill="rgb(231,224,15)" fg:x="18776" fg:w="7"/><text x="70.7649%" y="1023.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.03%)</title><rect x="70.5149%" y="997" width="0.0263%" height="15" fill="rgb(244,76,20)" fg:x="18776" fg:w="7"/><text x="70.7649%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (5 samples, 0.02%)</title><rect x="70.5412%" y="1029" width="0.0188%" height="15" fill="rgb(238,117,7)" fg:x="18783" fg:w="5"/><text x="70.7912%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (18 samples, 0.07%)</title><rect x="70.4999%" y="1045" width="0.0676%" height="15" fill="rgb(235,1,10)" fg:x="18772" fg:w="18"/><text x="70.7499%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (19 samples, 0.07%)</title><rect x="70.4999%" y="1061" width="0.0714%" height="15" fill="rgb(216,165,6)" fg:x="18772" fg:w="19"/><text x="70.7499%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (56 samples, 0.21%)</title><rect x="70.4097%" y="1141" width="0.2103%" height="15" fill="rgb(246,91,35)" fg:x="18748" fg:w="56"/><text x="70.6597%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (56 samples, 0.21%)</title><rect x="70.4097%" y="1125" width="0.2103%" height="15" fill="rgb(228,96,24)" fg:x="18748" fg:w="56"/><text x="70.6597%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (56 samples, 0.21%)</title><rect x="70.4097%" y="1109" width="0.2103%" height="15" fill="rgb(254,217,53)" fg:x="18748" fg:w="56"/><text x="70.6597%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (56 samples, 0.21%)</title><rect x="70.4097%" y="1093" width="0.2103%" height="15" fill="rgb(209,60,0)" fg:x="18748" fg:w="56"/><text x="70.6597%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (56 samples, 0.21%)</title><rect x="70.4097%" y="1077" width="0.2103%" height="15" fill="rgb(250,93,26)" fg:x="18748" fg:w="56"/><text x="70.6597%" y="1087.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (13 samples, 0.05%)</title><rect x="70.5712%" y="1061" width="0.0488%" height="15" fill="rgb(211,9,40)" fg:x="18791" fg:w="13"/><text x="70.8212%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (13 samples, 0.05%)</title><rect x="70.5712%" y="1045" width="0.0488%" height="15" fill="rgb(242,57,20)" fg:x="18791" fg:w="13"/><text x="70.8212%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (13 samples, 0.05%)</title><rect x="70.5712%" y="1029" width="0.0488%" height="15" fill="rgb(248,85,48)" fg:x="18791" fg:w="13"/><text x="70.8212%" y="1039.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (13 samples, 0.05%)</title><rect x="70.5712%" y="1013" width="0.0488%" height="15" fill="rgb(212,117,2)" fg:x="18791" fg:w="13"/><text x="70.8212%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.05%)</title><rect x="70.5712%" y="997" width="0.0488%" height="15" fill="rgb(243,19,3)" fg:x="18791" fg:w="13"/><text x="70.8212%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.05%)</title><rect x="70.5712%" y="981" width="0.0488%" height="15" fill="rgb(232,217,24)" fg:x="18791" fg:w="13"/><text x="70.8212%" y="991.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.05%)</title><rect x="70.5712%" y="965" width="0.0488%" height="15" fill="rgb(224,175,40)" fg:x="18791" fg:w="13"/><text x="70.8212%" y="975.50"></text></g><g><title>__rdl_alloc (13 samples, 0.05%)</title><rect x="70.5712%" y="949" width="0.0488%" height="15" fill="rgb(212,162,32)" fg:x="18791" fg:w="13"/><text x="70.8212%" y="959.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (13 samples, 0.05%)</title><rect x="70.5712%" y="933" width="0.0488%" height="15" fill="rgb(215,9,4)" fg:x="18791" fg:w="13"/><text x="70.8212%" y="943.50"></text></g><g><title>malloc (13 samples, 0.05%)</title><rect x="70.5712%" y="917" width="0.0488%" height="15" fill="rgb(242,42,7)" fg:x="18791" fg:w="13"/><text x="70.8212%" y="927.50"></text></g><g><title>_int_malloc (13 samples, 0.05%)</title><rect x="70.5712%" y="901" width="0.0488%" height="15" fill="rgb(242,184,45)" fg:x="18791" fg:w="13"/><text x="70.8212%" y="911.50"></text></g><g><title>malloc_consolidate (3 samples, 0.01%)</title><rect x="70.6088%" y="885" width="0.0113%" height="15" fill="rgb(228,111,51)" fg:x="18801" fg:w="3"/><text x="70.8588%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.02%)</title><rect x="70.6238%" y="1109" width="0.0188%" height="15" fill="rgb(236,147,17)" fg:x="18805" fg:w="5"/><text x="70.8738%" y="1119.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.02%)</title><rect x="70.6238%" y="1093" width="0.0188%" height="15" fill="rgb(210,75,22)" fg:x="18805" fg:w="5"/><text x="70.8738%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.02%)</title><rect x="70.6238%" y="1077" width="0.0188%" height="15" fill="rgb(217,159,45)" fg:x="18805" fg:w="5"/><text x="70.8738%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.01%)</title><rect x="70.6313%" y="1061" width="0.0113%" height="15" fill="rgb(245,165,53)" fg:x="18807" fg:w="3"/><text x="70.8813%" y="1071.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="70.6313%" y="1045" width="0.0113%" height="15" fill="rgb(251,190,50)" fg:x="18807" fg:w="3"/><text x="70.8813%" y="1055.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (10 samples, 0.04%)</title><rect x="70.6426%" y="1109" width="0.0376%" height="15" fill="rgb(208,203,29)" fg:x="18810" fg:w="10"/><text x="70.8926%" y="1119.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (9 samples, 0.03%)</title><rect x="70.6463%" y="1093" width="0.0338%" height="15" fill="rgb(207,209,35)" fg:x="18811" fg:w="9"/><text x="70.8963%" y="1103.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (9 samples, 0.03%)</title><rect x="70.6463%" y="1077" width="0.0338%" height="15" fill="rgb(230,144,49)" fg:x="18811" fg:w="9"/><text x="70.8963%" y="1087.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (9 samples, 0.03%)</title><rect x="70.6463%" y="1061" width="0.0338%" height="15" fill="rgb(229,31,6)" fg:x="18811" fg:w="9"/><text x="70.8963%" y="1071.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::hash::Hash&gt;::hash (9 samples, 0.03%)</title><rect x="70.6801%" y="1093" width="0.0338%" height="15" fill="rgb(251,129,24)" fg:x="18820" fg:w="9"/><text x="70.9301%" y="1103.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (9 samples, 0.03%)</title><rect x="70.6801%" y="1077" width="0.0338%" height="15" fill="rgb(235,105,15)" fg:x="18820" fg:w="9"/><text x="70.9301%" y="1087.50"></text></g><g><title>core::hash::Hasher::write_u64 (9 samples, 0.03%)</title><rect x="70.6801%" y="1061" width="0.0338%" height="15" fill="rgb(216,52,43)" fg:x="18820" fg:w="9"/><text x="70.9301%" y="1071.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="70.6801%" y="1045" width="0.0338%" height="15" fill="rgb(238,144,41)" fg:x="18820" fg:w="9"/><text x="70.9301%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="70.6801%" y="1029" width="0.0338%" height="15" fill="rgb(243,63,9)" fg:x="18820" fg:w="9"/><text x="70.9301%" y="1039.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="70.6801%" y="1013" width="0.0338%" height="15" fill="rgb(246,208,1)" fg:x="18820" fg:w="9"/><text x="70.9301%" y="1023.50"></text></g><g><title>hashbrown::map::make_hash (26 samples, 0.10%)</title><rect x="70.6200%" y="1141" width="0.0976%" height="15" fill="rgb(233,182,18)" fg:x="18804" fg:w="26"/><text x="70.8700%" y="1151.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25 samples, 0.09%)</title><rect x="70.6238%" y="1125" width="0.0939%" height="15" fill="rgb(242,224,8)" fg:x="18805" fg:w="25"/><text x="70.8738%" y="1135.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.04%)</title><rect x="70.6801%" y="1109" width="0.0376%" height="15" fill="rgb(243,54,37)" fg:x="18820" fg:w="10"/><text x="70.9301%" y="1119.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (11 samples, 0.04%)</title><rect x="70.7552%" y="1109" width="0.0413%" height="15" fill="rgb(233,192,12)" fg:x="18840" fg:w="11"/><text x="71.0052%" y="1119.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (11 samples, 0.04%)</title><rect x="70.7552%" y="1093" width="0.0413%" height="15" fill="rgb(251,192,53)" fg:x="18840" fg:w="11"/><text x="71.0052%" y="1103.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::collect_outwards_edges (538 samples, 2.02%)</title><rect x="68.7798%" y="1189" width="2.0205%" height="15" fill="rgb(246,141,26)" fg:x="18314" fg:w="538"/><text x="69.0298%" y="1199.50">g..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (104 samples, 0.39%)</title><rect x="70.4097%" y="1173" width="0.3906%" height="15" fill="rgb(239,195,19)" fg:x="18748" fg:w="104"/><text x="70.6597%" y="1183.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (104 samples, 0.39%)</title><rect x="70.4097%" y="1157" width="0.3906%" height="15" fill="rgb(241,16,39)" fg:x="18748" fg:w="104"/><text x="70.6597%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (22 samples, 0.08%)</title><rect x="70.7177%" y="1141" width="0.0826%" height="15" fill="rgb(223,13,53)" fg:x="18830" fg:w="22"/><text x="70.9677%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (22 samples, 0.08%)</title><rect x="70.7177%" y="1125" width="0.0826%" height="15" fill="rgb(214,227,0)" fg:x="18830" fg:w="22"/><text x="70.9677%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.01%)</title><rect x="70.8078%" y="1173" width="0.0113%" height="15" fill="rgb(228,103,26)" fg:x="18854" fg:w="3"/><text x="71.0578%" y="1183.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.01%)</title><rect x="70.8078%" y="1157" width="0.0113%" height="15" fill="rgb(254,177,53)" fg:x="18854" fg:w="3"/><text x="71.0578%" y="1167.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.01%)</title><rect x="70.8078%" y="1141" width="0.0113%" height="15" fill="rgb(208,201,34)" fg:x="18854" fg:w="3"/><text x="71.0578%" y="1151.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.02%)</title><rect x="70.8266%" y="1093" width="0.0188%" height="15" fill="rgb(212,39,5)" fg:x="18859" fg:w="5"/><text x="71.0766%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.02%)</title><rect x="70.8266%" y="1077" width="0.0188%" height="15" fill="rgb(246,117,3)" fg:x="18859" fg:w="5"/><text x="71.0766%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.02%)</title><rect x="70.8266%" y="1061" width="0.0188%" height="15" fill="rgb(244,118,39)" fg:x="18859" fg:w="5"/><text x="71.0766%" y="1071.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.03%)</title><rect x="70.8266%" y="1125" width="0.0300%" height="15" fill="rgb(241,64,10)" fg:x="18859" fg:w="8"/><text x="71.0766%" y="1135.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.03%)</title><rect x="70.8266%" y="1109" width="0.0300%" height="15" fill="rgb(229,39,44)" fg:x="18859" fg:w="8"/><text x="71.0766%" y="1119.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="70.8642%" y="1077" width="0.0113%" height="15" fill="rgb(230,226,3)" fg:x="18869" fg:w="3"/><text x="71.1142%" y="1087.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.01%)</title><rect x="70.8642%" y="1061" width="0.0113%" height="15" fill="rgb(222,13,42)" fg:x="18869" fg:w="3"/><text x="71.1142%" y="1071.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::replace_node_id (22 samples, 0.08%)</title><rect x="70.8003%" y="1189" width="0.0826%" height="15" fill="rgb(247,180,54)" fg:x="18852" fg:w="22"/><text x="71.0503%" y="1199.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (16 samples, 0.06%)</title><rect x="70.8228%" y="1173" width="0.0601%" height="15" fill="rgb(205,96,16)" fg:x="18858" fg:w="16"/><text x="71.0728%" y="1183.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (16 samples, 0.06%)</title><rect x="70.8228%" y="1157" width="0.0601%" height="15" fill="rgb(205,100,21)" fg:x="18858" fg:w="16"/><text x="71.0728%" y="1167.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (16 samples, 0.06%)</title><rect x="70.8228%" y="1141" width="0.0601%" height="15" fill="rgb(248,51,4)" fg:x="18858" fg:w="16"/><text x="71.0728%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (7 samples, 0.03%)</title><rect x="70.8566%" y="1125" width="0.0263%" height="15" fill="rgb(217,197,30)" fg:x="18867" fg:w="7"/><text x="71.1066%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 0.03%)</title><rect x="70.8566%" y="1109" width="0.0263%" height="15" fill="rgb(240,179,40)" fg:x="18867" fg:w="7"/><text x="71.1066%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (7 samples, 0.03%)</title><rect x="70.8566%" y="1093" width="0.0263%" height="15" fill="rgb(212,185,35)" fg:x="18867" fg:w="7"/><text x="71.1066%" y="1103.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::hash::Hash&gt;::hash (5 samples, 0.02%)</title><rect x="70.8904%" y="1173" width="0.0188%" height="15" fill="rgb(251,222,31)" fg:x="18876" fg:w="5"/><text x="71.1404%" y="1183.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (5 samples, 0.02%)</title><rect x="70.8904%" y="1157" width="0.0188%" height="15" fill="rgb(208,140,36)" fg:x="18876" fg:w="5"/><text x="71.1404%" y="1167.50"></text></g><g><title>core::hash::Hasher::write_str (5 samples, 0.02%)</title><rect x="70.8904%" y="1141" width="0.0188%" height="15" fill="rgb(220,148,1)" fg:x="18876" fg:w="5"/><text x="71.1404%" y="1151.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="70.8904%" y="1125" width="0.0188%" height="15" fill="rgb(254,4,28)" fg:x="18876" fg:w="5"/><text x="71.1404%" y="1135.50"></text></g><g><title>rustc_hash::hash_bytes (5 samples, 0.02%)</title><rect x="70.8904%" y="1109" width="0.0188%" height="15" fill="rgb(222,185,44)" fg:x="18876" fg:w="5"/><text x="71.1404%" y="1119.50"></text></g><g><title>rustc_hash::multiply_mix (3 samples, 0.01%)</title><rect x="70.8980%" y="1093" width="0.0113%" height="15" fill="rgb(215,74,39)" fg:x="18878" fg:w="3"/><text x="71.1480%" y="1103.50"></text></g><g><title>&lt;graph_craft::proto::ConstructionArgs as core::hash::Hash&gt;::hash (4 samples, 0.02%)</title><rect x="70.9167%" y="1173" width="0.0150%" height="15" fill="rgb(247,86,4)" fg:x="18883" fg:w="4"/><text x="71.1667%" y="1183.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (3 samples, 0.01%)</title><rect x="70.9205%" y="1157" width="0.0113%" height="15" fill="rgb(231,105,32)" fg:x="18884" fg:w="3"/><text x="71.1705%" y="1167.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::generate_stable_node_ids (585 samples, 2.20%)</title><rect x="68.7423%" y="1205" width="2.1970%" height="15" fill="rgb(222,65,35)" fg:x="18304" fg:w="585"/><text x="68.9923%" y="1215.50">g..</text></g><g><title>graph_craft::proto::ProtoNode::stable_node_id (15 samples, 0.06%)</title><rect x="70.8829%" y="1189" width="0.0563%" height="15" fill="rgb(218,145,35)" fg:x="18874" fg:w="15"/><text x="71.1329%" y="1199.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="70.9618%" y="1157" width="0.0113%" height="15" fill="rgb(208,7,15)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="1167.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (3 samples, 0.01%)</title><rect x="70.9618%" y="1141" width="0.0113%" height="15" fill="rgb(209,83,13)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="1151.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (3 samples, 0.01%)</title><rect x="70.9618%" y="1125" width="0.0113%" height="15" fill="rgb(218,3,10)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="1135.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.01%)</title><rect x="70.9618%" y="1109" width="0.0113%" height="15" fill="rgb(211,219,4)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.01%)</title><rect x="70.9618%" y="1093" width="0.0113%" height="15" fill="rgb(228,194,12)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="1103.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.01%)</title><rect x="70.9618%" y="1077" width="0.0113%" height="15" fill="rgb(210,175,7)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="1087.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="70.9618%" y="1061" width="0.0113%" height="15" fill="rgb(243,132,6)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="70.9618%" y="1045" width="0.0113%" height="15" fill="rgb(207,72,18)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="70.9618%" y="1029" width="0.0113%" height="15" fill="rgb(236,1,18)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.01%)</title><rect x="70.9618%" y="1013" width="0.0113%" height="15" fill="rgb(227,0,18)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="70.9618%" y="997" width="0.0113%" height="15" fill="rgb(247,37,5)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="70.9618%" y="981" width="0.0113%" height="15" fill="rgb(237,179,24)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="991.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="70.9618%" y="965" width="0.0113%" height="15" fill="rgb(226,53,20)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="975.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="70.9618%" y="949" width="0.0113%" height="15" fill="rgb(247,75,7)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="959.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="70.9618%" y="933" width="0.0113%" height="15" fill="rgb(233,96,12)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="943.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="70.9618%" y="917" width="0.0113%" height="15" fill="rgb(224,125,0)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="927.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="70.9618%" y="901" width="0.0113%" height="15" fill="rgb(224,92,25)" fg:x="18895" fg:w="3"/><text x="71.2118%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="70.9731%" y="1029" width="0.0150%" height="15" fill="rgb(224,42,24)" fg:x="18898" fg:w="4"/><text x="71.2231%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="70.9731%" y="1013" width="0.0150%" height="15" fill="rgb(234,132,49)" fg:x="18898" fg:w="4"/><text x="71.2231%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (4 samples, 0.02%)</title><rect x="70.9731%" y="997" width="0.0150%" height="15" fill="rgb(248,100,35)" fg:x="18898" fg:w="4"/><text x="71.2231%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.02%)</title><rect x="70.9731%" y="981" width="0.0150%" height="15" fill="rgb(239,94,40)" fg:x="18898" fg:w="4"/><text x="71.2231%" y="991.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.02%)</title><rect x="70.9731%" y="965" width="0.0150%" height="15" fill="rgb(235,139,28)" fg:x="18898" fg:w="4"/><text x="71.2231%" y="975.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.02%)</title><rect x="70.9731%" y="949" width="0.0150%" height="15" fill="rgb(217,144,7)" fg:x="18898" fg:w="4"/><text x="71.2231%" y="959.50"></text></g><g><title>__rdl_alloc (4 samples, 0.02%)</title><rect x="70.9731%" y="933" width="0.0150%" height="15" fill="rgb(227,55,4)" fg:x="18898" fg:w="4"/><text x="71.2231%" y="943.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.02%)</title><rect x="70.9731%" y="917" width="0.0150%" height="15" fill="rgb(252,82,54)" fg:x="18898" fg:w="4"/><text x="71.2231%" y="927.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="70.9731%" y="901" width="0.0150%" height="15" fill="rgb(245,172,4)" fg:x="18898" fg:w="4"/><text x="71.2231%" y="911.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="70.9768%" y="885" width="0.0113%" height="15" fill="rgb(207,26,27)" fg:x="18899" fg:w="3"/><text x="71.2268%" y="895.50"></text></g><g><title>&lt;graph_craft::proto::ProtoNodeInput as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="70.9430%" y="1189" width="0.0526%" height="15" fill="rgb(252,98,18)" fg:x="18890" fg:w="14"/><text x="71.1930%" y="1199.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="70.9618%" y="1173" width="0.0338%" height="15" fill="rgb(244,8,26)" fg:x="18895" fg:w="9"/><text x="71.2118%" y="1183.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="70.9731%" y="1157" width="0.0225%" height="15" fill="rgb(237,173,45)" fg:x="18898" fg:w="6"/><text x="71.2231%" y="1167.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="70.9731%" y="1141" width="0.0225%" height="15" fill="rgb(208,213,49)" fg:x="18898" fg:w="6"/><text x="71.2231%" y="1151.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (6 samples, 0.02%)</title><rect x="70.9731%" y="1125" width="0.0225%" height="15" fill="rgb(212,122,37)" fg:x="18898" fg:w="6"/><text x="71.2231%" y="1135.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (6 samples, 0.02%)</title><rect x="70.9731%" y="1109" width="0.0225%" height="15" fill="rgb(213,80,17)" fg:x="18898" fg:w="6"/><text x="71.2231%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.02%)</title><rect x="70.9731%" y="1093" width="0.0225%" height="15" fill="rgb(206,210,43)" fg:x="18898" fg:w="6"/><text x="71.2231%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.02%)</title><rect x="70.9731%" y="1077" width="0.0225%" height="15" fill="rgb(229,214,3)" fg:x="18898" fg:w="6"/><text x="71.2231%" y="1087.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.02%)</title><rect x="70.9731%" y="1061" width="0.0225%" height="15" fill="rgb(235,213,29)" fg:x="18898" fg:w="6"/><text x="71.2231%" y="1071.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.02%)</title><rect x="70.9731%" y="1045" width="0.0225%" height="15" fill="rgb(248,135,26)" fg:x="18898" fg:w="6"/><text x="71.2231%" y="1055.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="70.9956%" y="1189" width="0.0188%" height="15" fill="rgb(242,188,12)" fg:x="18904" fg:w="5"/><text x="71.2456%" y="1199.50"></text></g><g><title>alloc::alloc::exchange_malloc (8 samples, 0.03%)</title><rect x="71.0144%" y="1189" width="0.0300%" height="15" fill="rgb(245,38,12)" fg:x="18909" fg:w="8"/><text x="71.2644%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.03%)</title><rect x="71.0144%" y="1173" width="0.0300%" height="15" fill="rgb(218,42,13)" fg:x="18909" fg:w="8"/><text x="71.2644%" y="1183.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.03%)</title><rect x="71.0144%" y="1157" width="0.0300%" height="15" fill="rgb(238,132,49)" fg:x="18909" fg:w="8"/><text x="71.2644%" y="1167.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.03%)</title><rect x="71.0144%" y="1141" width="0.0300%" height="15" fill="rgb(209,196,19)" fg:x="18909" fg:w="8"/><text x="71.2644%" y="1151.50"></text></g><g><title>__rdl_alloc (8 samples, 0.03%)</title><rect x="71.0144%" y="1125" width="0.0300%" height="15" fill="rgb(244,131,22)" fg:x="18909" fg:w="8"/><text x="71.2644%" y="1135.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.03%)</title><rect x="71.0144%" y="1109" width="0.0300%" height="15" fill="rgb(223,18,34)" fg:x="18909" fg:w="8"/><text x="71.2644%" y="1119.50"></text></g><g><title>malloc (8 samples, 0.03%)</title><rect x="71.0144%" y="1093" width="0.0300%" height="15" fill="rgb(252,124,54)" fg:x="18909" fg:w="8"/><text x="71.2644%" y="1103.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="71.0294%" y="1077" width="0.0150%" height="15" fill="rgb(229,106,42)" fg:x="18913" fg:w="4"/><text x="71.2794%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (9 samples, 0.03%)</title><rect x="71.0444%" y="1173" width="0.0338%" height="15" fill="rgb(221,129,1)" fg:x="18917" fg:w="9"/><text x="71.2944%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.03%)</title><rect x="71.0444%" y="1157" width="0.0338%" height="15" fill="rgb(229,74,15)" fg:x="18917" fg:w="9"/><text x="71.2944%" y="1167.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.03%)</title><rect x="71.0444%" y="1141" width="0.0338%" height="15" fill="rgb(210,206,50)" fg:x="18917" fg:w="9"/><text x="71.2944%" y="1151.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.03%)</title><rect x="71.0444%" y="1125" width="0.0338%" height="15" fill="rgb(251,114,31)" fg:x="18917" fg:w="9"/><text x="71.2944%" y="1135.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.03%)</title><rect x="71.0444%" y="1109" width="0.0338%" height="15" fill="rgb(215,225,28)" fg:x="18917" fg:w="9"/><text x="71.2944%" y="1119.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.03%)</title><rect x="71.0444%" y="1093" width="0.0338%" height="15" fill="rgb(237,109,14)" fg:x="18917" fg:w="9"/><text x="71.2944%" y="1103.50"></text></g><g><title>__rdl_realloc (9 samples, 0.03%)</title><rect x="71.0444%" y="1077" width="0.0338%" height="15" fill="rgb(230,13,37)" fg:x="18917" fg:w="9"/><text x="71.2944%" y="1087.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (9 samples, 0.03%)</title><rect x="71.0444%" y="1061" width="0.0338%" height="15" fill="rgb(231,40,28)" fg:x="18917" fg:w="9"/><text x="71.2944%" y="1071.50"></text></g><g><title>realloc (9 samples, 0.03%)</title><rect x="71.0444%" y="1045" width="0.0338%" height="15" fill="rgb(231,202,18)" fg:x="18917" fg:w="9"/><text x="71.2944%" y="1055.50"></text></g><g><title>_int_realloc (9 samples, 0.03%)</title><rect x="71.0444%" y="1029" width="0.0338%" height="15" fill="rgb(225,33,18)" fg:x="18917" fg:w="9"/><text x="71.2944%" y="1039.50"></text></g><g><title>__memmove_avx512_unaligned_erms (9 samples, 0.03%)</title><rect x="71.0444%" y="1013" width="0.0338%" height="15" fill="rgb(223,64,47)" fg:x="18917" fg:w="9"/><text x="71.2944%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.05%)</title><rect x="71.0444%" y="1189" width="0.0451%" height="15" fill="rgb(234,114,13)" fg:x="18917" fg:w="12"/><text x="71.2944%" y="1199.50"></text></g><g><title>core::ptr::write (3 samples, 0.01%)</title><rect x="71.0782%" y="1173" width="0.0113%" height="15" fill="rgb(248,56,40)" fg:x="18926" fg:w="3"/><text x="71.3282%" y="1183.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="71.0782%" y="1157" width="0.0113%" height="15" fill="rgb(221,194,21)" fg:x="18926" fg:w="3"/><text x="71.3282%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (17 samples, 0.06%)</title><rect x="71.0895%" y="1109" width="0.0638%" height="15" fill="rgb(242,108,46)" fg:x="18929" fg:w="17"/><text x="71.3395%" y="1119.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (16 samples, 0.06%)</title><rect x="71.0933%" y="1093" width="0.0601%" height="15" fill="rgb(220,106,10)" fg:x="18930" fg:w="16"/><text x="71.3433%" y="1103.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (16 samples, 0.06%)</title><rect x="71.0933%" y="1077" width="0.0601%" height="15" fill="rgb(211,88,4)" fg:x="18930" fg:w="16"/><text x="71.3433%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;)&gt; (16 samples, 0.06%)</title><rect x="71.0933%" y="1061" width="0.0601%" height="15" fill="rgb(214,95,34)" fg:x="18930" fg:w="16"/><text x="71.3433%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt; (16 samples, 0.06%)</title><rect x="71.0933%" y="1045" width="0.0601%" height="15" fill="rgb(250,160,33)" fg:x="18930" fg:w="16"/><text x="71.3433%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeId&gt;&gt; (16 samples, 0.06%)</title><rect x="71.0933%" y="1029" width="0.0601%" height="15" fill="rgb(225,29,10)" fg:x="18930" fg:w="16"/><text x="71.3433%" y="1039.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.06%)</title><rect x="71.0933%" y="1013" width="0.0601%" height="15" fill="rgb(224,28,30)" fg:x="18930" fg:w="16"/><text x="71.3433%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.06%)</title><rect x="71.0933%" y="997" width="0.0601%" height="15" fill="rgb(231,77,4)" fg:x="18930" fg:w="16"/><text x="71.3433%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.06%)</title><rect x="71.0933%" y="981" width="0.0601%" height="15" fill="rgb(209,63,21)" fg:x="18930" fg:w="16"/><text x="71.3433%" y="991.50"></text></g><g><title>__rdl_dealloc (16 samples, 0.06%)</title><rect x="71.0933%" y="965" width="0.0601%" height="15" fill="rgb(226,22,11)" fg:x="18930" fg:w="16"/><text x="71.3433%" y="975.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (16 samples, 0.06%)</title><rect x="71.0933%" y="949" width="0.0601%" height="15" fill="rgb(216,82,30)" fg:x="18930" fg:w="16"/><text x="71.3433%" y="959.50"></text></g><g><title>cfree@GLIBC_2.2.5 (16 samples, 0.06%)</title><rect x="71.0933%" y="933" width="0.0601%" height="15" fill="rgb(246,227,38)" fg:x="18930" fg:w="16"/><text x="71.3433%" y="943.50"></text></g><g><title>_int_free (6 samples, 0.02%)</title><rect x="71.1308%" y="917" width="0.0225%" height="15" fill="rgb(251,203,53)" fg:x="18940" fg:w="6"/><text x="71.3808%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt;&gt; (23 samples, 0.09%)</title><rect x="71.0895%" y="1189" width="0.0864%" height="15" fill="rgb(254,101,1)" fg:x="18929" fg:w="23"/><text x="71.3395%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;,std::hash::random::RandomState&gt;&gt; (23 samples, 0.09%)</title><rect x="71.0895%" y="1173" width="0.0864%" height="15" fill="rgb(241,180,5)" fg:x="18929" fg:w="23"/><text x="71.3395%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;)&gt;&gt; (23 samples, 0.09%)</title><rect x="71.0895%" y="1157" width="0.0864%" height="15" fill="rgb(218,168,4)" fg:x="18929" fg:w="23"/><text x="71.3395%" y="1167.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.09%)</title><rect x="71.0895%" y="1141" width="0.0864%" height="15" fill="rgb(224,223,32)" fg:x="18929" fg:w="23"/><text x="71.3395%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (23 samples, 0.09%)</title><rect x="71.0895%" y="1125" width="0.0864%" height="15" fill="rgb(236,106,22)" fg:x="18929" fg:w="23"/><text x="71.3395%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (6 samples, 0.02%)</title><rect x="71.1533%" y="1109" width="0.0225%" height="15" fill="rgb(206,121,5)" fg:x="18946" fg:w="6"/><text x="71.4033%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.02%)</title><rect x="71.1533%" y="1093" width="0.0225%" height="15" fill="rgb(233,87,28)" fg:x="18946" fg:w="6"/><text x="71.4033%" y="1103.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.02%)</title><rect x="71.1533%" y="1077" width="0.0225%" height="15" fill="rgb(236,137,17)" fg:x="18946" fg:w="6"/><text x="71.4033%" y="1087.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.02%)</title><rect x="71.1533%" y="1061" width="0.0225%" height="15" fill="rgb(209,183,38)" fg:x="18946" fg:w="6"/><text x="71.4033%" y="1071.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.02%)</title><rect x="71.1533%" y="1045" width="0.0225%" height="15" fill="rgb(206,162,44)" fg:x="18946" fg:w="6"/><text x="71.4033%" y="1055.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 0.02%)</title><rect x="71.1533%" y="1029" width="0.0225%" height="15" fill="rgb(237,70,39)" fg:x="18946" fg:w="6"/><text x="71.4033%" y="1039.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (6 samples, 0.02%)</title><rect x="71.1533%" y="1013" width="0.0225%" height="15" fill="rgb(212,176,5)" fg:x="18946" fg:w="6"/><text x="71.4033%" y="1023.50"></text></g><g><title>malloc_consolidate (6 samples, 0.02%)</title><rect x="71.1533%" y="997" width="0.0225%" height="15" fill="rgb(232,95,16)" fg:x="18946" fg:w="6"/><text x="71.4033%" y="1007.50"></text></g><g><title>alloc::raw_vec::finish_grow (41 samples, 0.15%)</title><rect x="71.1984%" y="1125" width="0.1540%" height="15" fill="rgb(219,115,35)" fg:x="18958" fg:w="41"/><text x="71.4484%" y="1135.50"></text></g><g><title>malloc (38 samples, 0.14%)</title><rect x="71.2097%" y="1109" width="0.1427%" height="15" fill="rgb(251,67,27)" fg:x="18961" fg:w="38"/><text x="71.4597%" y="1119.50"></text></g><g><title>_int_malloc (28 samples, 0.11%)</title><rect x="71.2472%" y="1093" width="0.1052%" height="15" fill="rgb(222,95,40)" fg:x="18971" fg:w="28"/><text x="71.4972%" y="1103.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (46 samples, 0.17%)</title><rect x="71.1834%" y="1173" width="0.1728%" height="15" fill="rgb(250,35,16)" fg:x="18954" fg:w="46"/><text x="71.4334%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (44 samples, 0.17%)</title><rect x="71.1909%" y="1157" width="0.1652%" height="15" fill="rgb(224,86,44)" fg:x="18956" fg:w="44"/><text x="71.4409%" y="1167.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (43 samples, 0.16%)</title><rect x="71.1947%" y="1141" width="0.1615%" height="15" fill="rgb(237,53,53)" fg:x="18957" fg:w="43"/><text x="71.4447%" y="1151.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="71.6641%" y="1141" width="0.0225%" height="15" fill="rgb(208,171,33)" fg:x="19082" fg:w="6"/><text x="71.9141%" y="1151.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="71.6754%" y="1125" width="0.0113%" height="15" fill="rgb(222,64,27)" fg:x="19085" fg:w="3"/><text x="71.9254%" y="1135.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref (169 samples, 0.63%)</title><rect x="71.3561%" y="1173" width="0.6347%" height="15" fill="rgb(221,121,35)" fg:x="19000" fg:w="169"/><text x="71.6061%" y="1183.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (169 samples, 0.63%)</title><rect x="71.3561%" y="1157" width="0.6347%" height="15" fill="rgb(228,137,42)" fg:x="19000" fg:w="169"/><text x="71.6061%" y="1167.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref::_{{closure}} (81 samples, 0.30%)</title><rect x="71.6866%" y="1141" width="0.3042%" height="15" fill="rgb(227,54,21)" fg:x="19088" fg:w="81"/><text x="71.9366%" y="1151.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (81 samples, 0.30%)</title><rect x="71.6866%" y="1125" width="0.3042%" height="15" fill="rgb(240,168,33)" fg:x="19088" fg:w="81"/><text x="71.9366%" y="1135.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (81 samples, 0.30%)</title><rect x="71.6866%" y="1109" width="0.3042%" height="15" fill="rgb(243,159,6)" fg:x="19088" fg:w="81"/><text x="71.9366%" y="1119.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4 samples, 0.02%)</title><rect x="71.9908%" y="1109" width="0.0150%" height="15" fill="rgb(205,211,41)" fg:x="19169" fg:w="4"/><text x="72.2408%" y="1119.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 0.02%)</title><rect x="71.9908%" y="1093" width="0.0150%" height="15" fill="rgb(253,30,1)" fg:x="19169" fg:w="4"/><text x="72.2408%" y="1103.50"></text></g><g><title>core::ptr::write (4 samples, 0.02%)</title><rect x="71.9908%" y="1077" width="0.0150%" height="15" fill="rgb(226,80,18)" fg:x="19169" fg:w="4"/><text x="72.2408%" y="1087.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (7 samples, 0.03%)</title><rect x="71.9908%" y="1173" width="0.0263%" height="15" fill="rgb(253,156,46)" fg:x="19169" fg:w="7"/><text x="72.2408%" y="1183.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (7 samples, 0.03%)</title><rect x="71.9908%" y="1157" width="0.0263%" height="15" fill="rgb(248,87,27)" fg:x="19169" fg:w="7"/><text x="72.2408%" y="1167.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (7 samples, 0.03%)</title><rect x="71.9908%" y="1141" width="0.0263%" height="15" fill="rgb(227,122,2)" fg:x="19169" fg:w="7"/><text x="72.2408%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (7 samples, 0.03%)</title><rect x="71.9908%" y="1125" width="0.0263%" height="15" fill="rgb(229,94,39)" fg:x="19169" fg:w="7"/><text x="72.2408%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (3 samples, 0.01%)</title><rect x="72.0059%" y="1109" width="0.0113%" height="15" fill="rgb(225,173,31)" fg:x="19173" fg:w="3"/><text x="72.2559%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (3 samples, 0.01%)</title><rect x="72.0059%" y="1093" width="0.0113%" height="15" fill="rgb(239,176,30)" fg:x="19173" fg:w="3"/><text x="72.2559%" y="1103.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="72.0209%" y="997" width="0.0150%" height="15" fill="rgb(212,104,21)" fg:x="19177" fg:w="4"/><text x="72.2709%" y="1007.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="72.0209%" y="981" width="0.0150%" height="15" fill="rgb(240,209,40)" fg:x="19177" fg:w="4"/><text x="72.2709%" y="991.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="72.0209%" y="965" width="0.0150%" height="15" fill="rgb(234,195,5)" fg:x="19177" fg:w="4"/><text x="72.2709%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (6 samples, 0.02%)</title><rect x="72.0209%" y="1061" width="0.0225%" height="15" fill="rgb(238,213,1)" fg:x="19177" fg:w="6"/><text x="72.2709%" y="1071.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (6 samples, 0.02%)</title><rect x="72.0209%" y="1045" width="0.0225%" height="15" fill="rgb(235,182,54)" fg:x="19177" fg:w="6"/><text x="72.2709%" y="1055.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.02%)</title><rect x="72.0209%" y="1029" width="0.0225%" height="15" fill="rgb(229,50,46)" fg:x="19177" fg:w="6"/><text x="72.2709%" y="1039.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.02%)</title><rect x="72.0209%" y="1013" width="0.0225%" height="15" fill="rgb(219,145,13)" fg:x="19177" fg:w="6"/><text x="72.2709%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (10 samples, 0.04%)</title><rect x="72.0622%" y="1029" width="0.0376%" height="15" fill="rgb(220,226,10)" fg:x="19188" fg:w="10"/><text x="72.3122%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (14 samples, 0.05%)</title><rect x="72.0509%" y="1045" width="0.0526%" height="15" fill="rgb(248,47,30)" fg:x="19185" fg:w="14"/><text x="72.3009%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (15 samples, 0.06%)</title><rect x="72.0509%" y="1061" width="0.0563%" height="15" fill="rgb(231,209,44)" fg:x="19185" fg:w="15"/><text x="72.3009%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (29 samples, 0.11%)</title><rect x="72.0171%" y="1141" width="0.1089%" height="15" fill="rgb(209,80,30)" fg:x="19176" fg:w="29"/><text x="72.2671%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (29 samples, 0.11%)</title><rect x="72.0171%" y="1125" width="0.1089%" height="15" fill="rgb(232,9,14)" fg:x="19176" fg:w="29"/><text x="72.2671%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (28 samples, 0.11%)</title><rect x="72.0209%" y="1109" width="0.1052%" height="15" fill="rgb(243,91,43)" fg:x="19177" fg:w="28"/><text x="72.2709%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (28 samples, 0.11%)</title><rect x="72.0209%" y="1093" width="0.1052%" height="15" fill="rgb(231,90,52)" fg:x="19177" fg:w="28"/><text x="72.2709%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (28 samples, 0.11%)</title><rect x="72.0209%" y="1077" width="0.1052%" height="15" fill="rgb(253,192,44)" fg:x="19177" fg:w="28"/><text x="72.2709%" y="1087.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (5 samples, 0.02%)</title><rect x="72.1073%" y="1061" width="0.0188%" height="15" fill="rgb(241,66,31)" fg:x="19200" fg:w="5"/><text x="72.3573%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (5 samples, 0.02%)</title><rect x="72.1073%" y="1045" width="0.0188%" height="15" fill="rgb(235,81,37)" fg:x="19200" fg:w="5"/><text x="72.3573%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (5 samples, 0.02%)</title><rect x="72.1073%" y="1029" width="0.0188%" height="15" fill="rgb(223,221,9)" fg:x="19200" fg:w="5"/><text x="72.3573%" y="1039.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5 samples, 0.02%)</title><rect x="72.1073%" y="1013" width="0.0188%" height="15" fill="rgb(242,180,7)" fg:x="19200" fg:w="5"/><text x="72.3573%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.02%)</title><rect x="72.1073%" y="997" width="0.0188%" height="15" fill="rgb(243,78,19)" fg:x="19200" fg:w="5"/><text x="72.3573%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.02%)</title><rect x="72.1073%" y="981" width="0.0188%" height="15" fill="rgb(233,23,17)" fg:x="19200" fg:w="5"/><text x="72.3573%" y="991.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="72.1073%" y="965" width="0.0188%" height="15" fill="rgb(252,122,45)" fg:x="19200" fg:w="5"/><text x="72.3573%" y="975.50"></text></g><g><title>__rdl_alloc (5 samples, 0.02%)</title><rect x="72.1073%" y="949" width="0.0188%" height="15" fill="rgb(247,108,20)" fg:x="19200" fg:w="5"/><text x="72.3573%" y="959.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.02%)</title><rect x="72.1073%" y="933" width="0.0188%" height="15" fill="rgb(235,84,21)" fg:x="19200" fg:w="5"/><text x="72.3573%" y="943.50"></text></g><g><title>malloc (5 samples, 0.02%)</title><rect x="72.1073%" y="917" width="0.0188%" height="15" fill="rgb(247,129,10)" fg:x="19200" fg:w="5"/><text x="72.3573%" y="927.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="72.1110%" y="901" width="0.0150%" height="15" fill="rgb(208,173,14)" fg:x="19201" fg:w="4"/><text x="72.3610%" y="911.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="72.1335%" y="1045" width="0.0113%" height="15" fill="rgb(236,31,38)" fg:x="19207" fg:w="3"/><text x="72.3835%" y="1055.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="72.1260%" y="1109" width="0.0263%" height="15" fill="rgb(232,65,17)" fg:x="19205" fg:w="7"/><text x="72.3760%" y="1119.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="72.1260%" y="1093" width="0.0263%" height="15" fill="rgb(224,45,49)" fg:x="19205" fg:w="7"/><text x="72.3760%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="72.1260%" y="1077" width="0.0263%" height="15" fill="rgb(225,2,53)" fg:x="19205" fg:w="7"/><text x="72.3760%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 0.02%)</title><rect x="72.1298%" y="1061" width="0.0225%" height="15" fill="rgb(248,210,53)" fg:x="19206" fg:w="6"/><text x="72.3798%" y="1071.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.01%)</title><rect x="72.1523%" y="1109" width="0.0113%" height="15" fill="rgb(211,1,30)" fg:x="19212" fg:w="3"/><text x="72.4023%" y="1119.50"></text></g><g><title>hashbrown::map::make_hash (15 samples, 0.06%)</title><rect x="72.1260%" y="1141" width="0.0563%" height="15" fill="rgb(224,96,15)" fg:x="19205" fg:w="15"/><text x="72.3760%" y="1151.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.06%)</title><rect x="72.1260%" y="1125" width="0.0563%" height="15" fill="rgb(252,45,11)" fg:x="19205" fg:w="15"/><text x="72.3760%" y="1135.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.02%)</title><rect x="72.1636%" y="1109" width="0.0188%" height="15" fill="rgb(220,125,38)" fg:x="19215" fg:w="5"/><text x="72.4136%" y="1119.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="72.1711%" y="1093" width="0.0113%" height="15" fill="rgb(243,161,33)" fg:x="19217" fg:w="3"/><text x="72.4211%" y="1103.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.01%)</title><rect x="72.1711%" y="1077" width="0.0113%" height="15" fill="rgb(248,197,34)" fg:x="19217" fg:w="3"/><text x="72.4211%" y="1087.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.01%)</title><rect x="72.1711%" y="1061" width="0.0113%" height="15" fill="rgb(228,165,23)" fg:x="19217" fg:w="3"/><text x="72.4211%" y="1071.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="72.1711%" y="1045" width="0.0113%" height="15" fill="rgb(236,94,38)" fg:x="19217" fg:w="3"/><text x="72.4211%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="72.1711%" y="1029" width="0.0113%" height="15" fill="rgb(220,13,23)" fg:x="19217" fg:w="3"/><text x="72.4211%" y="1039.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="72.1711%" y="1013" width="0.0113%" height="15" fill="rgb(234,26,39)" fg:x="19217" fg:w="3"/><text x="72.4211%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (3 samples, 0.01%)</title><rect x="72.1824%" y="1109" width="0.0113%" height="15" fill="rgb(205,117,44)" fg:x="19220" fg:w="3"/><text x="72.4324%" y="1119.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::collect_outwards_edges (276 samples, 1.04%)</title><rect x="71.1759%" y="1189" width="1.0365%" height="15" fill="rgb(250,42,2)" fg:x="18952" fg:w="276"/><text x="71.4259%" y="1199.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (52 samples, 0.20%)</title><rect x="72.0171%" y="1173" width="0.1953%" height="15" fill="rgb(223,83,14)" fg:x="19176" fg:w="52"/><text x="72.2671%" y="1183.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (52 samples, 0.20%)</title><rect x="72.0171%" y="1157" width="0.1953%" height="15" fill="rgb(241,147,50)" fg:x="19176" fg:w="52"/><text x="72.2671%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.03%)</title><rect x="72.1824%" y="1141" width="0.0300%" height="15" fill="rgb(218,90,6)" fg:x="19220" fg:w="8"/><text x="72.4324%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (8 samples, 0.03%)</title><rect x="72.1824%" y="1125" width="0.0300%" height="15" fill="rgb(210,191,5)" fg:x="19220" fg:w="8"/><text x="72.4324%" y="1135.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.02%)</title><rect x="72.1936%" y="1109" width="0.0188%" height="15" fill="rgb(225,139,19)" fg:x="19223" fg:w="5"/><text x="72.4436%" y="1119.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.02%)</title><rect x="72.1936%" y="1093" width="0.0188%" height="15" fill="rgb(210,1,33)" fg:x="19223" fg:w="5"/><text x="72.4436%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="72.2462%" y="885" width="0.0113%" height="15" fill="rgb(213,50,3)" fg:x="19237" fg:w="3"/><text x="72.4962%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.03%)</title><rect x="72.2462%" y="933" width="0.0300%" height="15" fill="rgb(234,227,4)" fg:x="19237" fg:w="8"/><text x="72.4962%" y="943.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.03%)</title><rect x="72.2462%" y="917" width="0.0300%" height="15" fill="rgb(246,63,5)" fg:x="19237" fg:w="8"/><text x="72.4962%" y="927.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.03%)</title><rect x="72.2462%" y="901" width="0.0300%" height="15" fill="rgb(245,136,27)" fg:x="19237" fg:w="8"/><text x="72.4962%" y="911.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.02%)</title><rect x="72.2575%" y="885" width="0.0188%" height="15" fill="rgb(247,199,27)" fg:x="19240" fg:w="5"/><text x="72.5075%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.05%)</title><rect x="72.2349%" y="965" width="0.0488%" height="15" fill="rgb(252,158,49)" fg:x="19234" fg:w="13"/><text x="72.4849%" y="975.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.05%)</title><rect x="72.2349%" y="949" width="0.0488%" height="15" fill="rgb(254,73,1)" fg:x="19234" fg:w="13"/><text x="72.4849%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (31 samples, 0.12%)</title><rect x="72.2312%" y="1125" width="0.1164%" height="15" fill="rgb(248,93,19)" fg:x="19233" fg:w="31"/><text x="72.4812%" y="1135.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31 samples, 0.12%)</title><rect x="72.2312%" y="1109" width="0.1164%" height="15" fill="rgb(206,67,5)" fg:x="19233" fg:w="31"/><text x="72.4812%" y="1119.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31 samples, 0.12%)</title><rect x="72.2312%" y="1093" width="0.1164%" height="15" fill="rgb(209,210,4)" fg:x="19233" fg:w="31"/><text x="72.4812%" y="1103.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (30 samples, 0.11%)</title><rect x="72.2349%" y="1077" width="0.1127%" height="15" fill="rgb(214,185,36)" fg:x="19234" fg:w="30"/><text x="72.4849%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (30 samples, 0.11%)</title><rect x="72.2349%" y="1061" width="0.1127%" height="15" fill="rgb(233,191,26)" fg:x="19234" fg:w="30"/><text x="72.4849%" y="1071.50"></text></g><g><title>graph_craft::proto::ProtoNode::map_ids::_{{closure}} (30 samples, 0.11%)</title><rect x="72.2349%" y="1045" width="0.1127%" height="15" fill="rgb(248,94,17)" fg:x="19234" fg:w="30"/><text x="72.4849%" y="1055.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids::_{{closure}}::_{{closure}} (30 samples, 0.11%)</title><rect x="72.2349%" y="1029" width="0.1127%" height="15" fill="rgb(250,64,4)" fg:x="19234" fg:w="30"/><text x="72.4849%" y="1039.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (30 samples, 0.11%)</title><rect x="72.2349%" y="1013" width="0.1127%" height="15" fill="rgb(218,41,53)" fg:x="19234" fg:w="30"/><text x="72.4849%" y="1023.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (30 samples, 0.11%)</title><rect x="72.2349%" y="997" width="0.1127%" height="15" fill="rgb(251,176,28)" fg:x="19234" fg:w="30"/><text x="72.4849%" y="1007.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (30 samples, 0.11%)</title><rect x="72.2349%" y="981" width="0.1127%" height="15" fill="rgb(247,22,9)" fg:x="19234" fg:w="30"/><text x="72.4849%" y="991.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (17 samples, 0.06%)</title><rect x="72.2838%" y="965" width="0.0638%" height="15" fill="rgb(218,201,14)" fg:x="19247" fg:w="17"/><text x="72.5338%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (17 samples, 0.06%)</title><rect x="72.2838%" y="949" width="0.0638%" height="15" fill="rgb(218,94,10)" fg:x="19247" fg:w="17"/><text x="72.5338%" y="959.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (17 samples, 0.06%)</title><rect x="72.2838%" y="933" width="0.0638%" height="15" fill="rgb(222,183,52)" fg:x="19247" fg:w="17"/><text x="72.5338%" y="943.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.01%)</title><rect x="72.3364%" y="917" width="0.0113%" height="15" fill="rgb(242,140,25)" fg:x="19261" fg:w="3"/><text x="72.5864%" y="927.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.01%)</title><rect x="72.3364%" y="901" width="0.0113%" height="15" fill="rgb(235,197,38)" fg:x="19261" fg:w="3"/><text x="72.5864%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.02%)</title><rect x="72.3551%" y="1061" width="0.0188%" height="15" fill="rgb(237,136,15)" fg:x="19266" fg:w="5"/><text x="72.6051%" y="1071.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.02%)</title><rect x="72.3551%" y="1045" width="0.0188%" height="15" fill="rgb(223,44,49)" fg:x="19266" fg:w="5"/><text x="72.6051%" y="1055.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.01%)</title><rect x="72.3626%" y="1029" width="0.0113%" height="15" fill="rgb(227,71,15)" fg:x="19268" fg:w="3"/><text x="72.6126%" y="1039.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="72.3626%" y="1013" width="0.0113%" height="15" fill="rgb(225,153,20)" fg:x="19268" fg:w="3"/><text x="72.6126%" y="1023.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.01%)</title><rect x="72.3626%" y="997" width="0.0113%" height="15" fill="rgb(210,190,26)" fg:x="19268" fg:w="3"/><text x="72.6126%" y="1007.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.01%)</title><rect x="72.3626%" y="981" width="0.0113%" height="15" fill="rgb(223,147,5)" fg:x="19268" fg:w="3"/><text x="72.6126%" y="991.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (50 samples, 0.19%)</title><rect x="72.2274%" y="1173" width="0.1878%" height="15" fill="rgb(207,14,23)" fg:x="19232" fg:w="50"/><text x="72.4774%" y="1183.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids::_{{closure}} (50 samples, 0.19%)</title><rect x="72.2274%" y="1157" width="0.1878%" height="15" fill="rgb(211,195,53)" fg:x="19232" fg:w="50"/><text x="72.4774%" y="1167.50"></text></g><g><title>graph_craft::proto::ProtoNode::map_ids (50 samples, 0.19%)</title><rect x="72.2274%" y="1141" width="0.1878%" height="15" fill="rgb(237,75,46)" fg:x="19232" fg:w="50"/><text x="72.4774%" y="1151.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids::_{{closure}}::_{{closure}} (18 samples, 0.07%)</title><rect x="72.3476%" y="1125" width="0.0676%" height="15" fill="rgb(254,55,14)" fg:x="19264" fg:w="18"/><text x="72.5976%" y="1135.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (17 samples, 0.06%)</title><rect x="72.3514%" y="1109" width="0.0638%" height="15" fill="rgb(230,185,30)" fg:x="19265" fg:w="17"/><text x="72.6014%" y="1119.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (17 samples, 0.06%)</title><rect x="72.3514%" y="1093" width="0.0638%" height="15" fill="rgb(220,14,11)" fg:x="19265" fg:w="17"/><text x="72.6014%" y="1103.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (16 samples, 0.06%)</title><rect x="72.3551%" y="1077" width="0.0601%" height="15" fill="rgb(215,169,44)" fg:x="19266" fg:w="16"/><text x="72.6051%" y="1087.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (11 samples, 0.04%)</title><rect x="72.3739%" y="1061" width="0.0413%" height="15" fill="rgb(253,203,20)" fg:x="19271" fg:w="11"/><text x="72.6239%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 0.04%)</title><rect x="72.3739%" y="1045" width="0.0413%" height="15" fill="rgb(229,225,17)" fg:x="19271" fg:w="11"/><text x="72.6239%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (11 samples, 0.04%)</title><rect x="72.3739%" y="1029" width="0.0413%" height="15" fill="rgb(236,76,26)" fg:x="19271" fg:w="11"/><text x="72.6239%" y="1039.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 0.02%)</title><rect x="72.4002%" y="1013" width="0.0150%" height="15" fill="rgb(234,15,30)" fg:x="19278" fg:w="4"/><text x="72.6502%" y="1023.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (5 samples, 0.02%)</title><rect x="72.5992%" y="1093" width="0.0188%" height="15" fill="rgb(211,113,48)" fg:x="19331" fg:w="5"/><text x="72.8492%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (5 samples, 0.02%)</title><rect x="72.5992%" y="1077" width="0.0188%" height="15" fill="rgb(221,31,36)" fg:x="19331" fg:w="5"/><text x="72.8492%" y="1087.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (3 samples, 0.01%)</title><rect x="72.6068%" y="1061" width="0.0113%" height="15" fill="rgb(215,118,52)" fg:x="19333" fg:w="3"/><text x="72.8568%" y="1071.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="72.6068%" y="1045" width="0.0113%" height="15" fill="rgb(241,151,27)" fg:x="19333" fg:w="3"/><text x="72.8568%" y="1055.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="72.6068%" y="1029" width="0.0113%" height="15" fill="rgb(253,51,3)" fg:x="19333" fg:w="3"/><text x="72.8568%" y="1039.50"></text></g><g><title>__rdl_alloc (21 samples, 0.08%)</title><rect x="72.6218%" y="997" width="0.0789%" height="15" fill="rgb(216,201,24)" fg:x="19337" fg:w="21"/><text x="72.8718%" y="1007.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (21 samples, 0.08%)</title><rect x="72.6218%" y="981" width="0.0789%" height="15" fill="rgb(231,107,4)" fg:x="19337" fg:w="21"/><text x="72.8718%" y="991.50"></text></g><g><title>malloc (21 samples, 0.08%)</title><rect x="72.6218%" y="965" width="0.0789%" height="15" fill="rgb(243,97,54)" fg:x="19337" fg:w="21"/><text x="72.8718%" y="975.50"></text></g><g><title>_int_malloc (19 samples, 0.07%)</title><rect x="72.6293%" y="949" width="0.0714%" height="15" fill="rgb(221,32,51)" fg:x="19339" fg:w="19"/><text x="72.8793%" y="959.50"></text></g><g><title>unlink_chunk.isra.0 (5 samples, 0.02%)</title><rect x="72.6819%" y="933" width="0.0188%" height="15" fill="rgb(218,171,35)" fg:x="19353" fg:w="5"/><text x="72.9319%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (23 samples, 0.09%)</title><rect x="72.6180%" y="1093" width="0.0864%" height="15" fill="rgb(214,20,53)" fg:x="19336" fg:w="23"/><text x="72.8680%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (23 samples, 0.09%)</title><rect x="72.6180%" y="1077" width="0.0864%" height="15" fill="rgb(239,9,52)" fg:x="19336" fg:w="23"/><text x="72.8680%" y="1087.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (22 samples, 0.08%)</title><rect x="72.6218%" y="1061" width="0.0826%" height="15" fill="rgb(215,114,45)" fg:x="19337" fg:w="22"/><text x="72.8718%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.08%)</title><rect x="72.6218%" y="1045" width="0.0826%" height="15" fill="rgb(208,118,9)" fg:x="19337" fg:w="22"/><text x="72.8718%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.08%)</title><rect x="72.6218%" y="1029" width="0.0826%" height="15" fill="rgb(235,7,39)" fg:x="19337" fg:w="22"/><text x="72.8718%" y="1039.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.08%)</title><rect x="72.6218%" y="1013" width="0.0826%" height="15" fill="rgb(243,225,15)" fg:x="19337" fg:w="22"/><text x="72.8718%" y="1023.50"></text></g><g><title>&lt;graph_craft::document::OriginalLocation as core::clone::Clone&gt;::clone (71 samples, 0.27%)</title><rect x="72.4415%" y="1157" width="0.2666%" height="15" fill="rgb(225,216,18)" fg:x="19289" fg:w="71"/><text x="72.6915%" y="1167.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (60 samples, 0.23%)</title><rect x="72.4828%" y="1141" width="0.2253%" height="15" fill="rgb(233,36,38)" fg:x="19300" fg:w="60"/><text x="72.7328%" y="1151.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (40 samples, 0.15%)</title><rect x="72.5579%" y="1125" width="0.1502%" height="15" fill="rgb(239,88,23)" fg:x="19320" fg:w="40"/><text x="72.8079%" y="1135.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (36 samples, 0.14%)</title><rect x="72.5730%" y="1109" width="0.1352%" height="15" fill="rgb(219,181,35)" fg:x="19324" fg:w="36"/><text x="72.8230%" y="1119.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20 samples, 0.08%)</title><rect x="72.8020%" y="1077" width="0.0751%" height="15" fill="rgb(215,18,46)" fg:x="19385" fg:w="20"/><text x="73.0520%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.08%)</title><rect x="72.8020%" y="1061" width="0.0751%" height="15" fill="rgb(241,38,11)" fg:x="19385" fg:w="20"/><text x="73.0520%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (20 samples, 0.08%)</title><rect x="72.8020%" y="1045" width="0.0751%" height="15" fill="rgb(248,169,45)" fg:x="19385" fg:w="20"/><text x="73.0520%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.07%)</title><rect x="72.8096%" y="1029" width="0.0676%" height="15" fill="rgb(239,50,49)" fg:x="19387" fg:w="18"/><text x="73.0596%" y="1039.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.07%)</title><rect x="72.8096%" y="1013" width="0.0676%" height="15" fill="rgb(231,96,31)" fg:x="19387" fg:w="18"/><text x="73.0596%" y="1023.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.07%)</title><rect x="72.8096%" y="997" width="0.0676%" height="15" fill="rgb(224,193,37)" fg:x="19387" fg:w="18"/><text x="73.0596%" y="1007.50"></text></g><g><title>__rdl_alloc (18 samples, 0.07%)</title><rect x="72.8096%" y="981" width="0.0676%" height="15" fill="rgb(227,153,50)" fg:x="19387" fg:w="18"/><text x="73.0596%" y="991.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (18 samples, 0.07%)</title><rect x="72.8096%" y="965" width="0.0676%" height="15" fill="rgb(249,228,3)" fg:x="19387" fg:w="18"/><text x="73.0596%" y="975.50"></text></g><g><title>malloc (18 samples, 0.07%)</title><rect x="72.8096%" y="949" width="0.0676%" height="15" fill="rgb(219,164,43)" fg:x="19387" fg:w="18"/><text x="73.0596%" y="959.50"></text></g><g><title>_int_malloc (11 samples, 0.04%)</title><rect x="72.8358%" y="933" width="0.0413%" height="15" fill="rgb(216,45,41)" fg:x="19394" fg:w="11"/><text x="73.0858%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (37 samples, 0.14%)</title><rect x="72.7870%" y="1141" width="0.1390%" height="15" fill="rgb(210,226,51)" fg:x="19381" fg:w="37"/><text x="73.0370%" y="1151.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (35 samples, 0.13%)</title><rect x="72.7945%" y="1125" width="0.1314%" height="15" fill="rgb(209,117,49)" fg:x="19383" fg:w="35"/><text x="73.0445%" y="1135.50"></text></g><g><title>alloc::slice::hack::to_vec (35 samples, 0.13%)</title><rect x="72.7945%" y="1109" width="0.1314%" height="15" fill="rgb(206,196,24)" fg:x="19383" fg:w="35"/><text x="73.0445%" y="1119.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (35 samples, 0.13%)</title><rect x="72.7945%" y="1093" width="0.1314%" height="15" fill="rgb(253,218,3)" fg:x="19383" fg:w="35"/><text x="73.0445%" y="1103.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.05%)</title><rect x="72.8772%" y="1077" width="0.0488%" height="15" fill="rgb(252,166,2)" fg:x="19405" fg:w="13"/><text x="73.1272%" y="1087.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.05%)</title><rect x="72.8772%" y="1061" width="0.0488%" height="15" fill="rgb(236,218,26)" fg:x="19405" fg:w="13"/><text x="73.1272%" y="1071.50"></text></g><g><title>__memmove_avx512_unaligned_erms (13 samples, 0.05%)</title><rect x="72.8772%" y="1045" width="0.0488%" height="15" fill="rgb(254,84,19)" fg:x="19405" fg:w="13"/><text x="73.1272%" y="1055.50"></text></g><g><title>&lt;graphene_core::vector::style::PathStyle as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="72.9861%" y="1093" width="0.0150%" height="15" fill="rgb(219,137,29)" fg:x="19434" fg:w="4"/><text x="73.2361%" y="1103.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="72.9898%" y="1077" width="0.0113%" height="15" fill="rgb(227,47,52)" fg:x="19435" fg:w="3"/><text x="73.2398%" y="1087.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::VectorData as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="72.9823%" y="1109" width="0.0338%" height="15" fill="rgb(229,167,24)" fg:x="19433" fg:w="9"/><text x="73.2323%" y="1119.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::PointModification as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="73.0199%" y="1093" width="0.0338%" height="15" fill="rgb(233,164,1)" fg:x="19443" fg:w="9"/><text x="73.2699%" y="1103.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (7 samples, 0.03%)</title><rect x="73.0274%" y="1077" width="0.0263%" height="15" fill="rgb(218,88,48)" fg:x="19445" fg:w="7"/><text x="73.2774%" y="1087.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="73.0424%" y="1061" width="0.0113%" height="15" fill="rgb(226,214,24)" fg:x="19449" fg:w="3"/><text x="73.2924%" y="1071.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="73.0424%" y="1045" width="0.0113%" height="15" fill="rgb(233,29,12)" fg:x="19449" fg:w="3"/><text x="73.2924%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (3 samples, 0.01%)</title><rect x="73.0424%" y="1029" width="0.0113%" height="15" fill="rgb(219,120,34)" fg:x="19449" fg:w="3"/><text x="73.2924%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3 samples, 0.01%)</title><rect x="73.0424%" y="1013" width="0.0113%" height="15" fill="rgb(226,78,44)" fg:x="19449" fg:w="3"/><text x="73.2924%" y="1023.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (3 samples, 0.01%)</title><rect x="73.0424%" y="997" width="0.0113%" height="15" fill="rgb(240,15,48)" fg:x="19449" fg:w="3"/><text x="73.2924%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="73.0424%" y="981" width="0.0113%" height="15" fill="rgb(253,176,7)" fg:x="19449" fg:w="3"/><text x="73.2924%" y="991.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="73.0424%" y="965" width="0.0113%" height="15" fill="rgb(206,166,28)" fg:x="19449" fg:w="3"/><text x="73.2924%" y="975.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="73.0424%" y="949" width="0.0113%" height="15" fill="rgb(241,53,51)" fg:x="19449" fg:w="3"/><text x="73.2924%" y="959.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="73.0424%" y="933" width="0.0113%" height="15" fill="rgb(249,112,30)" fg:x="19449" fg:w="3"/><text x="73.2924%" y="943.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="73.0424%" y="917" width="0.0113%" height="15" fill="rgb(217,85,30)" fg:x="19449" fg:w="3"/><text x="73.2924%" y="927.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="73.0424%" y="901" width="0.0113%" height="15" fill="rgb(233,49,7)" fg:x="19449" fg:w="3"/><text x="73.2924%" y="911.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::RegionModification as core::clone::Clone&gt;::clone (7 samples, 0.03%)</title><rect x="73.0537%" y="1093" width="0.0263%" height="15" fill="rgb(234,109,9)" fg:x="19452" fg:w="7"/><text x="73.3037%" y="1103.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (6 samples, 0.02%)</title><rect x="73.0912%" y="1029" width="0.0225%" height="15" fill="rgb(253,95,22)" fg:x="19462" fg:w="6"/><text x="73.3412%" y="1039.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (6 samples, 0.02%)</title><rect x="73.0912%" y="1013" width="0.0225%" height="15" fill="rgb(233,176,25)" fg:x="19462" fg:w="6"/><text x="73.3412%" y="1023.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.02%)</title><rect x="73.0912%" y="997" width="0.0225%" height="15" fill="rgb(236,33,39)" fg:x="19462" fg:w="6"/><text x="73.3412%" y="1007.50"></text></g><g><title>__memmove_avx512_unaligned_erms (6 samples, 0.02%)</title><rect x="73.0912%" y="981" width="0.0225%" height="15" fill="rgb(223,226,42)" fg:x="19462" fg:w="6"/><text x="73.3412%" y="991.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (8 samples, 0.03%)</title><rect x="73.1138%" y="1029" width="0.0300%" height="15" fill="rgb(216,99,33)" fg:x="19468" fg:w="8"/><text x="73.3638%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (8 samples, 0.03%)</title><rect x="73.1138%" y="1013" width="0.0300%" height="15" fill="rgb(235,84,23)" fg:x="19468" fg:w="8"/><text x="73.3638%" y="1023.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (8 samples, 0.03%)</title><rect x="73.1138%" y="997" width="0.0300%" height="15" fill="rgb(232,2,27)" fg:x="19468" fg:w="8"/><text x="73.3638%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.03%)</title><rect x="73.1138%" y="981" width="0.0300%" height="15" fill="rgb(241,23,22)" fg:x="19468" fg:w="8"/><text x="73.3638%" y="991.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.03%)</title><rect x="73.1138%" y="965" width="0.0300%" height="15" fill="rgb(211,73,27)" fg:x="19468" fg:w="8"/><text x="73.3638%" y="975.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.03%)</title><rect x="73.1138%" y="949" width="0.0300%" height="15" fill="rgb(235,109,49)" fg:x="19468" fg:w="8"/><text x="73.3638%" y="959.50"></text></g><g><title>__rdl_alloc (8 samples, 0.03%)</title><rect x="73.1138%" y="933" width="0.0300%" height="15" fill="rgb(230,99,29)" fg:x="19468" fg:w="8"/><text x="73.3638%" y="943.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.03%)</title><rect x="73.1138%" y="917" width="0.0300%" height="15" fill="rgb(245,199,7)" fg:x="19468" fg:w="8"/><text x="73.3638%" y="927.50"></text></g><g><title>malloc (8 samples, 0.03%)</title><rect x="73.1138%" y="901" width="0.0300%" height="15" fill="rgb(217,179,10)" fg:x="19468" fg:w="8"/><text x="73.3638%" y="911.50"></text></g><g><title>_int_malloc (7 samples, 0.03%)</title><rect x="73.1175%" y="885" width="0.0263%" height="15" fill="rgb(254,99,47)" fg:x="19469" fg:w="7"/><text x="73.3675%" y="895.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::SegmentModification as core::clone::Clone&gt;::clone (18 samples, 0.07%)</title><rect x="73.0800%" y="1093" width="0.0676%" height="15" fill="rgb(251,121,7)" fg:x="19459" fg:w="18"/><text x="73.3300%" y="1103.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (16 samples, 0.06%)</title><rect x="73.0875%" y="1077" width="0.0601%" height="15" fill="rgb(250,177,26)" fg:x="19461" fg:w="16"/><text x="73.3375%" y="1087.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.06%)</title><rect x="73.0912%" y="1061" width="0.0563%" height="15" fill="rgb(232,88,15)" fg:x="19462" fg:w="15"/><text x="73.3412%" y="1071.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.06%)</title><rect x="73.0912%" y="1045" width="0.0563%" height="15" fill="rgb(251,54,54)" fg:x="19462" fg:w="15"/><text x="73.3412%" y="1055.50"></text></g><g><title>&lt;graphene_core::memo::MemoHash&lt;T&gt; as core::clone::Clone&gt;::clone (63 samples, 0.24%)</title><rect x="72.9260%" y="1141" width="0.2366%" height="15" fill="rgb(208,177,15)" fg:x="19418" fg:w="63"/><text x="73.1760%" y="1151.50"></text></g><g><title>&lt;graph_craft::document::value::TaggedValue as core::clone::Clone&gt;::clone (56 samples, 0.21%)</title><rect x="72.9523%" y="1125" width="0.2103%" height="15" fill="rgb(205,97,32)" fg:x="19425" fg:w="56"/><text x="73.2023%" y="1135.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::VectorModification as core::clone::Clone&gt;::clone (39 samples, 0.15%)</title><rect x="73.0161%" y="1109" width="0.1465%" height="15" fill="rgb(217,192,13)" fg:x="19442" fg:w="39"/><text x="73.2661%" y="1119.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="73.1476%" y="1093" width="0.0150%" height="15" fill="rgb(215,163,41)" fg:x="19477" fg:w="4"/><text x="73.3976%" y="1103.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="73.1476%" y="1077" width="0.0150%" height="15" fill="rgb(246,83,29)" fg:x="19477" fg:w="4"/><text x="73.3976%" y="1087.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="73.1476%" y="1061" width="0.0150%" height="15" fill="rgb(219,2,45)" fg:x="19477" fg:w="4"/><text x="73.3976%" y="1071.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="73.1476%" y="1045" width="0.0150%" height="15" fill="rgb(242,215,33)" fg:x="19477" fg:w="4"/><text x="73.3976%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (4 samples, 0.02%)</title><rect x="73.1476%" y="1029" width="0.0150%" height="15" fill="rgb(217,1,6)" fg:x="19477" fg:w="4"/><text x="73.3976%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (4 samples, 0.02%)</title><rect x="73.1476%" y="1013" width="0.0150%" height="15" fill="rgb(207,85,52)" fg:x="19477" fg:w="4"/><text x="73.3976%" y="1023.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (4 samples, 0.02%)</title><rect x="73.1476%" y="997" width="0.0150%" height="15" fill="rgb(231,171,19)" fg:x="19477" fg:w="4"/><text x="73.3976%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.02%)</title><rect x="73.1476%" y="981" width="0.0150%" height="15" fill="rgb(207,128,4)" fg:x="19477" fg:w="4"/><text x="73.3976%" y="991.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.02%)</title><rect x="73.1476%" y="965" width="0.0150%" height="15" fill="rgb(219,208,4)" fg:x="19477" fg:w="4"/><text x="73.3976%" y="975.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.02%)</title><rect x="73.1476%" y="949" width="0.0150%" height="15" fill="rgb(235,161,42)" fg:x="19477" fg:w="4"/><text x="73.3976%" y="959.50"></text></g><g><title>__rdl_alloc (4 samples, 0.02%)</title><rect x="73.1476%" y="933" width="0.0150%" height="15" fill="rgb(247,218,18)" fg:x="19477" fg:w="4"/><text x="73.3976%" y="943.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.02%)</title><rect x="73.1476%" y="917" width="0.0150%" height="15" fill="rgb(232,114,51)" fg:x="19477" fg:w="4"/><text x="73.3976%" y="927.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="73.1476%" y="901" width="0.0150%" height="15" fill="rgb(222,95,3)" fg:x="19477" fg:w="4"/><text x="73.3976%" y="911.50"></text></g><g><title>&lt;graph_craft::proto::ConstructionArgs as core::clone::Clone&gt;::clone (124 samples, 0.47%)</title><rect x="72.7082%" y="1157" width="0.4657%" height="15" fill="rgb(240,65,29)" fg:x="19360" fg:w="124"/><text x="72.9582%" y="1167.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="73.1626%" y="1141" width="0.0113%" height="15" fill="rgb(249,209,20)" fg:x="19481" fg:w="3"/><text x="73.4126%" y="1151.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.04%)</title><rect x="73.2828%" y="1013" width="0.0376%" height="15" fill="rgb(241,48,37)" fg:x="19513" fg:w="10"/><text x="73.5328%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.04%)</title><rect x="73.2828%" y="997" width="0.0376%" height="15" fill="rgb(230,140,42)" fg:x="19513" fg:w="10"/><text x="73.5328%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (10 samples, 0.04%)</title><rect x="73.2828%" y="981" width="0.0376%" height="15" fill="rgb(230,176,45)" fg:x="19513" fg:w="10"/><text x="73.5328%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.04%)</title><rect x="73.2828%" y="965" width="0.0376%" height="15" fill="rgb(245,112,21)" fg:x="19513" fg:w="10"/><text x="73.5328%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.04%)</title><rect x="73.2828%" y="949" width="0.0376%" height="15" fill="rgb(207,183,35)" fg:x="19513" fg:w="10"/><text x="73.5328%" y="959.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.04%)</title><rect x="73.2828%" y="933" width="0.0376%" height="15" fill="rgb(227,44,33)" fg:x="19513" fg:w="10"/><text x="73.5328%" y="943.50"></text></g><g><title>__rdl_alloc (10 samples, 0.04%)</title><rect x="73.2828%" y="917" width="0.0376%" height="15" fill="rgb(246,120,21)" fg:x="19513" fg:w="10"/><text x="73.5328%" y="927.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (10 samples, 0.04%)</title><rect x="73.2828%" y="901" width="0.0376%" height="15" fill="rgb(235,57,52)" fg:x="19513" fg:w="10"/><text x="73.5328%" y="911.50"></text></g><g><title>malloc (9 samples, 0.03%)</title><rect x="73.2865%" y="885" width="0.0338%" height="15" fill="rgb(238,84,10)" fg:x="19514" fg:w="9"/><text x="73.5365%" y="895.50"></text></g><g><title>_int_malloc (7 samples, 0.03%)</title><rect x="73.2940%" y="869" width="0.0263%" height="15" fill="rgb(251,200,32)" fg:x="19516" fg:w="7"/><text x="73.5440%" y="879.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (13 samples, 0.05%)</title><rect x="73.2790%" y="1125" width="0.0488%" height="15" fill="rgb(247,159,13)" fg:x="19512" fg:w="13"/><text x="73.5290%" y="1135.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (12 samples, 0.05%)</title><rect x="73.2828%" y="1109" width="0.0451%" height="15" fill="rgb(238,64,4)" fg:x="19513" fg:w="12"/><text x="73.5328%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (12 samples, 0.05%)</title><rect x="73.2828%" y="1093" width="0.0451%" height="15" fill="rgb(221,131,51)" fg:x="19513" fg:w="12"/><text x="73.5328%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.05%)</title><rect x="73.2828%" y="1077" width="0.0451%" height="15" fill="rgb(242,5,29)" fg:x="19513" fg:w="12"/><text x="73.5328%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.05%)</title><rect x="73.2828%" y="1061" width="0.0451%" height="15" fill="rgb(214,130,32)" fg:x="19513" fg:w="12"/><text x="73.5328%" y="1071.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.05%)</title><rect x="73.2828%" y="1045" width="0.0451%" height="15" fill="rgb(244,210,16)" fg:x="19513" fg:w="12"/><text x="73.5328%" y="1055.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.05%)</title><rect x="73.2828%" y="1029" width="0.0451%" height="15" fill="rgb(234,48,26)" fg:x="19513" fg:w="12"/><text x="73.5328%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.03%)</title><rect x="73.3278%" y="997" width="0.0338%" height="15" fill="rgb(231,82,38)" fg:x="19525" fg:w="9"/><text x="73.5778%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.03%)</title><rect x="73.3278%" y="981" width="0.0338%" height="15" fill="rgb(254,128,41)" fg:x="19525" fg:w="9"/><text x="73.5778%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (9 samples, 0.03%)</title><rect x="73.3278%" y="965" width="0.0338%" height="15" fill="rgb(212,73,49)" fg:x="19525" fg:w="9"/><text x="73.5778%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.03%)</title><rect x="73.3278%" y="949" width="0.0338%" height="15" fill="rgb(205,62,54)" fg:x="19525" fg:w="9"/><text x="73.5778%" y="959.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.03%)</title><rect x="73.3278%" y="933" width="0.0338%" height="15" fill="rgb(228,0,8)" fg:x="19525" fg:w="9"/><text x="73.5778%" y="943.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.03%)</title><rect x="73.3278%" y="917" width="0.0338%" height="15" fill="rgb(251,28,17)" fg:x="19525" fg:w="9"/><text x="73.5778%" y="927.50"></text></g><g><title>__rdl_alloc (9 samples, 0.03%)</title><rect x="73.3278%" y="901" width="0.0338%" height="15" fill="rgb(238,105,27)" fg:x="19525" fg:w="9"/><text x="73.5778%" y="911.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.03%)</title><rect x="73.3278%" y="885" width="0.0338%" height="15" fill="rgb(237,216,33)" fg:x="19525" fg:w="9"/><text x="73.5778%" y="895.50"></text></g><g><title>malloc (8 samples, 0.03%)</title><rect x="73.3316%" y="869" width="0.0300%" height="15" fill="rgb(229,228,25)" fg:x="19526" fg:w="8"/><text x="73.5816%" y="879.50"></text></g><g><title>_int_malloc (8 samples, 0.03%)</title><rect x="73.3316%" y="853" width="0.0300%" height="15" fill="rgb(233,75,23)" fg:x="19526" fg:w="8"/><text x="73.5816%" y="863.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (10 samples, 0.04%)</title><rect x="73.3278%" y="1109" width="0.0376%" height="15" fill="rgb(231,207,16)" fg:x="19525" fg:w="10"/><text x="73.5778%" y="1119.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (10 samples, 0.04%)</title><rect x="73.3278%" y="1093" width="0.0376%" height="15" fill="rgb(231,191,45)" fg:x="19525" fg:w="10"/><text x="73.5778%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (10 samples, 0.04%)</title><rect x="73.3278%" y="1077" width="0.0376%" height="15" fill="rgb(224,133,17)" fg:x="19525" fg:w="10"/><text x="73.5778%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (10 samples, 0.04%)</title><rect x="73.3278%" y="1061" width="0.0376%" height="15" fill="rgb(209,178,27)" fg:x="19525" fg:w="10"/><text x="73.5778%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10 samples, 0.04%)</title><rect x="73.3278%" y="1045" width="0.0376%" height="15" fill="rgb(218,37,11)" fg:x="19525" fg:w="10"/><text x="73.5778%" y="1055.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.04%)</title><rect x="73.3278%" y="1029" width="0.0376%" height="15" fill="rgb(251,226,25)" fg:x="19525" fg:w="10"/><text x="73.5778%" y="1039.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10 samples, 0.04%)</title><rect x="73.3278%" y="1013" width="0.0376%" height="15" fill="rgb(209,222,27)" fg:x="19525" fg:w="10"/><text x="73.5778%" y="1023.50"></text></g><g><title>&lt;graph_craft::proto::ProtoNodeInput as core::clone::Clone&gt;::clone (52 samples, 0.20%)</title><rect x="73.1738%" y="1157" width="0.1953%" height="15" fill="rgb(238,22,21)" fg:x="19484" fg:w="52"/><text x="73.4238%" y="1167.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (28 samples, 0.11%)</title><rect x="73.2640%" y="1141" width="0.1052%" height="15" fill="rgb(233,161,25)" fg:x="19508" fg:w="28"/><text x="73.5140%" y="1151.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (11 samples, 0.04%)</title><rect x="73.3278%" y="1125" width="0.0413%" height="15" fill="rgb(226,122,53)" fg:x="19525" fg:w="11"/><text x="73.5778%" y="1135.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.06%)</title><rect x="73.3879%" y="1029" width="0.0638%" height="15" fill="rgb(220,123,17)" fg:x="19541" fg:w="17"/><text x="73.6379%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.06%)</title><rect x="73.3879%" y="1013" width="0.0638%" height="15" fill="rgb(230,224,35)" fg:x="19541" fg:w="17"/><text x="73.6379%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (17 samples, 0.06%)</title><rect x="73.3879%" y="997" width="0.0638%" height="15" fill="rgb(246,83,8)" fg:x="19541" fg:w="17"/><text x="73.6379%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.06%)</title><rect x="73.3879%" y="981" width="0.0638%" height="15" fill="rgb(230,214,17)" fg:x="19541" fg:w="17"/><text x="73.6379%" y="991.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.06%)</title><rect x="73.3879%" y="965" width="0.0638%" height="15" fill="rgb(222,97,18)" fg:x="19541" fg:w="17"/><text x="73.6379%" y="975.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.06%)</title><rect x="73.3879%" y="949" width="0.0638%" height="15" fill="rgb(206,79,1)" fg:x="19541" fg:w="17"/><text x="73.6379%" y="959.50"></text></g><g><title>__rdl_alloc (17 samples, 0.06%)</title><rect x="73.3879%" y="933" width="0.0638%" height="15" fill="rgb(214,121,34)" fg:x="19541" fg:w="17"/><text x="73.6379%" y="943.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17 samples, 0.06%)</title><rect x="73.3879%" y="917" width="0.0638%" height="15" fill="rgb(249,199,46)" fg:x="19541" fg:w="17"/><text x="73.6379%" y="927.50"></text></g><g><title>malloc (17 samples, 0.06%)</title><rect x="73.3879%" y="901" width="0.0638%" height="15" fill="rgb(214,222,46)" fg:x="19541" fg:w="17"/><text x="73.6379%" y="911.50"></text></g><g><title>_int_malloc (10 samples, 0.04%)</title><rect x="73.4142%" y="885" width="0.0376%" height="15" fill="rgb(248,168,30)" fg:x="19548" fg:w="10"/><text x="73.6642%" y="895.50"></text></g><g><title>&lt;graphene_core::types::ProtoNodeIdentifier as core::clone::Clone&gt;::clone (31 samples, 0.12%)</title><rect x="73.3691%" y="1157" width="0.1164%" height="15" fill="rgb(226,14,28)" fg:x="19536" fg:w="31"/><text x="73.6191%" y="1167.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (31 samples, 0.12%)</title><rect x="73.3691%" y="1141" width="0.1164%" height="15" fill="rgb(253,123,1)" fg:x="19536" fg:w="31"/><text x="73.6191%" y="1151.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (26 samples, 0.10%)</title><rect x="73.3879%" y="1125" width="0.0976%" height="15" fill="rgb(225,24,42)" fg:x="19541" fg:w="26"/><text x="73.6379%" y="1135.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (26 samples, 0.10%)</title><rect x="73.3879%" y="1109" width="0.0976%" height="15" fill="rgb(216,161,37)" fg:x="19541" fg:w="26"/><text x="73.6379%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (26 samples, 0.10%)</title><rect x="73.3879%" y="1093" width="0.0976%" height="15" fill="rgb(251,164,26)" fg:x="19541" fg:w="26"/><text x="73.6379%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (26 samples, 0.10%)</title><rect x="73.3879%" y="1077" width="0.0976%" height="15" fill="rgb(219,177,3)" fg:x="19541" fg:w="26"/><text x="73.6379%" y="1087.50"></text></g><g><title>alloc::slice::hack::to_vec (26 samples, 0.10%)</title><rect x="73.3879%" y="1061" width="0.0976%" height="15" fill="rgb(222,65,0)" fg:x="19541" fg:w="26"/><text x="73.6379%" y="1071.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (26 samples, 0.10%)</title><rect x="73.3879%" y="1045" width="0.0976%" height="15" fill="rgb(223,69,54)" fg:x="19541" fg:w="26"/><text x="73.6379%" y="1055.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (9 samples, 0.03%)</title><rect x="73.4518%" y="1029" width="0.0338%" height="15" fill="rgb(235,30,27)" fg:x="19558" fg:w="9"/><text x="73.7018%" y="1039.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.03%)</title><rect x="73.4518%" y="1013" width="0.0338%" height="15" fill="rgb(220,183,50)" fg:x="19558" fg:w="9"/><text x="73.7018%" y="1023.50"></text></g><g><title>__memmove_avx512_unaligned_erms (9 samples, 0.03%)</title><rect x="73.4518%" y="997" width="0.0338%" height="15" fill="rgb(248,198,15)" fg:x="19558" fg:w="9"/><text x="73.7018%" y="1007.50"></text></g><g><title>&lt;graph_craft::proto::ProtoNode as core::clone::Clone&gt;::clone (305 samples, 1.15%)</title><rect x="72.4152%" y="1173" width="1.1455%" height="15" fill="rgb(222,211,4)" fg:x="19282" fg:w="305"/><text x="72.6652%" y="1183.50"></text></g><g><title>__memmove_avx512_unaligned_erms (20 samples, 0.08%)</title><rect x="73.4856%" y="1157" width="0.0751%" height="15" fill="rgb(214,102,34)" fg:x="19567" fg:w="20"/><text x="73.7356%" y="1167.50"></text></g><g><title>__memmove_avx512_unaligned_erms (44 samples, 0.17%)</title><rect x="73.5607%" y="1173" width="0.1652%" height="15" fill="rgb(245,92,5)" fg:x="19587" fg:w="44"/><text x="73.8107%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (44 samples, 0.17%)</title><rect x="73.7259%" y="1173" width="0.1652%" height="15" fill="rgb(252,72,51)" fg:x="19631" fg:w="44"/><text x="73.9759%" y="1183.50"></text></g><g><title>core::ptr::write (43 samples, 0.16%)</title><rect x="73.7297%" y="1157" width="0.1615%" height="15" fill="rgb(252,208,19)" fg:x="19632" fg:w="43"/><text x="73.9797%" y="1167.50"></text></g><g><title>__memmove_avx512_unaligned_erms (43 samples, 0.16%)</title><rect x="73.7297%" y="1141" width="0.1615%" height="15" fill="rgb(211,69,7)" fg:x="19632" fg:w="43"/><text x="73.9797%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="73.8761%" y="1125" width="0.0150%" height="15" fill="rgb(211,27,16)" fg:x="19671" fg:w="4"/><text x="74.1261%" y="1135.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.03%)</title><rect x="73.9362%" y="885" width="0.0263%" height="15" fill="rgb(219,216,14)" fg:x="19687" fg:w="7"/><text x="74.1862%" y="895.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.02%)</title><rect x="73.9738%" y="869" width="0.0188%" height="15" fill="rgb(219,71,8)" fg:x="19697" fg:w="5"/><text x="74.2238%" y="879.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (25 samples, 0.09%)</title><rect x="73.9099%" y="933" width="0.0939%" height="15" fill="rgb(223,170,53)" fg:x="19680" fg:w="25"/><text x="74.1599%" y="943.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (25 samples, 0.09%)</title><rect x="73.9099%" y="917" width="0.0939%" height="15" fill="rgb(246,21,26)" fg:x="19680" fg:w="25"/><text x="74.1599%" y="927.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (25 samples, 0.09%)</title><rect x="73.9099%" y="901" width="0.0939%" height="15" fill="rgb(248,20,46)" fg:x="19680" fg:w="25"/><text x="74.1599%" y="911.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (11 samples, 0.04%)</title><rect x="73.9625%" y="885" width="0.0413%" height="15" fill="rgb(252,94,11)" fg:x="19694" fg:w="11"/><text x="74.2125%" y="895.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.01%)</title><rect x="73.9926%" y="869" width="0.0113%" height="15" fill="rgb(236,163,8)" fg:x="19702" fg:w="3"/><text x="74.2426%" y="879.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.02%)</title><rect x="74.0038%" y="933" width="0.0150%" height="15" fill="rgb(217,221,45)" fg:x="19705" fg:w="4"/><text x="74.2538%" y="943.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.04%)</title><rect x="74.0189%" y="869" width="0.0376%" height="15" fill="rgb(238,38,17)" fg:x="19709" fg:w="10"/><text x="74.2689%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.04%)</title><rect x="74.0189%" y="853" width="0.0376%" height="15" fill="rgb(242,210,23)" fg:x="19709" fg:w="10"/><text x="74.2689%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.04%)</title><rect x="74.0189%" y="837" width="0.0376%" height="15" fill="rgb(250,86,53)" fg:x="19709" fg:w="10"/><text x="74.2689%" y="847.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.01%)</title><rect x="74.0451%" y="821" width="0.0113%" height="15" fill="rgb(223,168,25)" fg:x="19716" fg:w="3"/><text x="74.2951%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (40 samples, 0.15%)</title><rect x="73.9099%" y="965" width="0.1502%" height="15" fill="rgb(251,189,4)" fg:x="19680" fg:w="40"/><text x="74.1599%" y="975.50"></text></g><g><title>core::hash::BuildHasher::hash_one (40 samples, 0.15%)</title><rect x="73.9099%" y="949" width="0.1502%" height="15" fill="rgb(245,19,28)" fg:x="19680" fg:w="40"/><text x="74.1599%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (11 samples, 0.04%)</title><rect x="74.0189%" y="933" width="0.0413%" height="15" fill="rgb(207,10,34)" fg:x="19709" fg:w="11"/><text x="74.2689%" y="943.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (11 samples, 0.04%)</title><rect x="74.0189%" y="917" width="0.0413%" height="15" fill="rgb(235,153,31)" fg:x="19709" fg:w="11"/><text x="74.2689%" y="927.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (11 samples, 0.04%)</title><rect x="74.0189%" y="901" width="0.0413%" height="15" fill="rgb(228,72,37)" fg:x="19709" fg:w="11"/><text x="74.2689%" y="911.50"></text></g><g><title>core::hash::Hasher::write_u64 (11 samples, 0.04%)</title><rect x="74.0189%" y="885" width="0.0413%" height="15" fill="rgb(215,15,16)" fg:x="19709" fg:w="11"/><text x="74.2689%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="74.0714%" y="933" width="0.0225%" height="15" fill="rgb(250,119,29)" fg:x="19723" fg:w="6"/><text x="74.3214%" y="943.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.02%)</title><rect x="74.0714%" y="917" width="0.0225%" height="15" fill="rgb(214,59,1)" fg:x="19723" fg:w="6"/><text x="74.3214%" y="927.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (9 samples, 0.03%)</title><rect x="74.0940%" y="933" width="0.0338%" height="15" fill="rgb(223,109,25)" fg:x="19729" fg:w="9"/><text x="74.3440%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (8 samples, 0.03%)</title><rect x="74.0977%" y="917" width="0.0300%" height="15" fill="rgb(230,198,22)" fg:x="19730" fg:w="8"/><text x="74.3477%" y="927.50"></text></g><g><title>hashbrown::raw::is_full (8 samples, 0.03%)</title><rect x="74.0977%" y="901" width="0.0300%" height="15" fill="rgb(245,184,46)" fg:x="19730" fg:w="8"/><text x="74.3477%" y="911.50"></text></g><g><title>hashbrown::raw::h2 (9 samples, 0.03%)</title><rect x="74.1278%" y="933" width="0.0338%" height="15" fill="rgb(253,73,16)" fg:x="19738" fg:w="9"/><text x="74.3778%" y="943.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.01%)</title><rect x="74.1616%" y="933" width="0.0113%" height="15" fill="rgb(206,94,45)" fg:x="19747" fg:w="3"/><text x="74.4116%" y="943.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.01%)</title><rect x="74.1616%" y="917" width="0.0113%" height="15" fill="rgb(236,83,27)" fg:x="19747" fg:w="3"/><text x="74.4116%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (31 samples, 0.12%)</title><rect x="74.0602%" y="965" width="0.1164%" height="15" fill="rgb(220,196,8)" fg:x="19720" fg:w="31"/><text x="74.3102%" y="975.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (31 samples, 0.12%)</title><rect x="74.0602%" y="949" width="0.1164%" height="15" fill="rgb(254,185,14)" fg:x="19720" fg:w="31"/><text x="74.3102%" y="959.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (13 samples, 0.05%)</title><rect x="74.1766%" y="949" width="0.0488%" height="15" fill="rgb(226,50,22)" fg:x="19751" fg:w="13"/><text x="74.4266%" y="959.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (13 samples, 0.05%)</title><rect x="74.1766%" y="933" width="0.0488%" height="15" fill="rgb(253,147,0)" fg:x="19751" fg:w="13"/><text x="74.4266%" y="943.50"></text></g><g><title>core::ptr::write (13 samples, 0.05%)</title><rect x="74.1766%" y="917" width="0.0488%" height="15" fill="rgb(252,46,33)" fg:x="19751" fg:w="13"/><text x="74.4266%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (92 samples, 0.35%)</title><rect x="73.8912%" y="1109" width="0.3455%" height="15" fill="rgb(242,22,54)" fg:x="19675" fg:w="92"/><text x="74.1412%" y="1119.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (92 samples, 0.35%)</title><rect x="73.8912%" y="1093" width="0.3455%" height="15" fill="rgb(223,178,32)" fg:x="19675" fg:w="92"/><text x="74.1412%" y="1103.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (92 samples, 0.35%)</title><rect x="73.8912%" y="1077" width="0.3455%" height="15" fill="rgb(214,106,53)" fg:x="19675" fg:w="92"/><text x="74.1412%" y="1087.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (92 samples, 0.35%)</title><rect x="73.8912%" y="1061" width="0.3455%" height="15" fill="rgb(232,65,50)" fg:x="19675" fg:w="92"/><text x="74.1412%" y="1071.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (91 samples, 0.34%)</title><rect x="73.8949%" y="1045" width="0.3418%" height="15" fill="rgb(231,110,28)" fg:x="19676" fg:w="91"/><text x="74.1449%" y="1055.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (91 samples, 0.34%)</title><rect x="73.8949%" y="1029" width="0.3418%" height="15" fill="rgb(216,71,40)" fg:x="19676" fg:w="91"/><text x="74.1449%" y="1039.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (91 samples, 0.34%)</title><rect x="73.8949%" y="1013" width="0.3418%" height="15" fill="rgb(229,89,53)" fg:x="19676" fg:w="91"/><text x="74.1449%" y="1023.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (91 samples, 0.34%)</title><rect x="73.8949%" y="997" width="0.3418%" height="15" fill="rgb(210,124,14)" fg:x="19676" fg:w="91"/><text x="74.1449%" y="1007.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (90 samples, 0.34%)</title><rect x="73.8987%" y="981" width="0.3380%" height="15" fill="rgb(236,213,6)" fg:x="19677" fg:w="90"/><text x="74.1487%" y="991.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (16 samples, 0.06%)</title><rect x="74.1766%" y="965" width="0.0601%" height="15" fill="rgb(228,41,5)" fg:x="19751" fg:w="16"/><text x="74.4266%" y="975.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (3 samples, 0.01%)</title><rect x="74.2254%" y="949" width="0.0113%" height="15" fill="rgb(221,167,25)" fg:x="19764" fg:w="3"/><text x="74.4754%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (110 samples, 0.41%)</title><rect x="73.8912%" y="1173" width="0.4131%" height="15" fill="rgb(228,144,37)" fg:x="19675" fg:w="110"/><text x="74.1412%" y="1183.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (110 samples, 0.41%)</title><rect x="73.8912%" y="1157" width="0.4131%" height="15" fill="rgb(227,189,38)" fg:x="19675" fg:w="110"/><text x="74.1412%" y="1167.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (110 samples, 0.41%)</title><rect x="73.8912%" y="1141" width="0.4131%" height="15" fill="rgb(218,8,2)" fg:x="19675" fg:w="110"/><text x="74.1412%" y="1151.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (110 samples, 0.41%)</title><rect x="73.8912%" y="1125" width="0.4131%" height="15" fill="rgb(209,61,28)" fg:x="19675" fg:w="110"/><text x="74.1412%" y="1135.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (18 samples, 0.07%)</title><rect x="74.2367%" y="1109" width="0.0676%" height="15" fill="rgb(233,140,39)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (18 samples, 0.07%)</title><rect x="74.2367%" y="1093" width="0.0676%" height="15" fill="rgb(251,66,48)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.07%)</title><rect x="74.2367%" y="1077" width="0.0676%" height="15" fill="rgb(210,44,45)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="1087.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (18 samples, 0.07%)</title><rect x="74.2367%" y="1061" width="0.0676%" height="15" fill="rgb(214,136,46)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (18 samples, 0.07%)</title><rect x="74.2367%" y="1045" width="0.0676%" height="15" fill="rgb(207,130,50)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (18 samples, 0.07%)</title><rect x="74.2367%" y="1029" width="0.0676%" height="15" fill="rgb(228,102,49)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (18 samples, 0.07%)</title><rect x="74.2367%" y="1013" width="0.0676%" height="15" fill="rgb(253,55,1)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (18 samples, 0.07%)</title><rect x="74.2367%" y="997" width="0.0676%" height="15" fill="rgb(238,222,9)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="1007.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (18 samples, 0.07%)</title><rect x="74.2367%" y="981" width="0.0676%" height="15" fill="rgb(246,99,6)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.07%)</title><rect x="74.2367%" y="965" width="0.0676%" height="15" fill="rgb(219,110,26)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.07%)</title><rect x="74.2367%" y="949" width="0.0676%" height="15" fill="rgb(239,160,33)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="959.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.07%)</title><rect x="74.2367%" y="933" width="0.0676%" height="15" fill="rgb(220,202,23)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="943.50"></text></g><g><title>__rdl_alloc (18 samples, 0.07%)</title><rect x="74.2367%" y="917" width="0.0676%" height="15" fill="rgb(208,80,26)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="927.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (18 samples, 0.07%)</title><rect x="74.2367%" y="901" width="0.0676%" height="15" fill="rgb(243,85,7)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="911.50"></text></g><g><title>malloc (18 samples, 0.07%)</title><rect x="74.2367%" y="885" width="0.0676%" height="15" fill="rgb(228,77,47)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="895.50"></text></g><g><title>_int_malloc (18 samples, 0.07%)</title><rect x="74.2367%" y="869" width="0.0676%" height="15" fill="rgb(212,226,8)" fg:x="19767" fg:w="18"/><text x="74.4867%" y="879.50"></text></g><g><title>malloc_consolidate (8 samples, 0.03%)</title><rect x="74.2742%" y="853" width="0.0300%" height="15" fill="rgb(241,120,54)" fg:x="19777" fg:w="8"/><text x="74.5242%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (5 samples, 0.02%)</title><rect x="74.3193%" y="997" width="0.0188%" height="15" fill="rgb(226,80,16)" fg:x="19789" fg:w="5"/><text x="74.5693%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (3 samples, 0.01%)</title><rect x="74.3268%" y="981" width="0.0113%" height="15" fill="rgb(240,76,13)" fg:x="19791" fg:w="3"/><text x="74.5768%" y="991.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (3 samples, 0.01%)</title><rect x="74.3268%" y="965" width="0.0113%" height="15" fill="rgb(252,74,8)" fg:x="19791" fg:w="3"/><text x="74.5768%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::OriginalLocation&gt; (16 samples, 0.06%)</title><rect x="74.3118%" y="1093" width="0.0601%" height="15" fill="rgb(244,155,2)" fg:x="19787" fg:w="16"/><text x="74.5618%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graph_craft::document::Source,usize&gt;&gt; (15 samples, 0.06%)</title><rect x="74.3155%" y="1077" width="0.0563%" height="15" fill="rgb(215,81,35)" fg:x="19788" fg:w="15"/><text x="74.5655%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graph_craft::document::Source,usize,std::hash::random::RandomState&gt;&gt; (15 samples, 0.06%)</title><rect x="74.3155%" y="1061" width="0.0563%" height="15" fill="rgb(206,55,2)" fg:x="19788" fg:w="15"/><text x="74.5655%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graph_craft::document::Source,usize)&gt;&gt; (15 samples, 0.06%)</title><rect x="74.3155%" y="1045" width="0.0563%" height="15" fill="rgb(231,2,34)" fg:x="19788" fg:w="15"/><text x="74.5655%" y="1055.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.06%)</title><rect x="74.3155%" y="1029" width="0.0563%" height="15" fill="rgb(242,176,48)" fg:x="19788" fg:w="15"/><text x="74.5655%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (15 samples, 0.06%)</title><rect x="74.3155%" y="1013" width="0.0563%" height="15" fill="rgb(249,31,36)" fg:x="19788" fg:w="15"/><text x="74.5655%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (9 samples, 0.03%)</title><rect x="74.3381%" y="997" width="0.0338%" height="15" fill="rgb(205,18,17)" fg:x="19794" fg:w="9"/><text x="74.5881%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.03%)</title><rect x="74.3381%" y="981" width="0.0338%" height="15" fill="rgb(254,130,5)" fg:x="19794" fg:w="9"/><text x="74.5881%" y="991.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.03%)</title><rect x="74.3381%" y="965" width="0.0338%" height="15" fill="rgb(229,42,45)" fg:x="19794" fg:w="9"/><text x="74.5881%" y="975.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.03%)</title><rect x="74.3381%" y="949" width="0.0338%" height="15" fill="rgb(245,95,25)" fg:x="19794" fg:w="9"/><text x="74.5881%" y="959.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.03%)</title><rect x="74.3381%" y="933" width="0.0338%" height="15" fill="rgb(249,193,38)" fg:x="19794" fg:w="9"/><text x="74.5881%" y="943.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.03%)</title><rect x="74.3381%" y="917" width="0.0338%" height="15" fill="rgb(241,140,43)" fg:x="19794" fg:w="9"/><text x="74.5881%" y="927.50"></text></g><g><title>_int_free_merge_chunk (6 samples, 0.02%)</title><rect x="74.3493%" y="901" width="0.0225%" height="15" fill="rgb(245,78,48)" fg:x="19797" fg:w="6"/><text x="74.5993%" y="911.50"></text></g><g><title>_int_free_create_chunk (4 samples, 0.02%)</title><rect x="74.3569%" y="885" width="0.0150%" height="15" fill="rgb(214,92,39)" fg:x="19799" fg:w="4"/><text x="74.6069%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.03%)</title><rect x="74.3869%" y="1029" width="0.0338%" height="15" fill="rgb(211,189,14)" fg:x="19807" fg:w="9"/><text x="74.6369%" y="1039.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.03%)</title><rect x="74.3869%" y="1013" width="0.0338%" height="15" fill="rgb(218,7,24)" fg:x="19807" fg:w="9"/><text x="74.6369%" y="1023.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.03%)</title><rect x="74.3869%" y="997" width="0.0338%" height="15" fill="rgb(224,200,49)" fg:x="19807" fg:w="9"/><text x="74.6369%" y="1007.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.03%)</title><rect x="74.3869%" y="981" width="0.0338%" height="15" fill="rgb(218,210,14)" fg:x="19807" fg:w="9"/><text x="74.6369%" y="991.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 0.03%)</title><rect x="74.3907%" y="965" width="0.0300%" height="15" fill="rgb(234,142,31)" fg:x="19808" fg:w="8"/><text x="74.6407%" y="975.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="74.4094%" y="949" width="0.0113%" height="15" fill="rgb(227,165,2)" fg:x="19813" fg:w="3"/><text x="74.6594%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(graph_craft::document::NodeId,bool)&gt;&gt; (10 samples, 0.04%)</title><rect x="74.3869%" y="1077" width="0.0376%" height="15" fill="rgb(232,44,46)" fg:x="19807" fg:w="10"/><text x="74.6369%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(graph_craft::document::NodeId,bool)&gt;&gt; (10 samples, 0.04%)</title><rect x="74.3869%" y="1061" width="0.0376%" height="15" fill="rgb(236,149,47)" fg:x="19807" fg:w="10"/><text x="74.6369%" y="1071.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.04%)</title><rect x="74.3869%" y="1045" width="0.0376%" height="15" fill="rgb(227,45,31)" fg:x="19807" fg:w="10"/><text x="74.6369%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::PointModification&gt; (3 samples, 0.01%)</title><rect x="74.4357%" y="1045" width="0.0113%" height="15" fill="rgb(240,176,51)" fg:x="19820" fg:w="3"/><text x="74.6857%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::RegionModification&gt; (3 samples, 0.01%)</title><rect x="74.4470%" y="1045" width="0.0113%" height="15" fill="rgb(249,146,41)" fg:x="19823" fg:w="3"/><text x="74.6970%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;&gt;&gt; (3 samples, 0.01%)</title><rect x="74.4620%" y="1029" width="0.0113%" height="15" fill="rgb(213,208,4)" fg:x="19827" fg:w="3"/><text x="74.7120%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;,std::hash::random::RandomState&gt;&gt; (3 samples, 0.01%)</title><rect x="74.4620%" y="1013" width="0.0113%" height="15" fill="rgb(245,84,36)" fg:x="19827" fg:w="3"/><text x="74.7120%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;)&gt;&gt; (3 samples, 0.01%)</title><rect x="74.4620%" y="997" width="0.0113%" height="15" fill="rgb(254,84,18)" fg:x="19827" fg:w="3"/><text x="74.7120%" y="1007.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="74.4620%" y="981" width="0.0113%" height="15" fill="rgb(225,38,54)" fg:x="19827" fg:w="3"/><text x="74.7120%" y="991.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (3 samples, 0.01%)</title><rect x="74.4620%" y="965" width="0.0113%" height="15" fill="rgb(246,50,30)" fg:x="19827" fg:w="3"/><text x="74.7120%" y="975.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3 samples, 0.01%)</title><rect x="74.4620%" y="949" width="0.0113%" height="15" fill="rgb(246,148,9)" fg:x="19827" fg:w="3"/><text x="74.7120%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="74.4620%" y="933" width="0.0113%" height="15" fill="rgb(223,75,4)" fg:x="19827" fg:w="3"/><text x="74.7120%" y="943.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="74.4620%" y="917" width="0.0113%" height="15" fill="rgb(239,148,41)" fg:x="19827" fg:w="3"/><text x="74.7120%" y="927.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.01%)</title><rect x="74.4620%" y="901" width="0.0113%" height="15" fill="rgb(205,195,3)" fg:x="19827" fg:w="3"/><text x="74.7120%" y="911.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.01%)</title><rect x="74.4620%" y="885" width="0.0113%" height="15" fill="rgb(254,161,1)" fg:x="19827" fg:w="3"/><text x="74.7120%" y="895.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.01%)</title><rect x="74.4620%" y="869" width="0.0113%" height="15" fill="rgb(211,229,8)" fg:x="19827" fg:w="3"/><text x="74.7120%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::SegmentModification&gt; (5 samples, 0.02%)</title><rect x="74.4583%" y="1045" width="0.0188%" height="15" fill="rgb(220,97,9)" fg:x="19826" fg:w="5"/><text x="74.7083%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ConstructionArgs&gt; (30 samples, 0.11%)</title><rect x="74.3719%" y="1093" width="0.1127%" height="15" fill="rgb(240,218,8)" fg:x="19803" fg:w="30"/><text x="74.6219%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::memo::MemoHash&lt;graph_craft::document::value::TaggedValue&gt;&gt; (16 samples, 0.06%)</title><rect x="74.4245%" y="1077" width="0.0601%" height="15" fill="rgb(250,44,0)" fg:x="19817" fg:w="16"/><text x="74.6745%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::VectorModification&gt; (13 samples, 0.05%)</title><rect x="74.4357%" y="1061" width="0.0488%" height="15" fill="rgb(236,41,53)" fg:x="19820" fg:w="13"/><text x="74.6857%" y="1071.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 0.02%)</title><rect x="74.5033%" y="1077" width="0.0225%" height="15" fill="rgb(218,227,13)" fg:x="19838" fg:w="6"/><text x="74.7533%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNodeInput&gt; (15 samples, 0.06%)</title><rect x="74.4845%" y="1093" width="0.0563%" height="15" fill="rgb(217,94,32)" fg:x="19833" fg:w="15"/><text x="74.7345%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::Type&gt; (4 samples, 0.02%)</title><rect x="74.5259%" y="1077" width="0.0150%" height="15" fill="rgb(213,217,12)" fg:x="19844" fg:w="4"/><text x="74.7759%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.26%)</title><rect x="74.3043%" y="1157" width="0.2591%" height="15" fill="rgb(229,13,46)" fg:x="19785" fg:w="69"/><text x="74.5543%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)]&gt; (69 samples, 0.26%)</title><rect x="74.3043%" y="1141" width="0.2591%" height="15" fill="rgb(243,139,5)" fg:x="19785" fg:w="69"/><text x="74.5543%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt; (68 samples, 0.26%)</title><rect x="74.3080%" y="1125" width="0.2554%" height="15" fill="rgb(249,38,45)" fg:x="19786" fg:w="68"/><text x="74.5580%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNode&gt; (67 samples, 0.25%)</title><rect x="74.3118%" y="1109" width="0.2516%" height="15" fill="rgb(216,70,11)" fg:x="19787" fg:w="67"/><text x="74.5618%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::ProtoNodeIdentifier&gt; (6 samples, 0.02%)</title><rect x="74.5409%" y="1093" width="0.0225%" height="15" fill="rgb(253,101,25)" fg:x="19848" fg:w="6"/><text x="74.7909%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (6 samples, 0.02%)</title><rect x="74.5409%" y="1077" width="0.0225%" height="15" fill="rgb(207,197,30)" fg:x="19848" fg:w="6"/><text x="74.7909%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.02%)</title><rect x="74.5484%" y="1061" width="0.0150%" height="15" fill="rgb(238,87,13)" fg:x="19850" fg:w="4"/><text x="74.7984%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.02%)</title><rect x="74.5484%" y="1045" width="0.0150%" height="15" fill="rgb(215,155,8)" fg:x="19850" fg:w="4"/><text x="74.7984%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.02%)</title><rect x="74.5484%" y="1029" width="0.0150%" height="15" fill="rgb(239,166,38)" fg:x="19850" fg:w="4"/><text x="74.7984%" y="1039.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="74.5484%" y="1013" width="0.0150%" height="15" fill="rgb(240,194,35)" fg:x="19850" fg:w="4"/><text x="74.7984%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.02%)</title><rect x="74.5484%" y="997" width="0.0150%" height="15" fill="rgb(219,10,44)" fg:x="19850" fg:w="4"/><text x="74.7984%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.02%)</title><rect x="74.5484%" y="981" width="0.0150%" height="15" fill="rgb(251,220,35)" fg:x="19850" fg:w="4"/><text x="74.7984%" y="991.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.02%)</title><rect x="74.5484%" y="965" width="0.0150%" height="15" fill="rgb(218,117,13)" fg:x="19850" fg:w="4"/><text x="74.7984%" y="975.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.02%)</title><rect x="74.5484%" y="949" width="0.0150%" height="15" fill="rgb(221,213,40)" fg:x="19850" fg:w="4"/><text x="74.7984%" y="959.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.02%)</title><rect x="74.5484%" y="933" width="0.0150%" height="15" fill="rgb(251,224,35)" fg:x="19850" fg:w="4"/><text x="74.7984%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (111 samples, 0.42%)</title><rect x="74.3043%" y="1173" width="0.4169%" height="15" fill="rgb(241,33,39)" fg:x="19785" fg:w="111"/><text x="74.5543%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (42 samples, 0.16%)</title><rect x="74.5634%" y="1157" width="0.1577%" height="15" fill="rgb(222,74,17)" fg:x="19854" fg:w="42"/><text x="74.8134%" y="1167.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.16%)</title><rect x="74.5634%" y="1141" width="0.1577%" height="15" fill="rgb(225,103,0)" fg:x="19854" fg:w="42"/><text x="74.8134%" y="1151.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (42 samples, 0.16%)</title><rect x="74.5634%" y="1125" width="0.1577%" height="15" fill="rgb(240,0,12)" fg:x="19854" fg:w="42"/><text x="74.8134%" y="1135.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.16%)</title><rect x="74.5634%" y="1109" width="0.1577%" height="15" fill="rgb(233,213,37)" fg:x="19854" fg:w="42"/><text x="74.8134%" y="1119.50"></text></g><g><title>__rdl_dealloc (42 samples, 0.16%)</title><rect x="74.5634%" y="1093" width="0.1577%" height="15" fill="rgb(225,84,52)" fg:x="19854" fg:w="42"/><text x="74.8134%" y="1103.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (42 samples, 0.16%)</title><rect x="74.5634%" y="1077" width="0.1577%" height="15" fill="rgb(247,160,51)" fg:x="19854" fg:w="42"/><text x="74.8134%" y="1087.50"></text></g><g><title>cfree@GLIBC_2.2.5 (42 samples, 0.16%)</title><rect x="74.5634%" y="1061" width="0.1577%" height="15" fill="rgb(244,60,51)" fg:x="19854" fg:w="42"/><text x="74.8134%" y="1071.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (42 samples, 0.16%)</title><rect x="74.5634%" y="1045" width="0.1577%" height="15" fill="rgb(233,114,7)" fg:x="19854" fg:w="42"/><text x="74.8134%" y="1055.50"></text></g><g><title>malloc_consolidate (42 samples, 0.16%)</title><rect x="74.5634%" y="1029" width="0.1577%" height="15" fill="rgb(246,136,16)" fg:x="19854" fg:w="42"/><text x="74.8134%" y="1039.50"></text></g><g><title>unlink_chunk.isra.0 (23 samples, 0.09%)</title><rect x="74.6348%" y="1013" width="0.0864%" height="15" fill="rgb(243,114,45)" fg:x="19873" fg:w="23"/><text x="74.8848%" y="1023.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (3 samples, 0.01%)</title><rect x="74.7249%" y="1157" width="0.0113%" height="15" fill="rgb(247,183,43)" fg:x="19897" fg:w="3"/><text x="74.9749%" y="1167.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.02%)</title><rect x="74.7362%" y="1157" width="0.0150%" height="15" fill="rgb(251,210,42)" fg:x="19900" fg:w="4"/><text x="74.9862%" y="1167.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (4 samples, 0.02%)</title><rect x="74.7362%" y="1141" width="0.0150%" height="15" fill="rgb(221,88,35)" fg:x="19900" fg:w="4"/><text x="74.9862%" y="1151.50"></text></g><g><title>malloc_consolidate (4 samples, 0.02%)</title><rect x="74.7362%" y="1125" width="0.0150%" height="15" fill="rgb(242,21,20)" fg:x="19900" fg:w="4"/><text x="74.9862%" y="1135.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="74.7549%" y="965" width="0.0113%" height="15" fill="rgb(233,226,36)" fg:x="19905" fg:w="3"/><text x="75.0049%" y="975.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="74.7549%" y="949" width="0.0113%" height="15" fill="rgb(243,189,34)" fg:x="19905" fg:w="3"/><text x="75.0049%" y="959.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.01%)</title><rect x="74.7549%" y="933" width="0.0113%" height="15" fill="rgb(207,145,50)" fg:x="19905" fg:w="3"/><text x="75.0049%" y="943.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.01%)</title><rect x="74.7549%" y="917" width="0.0113%" height="15" fill="rgb(242,1,50)" fg:x="19905" fg:w="3"/><text x="75.0049%" y="927.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.01%)</title><rect x="74.7549%" y="901" width="0.0113%" height="15" fill="rgb(231,65,32)" fg:x="19905" fg:w="3"/><text x="75.0049%" y="911.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="74.7549%" y="885" width="0.0113%" height="15" fill="rgb(208,68,49)" fg:x="19905" fg:w="3"/><text x="75.0049%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt;&gt; (5 samples, 0.02%)</title><rect x="74.7512%" y="1157" width="0.0188%" height="15" fill="rgb(253,54,49)" fg:x="19904" fg:w="5"/><text x="75.0012%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;,std::hash::random::RandomState&gt;&gt; (5 samples, 0.02%)</title><rect x="74.7512%" y="1141" width="0.0188%" height="15" fill="rgb(245,186,24)" fg:x="19904" fg:w="5"/><text x="75.0012%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;)&gt;&gt; (5 samples, 0.02%)</title><rect x="74.7512%" y="1125" width="0.0188%" height="15" fill="rgb(209,2,41)" fg:x="19904" fg:w="5"/><text x="75.0012%" y="1135.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="74.7512%" y="1109" width="0.0188%" height="15" fill="rgb(242,208,54)" fg:x="19904" fg:w="5"/><text x="75.0012%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (5 samples, 0.02%)</title><rect x="74.7512%" y="1093" width="0.0188%" height="15" fill="rgb(225,9,51)" fg:x="19904" fg:w="5"/><text x="75.0012%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (5 samples, 0.02%)</title><rect x="74.7512%" y="1077" width="0.0188%" height="15" fill="rgb(207,207,25)" fg:x="19904" fg:w="5"/><text x="75.0012%" y="1087.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (5 samples, 0.02%)</title><rect x="74.7512%" y="1061" width="0.0188%" height="15" fill="rgb(253,96,18)" fg:x="19904" fg:w="5"/><text x="75.0012%" y="1071.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (5 samples, 0.02%)</title><rect x="74.7512%" y="1045" width="0.0188%" height="15" fill="rgb(252,215,20)" fg:x="19904" fg:w="5"/><text x="75.0012%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;)&gt; (5 samples, 0.02%)</title><rect x="74.7512%" y="1029" width="0.0188%" height="15" fill="rgb(245,227,26)" fg:x="19904" fg:w="5"/><text x="75.0012%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt; (5 samples, 0.02%)</title><rect x="74.7512%" y="1013" width="0.0188%" height="15" fill="rgb(241,208,0)" fg:x="19904" fg:w="5"/><text x="75.0012%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeId&gt;&gt; (5 samples, 0.02%)</title><rect x="74.7512%" y="997" width="0.0188%" height="15" fill="rgb(224,130,10)" fg:x="19904" fg:w="5"/><text x="75.0012%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="74.7512%" y="981" width="0.0188%" height="15" fill="rgb(237,29,0)" fg:x="19904" fg:w="5"/><text x="75.0012%" y="991.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="74.8225%" y="1141" width="0.0150%" height="15" fill="rgb(219,27,41)" fg:x="19923" fg:w="4"/><text x="75.0725%" y="1151.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="74.8263%" y="1125" width="0.0113%" height="15" fill="rgb(245,101,19)" fg:x="19924" fg:w="3"/><text x="75.0763%" y="1135.50"></text></g><g><title>alloc::raw_vec::finish_grow (37 samples, 0.14%)</title><rect x="74.9052%" y="1093" width="0.1390%" height="15" fill="rgb(243,44,37)" fg:x="19945" fg:w="37"/><text x="75.1552%" y="1103.50"></text></g><g><title>malloc (33 samples, 0.12%)</title><rect x="74.9202%" y="1077" width="0.1239%" height="15" fill="rgb(228,213,43)" fg:x="19949" fg:w="33"/><text x="75.1702%" y="1087.50"></text></g><g><title>_int_malloc (21 samples, 0.08%)</title><rect x="74.9653%" y="1061" width="0.0789%" height="15" fill="rgb(219,163,21)" fg:x="19961" fg:w="21"/><text x="75.2153%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (42 samples, 0.16%)</title><rect x="74.8939%" y="1125" width="0.1577%" height="15" fill="rgb(234,86,24)" fg:x="19942" fg:w="42"/><text x="75.1439%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (42 samples, 0.16%)</title><rect x="74.8939%" y="1109" width="0.1577%" height="15" fill="rgb(225,10,24)" fg:x="19942" fg:w="42"/><text x="75.1439%" y="1119.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (58 samples, 0.22%)</title><rect x="74.8376%" y="1141" width="0.2178%" height="15" fill="rgb(218,109,7)" fg:x="19927" fg:w="58"/><text x="75.0876%" y="1151.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="75.9342%" y="1109" width="0.0150%" height="15" fill="rgb(210,20,26)" fg:x="20219" fg:w="4"/><text x="76.1842%" y="1119.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (575 samples, 2.16%)</title><rect x="75.0554%" y="1125" width="2.1595%" height="15" fill="rgb(216,18,1)" fg:x="19985" fg:w="575"/><text x="75.3054%" y="1135.50">&lt;..</text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref::_{{closure}} (337 samples, 1.27%)</title><rect x="75.9492%" y="1109" width="1.2656%" height="15" fill="rgb(206,163,23)" fg:x="20223" fg:w="337"/><text x="76.1992%" y="1119.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (337 samples, 1.27%)</title><rect x="75.9492%" y="1093" width="1.2656%" height="15" fill="rgb(229,150,31)" fg:x="20223" fg:w="337"/><text x="76.1992%" y="1103.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (337 samples, 1.27%)</title><rect x="75.9492%" y="1077" width="1.2656%" height="15" fill="rgb(231,10,5)" fg:x="20223" fg:w="337"/><text x="76.1992%" y="1087.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref (578 samples, 2.17%)</title><rect x="75.0554%" y="1141" width="2.1707%" height="15" fill="rgb(250,40,50)" fg:x="19985" fg:w="578"/><text x="75.3054%" y="1151.50">g..</text></g><g><title>core::fmt::Arguments::new_v1_formatted (3 samples, 0.01%)</title><rect x="77.2149%" y="1125" width="0.0113%" height="15" fill="rgb(217,119,7)" fg:x="20560" fg:w="3"/><text x="77.4649%" y="1135.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (8 samples, 0.03%)</title><rect x="77.2261%" y="1077" width="0.0300%" height="15" fill="rgb(245,214,40)" fg:x="20563" fg:w="8"/><text x="77.4761%" y="1087.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (8 samples, 0.03%)</title><rect x="77.2261%" y="1061" width="0.0300%" height="15" fill="rgb(216,187,1)" fg:x="20563" fg:w="8"/><text x="77.4761%" y="1071.50"></text></g><g><title>core::ptr::write (8 samples, 0.03%)</title><rect x="77.2261%" y="1045" width="0.0300%" height="15" fill="rgb(237,146,21)" fg:x="20563" fg:w="8"/><text x="77.4761%" y="1055.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (11 samples, 0.04%)</title><rect x="77.2261%" y="1141" width="0.0413%" height="15" fill="rgb(210,174,47)" fg:x="20563" fg:w="11"/><text x="77.4761%" y="1151.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (11 samples, 0.04%)</title><rect x="77.2261%" y="1125" width="0.0413%" height="15" fill="rgb(218,111,39)" fg:x="20563" fg:w="11"/><text x="77.4761%" y="1135.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (11 samples, 0.04%)</title><rect x="77.2261%" y="1109" width="0.0413%" height="15" fill="rgb(224,95,19)" fg:x="20563" fg:w="11"/><text x="77.4761%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (11 samples, 0.04%)</title><rect x="77.2261%" y="1093" width="0.0413%" height="15" fill="rgb(234,15,38)" fg:x="20563" fg:w="11"/><text x="77.4761%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (3 samples, 0.01%)</title><rect x="77.2562%" y="1077" width="0.0113%" height="15" fill="rgb(246,56,12)" fg:x="20571" fg:w="3"/><text x="77.5062%" y="1087.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (3 samples, 0.01%)</title><rect x="77.2562%" y="1061" width="0.0113%" height="15" fill="rgb(247,16,17)" fg:x="20571" fg:w="3"/><text x="77.5062%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3 samples, 0.01%)</title><rect x="77.2562%" y="1045" width="0.0113%" height="15" fill="rgb(215,151,11)" fg:x="20571" fg:w="3"/><text x="77.5062%" y="1055.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="77.2825%" y="965" width="0.0376%" height="15" fill="rgb(225,16,24)" fg:x="20578" fg:w="10"/><text x="77.5325%" y="975.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="77.2825%" y="949" width="0.0376%" height="15" fill="rgb(217,117,5)" fg:x="20578" fg:w="10"/><text x="77.5325%" y="959.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="77.2825%" y="933" width="0.0376%" height="15" fill="rgb(246,187,53)" fg:x="20578" fg:w="10"/><text x="77.5325%" y="943.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.03%)</title><rect x="77.2937%" y="917" width="0.0263%" height="15" fill="rgb(241,71,40)" fg:x="20581" fg:w="7"/><text x="77.5437%" y="927.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.01%)</title><rect x="77.3087%" y="901" width="0.0113%" height="15" fill="rgb(231,67,39)" fg:x="20585" fg:w="3"/><text x="77.5587%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (14 samples, 0.05%)</title><rect x="77.2825%" y="1029" width="0.0526%" height="15" fill="rgb(222,120,24)" fg:x="20578" fg:w="14"/><text x="77.5325%" y="1039.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (14 samples, 0.05%)</title><rect x="77.2825%" y="1013" width="0.0526%" height="15" fill="rgb(248,3,3)" fg:x="20578" fg:w="14"/><text x="77.5325%" y="1023.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.05%)</title><rect x="77.2825%" y="997" width="0.0526%" height="15" fill="rgb(228,218,5)" fg:x="20578" fg:w="14"/><text x="77.5325%" y="1007.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.05%)</title><rect x="77.2825%" y="981" width="0.0526%" height="15" fill="rgb(212,202,43)" fg:x="20578" fg:w="14"/><text x="77.5325%" y="991.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.01%)</title><rect x="77.3238%" y="965" width="0.0113%" height="15" fill="rgb(235,183,2)" fg:x="20589" fg:w="3"/><text x="77.5738%" y="975.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="77.3238%" y="949" width="0.0113%" height="15" fill="rgb(230,165,10)" fg:x="20589" fg:w="3"/><text x="77.5738%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.01%)</title><rect x="77.3238%" y="933" width="0.0113%" height="15" fill="rgb(219,54,40)" fg:x="20589" fg:w="3"/><text x="77.5738%" y="943.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.01%)</title><rect x="77.3238%" y="917" width="0.0113%" height="15" fill="rgb(244,73,9)" fg:x="20589" fg:w="3"/><text x="77.5738%" y="927.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="77.3238%" y="901" width="0.0113%" height="15" fill="rgb(212,32,45)" fg:x="20589" fg:w="3"/><text x="77.5738%" y="911.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="77.3238%" y="885" width="0.0113%" height="15" fill="rgb(205,58,31)" fg:x="20589" fg:w="3"/><text x="77.5738%" y="895.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="77.3238%" y="869" width="0.0113%" height="15" fill="rgb(250,120,43)" fg:x="20589" fg:w="3"/><text x="77.5738%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3 samples, 0.01%)</title><rect x="77.3425%" y="997" width="0.0113%" height="15" fill="rgb(235,13,10)" fg:x="20594" fg:w="3"/><text x="77.5925%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (7 samples, 0.03%)</title><rect x="77.3538%" y="997" width="0.0263%" height="15" fill="rgb(232,219,31)" fg:x="20597" fg:w="7"/><text x="77.6038%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (14 samples, 0.05%)</title><rect x="77.3350%" y="1029" width="0.0526%" height="15" fill="rgb(218,157,51)" fg:x="20592" fg:w="14"/><text x="77.5850%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (14 samples, 0.05%)</title><rect x="77.3350%" y="1013" width="0.0526%" height="15" fill="rgb(211,91,52)" fg:x="20592" fg:w="14"/><text x="77.5850%" y="1023.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (35 samples, 0.13%)</title><rect x="77.2674%" y="1109" width="0.1314%" height="15" fill="rgb(240,173,1)" fg:x="20574" fg:w="35"/><text x="77.5174%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (35 samples, 0.13%)</title><rect x="77.2674%" y="1093" width="0.1314%" height="15" fill="rgb(248,20,47)" fg:x="20574" fg:w="35"/><text x="77.5174%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (34 samples, 0.13%)</title><rect x="77.2712%" y="1077" width="0.1277%" height="15" fill="rgb(217,221,40)" fg:x="20575" fg:w="34"/><text x="77.5212%" y="1087.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (33 samples, 0.12%)</title><rect x="77.2749%" y="1061" width="0.1239%" height="15" fill="rgb(226,149,51)" fg:x="20576" fg:w="33"/><text x="77.5249%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (33 samples, 0.12%)</title><rect x="77.2749%" y="1045" width="0.1239%" height="15" fill="rgb(252,193,7)" fg:x="20576" fg:w="33"/><text x="77.5249%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (3 samples, 0.01%)</title><rect x="77.3876%" y="1029" width="0.0113%" height="15" fill="rgb(205,123,0)" fg:x="20606" fg:w="3"/><text x="77.6376%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (3 samples, 0.01%)</title><rect x="77.3876%" y="1013" width="0.0113%" height="15" fill="rgb(233,173,25)" fg:x="20606" fg:w="3"/><text x="77.6376%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3 samples, 0.01%)</title><rect x="77.3876%" y="997" width="0.0113%" height="15" fill="rgb(216,63,32)" fg:x="20606" fg:w="3"/><text x="77.6376%" y="1007.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (3 samples, 0.01%)</title><rect x="77.3876%" y="981" width="0.0113%" height="15" fill="rgb(209,56,45)" fg:x="20606" fg:w="3"/><text x="77.6376%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="77.3876%" y="965" width="0.0113%" height="15" fill="rgb(226,111,49)" fg:x="20606" fg:w="3"/><text x="77.6376%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="77.3876%" y="949" width="0.0113%" height="15" fill="rgb(244,181,21)" fg:x="20606" fg:w="3"/><text x="77.6376%" y="959.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="77.3876%" y="933" width="0.0113%" height="15" fill="rgb(222,126,15)" fg:x="20606" fg:w="3"/><text x="77.6376%" y="943.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="77.3876%" y="917" width="0.0113%" height="15" fill="rgb(222,95,17)" fg:x="20606" fg:w="3"/><text x="77.6376%" y="927.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="77.3876%" y="901" width="0.0113%" height="15" fill="rgb(254,46,5)" fg:x="20606" fg:w="3"/><text x="77.6376%" y="911.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="77.3876%" y="885" width="0.0113%" height="15" fill="rgb(236,216,35)" fg:x="20606" fg:w="3"/><text x="77.6376%" y="895.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="77.3876%" y="869" width="0.0113%" height="15" fill="rgb(217,187,26)" fg:x="20606" fg:w="3"/><text x="77.6376%" y="879.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (13 samples, 0.05%)</title><rect x="77.3989%" y="1077" width="0.0488%" height="15" fill="rgb(207,192,25)" fg:x="20609" fg:w="13"/><text x="77.6489%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (13 samples, 0.05%)</title><rect x="77.3989%" y="1061" width="0.0488%" height="15" fill="rgb(253,135,27)" fg:x="20609" fg:w="13"/><text x="77.6489%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (13 samples, 0.05%)</title><rect x="77.3989%" y="1045" width="0.0488%" height="15" fill="rgb(211,122,29)" fg:x="20609" fg:w="13"/><text x="77.6489%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.03%)</title><rect x="77.4177%" y="1029" width="0.0300%" height="15" fill="rgb(233,162,40)" fg:x="20614" fg:w="8"/><text x="77.6677%" y="1039.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.02%)</title><rect x="77.4327%" y="1013" width="0.0150%" height="15" fill="rgb(222,184,47)" fg:x="20618" fg:w="4"/><text x="77.6827%" y="1023.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.02%)</title><rect x="77.4477%" y="1077" width="0.0150%" height="15" fill="rgb(249,99,23)" fg:x="20622" fg:w="4"/><text x="77.6977%" y="1087.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::hash::Hash&gt;::hash (8 samples, 0.03%)</title><rect x="77.4627%" y="1061" width="0.0300%" height="15" fill="rgb(214,60,12)" fg:x="20626" fg:w="8"/><text x="77.7127%" y="1071.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (8 samples, 0.03%)</title><rect x="77.4627%" y="1045" width="0.0300%" height="15" fill="rgb(250,229,36)" fg:x="20626" fg:w="8"/><text x="77.7127%" y="1055.50"></text></g><g><title>core::hash::Hasher::write_u64 (8 samples, 0.03%)</title><rect x="77.4627%" y="1029" width="0.0300%" height="15" fill="rgb(232,195,10)" fg:x="20626" fg:w="8"/><text x="77.7127%" y="1039.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="77.4627%" y="1013" width="0.0300%" height="15" fill="rgb(205,213,31)" fg:x="20626" fg:w="8"/><text x="77.7127%" y="1023.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="77.4627%" y="997" width="0.0300%" height="15" fill="rgb(237,43,8)" fg:x="20626" fg:w="8"/><text x="77.7127%" y="1007.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="77.4627%" y="981" width="0.0300%" height="15" fill="rgb(216,208,3)" fg:x="20626" fg:w="8"/><text x="77.7127%" y="991.50"></text></g><g><title>hashbrown::map::make_hash (27 samples, 0.10%)</title><rect x="77.3989%" y="1109" width="0.1014%" height="15" fill="rgb(228,179,44)" fg:x="20609" fg:w="27"/><text x="77.6489%" y="1119.50"></text></g><g><title>core::hash::BuildHasher::hash_one (27 samples, 0.10%)</title><rect x="77.3989%" y="1093" width="0.1014%" height="15" fill="rgb(230,192,27)" fg:x="20609" fg:w="27"/><text x="77.6489%" y="1103.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.04%)</title><rect x="77.4627%" y="1077" width="0.0376%" height="15" fill="rgb(251,30,38)" fg:x="20626" fg:w="10"/><text x="77.7127%" y="1087.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="77.5341%" y="1077" width="0.0150%" height="15" fill="rgb(246,55,52)" fg:x="20645" fg:w="4"/><text x="77.7841%" y="1087.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.02%)</title><rect x="77.5341%" y="1061" width="0.0150%" height="15" fill="rgb(249,79,26)" fg:x="20645" fg:w="4"/><text x="77.7841%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (3 samples, 0.01%)</title><rect x="77.5529%" y="1077" width="0.0113%" height="15" fill="rgb(220,202,16)" fg:x="20650" fg:w="3"/><text x="77.8029%" y="1087.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 0.03%)</title><rect x="77.5641%" y="1077" width="0.0300%" height="15" fill="rgb(250,170,23)" fg:x="20653" fg:w="8"/><text x="77.8141%" y="1087.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.03%)</title><rect x="77.5641%" y="1061" width="0.0300%" height="15" fill="rgb(230,7,37)" fg:x="20653" fg:w="8"/><text x="77.8141%" y="1071.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::collect_inwards_edges (754 samples, 2.83%)</title><rect x="74.7700%" y="1157" width="2.8317%" height="15" fill="rgb(213,71,1)" fg:x="19909" fg:w="754"/><text x="75.0200%" y="1167.50">gr..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (89 samples, 0.33%)</title><rect x="77.2674%" y="1141" width="0.3342%" height="15" fill="rgb(227,87,39)" fg:x="20574" fg:w="89"/><text x="77.5174%" y="1151.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (89 samples, 0.33%)</title><rect x="77.2674%" y="1125" width="0.3342%" height="15" fill="rgb(210,41,29)" fg:x="20574" fg:w="89"/><text x="77.5174%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (27 samples, 0.10%)</title><rect x="77.5003%" y="1109" width="0.1014%" height="15" fill="rgb(206,191,31)" fg:x="20636" fg:w="27"/><text x="77.7503%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (27 samples, 0.10%)</title><rect x="77.5003%" y="1093" width="0.1014%" height="15" fill="rgb(247,75,54)" fg:x="20636" fg:w="27"/><text x="77.7503%" y="1103.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (5 samples, 0.02%)</title><rect x="77.6017%" y="1093" width="0.0188%" height="15" fill="rgb(208,54,50)" fg:x="20663" fg:w="5"/><text x="77.8517%" y="1103.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (5 samples, 0.02%)</title><rect x="77.6017%" y="1077" width="0.0188%" height="15" fill="rgb(214,90,37)" fg:x="20663" fg:w="5"/><text x="77.8517%" y="1087.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (5 samples, 0.02%)</title><rect x="77.6017%" y="1061" width="0.0188%" height="15" fill="rgb(220,132,6)" fg:x="20663" fg:w="5"/><text x="77.8517%" y="1071.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (7 samples, 0.03%)</title><rect x="77.6017%" y="1109" width="0.0263%" height="15" fill="rgb(213,167,7)" fg:x="20663" fg:w="7"/><text x="77.8517%" y="1119.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (9 samples, 0.03%)</title><rect x="77.6017%" y="1125" width="0.0338%" height="15" fill="rgb(243,36,27)" fg:x="20663" fg:w="9"/><text x="77.8517%" y="1135.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (777 samples, 2.92%)</title><rect x="74.7249%" y="1173" width="2.9181%" height="15" fill="rgb(235,147,12)" fg:x="19897" fg:w="777"/><text x="74.9749%" y="1183.50">gr..</text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (11 samples, 0.04%)</title><rect x="77.6017%" y="1157" width="0.0413%" height="15" fill="rgb(212,198,44)" fg:x="20663" fg:w="11"/><text x="77.8517%" y="1167.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (11 samples, 0.04%)</title><rect x="77.6017%" y="1141" width="0.0413%" height="15" fill="rgb(218,68,50)" fg:x="20663" fg:w="11"/><text x="77.8517%" y="1151.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.02%)</title><rect x="77.6730%" y="1029" width="0.0150%" height="15" fill="rgb(224,79,48)" fg:x="20682" fg:w="4"/><text x="77.9230%" y="1039.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.05%)</title><rect x="77.6430%" y="1125" width="0.0526%" height="15" fill="rgb(213,191,50)" fg:x="20674" fg:w="14"/><text x="77.8930%" y="1135.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.05%)</title><rect x="77.6430%" y="1109" width="0.0526%" height="15" fill="rgb(254,146,10)" fg:x="20674" fg:w="14"/><text x="77.8930%" y="1119.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="77.6430%" y="1093" width="0.0526%" height="15" fill="rgb(215,175,11)" fg:x="20674" fg:w="14"/><text x="77.8930%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="77.6430%" y="1077" width="0.0526%" height="15" fill="rgb(207,49,7)" fg:x="20674" fg:w="14"/><text x="77.8930%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="77.6430%" y="1061" width="0.0526%" height="15" fill="rgb(234,144,29)" fg:x="20674" fg:w="14"/><text x="77.8930%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (10 samples, 0.04%)</title><rect x="77.6580%" y="1045" width="0.0376%" height="15" fill="rgb(213,222,48)" fg:x="20678" fg:w="10"/><text x="77.9080%" y="1055.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="77.7632%" y="1077" width="0.0150%" height="15" fill="rgb(222,8,6)" fg:x="20706" fg:w="4"/><text x="78.0132%" y="1087.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.02%)</title><rect x="77.7632%" y="1061" width="0.0150%" height="15" fill="rgb(221,114,49)" fg:x="20706" fg:w="4"/><text x="78.0132%" y="1071.50"></text></g><g><title>hashbrown::raw::h2 (5 samples, 0.02%)</title><rect x="77.7857%" y="1077" width="0.0188%" height="15" fill="rgb(250,140,42)" fg:x="20712" fg:w="5"/><text x="78.0357%" y="1087.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.02%)</title><rect x="77.8045%" y="1077" width="0.0150%" height="15" fill="rgb(250,150,27)" fg:x="20717" fg:w="4"/><text x="78.0545%" y="1087.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.02%)</title><rect x="77.8045%" y="1061" width="0.0150%" height="15" fill="rgb(252,159,3)" fg:x="20717" fg:w="4"/><text x="78.0545%" y="1071.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (1,494 samples, 5.61%)</title><rect x="72.2124%" y="1189" width="5.6108%" height="15" fill="rgb(241,182,3)" fg:x="19228" fg:w="1494"/><text x="72.4624%" y="1199.50">graph_c..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (48 samples, 0.18%)</title><rect x="77.6430%" y="1173" width="0.1803%" height="15" fill="rgb(236,3,9)" fg:x="20674" fg:w="48"/><text x="77.8930%" y="1183.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (48 samples, 0.18%)</title><rect x="77.6430%" y="1157" width="0.1803%" height="15" fill="rgb(223,227,51)" fg:x="20674" fg:w="48"/><text x="77.8930%" y="1167.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (48 samples, 0.18%)</title><rect x="77.6430%" y="1141" width="0.1803%" height="15" fill="rgb(232,133,30)" fg:x="20674" fg:w="48"/><text x="77.8930%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (34 samples, 0.13%)</title><rect x="77.6956%" y="1125" width="0.1277%" height="15" fill="rgb(209,93,27)" fg:x="20688" fg:w="34"/><text x="77.9456%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (34 samples, 0.13%)</title><rect x="77.6956%" y="1109" width="0.1277%" height="15" fill="rgb(208,108,34)" fg:x="20688" fg:w="34"/><text x="77.9456%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (34 samples, 0.13%)</title><rect x="77.6956%" y="1093" width="0.1277%" height="15" fill="rgb(215,189,13)" fg:x="20688" fg:w="34"/><text x="77.9456%" y="1103.50"></text></g><g><title>graph_craft::proto::ProtoNode::map_ids (8 samples, 0.03%)</title><rect x="77.8308%" y="1173" width="0.0300%" height="15" fill="rgb(206,88,23)" fg:x="20724" fg:w="8"/><text x="78.0808%" y="1183.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.02%)</title><rect x="77.8383%" y="1157" width="0.0225%" height="15" fill="rgb(240,173,0)" fg:x="20726" fg:w="6"/><text x="78.0883%" y="1167.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.02%)</title><rect x="77.8383%" y="1141" width="0.0225%" height="15" fill="rgb(223,106,52)" fg:x="20726" fg:w="6"/><text x="78.0883%" y="1151.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.02%)</title><rect x="77.8383%" y="1125" width="0.0225%" height="15" fill="rgb(206,130,16)" fg:x="20726" fg:w="6"/><text x="78.0883%" y="1135.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (6 samples, 0.02%)</title><rect x="77.8383%" y="1109" width="0.0225%" height="15" fill="rgb(220,54,25)" fg:x="20726" fg:w="6"/><text x="78.0883%" y="1119.50"></text></g><g><title>graph_craft::proto::ProtoNode::map_ids::_{{closure}} (5 samples, 0.02%)</title><rect x="77.8420%" y="1093" width="0.0188%" height="15" fill="rgb(210,4,38)" fg:x="20727" fg:w="5"/><text x="78.0920%" y="1103.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (2,441 samples, 9.17%)</title><rect x="68.7122%" y="1237" width="9.1674%" height="15" fill="rgb(238,94,39)" fg:x="18296" fg:w="2441"/><text x="68.9622%" y="1247.50">core::iter::a..</text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (2,441 samples, 9.17%)</title><rect x="68.7122%" y="1221" width="9.1674%" height="15" fill="rgb(234,124,34)" fg:x="18296" fg:w="2441"/><text x="68.9622%" y="1231.50">graph_craft::..</text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (1,848 samples, 6.94%)</title><rect x="70.9393%" y="1205" width="6.9403%" height="15" fill="rgb(221,91,40)" fg:x="18889" fg:w="1848"/><text x="71.1893%" y="1215.50">graph_cra..</text></g><g><title>graph_craft::proto::ProtoNetwork::replace_node_id (15 samples, 0.06%)</title><rect x="77.8233%" y="1189" width="0.0563%" height="15" fill="rgb(246,53,28)" fg:x="20722" fg:w="15"/><text x="78.0733%" y="1199.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 0.02%)</title><rect x="77.8608%" y="1173" width="0.0188%" height="15" fill="rgb(229,109,7)" fg:x="20732" fg:w="5"/><text x="78.1108%" y="1183.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 0.02%)</title><rect x="77.8608%" y="1157" width="0.0188%" height="15" fill="rgb(249,117,8)" fg:x="20732" fg:w="5"/><text x="78.1108%" y="1167.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.02%)</title><rect x="77.8608%" y="1141" width="0.0188%" height="15" fill="rgb(210,181,1)" fg:x="20732" fg:w="5"/><text x="78.1108%" y="1151.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.02%)</title><rect x="77.8608%" y="1125" width="0.0188%" height="15" fill="rgb(211,66,1)" fg:x="20732" fg:w="5"/><text x="78.1108%" y="1135.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.02%)</title><rect x="77.8608%" y="1109" width="0.0188%" height="15" fill="rgb(221,90,14)" fg:x="20732" fg:w="5"/><text x="78.1108%" y="1119.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.02%)</title><rect x="77.8608%" y="1093" width="0.0188%" height="15" fill="rgb(219,222,44)" fg:x="20732" fg:w="5"/><text x="78.1108%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.02%)</title><rect x="77.8608%" y="1077" width="0.0188%" height="15" fill="rgb(246,34,33)" fg:x="20732" fg:w="5"/><text x="78.1108%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.02%)</title><rect x="77.8608%" y="1061" width="0.0188%" height="15" fill="rgb(227,135,41)" fg:x="20732" fg:w="5"/><text x="78.1108%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.01%)</title><rect x="77.8683%" y="1045" width="0.0113%" height="15" fill="rgb(226,15,14)" fg:x="20734" fg:w="3"/><text x="78.1183%" y="1055.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.01%)</title><rect x="77.8683%" y="1029" width="0.0113%" height="15" fill="rgb(236,148,47)" fg:x="20734" fg:w="3"/><text x="78.1183%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="77.9585%" y="1109" width="0.0150%" height="15" fill="rgb(233,162,52)" fg:x="20758" fg:w="4"/><text x="78.2085%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.02%)</title><rect x="77.9585%" y="1093" width="0.0150%" height="15" fill="rgb(244,35,28)" fg:x="20758" fg:w="4"/><text x="78.2085%" y="1103.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.02%)</title><rect x="77.9585%" y="1077" width="0.0150%" height="15" fill="rgb(205,121,10)" fg:x="20758" fg:w="4"/><text x="78.2085%" y="1087.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.02%)</title><rect x="77.9585%" y="1061" width="0.0150%" height="15" fill="rgb(250,58,18)" fg:x="20758" fg:w="4"/><text x="78.2085%" y="1071.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.02%)</title><rect x="77.9585%" y="1045" width="0.0150%" height="15" fill="rgb(216,37,13)" fg:x="20758" fg:w="4"/><text x="78.2085%" y="1055.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.02%)</title><rect x="77.9585%" y="1029" width="0.0150%" height="15" fill="rgb(221,215,42)" fg:x="20758" fg:w="4"/><text x="78.2085%" y="1039.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="77.9622%" y="1013" width="0.0113%" height="15" fill="rgb(217,214,19)" fg:x="20759" fg:w="3"/><text x="78.2122%" y="1023.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (6 samples, 0.02%)</title><rect x="78.0186%" y="1061" width="0.0225%" height="15" fill="rgb(233,139,13)" fg:x="20774" fg:w="6"/><text x="78.2686%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (6 samples, 0.02%)</title><rect x="78.0186%" y="1045" width="0.0225%" height="15" fill="rgb(247,168,23)" fg:x="20774" fg:w="6"/><text x="78.2686%" y="1055.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (3 samples, 0.01%)</title><rect x="78.0298%" y="1029" width="0.0113%" height="15" fill="rgb(207,202,1)" fg:x="20777" fg:w="3"/><text x="78.2798%" y="1039.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="78.0298%" y="1013" width="0.0113%" height="15" fill="rgb(220,155,48)" fg:x="20777" fg:w="3"/><text x="78.2798%" y="1023.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="78.0298%" y="997" width="0.0113%" height="15" fill="rgb(250,43,26)" fg:x="20777" fg:w="3"/><text x="78.2798%" y="1007.50"></text></g><g><title>&lt;graph_craft::document::OriginalLocation as core::clone::Clone&gt;::clone (37 samples, 0.14%)</title><rect x="77.9547%" y="1125" width="0.1390%" height="15" fill="rgb(212,190,23)" fg:x="20757" fg:w="37"/><text x="78.2047%" y="1135.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (32 samples, 0.12%)</title><rect x="77.9735%" y="1109" width="0.1202%" height="15" fill="rgb(216,39,24)" fg:x="20762" fg:w="32"/><text x="78.2235%" y="1119.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (23 samples, 0.09%)</title><rect x="78.0073%" y="1093" width="0.0864%" height="15" fill="rgb(252,113,16)" fg:x="20771" fg:w="23"/><text x="78.2573%" y="1103.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (23 samples, 0.09%)</title><rect x="78.0073%" y="1077" width="0.0864%" height="15" fill="rgb(208,113,19)" fg:x="20771" fg:w="23"/><text x="78.2573%" y="1087.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (14 samples, 0.05%)</title><rect x="78.0411%" y="1061" width="0.0526%" height="15" fill="rgb(234,107,25)" fg:x="20780" fg:w="14"/><text x="78.2911%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (14 samples, 0.05%)</title><rect x="78.0411%" y="1045" width="0.0526%" height="15" fill="rgb(234,217,51)" fg:x="20780" fg:w="14"/><text x="78.2911%" y="1055.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (14 samples, 0.05%)</title><rect x="78.0411%" y="1029" width="0.0526%" height="15" fill="rgb(251,29,42)" fg:x="20780" fg:w="14"/><text x="78.2911%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.05%)</title><rect x="78.0411%" y="1013" width="0.0526%" height="15" fill="rgb(221,62,51)" fg:x="20780" fg:w="14"/><text x="78.2911%" y="1023.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.05%)</title><rect x="78.0411%" y="997" width="0.0526%" height="15" fill="rgb(240,192,43)" fg:x="20780" fg:w="14"/><text x="78.2911%" y="1007.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.05%)</title><rect x="78.0411%" y="981" width="0.0526%" height="15" fill="rgb(224,157,47)" fg:x="20780" fg:w="14"/><text x="78.2911%" y="991.50"></text></g><g><title>__rdl_alloc (14 samples, 0.05%)</title><rect x="78.0411%" y="965" width="0.0526%" height="15" fill="rgb(226,84,45)" fg:x="20780" fg:w="14"/><text x="78.2911%" y="975.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14 samples, 0.05%)</title><rect x="78.0411%" y="949" width="0.0526%" height="15" fill="rgb(208,207,23)" fg:x="20780" fg:w="14"/><text x="78.2911%" y="959.50"></text></g><g><title>malloc (14 samples, 0.05%)</title><rect x="78.0411%" y="933" width="0.0526%" height="15" fill="rgb(253,34,51)" fg:x="20780" fg:w="14"/><text x="78.2911%" y="943.50"></text></g><g><title>_int_malloc (13 samples, 0.05%)</title><rect x="78.0448%" y="917" width="0.0488%" height="15" fill="rgb(227,26,34)" fg:x="20781" fg:w="13"/><text x="78.2948%" y="927.50"></text></g><g><title>unlink_chunk.isra.0 (6 samples, 0.02%)</title><rect x="78.0711%" y="901" width="0.0225%" height="15" fill="rgb(245,75,19)" fg:x="20788" fg:w="6"/><text x="78.3211%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.03%)</title><rect x="78.1012%" y="1045" width="0.0300%" height="15" fill="rgb(250,191,31)" fg:x="20796" fg:w="8"/><text x="78.3512%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.03%)</title><rect x="78.1012%" y="1029" width="0.0300%" height="15" fill="rgb(224,11,50)" fg:x="20796" fg:w="8"/><text x="78.3512%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (8 samples, 0.03%)</title><rect x="78.1012%" y="1013" width="0.0300%" height="15" fill="rgb(231,171,7)" fg:x="20796" fg:w="8"/><text x="78.3512%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.03%)</title><rect x="78.1012%" y="997" width="0.0300%" height="15" fill="rgb(252,214,10)" fg:x="20796" fg:w="8"/><text x="78.3512%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.03%)</title><rect x="78.1012%" y="981" width="0.0300%" height="15" fill="rgb(249,45,46)" fg:x="20796" fg:w="8"/><text x="78.3512%" y="991.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.03%)</title><rect x="78.1012%" y="965" width="0.0300%" height="15" fill="rgb(240,173,7)" fg:x="20796" fg:w="8"/><text x="78.3512%" y="975.50"></text></g><g><title>__rdl_alloc (8 samples, 0.03%)</title><rect x="78.1012%" y="949" width="0.0300%" height="15" fill="rgb(235,214,13)" fg:x="20796" fg:w="8"/><text x="78.3512%" y="959.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.03%)</title><rect x="78.1012%" y="933" width="0.0300%" height="15" fill="rgb(245,156,8)" fg:x="20796" fg:w="8"/><text x="78.3512%" y="943.50"></text></g><g><title>malloc (7 samples, 0.03%)</title><rect x="78.1049%" y="917" width="0.0263%" height="15" fill="rgb(235,46,12)" fg:x="20797" fg:w="7"/><text x="78.3549%" y="927.50"></text></g><g><title>_int_malloc (6 samples, 0.02%)</title><rect x="78.1087%" y="901" width="0.0225%" height="15" fill="rgb(221,81,14)" fg:x="20798" fg:w="6"/><text x="78.3587%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.05%)</title><rect x="78.1012%" y="1109" width="0.0451%" height="15" fill="rgb(238,207,9)" fg:x="20796" fg:w="12"/><text x="78.3512%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.05%)</title><rect x="78.1012%" y="1093" width="0.0451%" height="15" fill="rgb(224,129,35)" fg:x="20796" fg:w="12"/><text x="78.3512%" y="1103.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.05%)</title><rect x="78.1012%" y="1077" width="0.0451%" height="15" fill="rgb(243,218,34)" fg:x="20796" fg:w="12"/><text x="78.3512%" y="1087.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.05%)</title><rect x="78.1012%" y="1061" width="0.0451%" height="15" fill="rgb(220,166,13)" fg:x="20796" fg:w="12"/><text x="78.3512%" y="1071.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.02%)</title><rect x="78.1312%" y="1045" width="0.0150%" height="15" fill="rgb(227,167,49)" fg:x="20804" fg:w="4"/><text x="78.3812%" y="1055.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.02%)</title><rect x="78.1312%" y="1029" width="0.0150%" height="15" fill="rgb(234,142,12)" fg:x="20804" fg:w="4"/><text x="78.3812%" y="1039.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="78.1312%" y="1013" width="0.0150%" height="15" fill="rgb(207,100,48)" fg:x="20804" fg:w="4"/><text x="78.3812%" y="1023.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::VectorData as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="78.1538%" y="1077" width="0.0188%" height="15" fill="rgb(210,25,14)" fg:x="20810" fg:w="5"/><text x="78.4038%" y="1087.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::PointModification as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="78.1876%" y="1061" width="0.0300%" height="15" fill="rgb(246,116,27)" fg:x="20819" fg:w="8"/><text x="78.4376%" y="1071.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="78.1988%" y="1045" width="0.0188%" height="15" fill="rgb(214,193,42)" fg:x="20822" fg:w="5"/><text x="78.4488%" y="1055.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (3 samples, 0.01%)</title><rect x="78.2251%" y="997" width="0.0113%" height="15" fill="rgb(214,122,8)" fg:x="20829" fg:w="3"/><text x="78.4751%" y="1007.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (3 samples, 0.01%)</title><rect x="78.2251%" y="981" width="0.0113%" height="15" fill="rgb(244,173,18)" fg:x="20829" fg:w="3"/><text x="78.4751%" y="991.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="78.2251%" y="965" width="0.0113%" height="15" fill="rgb(232,68,19)" fg:x="20829" fg:w="3"/><text x="78.4751%" y="975.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::SegmentModification as core::clone::Clone&gt;::clone (12 samples, 0.05%)</title><rect x="78.2251%" y="1061" width="0.0451%" height="15" fill="rgb(236,224,1)" fg:x="20829" fg:w="12"/><text x="78.4751%" y="1071.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (12 samples, 0.05%)</title><rect x="78.2251%" y="1045" width="0.0451%" height="15" fill="rgb(240,11,8)" fg:x="20829" fg:w="12"/><text x="78.4751%" y="1055.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.05%)</title><rect x="78.2251%" y="1029" width="0.0451%" height="15" fill="rgb(244,159,20)" fg:x="20829" fg:w="12"/><text x="78.4751%" y="1039.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.05%)</title><rect x="78.2251%" y="1013" width="0.0451%" height="15" fill="rgb(240,223,54)" fg:x="20829" fg:w="12"/><text x="78.4751%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (9 samples, 0.03%)</title><rect x="78.2364%" y="997" width="0.0338%" height="15" fill="rgb(237,146,5)" fg:x="20832" fg:w="9"/><text x="78.4864%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (9 samples, 0.03%)</title><rect x="78.2364%" y="981" width="0.0338%" height="15" fill="rgb(218,221,32)" fg:x="20832" fg:w="9"/><text x="78.4864%" y="991.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (9 samples, 0.03%)</title><rect x="78.2364%" y="965" width="0.0338%" height="15" fill="rgb(244,96,26)" fg:x="20832" fg:w="9"/><text x="78.4864%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.03%)</title><rect x="78.2364%" y="949" width="0.0338%" height="15" fill="rgb(245,184,37)" fg:x="20832" fg:w="9"/><text x="78.4864%" y="959.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.03%)</title><rect x="78.2364%" y="933" width="0.0338%" height="15" fill="rgb(248,91,47)" fg:x="20832" fg:w="9"/><text x="78.4864%" y="943.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.03%)</title><rect x="78.2364%" y="917" width="0.0338%" height="15" fill="rgb(243,199,8)" fg:x="20832" fg:w="9"/><text x="78.4864%" y="927.50"></text></g><g><title>__rdl_alloc (9 samples, 0.03%)</title><rect x="78.2364%" y="901" width="0.0338%" height="15" fill="rgb(249,12,15)" fg:x="20832" fg:w="9"/><text x="78.4864%" y="911.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.03%)</title><rect x="78.2364%" y="885" width="0.0338%" height="15" fill="rgb(245,97,12)" fg:x="20832" fg:w="9"/><text x="78.4864%" y="895.50"></text></g><g><title>malloc (9 samples, 0.03%)</title><rect x="78.2364%" y="869" width="0.0338%" height="15" fill="rgb(244,61,1)" fg:x="20832" fg:w="9"/><text x="78.4864%" y="879.50"></text></g><g><title>_int_malloc (7 samples, 0.03%)</title><rect x="78.2439%" y="853" width="0.0263%" height="15" fill="rgb(222,194,10)" fg:x="20834" fg:w="7"/><text x="78.4939%" y="863.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::VectorModification as core::clone::Clone&gt;::clone (27 samples, 0.10%)</title><rect x="78.1725%" y="1077" width="0.1014%" height="15" fill="rgb(226,178,8)" fg:x="20815" fg:w="27"/><text x="78.4225%" y="1087.50"></text></g><g><title>&lt;graph_craft::proto::ConstructionArgs as core::clone::Clone&gt;::clone (50 samples, 0.19%)</title><rect x="78.0937%" y="1125" width="0.1878%" height="15" fill="rgb(241,32,34)" fg:x="20794" fg:w="50"/><text x="78.3437%" y="1135.50"></text></g><g><title>&lt;graphene_core::memo::MemoHash&lt;T&gt; as core::clone::Clone&gt;::clone (36 samples, 0.14%)</title><rect x="78.1462%" y="1109" width="0.1352%" height="15" fill="rgb(254,26,6)" fg:x="20808" fg:w="36"/><text x="78.3962%" y="1119.50"></text></g><g><title>&lt;graph_craft::document::value::TaggedValue as core::clone::Clone&gt;::clone (36 samples, 0.14%)</title><rect x="78.1462%" y="1093" width="0.1352%" height="15" fill="rgb(249,71,11)" fg:x="20808" fg:w="36"/><text x="78.3962%" y="1103.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="78.2965%" y="1093" width="0.0113%" height="15" fill="rgb(232,170,27)" fg:x="20848" fg:w="3"/><text x="78.5465%" y="1103.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (3 samples, 0.01%)</title><rect x="78.2965%" y="1077" width="0.0113%" height="15" fill="rgb(214,223,17)" fg:x="20848" fg:w="3"/><text x="78.5465%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (3 samples, 0.01%)</title><rect x="78.2965%" y="1061" width="0.0113%" height="15" fill="rgb(250,18,15)" fg:x="20848" fg:w="3"/><text x="78.5465%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.01%)</title><rect x="78.2965%" y="1045" width="0.0113%" height="15" fill="rgb(212,153,51)" fg:x="20848" fg:w="3"/><text x="78.5465%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.01%)</title><rect x="78.2965%" y="1029" width="0.0113%" height="15" fill="rgb(219,194,12)" fg:x="20848" fg:w="3"/><text x="78.5465%" y="1039.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.01%)</title><rect x="78.2965%" y="1013" width="0.0113%" height="15" fill="rgb(212,58,17)" fg:x="20848" fg:w="3"/><text x="78.5465%" y="1023.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="78.2965%" y="997" width="0.0113%" height="15" fill="rgb(254,5,10)" fg:x="20848" fg:w="3"/><text x="78.5465%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="78.3077%" y="965" width="0.0150%" height="15" fill="rgb(246,91,7)" fg:x="20851" fg:w="4"/><text x="78.5577%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="78.3077%" y="949" width="0.0150%" height="15" fill="rgb(218,108,49)" fg:x="20851" fg:w="4"/><text x="78.5577%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (4 samples, 0.02%)</title><rect x="78.3077%" y="933" width="0.0150%" height="15" fill="rgb(238,123,20)" fg:x="20851" fg:w="4"/><text x="78.5577%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.02%)</title><rect x="78.3077%" y="917" width="0.0150%" height="15" fill="rgb(231,69,23)" fg:x="20851" fg:w="4"/><text x="78.5577%" y="927.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.02%)</title><rect x="78.3077%" y="901" width="0.0150%" height="15" fill="rgb(230,209,3)" fg:x="20851" fg:w="4"/><text x="78.5577%" y="911.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.02%)</title><rect x="78.3077%" y="885" width="0.0150%" height="15" fill="rgb(231,19,0)" fg:x="20851" fg:w="4"/><text x="78.5577%" y="895.50"></text></g><g><title>__rdl_alloc (4 samples, 0.02%)</title><rect x="78.3077%" y="869" width="0.0150%" height="15" fill="rgb(226,192,25)" fg:x="20851" fg:w="4"/><text x="78.5577%" y="879.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.02%)</title><rect x="78.3077%" y="853" width="0.0150%" height="15" fill="rgb(223,175,53)" fg:x="20851" fg:w="4"/><text x="78.5577%" y="863.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="78.3077%" y="837" width="0.0150%" height="15" fill="rgb(248,35,51)" fg:x="20851" fg:w="4"/><text x="78.5577%" y="847.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="78.3077%" y="821" width="0.0150%" height="15" fill="rgb(230,37,26)" fg:x="20851" fg:w="4"/><text x="78.5577%" y="831.50"></text></g><g><title>&lt;graph_craft::proto::ProtoNodeInput as core::clone::Clone&gt;::clone (12 samples, 0.05%)</title><rect x="78.2814%" y="1125" width="0.0451%" height="15" fill="rgb(206,120,22)" fg:x="20844" fg:w="12"/><text x="78.5314%" y="1135.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="78.2965%" y="1109" width="0.0300%" height="15" fill="rgb(207,165,28)" fg:x="20848" fg:w="8"/><text x="78.5465%" y="1119.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="78.3077%" y="1093" width="0.0188%" height="15" fill="rgb(226,23,46)" fg:x="20851" fg:w="5"/><text x="78.5577%" y="1103.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="78.3077%" y="1077" width="0.0188%" height="15" fill="rgb(208,130,44)" fg:x="20851" fg:w="5"/><text x="78.5577%" y="1087.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (5 samples, 0.02%)</title><rect x="78.3077%" y="1061" width="0.0188%" height="15" fill="rgb(231,67,8)" fg:x="20851" fg:w="5"/><text x="78.5577%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (5 samples, 0.02%)</title><rect x="78.3077%" y="1045" width="0.0188%" height="15" fill="rgb(205,183,22)" fg:x="20851" fg:w="5"/><text x="78.5577%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.02%)</title><rect x="78.3077%" y="1029" width="0.0188%" height="15" fill="rgb(224,47,9)" fg:x="20851" fg:w="5"/><text x="78.5577%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.02%)</title><rect x="78.3077%" y="1013" width="0.0188%" height="15" fill="rgb(250,183,49)" fg:x="20851" fg:w="5"/><text x="78.5577%" y="1023.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.02%)</title><rect x="78.3077%" y="997" width="0.0188%" height="15" fill="rgb(220,151,39)" fg:x="20851" fg:w="5"/><text x="78.5577%" y="1007.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.02%)</title><rect x="78.3077%" y="981" width="0.0188%" height="15" fill="rgb(220,118,20)" fg:x="20851" fg:w="5"/><text x="78.5577%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.06%)</title><rect x="78.3303%" y="997" width="0.0601%" height="15" fill="rgb(231,65,51)" fg:x="20857" fg:w="16"/><text x="78.5803%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.06%)</title><rect x="78.3303%" y="981" width="0.0601%" height="15" fill="rgb(253,125,37)" fg:x="20857" fg:w="16"/><text x="78.5803%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (16 samples, 0.06%)</title><rect x="78.3303%" y="965" width="0.0601%" height="15" fill="rgb(232,102,6)" fg:x="20857" fg:w="16"/><text x="78.5803%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.06%)</title><rect x="78.3303%" y="949" width="0.0601%" height="15" fill="rgb(251,105,13)" fg:x="20857" fg:w="16"/><text x="78.5803%" y="959.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.06%)</title><rect x="78.3303%" y="933" width="0.0601%" height="15" fill="rgb(222,179,29)" fg:x="20857" fg:w="16"/><text x="78.5803%" y="943.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.06%)</title><rect x="78.3303%" y="917" width="0.0601%" height="15" fill="rgb(229,180,53)" fg:x="20857" fg:w="16"/><text x="78.5803%" y="927.50"></text></g><g><title>__rdl_alloc (16 samples, 0.06%)</title><rect x="78.3303%" y="901" width="0.0601%" height="15" fill="rgb(238,104,13)" fg:x="20857" fg:w="16"/><text x="78.5803%" y="911.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16 samples, 0.06%)</title><rect x="78.3303%" y="885" width="0.0601%" height="15" fill="rgb(210,130,5)" fg:x="20857" fg:w="16"/><text x="78.5803%" y="895.50"></text></g><g><title>malloc (16 samples, 0.06%)</title><rect x="78.3303%" y="869" width="0.0601%" height="15" fill="rgb(233,87,49)" fg:x="20857" fg:w="16"/><text x="78.5803%" y="879.50"></text></g><g><title>_int_malloc (8 samples, 0.03%)</title><rect x="78.3603%" y="853" width="0.0300%" height="15" fill="rgb(243,34,9)" fg:x="20865" fg:w="8"/><text x="78.6103%" y="863.50"></text></g><g><title>&lt;graphene_core::types::ProtoNodeIdentifier as core::clone::Clone&gt;::clone (19 samples, 0.07%)</title><rect x="78.3265%" y="1125" width="0.0714%" height="15" fill="rgb(235,225,10)" fg:x="20856" fg:w="19"/><text x="78.5765%" y="1135.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (19 samples, 0.07%)</title><rect x="78.3265%" y="1109" width="0.0714%" height="15" fill="rgb(212,0,30)" fg:x="20856" fg:w="19"/><text x="78.5765%" y="1119.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (18 samples, 0.07%)</title><rect x="78.3303%" y="1093" width="0.0676%" height="15" fill="rgb(211,177,0)" fg:x="20857" fg:w="18"/><text x="78.5803%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (18 samples, 0.07%)</title><rect x="78.3303%" y="1077" width="0.0676%" height="15" fill="rgb(225,220,11)" fg:x="20857" fg:w="18"/><text x="78.5803%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (18 samples, 0.07%)</title><rect x="78.3303%" y="1061" width="0.0676%" height="15" fill="rgb(215,10,13)" fg:x="20857" fg:w="18"/><text x="78.5803%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18 samples, 0.07%)</title><rect x="78.3303%" y="1045" width="0.0676%" height="15" fill="rgb(240,177,14)" fg:x="20857" fg:w="18"/><text x="78.5803%" y="1055.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.07%)</title><rect x="78.3303%" y="1029" width="0.0676%" height="15" fill="rgb(243,7,39)" fg:x="20857" fg:w="18"/><text x="78.5803%" y="1039.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18 samples, 0.07%)</title><rect x="78.3303%" y="1013" width="0.0676%" height="15" fill="rgb(212,99,0)" fg:x="20857" fg:w="18"/><text x="78.5803%" y="1023.50"></text></g><g><title>core::clone::Clone::clone (144 samples, 0.54%)</title><rect x="77.8834%" y="1157" width="0.5408%" height="15" fill="rgb(225,162,48)" fg:x="20738" fg:w="144"/><text x="78.1334%" y="1167.50"></text></g><g><title>&lt;graph_craft::proto::ProtoNode as core::clone::Clone&gt;::clone (144 samples, 0.54%)</title><rect x="77.8834%" y="1141" width="0.5408%" height="15" fill="rgb(246,16,25)" fg:x="20738" fg:w="144"/><text x="78.1334%" y="1151.50"></text></g><g><title>__memmove_avx512_unaligned_erms (7 samples, 0.03%)</title><rect x="78.3979%" y="1125" width="0.0263%" height="15" fill="rgb(220,150,2)" fg:x="20875" fg:w="7"/><text x="78.6479%" y="1135.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,723 samples, 10.23%)</title><rect x="68.2578%" y="1477" width="10.2265%" height="15" fill="rgb(237,113,11)" fg:x="18175" fg:w="2723"/><text x="68.5078%" y="1487.50">core::iter::tra..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (2,707 samples, 10.17%)</title><rect x="68.3179%" y="1461" width="10.1664%" height="15" fill="rgb(236,70,20)" fg:x="18191" fg:w="2707"/><text x="68.5679%" y="1471.50">&lt;core::result::..</text></g><g><title>core::iter::adapters::try_process (2,707 samples, 10.17%)</title><rect x="68.3179%" y="1445" width="10.1664%" height="15" fill="rgb(234,94,7)" fg:x="18191" fg:w="2707"/><text x="68.5679%" y="1455.50">core::iter::ada..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (2,707 samples, 10.17%)</title><rect x="68.3179%" y="1429" width="10.1664%" height="15" fill="rgb(250,221,0)" fg:x="18191" fg:w="2707"/><text x="68.5679%" y="1439.50">&lt;core::result::..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,707 samples, 10.17%)</title><rect x="68.3179%" y="1413" width="10.1664%" height="15" fill="rgb(245,149,46)" fg:x="18191" fg:w="2707"/><text x="68.5679%" y="1423.50">core::iter::tra..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,707 samples, 10.17%)</title><rect x="68.3179%" y="1397" width="10.1664%" height="15" fill="rgb(215,37,27)" fg:x="18191" fg:w="2707"/><text x="68.5679%" y="1407.50">&lt;alloc::vec::Ve..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2,707 samples, 10.17%)</title><rect x="68.3179%" y="1381" width="10.1664%" height="15" fill="rgb(232,65,3)" fg:x="18191" fg:w="2707"/><text x="68.5679%" y="1391.50">alloc::vec::in_..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,707 samples, 10.17%)</title><rect x="68.3179%" y="1365" width="10.1664%" height="15" fill="rgb(214,2,16)" fg:x="18191" fg:w="2707"/><text x="68.5679%" y="1375.50">&lt;alloc::vec::Ve..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,602 samples, 9.77%)</title><rect x="68.7122%" y="1349" width="9.7720%" height="15" fill="rgb(227,131,50)" fg:x="18296" fg:w="2602"/><text x="68.9622%" y="1359.50">&lt;core::iter::a..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (2,602 samples, 9.77%)</title><rect x="68.7122%" y="1333" width="9.7720%" height="15" fill="rgb(247,131,45)" fg:x="18296" fg:w="2602"/><text x="68.9622%" y="1343.50">core::iter::tr..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,602 samples, 9.77%)</title><rect x="68.7122%" y="1317" width="9.7720%" height="15" fill="rgb(215,97,47)" fg:x="18296" fg:w="2602"/><text x="68.9622%" y="1327.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,602 samples, 9.77%)</title><rect x="68.7122%" y="1301" width="9.7720%" height="15" fill="rgb(233,143,12)" fg:x="18296" fg:w="2602"/><text x="68.9622%" y="1311.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,602 samples, 9.77%)</title><rect x="68.7122%" y="1285" width="9.7720%" height="15" fill="rgb(222,57,17)" fg:x="18296" fg:w="2602"/><text x="68.9622%" y="1295.50">&lt;core::iter::a..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,602 samples, 9.77%)</title><rect x="68.7122%" y="1269" width="9.7720%" height="15" fill="rgb(214,119,38)" fg:x="18296" fg:w="2602"/><text x="68.9622%" y="1279.50">&lt;alloc::vec::i..</text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (2,602 samples, 9.77%)</title><rect x="68.7122%" y="1253" width="9.7720%" height="15" fill="rgb(217,28,47)" fg:x="18296" fg:w="2602"/><text x="68.9622%" y="1263.50">core::iter::ad..</text></g><g><title>graph_craft::document::NodeNetwork::into_proto_networks::_{{closure}} (161 samples, 0.60%)</title><rect x="77.8796%" y="1237" width="0.6046%" height="15" fill="rgb(231,14,52)" fg:x="20737" fg:w="161"/><text x="78.1296%" y="1247.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (161 samples, 0.60%)</title><rect x="77.8796%" y="1221" width="0.6046%" height="15" fill="rgb(220,158,18)" fg:x="20737" fg:w="161"/><text x="78.1296%" y="1231.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (161 samples, 0.60%)</title><rect x="77.8796%" y="1205" width="0.6046%" height="15" fill="rgb(222,143,46)" fg:x="20737" fg:w="161"/><text x="78.1296%" y="1215.50"></text></g><g><title>alloc::slice::hack::to_vec (161 samples, 0.60%)</title><rect x="77.8796%" y="1189" width="0.6046%" height="15" fill="rgb(227,165,5)" fg:x="20737" fg:w="161"/><text x="78.1296%" y="1199.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (161 samples, 0.60%)</title><rect x="77.8796%" y="1173" width="0.6046%" height="15" fill="rgb(216,222,49)" fg:x="20737" fg:w="161"/><text x="78.1296%" y="1183.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (16 samples, 0.06%)</title><rect x="78.4242%" y="1157" width="0.0601%" height="15" fill="rgb(238,73,39)" fg:x="20882" fg:w="16"/><text x="78.6742%" y="1167.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="78.5293%" y="1445" width="0.0338%" height="15" fill="rgb(252,115,9)" fg:x="20910" fg:w="9"/><text x="78.7793%" y="1455.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.03%)</title><rect x="78.5293%" y="1429" width="0.0338%" height="15" fill="rgb(238,202,4)" fg:x="20910" fg:w="9"/><text x="78.7793%" y="1439.50"></text></g><g><title>__memmove_avx512_unaligned_erms (9 samples, 0.03%)</title><rect x="78.5293%" y="1413" width="0.0338%" height="15" fill="rgb(252,153,44)" fg:x="20910" fg:w="9"/><text x="78.7793%" y="1423.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="78.6720%" y="1333" width="0.0300%" height="15" fill="rgb(235,128,27)" fg:x="20948" fg:w="8"/><text x="78.9220%" y="1343.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (6 samples, 0.02%)</title><rect x="78.6795%" y="1317" width="0.0225%" height="15" fill="rgb(221,121,47)" fg:x="20950" fg:w="6"/><text x="78.9295%" y="1327.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (6 samples, 0.02%)</title><rect x="78.6795%" y="1301" width="0.0225%" height="15" fill="rgb(247,211,47)" fg:x="20950" fg:w="6"/><text x="78.9295%" y="1311.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.02%)</title><rect x="78.6795%" y="1285" width="0.0225%" height="15" fill="rgb(252,47,49)" fg:x="20950" fg:w="6"/><text x="78.9295%" y="1295.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.02%)</title><rect x="78.6795%" y="1269" width="0.0225%" height="15" fill="rgb(219,119,53)" fg:x="20950" fg:w="6"/><text x="78.9295%" y="1279.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.02%)</title><rect x="78.6795%" y="1253" width="0.0225%" height="15" fill="rgb(243,165,53)" fg:x="20950" fg:w="6"/><text x="78.9295%" y="1263.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.02%)</title><rect x="78.6795%" y="1237" width="0.0225%" height="15" fill="rgb(230,12,35)" fg:x="20950" fg:w="6"/><text x="78.9295%" y="1247.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.02%)</title><rect x="78.6833%" y="1221" width="0.0188%" height="15" fill="rgb(239,57,49)" fg:x="20951" fg:w="5"/><text x="78.9333%" y="1231.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.02%)</title><rect x="78.6833%" y="1205" width="0.0188%" height="15" fill="rgb(231,154,7)" fg:x="20951" fg:w="5"/><text x="78.9333%" y="1215.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="78.6833%" y="1189" width="0.0188%" height="15" fill="rgb(248,81,34)" fg:x="20951" fg:w="5"/><text x="78.9333%" y="1199.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.03%)</title><rect x="78.7133%" y="1205" width="0.0263%" height="15" fill="rgb(247,9,5)" fg:x="20959" fg:w="7"/><text x="78.9633%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.03%)</title><rect x="78.7133%" y="1189" width="0.0263%" height="15" fill="rgb(228,172,27)" fg:x="20959" fg:w="7"/><text x="78.9633%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (7 samples, 0.03%)</title><rect x="78.7133%" y="1173" width="0.0263%" height="15" fill="rgb(230,57,44)" fg:x="20959" fg:w="7"/><text x="78.9633%" y="1183.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.02%)</title><rect x="78.7171%" y="1157" width="0.0225%" height="15" fill="rgb(249,35,22)" fg:x="20960" fg:w="6"/><text x="78.9671%" y="1167.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.02%)</title><rect x="78.7171%" y="1141" width="0.0225%" height="15" fill="rgb(250,137,27)" fg:x="20960" fg:w="6"/><text x="78.9671%" y="1151.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.02%)</title><rect x="78.7171%" y="1125" width="0.0225%" height="15" fill="rgb(251,57,31)" fg:x="20960" fg:w="6"/><text x="78.9671%" y="1135.50"></text></g><g><title>__rdl_alloc (6 samples, 0.02%)</title><rect x="78.7171%" y="1109" width="0.0225%" height="15" fill="rgb(238,60,0)" fg:x="20960" fg:w="6"/><text x="78.9671%" y="1119.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.02%)</title><rect x="78.7171%" y="1093" width="0.0225%" height="15" fill="rgb(242,185,39)" fg:x="20960" fg:w="6"/><text x="78.9671%" y="1103.50"></text></g><g><title>malloc (6 samples, 0.02%)</title><rect x="78.7171%" y="1077" width="0.0225%" height="15" fill="rgb(240,63,43)" fg:x="20960" fg:w="6"/><text x="78.9671%" y="1087.50"></text></g><g><title>&lt;graph_craft::document::NodeInput as core::clone::Clone&gt;::clone (43 samples, 0.16%)</title><rect x="78.6007%" y="1365" width="0.1615%" height="15" fill="rgb(236,155,6)" fg:x="20929" fg:w="43"/><text x="78.8507%" y="1375.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (27 samples, 0.10%)</title><rect x="78.6608%" y="1349" width="0.1014%" height="15" fill="rgb(215,11,29)" fg:x="20945" fg:w="27"/><text x="78.9108%" y="1359.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="78.7096%" y="1333" width="0.0526%" height="15" fill="rgb(228,180,48)" fg:x="20958" fg:w="14"/><text x="78.9596%" y="1343.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="78.7096%" y="1317" width="0.0526%" height="15" fill="rgb(241,102,12)" fg:x="20958" fg:w="14"/><text x="78.9596%" y="1327.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (13 samples, 0.05%)</title><rect x="78.7133%" y="1301" width="0.0488%" height="15" fill="rgb(246,213,4)" fg:x="20959" fg:w="13"/><text x="78.9633%" y="1311.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (13 samples, 0.05%)</title><rect x="78.7133%" y="1285" width="0.0488%" height="15" fill="rgb(218,134,35)" fg:x="20959" fg:w="13"/><text x="78.9633%" y="1295.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (13 samples, 0.05%)</title><rect x="78.7133%" y="1269" width="0.0488%" height="15" fill="rgb(251,117,35)" fg:x="20959" fg:w="13"/><text x="78.9633%" y="1279.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.05%)</title><rect x="78.7133%" y="1253" width="0.0488%" height="15" fill="rgb(206,156,45)" fg:x="20959" fg:w="13"/><text x="78.9633%" y="1263.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.05%)</title><rect x="78.7133%" y="1237" width="0.0488%" height="15" fill="rgb(218,52,27)" fg:x="20959" fg:w="13"/><text x="78.9633%" y="1247.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.05%)</title><rect x="78.7133%" y="1221" width="0.0488%" height="15" fill="rgb(238,83,36)" fg:x="20959" fg:w="13"/><text x="78.9633%" y="1231.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6 samples, 0.02%)</title><rect x="78.7396%" y="1205" width="0.0225%" height="15" fill="rgb(218,53,43)" fg:x="20966" fg:w="6"/><text x="78.9896%" y="1215.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.02%)</title><rect x="78.7396%" y="1189" width="0.0225%" height="15" fill="rgb(239,54,39)" fg:x="20966" fg:w="6"/><text x="78.9896%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (6 samples, 0.02%)</title><rect x="78.7396%" y="1173" width="0.0225%" height="15" fill="rgb(212,198,13)" fg:x="20966" fg:w="6"/><text x="78.9896%" y="1183.50"></text></g><g><title>malloc_consolidate (8 samples, 0.03%)</title><rect x="78.8147%" y="1205" width="0.0300%" height="15" fill="rgb(234,54,46)" fg:x="20986" fg:w="8"/><text x="79.0647%" y="1215.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (24 samples, 0.09%)</title><rect x="78.7622%" y="1365" width="0.0901%" height="15" fill="rgb(217,120,7)" fg:x="20972" fg:w="24"/><text x="79.0122%" y="1375.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (24 samples, 0.09%)</title><rect x="78.7622%" y="1349" width="0.0901%" height="15" fill="rgb(246,39,15)" fg:x="20972" fg:w="24"/><text x="79.0122%" y="1359.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (24 samples, 0.09%)</title><rect x="78.7622%" y="1333" width="0.0901%" height="15" fill="rgb(242,143,31)" fg:x="20972" fg:w="24"/><text x="79.0122%" y="1343.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.09%)</title><rect x="78.7622%" y="1317" width="0.0901%" height="15" fill="rgb(252,60,24)" fg:x="20972" fg:w="24"/><text x="79.0122%" y="1327.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.09%)</title><rect x="78.7622%" y="1301" width="0.0901%" height="15" fill="rgb(249,220,7)" fg:x="20972" fg:w="24"/><text x="79.0122%" y="1311.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.09%)</title><rect x="78.7622%" y="1285" width="0.0901%" height="15" fill="rgb(236,67,13)" fg:x="20972" fg:w="24"/><text x="79.0122%" y="1295.50"></text></g><g><title>__rdl_alloc (24 samples, 0.09%)</title><rect x="78.7622%" y="1269" width="0.0901%" height="15" fill="rgb(210,62,39)" fg:x="20972" fg:w="24"/><text x="79.0122%" y="1279.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (24 samples, 0.09%)</title><rect x="78.7622%" y="1253" width="0.0901%" height="15" fill="rgb(219,122,53)" fg:x="20972" fg:w="24"/><text x="79.0122%" y="1263.50"></text></g><g><title>malloc (24 samples, 0.09%)</title><rect x="78.7622%" y="1237" width="0.0901%" height="15" fill="rgb(218,87,25)" fg:x="20972" fg:w="24"/><text x="79.0122%" y="1247.50"></text></g><g><title>_int_malloc (23 samples, 0.09%)</title><rect x="78.7659%" y="1221" width="0.0864%" height="15" fill="rgb(234,179,48)" fg:x="20973" fg:w="23"/><text x="79.0159%" y="1231.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (96 samples, 0.36%)</title><rect x="78.6007%" y="1429" width="0.3605%" height="15" fill="rgb(248,90,0)" fg:x="20929" fg:w="96"/><text x="78.8507%" y="1439.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (96 samples, 0.36%)</title><rect x="78.6007%" y="1413" width="0.3605%" height="15" fill="rgb(207,228,37)" fg:x="20929" fg:w="96"/><text x="78.8507%" y="1423.50"></text></g><g><title>alloc::slice::hack::to_vec (96 samples, 0.36%)</title><rect x="78.6007%" y="1397" width="0.3605%" height="15" fill="rgb(235,214,15)" fg:x="20929" fg:w="96"/><text x="78.8507%" y="1407.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (96 samples, 0.36%)</title><rect x="78.6007%" y="1381" width="0.3605%" height="15" fill="rgb(210,144,39)" fg:x="20929" fg:w="96"/><text x="78.8507%" y="1391.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (29 samples, 0.11%)</title><rect x="78.8523%" y="1365" width="0.1089%" height="15" fill="rgb(222,67,41)" fg:x="20996" fg:w="29"/><text x="79.1023%" y="1375.50"></text></g><g><title>__memmove_avx512_unaligned_erms (15 samples, 0.06%)</title><rect x="78.9049%" y="1349" width="0.0563%" height="15" fill="rgb(205,35,37)" fg:x="21010" fg:w="15"/><text x="79.1549%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="78.9837%" y="1285" width="0.0113%" height="15" fill="rgb(216,125,40)" fg:x="21031" fg:w="3"/><text x="79.2337%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="78.9837%" y="1269" width="0.0113%" height="15" fill="rgb(228,227,20)" fg:x="21031" fg:w="3"/><text x="79.2337%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.01%)</title><rect x="78.9837%" y="1253" width="0.0113%" height="15" fill="rgb(242,173,45)" fg:x="21031" fg:w="3"/><text x="79.2337%" y="1263.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (7 samples, 0.03%)</title><rect x="78.9837%" y="1397" width="0.0263%" height="15" fill="rgb(215,79,24)" fg:x="21031" fg:w="7"/><text x="79.2337%" y="1407.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (7 samples, 0.03%)</title><rect x="78.9837%" y="1381" width="0.0263%" height="15" fill="rgb(238,164,38)" fg:x="21031" fg:w="7"/><text x="79.2337%" y="1391.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (7 samples, 0.03%)</title><rect x="78.9837%" y="1365" width="0.0263%" height="15" fill="rgb(245,196,38)" fg:x="21031" fg:w="7"/><text x="79.2337%" y="1375.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.03%)</title><rect x="78.9837%" y="1349" width="0.0263%" height="15" fill="rgb(231,217,29)" fg:x="21031" fg:w="7"/><text x="79.2337%" y="1359.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.03%)</title><rect x="78.9837%" y="1333" width="0.0263%" height="15" fill="rgb(245,6,4)" fg:x="21031" fg:w="7"/><text x="79.2337%" y="1343.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.03%)</title><rect x="78.9837%" y="1317" width="0.0263%" height="15" fill="rgb(214,76,49)" fg:x="21031" fg:w="7"/><text x="79.2337%" y="1327.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.03%)</title><rect x="78.9837%" y="1301" width="0.0263%" height="15" fill="rgb(205,96,12)" fg:x="21031" fg:w="7"/><text x="79.2337%" y="1311.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.02%)</title><rect x="78.9950%" y="1285" width="0.0150%" height="15" fill="rgb(243,131,4)" fg:x="21034" fg:w="4"/><text x="79.2450%" y="1295.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.02%)</title><rect x="78.9950%" y="1269" width="0.0150%" height="15" fill="rgb(214,114,4)" fg:x="21034" fg:w="4"/><text x="79.2450%" y="1279.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="78.9950%" y="1253" width="0.0150%" height="15" fill="rgb(234,215,15)" fg:x="21034" fg:w="4"/><text x="79.2450%" y="1263.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (15 samples, 0.06%)</title><rect x="78.9612%" y="1429" width="0.0563%" height="15" fill="rgb(250,216,45)" fg:x="21025" fg:w="15"/><text x="79.2112%" y="1439.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (11 samples, 0.04%)</title><rect x="78.9762%" y="1413" width="0.0413%" height="15" fill="rgb(236,128,4)" fg:x="21029" fg:w="11"/><text x="79.2262%" y="1423.50"></text></g><g><title>__rdl_alloc (4 samples, 0.02%)</title><rect x="79.0175%" y="1189" width="0.0150%" height="15" fill="rgb(234,50,33)" fg:x="21040" fg:w="4"/><text x="79.2675%" y="1199.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.02%)</title><rect x="79.0175%" y="1173" width="0.0150%" height="15" fill="rgb(253,131,37)" fg:x="21040" fg:w="4"/><text x="79.2675%" y="1183.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="79.0175%" y="1157" width="0.0150%" height="15" fill="rgb(218,55,27)" fg:x="21040" fg:w="4"/><text x="79.2675%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.02%)</title><rect x="79.0175%" y="1285" width="0.0188%" height="15" fill="rgb(241,220,28)" fg:x="21040" fg:w="5"/><text x="79.2675%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.02%)</title><rect x="79.0175%" y="1269" width="0.0188%" height="15" fill="rgb(241,90,48)" fg:x="21040" fg:w="5"/><text x="79.2675%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (5 samples, 0.02%)</title><rect x="79.0175%" y="1253" width="0.0188%" height="15" fill="rgb(216,43,37)" fg:x="21040" fg:w="5"/><text x="79.2675%" y="1263.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.02%)</title><rect x="79.0175%" y="1237" width="0.0188%" height="15" fill="rgb(207,173,9)" fg:x="21040" fg:w="5"/><text x="79.2675%" y="1247.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.02%)</title><rect x="79.0175%" y="1221" width="0.0188%" height="15" fill="rgb(240,126,30)" fg:x="21040" fg:w="5"/><text x="79.2675%" y="1231.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="79.0175%" y="1205" width="0.0188%" height="15" fill="rgb(228,178,53)" fg:x="21040" fg:w="5"/><text x="79.2675%" y="1215.50"></text></g><g><title>&lt;graph_craft::document::DocumentNodeImplementation as core::clone::Clone&gt;::clone (7 samples, 0.03%)</title><rect x="79.0175%" y="1429" width="0.0263%" height="15" fill="rgb(217,33,4)" fg:x="21040" fg:w="7"/><text x="79.2675%" y="1439.50"></text></g><g><title>&lt;graphene_core::types::ProtoNodeIdentifier as core::clone::Clone&gt;::clone (7 samples, 0.03%)</title><rect x="79.0175%" y="1413" width="0.0263%" height="15" fill="rgb(206,124,34)" fg:x="21040" fg:w="7"/><text x="79.2675%" y="1423.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (7 samples, 0.03%)</title><rect x="79.0175%" y="1397" width="0.0263%" height="15" fill="rgb(208,122,53)" fg:x="21040" fg:w="7"/><text x="79.2675%" y="1407.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (7 samples, 0.03%)</title><rect x="79.0175%" y="1381" width="0.0263%" height="15" fill="rgb(215,202,26)" fg:x="21040" fg:w="7"/><text x="79.2675%" y="1391.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (7 samples, 0.03%)</title><rect x="79.0175%" y="1365" width="0.0263%" height="15" fill="rgb(232,198,31)" fg:x="21040" fg:w="7"/><text x="79.2675%" y="1375.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.03%)</title><rect x="79.0175%" y="1349" width="0.0263%" height="15" fill="rgb(222,23,35)" fg:x="21040" fg:w="7"/><text x="79.2675%" y="1359.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.03%)</title><rect x="79.0175%" y="1333" width="0.0263%" height="15" fill="rgb(242,27,53)" fg:x="21040" fg:w="7"/><text x="79.2675%" y="1343.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.03%)</title><rect x="79.0175%" y="1317" width="0.0263%" height="15" fill="rgb(210,216,42)" fg:x="21040" fg:w="7"/><text x="79.2675%" y="1327.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.03%)</title><rect x="79.0175%" y="1301" width="0.0263%" height="15" fill="rgb(234,39,38)" fg:x="21040" fg:w="7"/><text x="79.2675%" y="1311.50"></text></g><g><title>&lt;graph_craft::document::DocumentNode as core::clone::Clone&gt;::clone (132 samples, 0.50%)</title><rect x="78.5631%" y="1445" width="0.4957%" height="15" fill="rgb(235,126,54)" fg:x="20919" fg:w="132"/><text x="78.8131%" y="1455.50"></text></g><g><title>&lt;graph_craft::document::OriginalLocation as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="79.0438%" y="1429" width="0.0150%" height="15" fill="rgb(235,150,33)" fg:x="21047" fg:w="4"/><text x="79.2938%" y="1439.50"></text></g><g><title>&lt;graph_craft::document::DocumentNode as core::default::Default&gt;::default (14 samples, 0.05%)</title><rect x="79.0589%" y="1445" width="0.0526%" height="15" fill="rgb(249,49,53)" fg:x="21051" fg:w="14"/><text x="79.3089%" y="1455.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="79.1340%" y="1397" width="0.0113%" height="15" fill="rgb(238,60,50)" fg:x="21071" fg:w="3"/><text x="79.3840%" y="1407.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.06%)</title><rect x="79.1114%" y="1445" width="0.0563%" height="15" fill="rgb(210,5,2)" fg:x="21065" fg:w="15"/><text x="79.3614%" y="1455.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.06%)</title><rect x="79.1114%" y="1429" width="0.0563%" height="15" fill="rgb(214,207,24)" fg:x="21065" fg:w="15"/><text x="79.3614%" y="1439.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.06%)</title><rect x="79.1114%" y="1413" width="0.0563%" height="15" fill="rgb(228,173,2)" fg:x="21065" fg:w="15"/><text x="79.3614%" y="1423.50"></text></g><g><title>__memmove_avx512_unaligned_erms (6 samples, 0.02%)</title><rect x="79.1452%" y="1397" width="0.0225%" height="15" fill="rgb(244,26,8)" fg:x="21074" fg:w="6"/><text x="79.3952%" y="1407.50"></text></g><g><title>__memmove_avx512_unaligned_erms (137 samples, 0.51%)</title><rect x="79.1678%" y="1445" width="0.5145%" height="15" fill="rgb(249,153,35)" fg:x="21080" fg:w="137"/><text x="79.4178%" y="1455.50"></text></g><g><title>alloc::alloc::exchange_malloc (22 samples, 0.08%)</title><rect x="79.6823%" y="1445" width="0.0826%" height="15" fill="rgb(221,215,40)" fg:x="21217" fg:w="22"/><text x="79.9323%" y="1455.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.08%)</title><rect x="79.6898%" y="1429" width="0.0751%" height="15" fill="rgb(238,106,35)" fg:x="21219" fg:w="20"/><text x="79.9398%" y="1439.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.08%)</title><rect x="79.6898%" y="1413" width="0.0751%" height="15" fill="rgb(207,195,21)" fg:x="21219" fg:w="20"/><text x="79.9398%" y="1423.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.08%)</title><rect x="79.6898%" y="1397" width="0.0751%" height="15" fill="rgb(205,43,29)" fg:x="21219" fg:w="20"/><text x="79.9398%" y="1407.50"></text></g><g><title>__rdl_alloc (20 samples, 0.08%)</title><rect x="79.6898%" y="1381" width="0.0751%" height="15" fill="rgb(236,35,21)" fg:x="21219" fg:w="20"/><text x="79.9398%" y="1391.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.08%)</title><rect x="79.6898%" y="1365" width="0.0751%" height="15" fill="rgb(244,74,8)" fg:x="21219" fg:w="20"/><text x="79.9398%" y="1375.50"></text></g><g><title>malloc (20 samples, 0.08%)</title><rect x="79.6898%" y="1349" width="0.0751%" height="15" fill="rgb(241,229,7)" fg:x="21219" fg:w="20"/><text x="79.9398%" y="1359.50"></text></g><g><title>_int_malloc (17 samples, 0.06%)</title><rect x="79.7011%" y="1333" width="0.0638%" height="15" fill="rgb(212,223,25)" fg:x="21222" fg:w="17"/><text x="79.9511%" y="1343.50"></text></g><g><title>core::ptr::read (21 samples, 0.08%)</title><rect x="79.7687%" y="1429" width="0.0789%" height="15" fill="rgb(234,58,53)" fg:x="21240" fg:w="21"/><text x="80.0187%" y="1439.50"></text></g><g><title>__memmove_avx512_unaligned_erms (21 samples, 0.08%)</title><rect x="79.7687%" y="1413" width="0.0789%" height="15" fill="rgb(244,36,1)" fg:x="21240" fg:w="21"/><text x="80.0187%" y="1423.50"></text></g><g><title>core::mem::replace (22 samples, 0.08%)</title><rect x="79.7687%" y="1445" width="0.0826%" height="15" fill="rgb(222,40,54)" fg:x="21240" fg:w="22"/><text x="80.0187%" y="1455.50"></text></g><g><title>core::ops::function::Fn::call (5 samples, 0.02%)</title><rect x="79.8513%" y="1445" width="0.0188%" height="15" fill="rgb(210,207,39)" fg:x="21262" fg:w="5"/><text x="80.1013%" y="1455.50"></text></g><g><title>graph_craft::document::merge_ids (5 samples, 0.02%)</title><rect x="79.8513%" y="1429" width="0.0188%" height="15" fill="rgb(234,52,14)" fg:x="21262" fg:w="5"/><text x="80.1013%" y="1439.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::hash::Hash&gt;::hash (5 samples, 0.02%)</title><rect x="79.8513%" y="1413" width="0.0188%" height="15" fill="rgb(239,108,46)" fg:x="21262" fg:w="5"/><text x="80.1013%" y="1423.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (5 samples, 0.02%)</title><rect x="79.8513%" y="1397" width="0.0188%" height="15" fill="rgb(252,223,5)" fg:x="21262" fg:w="5"/><text x="80.1013%" y="1407.50"></text></g><g><title>core::hash::Hasher::write_u64 (5 samples, 0.02%)</title><rect x="79.8513%" y="1381" width="0.0188%" height="15" fill="rgb(227,181,11)" fg:x="21262" fg:w="5"/><text x="80.1013%" y="1391.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="79.8513%" y="1365" width="0.0188%" height="15" fill="rgb(248,126,40)" fg:x="21262" fg:w="5"/><text x="80.1013%" y="1375.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="79.8513%" y="1349" width="0.0188%" height="15" fill="rgb(243,1,18)" fg:x="21262" fg:w="5"/><text x="80.1013%" y="1359.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="79.8513%" y="1333" width="0.0188%" height="15" fill="rgb(214,145,23)" fg:x="21262" fg:w="5"/><text x="80.1013%" y="1343.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.01%)</title><rect x="79.8588%" y="1317" width="0.0113%" height="15" fill="rgb(241,218,11)" fg:x="21264" fg:w="3"/><text x="80.1088%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::enumerate::Enumerate&lt;alloc::vec::into_iter::IntoIter&lt;graph_craft::document::NodeInput&gt;&gt;&gt; (7 samples, 0.03%)</title><rect x="79.8851%" y="1445" width="0.0263%" height="15" fill="rgb(214,219,24)" fg:x="21271" fg:w="7"/><text x="80.1351%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;graph_craft::document::NodeInput&gt;&gt; (7 samples, 0.03%)</title><rect x="79.8851%" y="1429" width="0.0263%" height="15" fill="rgb(235,32,7)" fg:x="21271" fg:w="7"/><text x="80.1351%" y="1439.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.03%)</title><rect x="79.8851%" y="1413" width="0.0263%" height="15" fill="rgb(227,121,28)" fg:x="21271" fg:w="7"/><text x="80.1351%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;graph_craft::document::NodeInput,alloc::alloc::Global&gt;&gt; (7 samples, 0.03%)</title><rect x="79.8851%" y="1397" width="0.0263%" height="15" fill="rgb(216,129,49)" fg:x="21271" fg:w="7"/><text x="80.1351%" y="1407.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.03%)</title><rect x="79.8851%" y="1381" width="0.0263%" height="15" fill="rgb(207,194,50)" fg:x="21271" fg:w="7"/><text x="80.1351%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeInput&gt;&gt; (7 samples, 0.03%)</title><rect x="79.8851%" y="1365" width="0.0263%" height="15" fill="rgb(207,4,18)" fg:x="21271" fg:w="7"/><text x="80.1351%" y="1375.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.03%)</title><rect x="79.8851%" y="1349" width="0.0263%" height="15" fill="rgb(213,50,30)" fg:x="21271" fg:w="7"/><text x="80.1351%" y="1359.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.03%)</title><rect x="79.8851%" y="1333" width="0.0263%" height="15" fill="rgb(208,77,22)" fg:x="21271" fg:w="7"/><text x="80.1351%" y="1343.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.03%)</title><rect x="79.8851%" y="1317" width="0.0263%" height="15" fill="rgb(244,204,34)" fg:x="21271" fg:w="7"/><text x="80.1351%" y="1327.50"></text></g><g><title>__rdl_dealloc (7 samples, 0.03%)</title><rect x="79.8851%" y="1301" width="0.0263%" height="15" fill="rgb(230,20,17)" fg:x="21271" fg:w="7"/><text x="80.1351%" y="1311.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7 samples, 0.03%)</title><rect x="79.8851%" y="1285" width="0.0263%" height="15" fill="rgb(237,83,15)" fg:x="21271" fg:w="7"/><text x="80.1351%" y="1295.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7 samples, 0.03%)</title><rect x="79.8851%" y="1269" width="0.0263%" height="15" fill="rgb(221,109,25)" fg:x="21271" fg:w="7"/><text x="80.1351%" y="1279.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.02%)</title><rect x="79.9301%" y="1381" width="0.0150%" height="15" fill="rgb(205,194,52)" fg:x="21283" fg:w="4"/><text x="80.1801%" y="1391.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="79.9339%" y="1365" width="0.0113%" height="15" fill="rgb(244,173,54)" fg:x="21284" fg:w="3"/><text x="80.1839%" y="1375.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.04%)</title><rect x="79.9189%" y="1413" width="0.0376%" height="15" fill="rgb(227,181,18)" fg:x="21280" fg:w="10"/><text x="80.1689%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;[graph_craft::document::NodeInput]&gt; (9 samples, 0.03%)</title><rect x="79.9226%" y="1397" width="0.0338%" height="15" fill="rgb(238,36,30)" fg:x="21281" fg:w="9"/><text x="80.1726%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeInput&gt;&gt; (14 samples, 0.05%)</title><rect x="79.9189%" y="1429" width="0.0526%" height="15" fill="rgb(254,85,0)" fg:x="21280" fg:w="14"/><text x="80.1689%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeInput&gt;&gt; (4 samples, 0.02%)</title><rect x="79.9564%" y="1413" width="0.0150%" height="15" fill="rgb(247,63,33)" fg:x="21290" fg:w="4"/><text x="80.2064%" y="1423.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="79.9564%" y="1397" width="0.0150%" height="15" fill="rgb(220,7,54)" fg:x="21290" fg:w="4"/><text x="80.2064%" y="1407.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.02%)</title><rect x="79.9564%" y="1381" width="0.0150%" height="15" fill="rgb(238,227,21)" fg:x="21290" fg:w="4"/><text x="80.2064%" y="1391.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.02%)</title><rect x="79.9564%" y="1365" width="0.0150%" height="15" fill="rgb(237,29,31)" fg:x="21290" fg:w="4"/><text x="80.2064%" y="1375.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.02%)</title><rect x="79.9564%" y="1349" width="0.0150%" height="15" fill="rgb(211,21,50)" fg:x="21290" fg:w="4"/><text x="80.2064%" y="1359.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.02%)</title><rect x="79.9564%" y="1333" width="0.0150%" height="15" fill="rgb(239,119,2)" fg:x="21290" fg:w="4"/><text x="80.2064%" y="1343.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.02%)</title><rect x="79.9564%" y="1317" width="0.0150%" height="15" fill="rgb(250,2,39)" fg:x="21290" fg:w="4"/><text x="80.2064%" y="1327.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.01%)</title><rect x="79.9752%" y="1413" width="0.0113%" height="15" fill="rgb(244,46,53)" fg:x="21295" fg:w="3"/><text x="80.2252%" y="1423.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="79.9752%" y="1397" width="0.0113%" height="15" fill="rgb(209,21,19)" fg:x="21295" fg:w="3"/><text x="80.2252%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;graphene_core::types::Type&gt;&gt; (6 samples, 0.02%)</title><rect x="79.9715%" y="1429" width="0.0225%" height="15" fill="rgb(236,145,4)" fg:x="21294" fg:w="6"/><text x="80.2215%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::DocumentNode&gt; (24 samples, 0.09%)</title><rect x="79.9151%" y="1445" width="0.0901%" height="15" fill="rgb(220,133,36)" fg:x="21279" fg:w="24"/><text x="80.1651%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::DocumentNodeImplementation&gt; (3 samples, 0.01%)</title><rect x="79.9940%" y="1429" width="0.0113%" height="15" fill="rgb(244,18,3)" fg:x="21300" fg:w="3"/><text x="80.2440%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::ProtoNodeIdentifier&gt; (3 samples, 0.01%)</title><rect x="79.9940%" y="1413" width="0.0113%" height="15" fill="rgb(232,171,48)" fg:x="21300" fg:w="3"/><text x="80.2440%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (3 samples, 0.01%)</title><rect x="79.9940%" y="1397" width="0.0113%" height="15" fill="rgb(223,223,53)" fg:x="21300" fg:w="3"/><text x="80.2440%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.01%)</title><rect x="79.9940%" y="1381" width="0.0113%" height="15" fill="rgb(246,92,13)" fg:x="21300" fg:w="3"/><text x="80.2440%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.01%)</title><rect x="79.9940%" y="1365" width="0.0113%" height="15" fill="rgb(229,171,10)" fg:x="21300" fg:w="3"/><text x="80.2440%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.01%)</title><rect x="79.9940%" y="1349" width="0.0113%" height="15" fill="rgb(213,131,26)" fg:x="21300" fg:w="3"/><text x="80.2440%" y="1359.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="79.9940%" y="1333" width="0.0113%" height="15" fill="rgb(242,87,54)" fg:x="21300" fg:w="3"/><text x="80.2440%" y="1343.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="79.9940%" y="1317" width="0.0113%" height="15" fill="rgb(237,21,35)" fg:x="21300" fg:w="3"/><text x="80.2440%" y="1327.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="79.9940%" y="1301" width="0.0113%" height="15" fill="rgb(253,13,47)" fg:x="21300" fg:w="3"/><text x="80.2440%" y="1311.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.01%)</title><rect x="79.9940%" y="1285" width="0.0113%" height="15" fill="rgb(215,122,49)" fg:x="21300" fg:w="3"/><text x="80.2440%" y="1295.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.01%)</title><rect x="79.9940%" y="1269" width="0.0113%" height="15" fill="rgb(209,179,30)" fg:x="21300" fg:w="3"/><text x="80.2440%" y="1279.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.01%)</title><rect x="79.9940%" y="1253" width="0.0113%" height="15" fill="rgb(235,100,24)" fg:x="21300" fg:w="3"/><text x="80.2440%" y="1263.50"></text></g><g><title>__memmove_avx512_unaligned_erms (10 samples, 0.04%)</title><rect x="80.0278%" y="1429" width="0.0376%" height="15" fill="rgb(209,67,24)" fg:x="21309" fg:w="10"/><text x="80.2778%" y="1439.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.02%)</title><rect x="80.0653%" y="1429" width="0.0150%" height="15" fill="rgb(206,74,32)" fg:x="21319" fg:w="4"/><text x="80.3153%" y="1439.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="80.0691%" y="1413" width="0.0113%" height="15" fill="rgb(212,45,25)" fg:x="21320" fg:w="3"/><text x="80.3191%" y="1423.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="80.0916%" y="1333" width="0.0113%" height="15" fill="rgb(239,26,3)" fg:x="21326" fg:w="3"/><text x="80.3416%" y="1343.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.01%)</title><rect x="80.0916%" y="1317" width="0.0113%" height="15" fill="rgb(218,36,15)" fg:x="21326" fg:w="3"/><text x="80.3416%" y="1327.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.01%)</title><rect x="80.0916%" y="1301" width="0.0113%" height="15" fill="rgb(206,108,24)" fg:x="21326" fg:w="3"/><text x="80.3416%" y="1311.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.01%)</title><rect x="80.0916%" y="1285" width="0.0113%" height="15" fill="rgb(234,204,42)" fg:x="21326" fg:w="3"/><text x="80.3416%" y="1295.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="80.0916%" y="1269" width="0.0113%" height="15" fill="rgb(229,2,11)" fg:x="21326" fg:w="3"/><text x="80.3416%" y="1279.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="80.0916%" y="1253" width="0.0113%" height="15" fill="rgb(221,20,48)" fg:x="21326" fg:w="3"/><text x="80.3416%" y="1263.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="80.0916%" y="1237" width="0.0113%" height="15" fill="rgb(244,164,10)" fg:x="21326" fg:w="3"/><text x="80.3416%" y="1247.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.03%)</title><rect x="80.0841%" y="1397" width="0.0300%" height="15" fill="rgb(243,229,2)" fg:x="21324" fg:w="8"/><text x="80.3341%" y="1407.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.03%)</title><rect x="80.0841%" y="1381" width="0.0300%" height="15" fill="rgb(232,131,37)" fg:x="21324" fg:w="8"/><text x="80.3341%" y="1391.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.02%)</title><rect x="80.0916%" y="1365" width="0.0225%" height="15" fill="rgb(217,156,11)" fg:x="21326" fg:w="6"/><text x="80.3416%" y="1375.50"></text></g><g><title>&lt;graph_craft::document::Source as core::hash::Hash&gt;::hash (6 samples, 0.02%)</title><rect x="80.0916%" y="1349" width="0.0225%" height="15" fill="rgb(239,99,48)" fg:x="21326" fg:w="6"/><text x="80.3416%" y="1359.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (3 samples, 0.01%)</title><rect x="80.1029%" y="1333" width="0.0113%" height="15" fill="rgb(231,209,9)" fg:x="21329" fg:w="3"/><text x="80.3529%" y="1343.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.01%)</title><rect x="80.1029%" y="1317" width="0.0113%" height="15" fill="rgb(254,97,27)" fg:x="21329" fg:w="3"/><text x="80.3529%" y="1327.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="80.1029%" y="1301" width="0.0113%" height="15" fill="rgb(223,151,38)" fg:x="21329" fg:w="3"/><text x="80.3529%" y="1311.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="80.1029%" y="1285" width="0.0113%" height="15" fill="rgb(219,206,35)" fg:x="21329" fg:w="3"/><text x="80.3529%" y="1295.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="80.1029%" y="1269" width="0.0113%" height="15" fill="rgb(216,130,31)" fg:x="21329" fg:w="3"/><text x="80.3529%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (9 samples, 0.03%)</title><rect x="80.1142%" y="1381" width="0.0338%" height="15" fill="rgb(251,97,34)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1391.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.03%)</title><rect x="80.1142%" y="1365" width="0.0338%" height="15" fill="rgb(246,159,47)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1375.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (9 samples, 0.03%)</title><rect x="80.1142%" y="1349" width="0.0338%" height="15" fill="rgb(232,87,10)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1359.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (9 samples, 0.03%)</title><rect x="80.1142%" y="1333" width="0.0338%" height="15" fill="rgb(249,1,37)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1343.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (9 samples, 0.03%)</title><rect x="80.1142%" y="1317" width="0.0338%" height="15" fill="rgb(239,135,14)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1327.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (9 samples, 0.03%)</title><rect x="80.1142%" y="1301" width="0.0338%" height="15" fill="rgb(253,116,46)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1311.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (9 samples, 0.03%)</title><rect x="80.1142%" y="1285" width="0.0338%" height="15" fill="rgb(222,217,37)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1295.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (9 samples, 0.03%)</title><rect x="80.1142%" y="1269" width="0.0338%" height="15" fill="rgb(252,96,8)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.03%)</title><rect x="80.1142%" y="1253" width="0.0338%" height="15" fill="rgb(254,103,41)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1263.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.03%)</title><rect x="80.1142%" y="1237" width="0.0338%" height="15" fill="rgb(218,213,19)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1247.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.03%)</title><rect x="80.1142%" y="1221" width="0.0338%" height="15" fill="rgb(253,95,21)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1231.50"></text></g><g><title>__rdl_alloc (9 samples, 0.03%)</title><rect x="80.1142%" y="1205" width="0.0338%" height="15" fill="rgb(229,26,28)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1215.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.03%)</title><rect x="80.1142%" y="1189" width="0.0338%" height="15" fill="rgb(230,129,16)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1199.50"></text></g><g><title>malloc (9 samples, 0.03%)</title><rect x="80.1142%" y="1173" width="0.0338%" height="15" fill="rgb(236,126,17)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1183.50"></text></g><g><title>_int_malloc (9 samples, 0.03%)</title><rect x="80.1142%" y="1157" width="0.0338%" height="15" fill="rgb(209,33,33)" fg:x="21332" fg:w="9"/><text x="80.3642%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (13 samples, 0.05%)</title><rect x="80.1142%" y="1397" width="0.0488%" height="15" fill="rgb(227,85,29)" fg:x="21332" fg:w="13"/><text x="80.3642%" y="1407.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (4 samples, 0.02%)</title><rect x="80.1480%" y="1381" width="0.0150%" height="15" fill="rgb(241,53,46)" fg:x="21341" fg:w="4"/><text x="80.3980%" y="1391.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.01%)</title><rect x="80.1517%" y="1365" width="0.0113%" height="15" fill="rgb(228,167,53)" fg:x="21342" fg:w="3"/><text x="80.4017%" y="1375.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.01%)</title><rect x="80.1517%" y="1349" width="0.0113%" height="15" fill="rgb(238,195,45)" fg:x="21342" fg:w="3"/><text x="80.4017%" y="1359.50"></text></g><g><title>graph_craft::document::DocumentNode::populate_first_network_input (39 samples, 0.15%)</title><rect x="80.0203%" y="1445" width="0.1465%" height="15" fill="rgb(252,124,45)" fg:x="21307" fg:w="39"/><text x="80.2703%" y="1455.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (23 samples, 0.09%)</title><rect x="80.0804%" y="1429" width="0.0864%" height="15" fill="rgb(251,38,35)" fg:x="21323" fg:w="23"/><text x="80.3304%" y="1439.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 0.09%)</title><rect x="80.0804%" y="1413" width="0.0864%" height="15" fill="rgb(227,33,2)" fg:x="21323" fg:w="23"/><text x="80.3304%" y="1423.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten::_{{closure}} (12 samples, 0.05%)</title><rect x="80.1667%" y="1445" width="0.0451%" height="15" fill="rgb(223,157,46)" fg:x="21346" fg:w="12"/><text x="80.4167%" y="1455.50"></text></g><g><title>graphene_core::uuid::uuid_generation::generate_uuid (12 samples, 0.05%)</title><rect x="80.1667%" y="1429" width="0.0451%" height="15" fill="rgb(222,78,41)" fg:x="21346" fg:w="12"/><text x="80.4167%" y="1439.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (10 samples, 0.04%)</title><rect x="80.1743%" y="1413" width="0.0376%" height="15" fill="rgb(248,176,11)" fg:x="21348" fg:w="10"/><text x="80.4243%" y="1423.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (10 samples, 0.04%)</title><rect x="80.1743%" y="1397" width="0.0376%" height="15" fill="rgb(241,221,18)" fg:x="21348" fg:w="10"/><text x="80.4243%" y="1407.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (10 samples, 0.04%)</title><rect x="80.1743%" y="1381" width="0.0376%" height="15" fill="rgb(218,85,22)" fg:x="21348" fg:w="10"/><text x="80.4243%" y="1391.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (10 samples, 0.04%)</title><rect x="80.1743%" y="1365" width="0.0376%" height="15" fill="rgb(222,223,7)" fg:x="21348" fg:w="10"/><text x="80.4243%" y="1375.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten_with_fns (4 samples, 0.02%)</title><rect x="80.2118%" y="1445" width="0.0150%" height="15" fill="rgb(254,59,39)" fg:x="21358" fg:w="4"/><text x="80.4618%" y="1455.50"></text></g><g><title>__memmove_avx512_unaligned_erms (133 samples, 0.50%)</title><rect x="80.2306%" y="1429" width="0.4995%" height="15" fill="rgb(247,100,27)" fg:x="21363" fg:w="133"/><text x="80.4806%" y="1439.50"></text></g><g><title>core::ptr::read (18 samples, 0.07%)</title><rect x="80.7301%" y="1413" width="0.0676%" height="15" fill="rgb(237,207,10)" fg:x="21496" fg:w="18"/><text x="80.9801%" y="1423.50"></text></g><g><title>__memmove_avx512_unaligned_erms (17 samples, 0.06%)</title><rect x="80.7338%" y="1397" width="0.0638%" height="15" fill="rgb(220,121,28)" fg:x="21497" fg:w="17"/><text x="80.9838%" y="1407.50"></text></g><g><title>core::mem::replace (19 samples, 0.07%)</title><rect x="80.7301%" y="1429" width="0.0714%" height="15" fill="rgb(213,223,20)" fg:x="21496" fg:w="19"/><text x="80.9801%" y="1439.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="80.8014%" y="1381" width="0.0113%" height="15" fill="rgb(205,121,27)" fg:x="21515" fg:w="3"/><text x="81.0514%" y="1391.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="80.8014%" y="1365" width="0.0113%" height="15" fill="rgb(253,24,53)" fg:x="21515" fg:w="3"/><text x="81.0514%" y="1375.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (6 samples, 0.02%)</title><rect x="80.8014%" y="1429" width="0.0225%" height="15" fill="rgb(224,224,47)" fg:x="21515" fg:w="6"/><text x="81.0514%" y="1439.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (6 samples, 0.02%)</title><rect x="80.8014%" y="1413" width="0.0225%" height="15" fill="rgb(250,125,36)" fg:x="21515" fg:w="6"/><text x="81.0514%" y="1423.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 0.02%)</title><rect x="80.8014%" y="1397" width="0.0225%" height="15" fill="rgb(240,144,38)" fg:x="21515" fg:w="6"/><text x="81.0514%" y="1407.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.01%)</title><rect x="80.8127%" y="1381" width="0.0113%" height="15" fill="rgb(250,15,50)" fg:x="21518" fg:w="3"/><text x="81.0627%" y="1391.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.01%)</title><rect x="80.8127%" y="1365" width="0.0113%" height="15" fill="rgb(210,24,26)" fg:x="21518" fg:w="3"/><text x="81.0627%" y="1375.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.01%)</title><rect x="80.8127%" y="1349" width="0.0113%" height="15" fill="rgb(234,53,53)" fg:x="21518" fg:w="3"/><text x="81.0627%" y="1359.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.02%)</title><rect x="80.8277%" y="1397" width="0.0150%" height="15" fill="rgb(208,108,28)" fg:x="21522" fg:w="4"/><text x="81.0777%" y="1407.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.02%)</title><rect x="80.8277%" y="1381" width="0.0150%" height="15" fill="rgb(227,143,7)" fg:x="21522" fg:w="4"/><text x="81.0777%" y="1391.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.02%)</title><rect x="80.8428%" y="1317" width="0.0225%" height="15" fill="rgb(238,189,38)" fg:x="21526" fg:w="6"/><text x="81.0928%" y="1327.50"></text></g><g><title>__memmove_avx512_unaligned_erms (6 samples, 0.02%)</title><rect x="80.8428%" y="1301" width="0.0225%" height="15" fill="rgb(222,69,15)" fg:x="21526" fg:w="6"/><text x="81.0928%" y="1311.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="80.8653%" y="1253" width="0.0150%" height="15" fill="rgb(213,169,7)" fg:x="21532" fg:w="4"/><text x="81.1153%" y="1263.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="80.8653%" y="1237" width="0.0150%" height="15" fill="rgb(251,219,4)" fg:x="21532" fg:w="4"/><text x="81.1153%" y="1247.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="80.8653%" y="1221" width="0.0150%" height="15" fill="rgb(241,55,40)" fg:x="21532" fg:w="4"/><text x="81.1153%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (5 samples, 0.02%)</title><rect x="80.8653%" y="1317" width="0.0188%" height="15" fill="rgb(243,57,30)" fg:x="21532" fg:w="5"/><text x="81.1153%" y="1327.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (5 samples, 0.02%)</title><rect x="80.8653%" y="1301" width="0.0188%" height="15" fill="rgb(234,50,30)" fg:x="21532" fg:w="5"/><text x="81.1153%" y="1311.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.02%)</title><rect x="80.8653%" y="1285" width="0.0188%" height="15" fill="rgb(239,23,42)" fg:x="21532" fg:w="5"/><text x="81.1153%" y="1295.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.02%)</title><rect x="80.8653%" y="1269" width="0.0188%" height="15" fill="rgb(217,38,19)" fg:x="21532" fg:w="5"/><text x="81.1153%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (13 samples, 0.05%)</title><rect x="80.8428%" y="1381" width="0.0488%" height="15" fill="rgb(215,179,16)" fg:x="21526" fg:w="13"/><text x="81.0928%" y="1391.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.05%)</title><rect x="80.8428%" y="1365" width="0.0488%" height="15" fill="rgb(254,21,37)" fg:x="21526" fg:w="13"/><text x="81.0928%" y="1375.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (13 samples, 0.05%)</title><rect x="80.8428%" y="1349" width="0.0488%" height="15" fill="rgb(219,207,48)" fg:x="21526" fg:w="13"/><text x="81.0928%" y="1359.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (13 samples, 0.05%)</title><rect x="80.8428%" y="1333" width="0.0488%" height="15" fill="rgb(227,225,41)" fg:x="21526" fg:w="13"/><text x="81.0928%" y="1343.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (15 samples, 0.06%)</title><rect x="80.8428%" y="1397" width="0.0563%" height="15" fill="rgb(223,130,1)" fg:x="21526" fg:w="15"/><text x="81.0928%" y="1407.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (23 samples, 0.09%)</title><rect x="80.8240%" y="1429" width="0.0864%" height="15" fill="rgb(249,54,42)" fg:x="21521" fg:w="23"/><text x="81.0740%" y="1439.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 0.09%)</title><rect x="80.8240%" y="1413" width="0.0864%" height="15" fill="rgb(248,69,25)" fg:x="21521" fg:w="23"/><text x="81.0740%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (3 samples, 0.01%)</title><rect x="80.8991%" y="1397" width="0.0113%" height="15" fill="rgb(234,21,32)" fg:x="21541" fg:w="3"/><text x="81.1491%" y="1407.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (3 samples, 0.01%)</title><rect x="80.8991%" y="1381" width="0.0113%" height="15" fill="rgb(252,136,6)" fg:x="21541" fg:w="3"/><text x="81.1491%" y="1391.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (3 samples, 0.01%)</title><rect x="80.8991%" y="1365" width="0.0113%" height="15" fill="rgb(245,87,12)" fg:x="21541" fg:w="3"/><text x="81.1491%" y="1375.50"></text></g><g><title>core::ptr::write (3 samples, 0.01%)</title><rect x="80.8991%" y="1349" width="0.0113%" height="15" fill="rgb(208,12,15)" fg:x="21541" fg:w="3"/><text x="81.1491%" y="1359.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="80.8991%" y="1333" width="0.0113%" height="15" fill="rgb(250,98,2)" fg:x="21541" fg:w="3"/><text x="81.1491%" y="1343.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="80.9141%" y="1365" width="0.0113%" height="15" fill="rgb(205,213,15)" fg:x="21545" fg:w="3"/><text x="81.1641%" y="1375.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="80.9141%" y="1349" width="0.0113%" height="15" fill="rgb(248,192,44)" fg:x="21545" fg:w="3"/><text x="81.1641%" y="1359.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="80.9141%" y="1333" width="0.0113%" height="15" fill="rgb(221,89,17)" fg:x="21545" fg:w="3"/><text x="81.1641%" y="1343.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.02%)</title><rect x="80.9104%" y="1397" width="0.0188%" height="15" fill="rgb(209,55,3)" fg:x="21544" fg:w="5"/><text x="81.1604%" y="1407.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.02%)</title><rect x="80.9104%" y="1381" width="0.0188%" height="15" fill="rgb(247,23,45)" fg:x="21544" fg:w="5"/><text x="81.1604%" y="1391.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10 samples, 0.04%)</title><rect x="80.9291%" y="1381" width="0.0376%" height="15" fill="rgb(235,152,23)" fg:x="21549" fg:w="10"/><text x="81.1791%" y="1391.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (10 samples, 0.04%)</title><rect x="80.9291%" y="1365" width="0.0376%" height="15" fill="rgb(244,63,13)" fg:x="21549" fg:w="10"/><text x="81.1791%" y="1375.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.02%)</title><rect x="80.9517%" y="1349" width="0.0150%" height="15" fill="rgb(227,30,37)" fg:x="21555" fg:w="4"/><text x="81.2017%" y="1359.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.02%)</title><rect x="80.9517%" y="1333" width="0.0150%" height="15" fill="rgb(224,49,42)" fg:x="21555" fg:w="4"/><text x="81.2017%" y="1343.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten_with_fns (199 samples, 0.75%)</title><rect x="80.2306%" y="1445" width="0.7474%" height="15" fill="rgb(218,129,5)" fg:x="21363" fg:w="199"/><text x="80.4806%" y="1455.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove_entry (18 samples, 0.07%)</title><rect x="80.9104%" y="1429" width="0.0676%" height="15" fill="rgb(240,199,54)" fg:x="21544" fg:w="18"/><text x="81.1604%" y="1439.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (18 samples, 0.07%)</title><rect x="80.9104%" y="1413" width="0.0676%" height="15" fill="rgb(234,31,13)" fg:x="21544" fg:w="18"/><text x="81.1604%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (13 samples, 0.05%)</title><rect x="80.9291%" y="1397" width="0.0488%" height="15" fill="rgb(219,73,54)" fg:x="21549" fg:w="13"/><text x="81.1791%" y="1407.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (3 samples, 0.01%)</title><rect x="80.9667%" y="1381" width="0.0113%" height="15" fill="rgb(251,162,10)" fg:x="21559" fg:w="3"/><text x="81.2167%" y="1391.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::read (3 samples, 0.01%)</title><rect x="80.9667%" y="1365" width="0.0113%" height="15" fill="rgb(240,138,47)" fg:x="21559" fg:w="3"/><text x="81.2167%" y="1375.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (3 samples, 0.01%)</title><rect x="80.9667%" y="1349" width="0.0113%" height="15" fill="rgb(216,138,26)" fg:x="21559" fg:w="3"/><text x="81.2167%" y="1359.50"></text></g><g><title>core::ptr::read (3 samples, 0.01%)</title><rect x="80.9667%" y="1333" width="0.0113%" height="15" fill="rgb(243,17,35)" fg:x="21559" fg:w="3"/><text x="81.2167%" y="1343.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="80.9667%" y="1317" width="0.0113%" height="15" fill="rgb(241,60,18)" fg:x="21559" fg:w="3"/><text x="81.2167%" y="1327.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (3 samples, 0.01%)</title><rect x="80.9892%" y="1429" width="0.0113%" height="15" fill="rgb(234,2,44)" fg:x="21565" fg:w="3"/><text x="81.2392%" y="1439.50"></text></g><g><title>graph_craft::document::NodeNetwork::map_ids::_{{closure}} (3 samples, 0.01%)</title><rect x="80.9892%" y="1413" width="0.0113%" height="15" fill="rgb(225,225,33)" fg:x="21565" fg:w="3"/><text x="81.2392%" y="1423.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten_with_fns::_{{closure}} (3 samples, 0.01%)</title><rect x="80.9892%" y="1397" width="0.0113%" height="15" fill="rgb(234,50,31)" fg:x="21565" fg:w="3"/><text x="81.2392%" y="1407.50"></text></g><g><title>core::ops::function::Fn::call (3 samples, 0.01%)</title><rect x="80.9892%" y="1381" width="0.0113%" height="15" fill="rgb(249,6,25)" fg:x="21565" fg:w="3"/><text x="81.2392%" y="1391.50"></text></g><g><title>graph_craft::document::merge_ids (3 samples, 0.01%)</title><rect x="80.9892%" y="1365" width="0.0113%" height="15" fill="rgb(241,5,17)" fg:x="21565" fg:w="3"/><text x="81.2392%" y="1375.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.02%)</title><rect x="81.0005%" y="1429" width="0.0188%" height="15" fill="rgb(207,116,10)" fg:x="21568" fg:w="5"/><text x="81.2505%" y="1439.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.02%)</title><rect x="81.0005%" y="1413" width="0.0188%" height="15" fill="rgb(222,128,18)" fg:x="21568" fg:w="5"/><text x="81.2505%" y="1423.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.02%)</title><rect x="81.0005%" y="1397" width="0.0188%" height="15" fill="rgb(229,109,25)" fg:x="21568" fg:w="5"/><text x="81.2505%" y="1407.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_iter_from (5 samples, 0.02%)</title><rect x="81.0005%" y="1381" width="0.0188%" height="15" fill="rgb(222,102,25)" fg:x="21568" fg:w="5"/><text x="81.2505%" y="1391.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_allocation (5 samples, 0.02%)</title><rect x="81.0005%" y="1365" width="0.0188%" height="15" fill="rgb(239,211,5)" fg:x="21568" fg:w="5"/><text x="81.2505%" y="1375.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.05%)</title><rect x="81.0493%" y="1285" width="0.0526%" height="15" fill="rgb(223,136,26)" fg:x="21581" fg:w="14"/><text x="81.2993%" y="1295.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="81.0831%" y="1269" width="0.0188%" height="15" fill="rgb(227,30,15)" fg:x="21590" fg:w="5"/><text x="81.3331%" y="1279.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="81.1056%" y="1189" width="0.0263%" height="15" fill="rgb(247,76,4)" fg:x="21596" fg:w="7"/><text x="81.3556%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="81.1056%" y="1173" width="0.0263%" height="15" fill="rgb(245,38,48)" fg:x="21596" fg:w="7"/><text x="81.3556%" y="1183.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="81.1056%" y="1157" width="0.0263%" height="15" fill="rgb(210,220,14)" fg:x="21596" fg:w="7"/><text x="81.3556%" y="1167.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.05%)</title><rect x="81.1394%" y="1125" width="0.0451%" height="15" fill="rgb(224,60,51)" fg:x="21605" fg:w="12"/><text x="81.3894%" y="1135.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (12 samples, 0.05%)</title><rect x="81.1394%" y="1109" width="0.0451%" height="15" fill="rgb(212,133,49)" fg:x="21605" fg:w="12"/><text x="81.3894%" y="1119.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12 samples, 0.05%)</title><rect x="81.1394%" y="1093" width="0.0451%" height="15" fill="rgb(231,39,22)" fg:x="21605" fg:w="12"/><text x="81.3894%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.02%)</title><rect x="81.1657%" y="1077" width="0.0188%" height="15" fill="rgb(236,173,22)" fg:x="21612" fg:w="5"/><text x="81.4157%" y="1087.50"></text></g><g><title>hashbrown::map::make_hash (24 samples, 0.09%)</title><rect x="81.1019%" y="1221" width="0.0901%" height="15" fill="rgb(210,70,0)" fg:x="21595" fg:w="24"/><text x="81.3519%" y="1231.50"></text></g><g><title>core::hash::BuildHasher::hash_one (23 samples, 0.09%)</title><rect x="81.1056%" y="1205" width="0.0864%" height="15" fill="rgb(215,170,11)" fg:x="21596" fg:w="23"/><text x="81.3556%" y="1215.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (15 samples, 0.06%)</title><rect x="81.1357%" y="1189" width="0.0563%" height="15" fill="rgb(220,154,28)" fg:x="21604" fg:w="15"/><text x="81.3857%" y="1199.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (14 samples, 0.05%)</title><rect x="81.1394%" y="1173" width="0.0526%" height="15" fill="rgb(240,160,41)" fg:x="21605" fg:w="14"/><text x="81.3894%" y="1183.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (14 samples, 0.05%)</title><rect x="81.1394%" y="1157" width="0.0526%" height="15" fill="rgb(243,215,41)" fg:x="21605" fg:w="14"/><text x="81.3894%" y="1167.50"></text></g><g><title>core::hash::Hasher::write_u64 (14 samples, 0.05%)</title><rect x="81.1394%" y="1141" width="0.0526%" height="15" fill="rgb(214,208,31)" fg:x="21605" fg:w="14"/><text x="81.3894%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3 samples, 0.01%)</title><rect x="81.1958%" y="1221" width="0.0113%" height="15" fill="rgb(247,57,22)" fg:x="21620" fg:w="3"/><text x="81.4458%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (3 samples, 0.01%)</title><rect x="81.1958%" y="1205" width="0.0113%" height="15" fill="rgb(228,73,52)" fg:x="21620" fg:w="3"/><text x="81.4458%" y="1215.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (34 samples, 0.13%)</title><rect x="81.1019%" y="1269" width="0.1277%" height="15" fill="rgb(252,60,9)" fg:x="21595" fg:w="34"/><text x="81.3519%" y="1279.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (34 samples, 0.13%)</title><rect x="81.1019%" y="1253" width="0.1277%" height="15" fill="rgb(233,9,51)" fg:x="21595" fg:w="34"/><text x="81.3519%" y="1263.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (34 samples, 0.13%)</title><rect x="81.1019%" y="1237" width="0.1277%" height="15" fill="rgb(223,67,14)" fg:x="21595" fg:w="34"/><text x="81.3519%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (6 samples, 0.02%)</title><rect x="81.2070%" y="1221" width="0.0225%" height="15" fill="rgb(222,86,2)" fg:x="21623" fg:w="6"/><text x="81.4570%" y="1231.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (6 samples, 0.02%)</title><rect x="81.2070%" y="1205" width="0.0225%" height="15" fill="rgb(243,58,54)" fg:x="21623" fg:w="6"/><text x="81.4570%" y="1215.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (6 samples, 0.02%)</title><rect x="81.2070%" y="1189" width="0.0225%" height="15" fill="rgb(210,200,39)" fg:x="21623" fg:w="6"/><text x="81.4570%" y="1199.50"></text></g><g><title>core::ptr::write (6 samples, 0.02%)</title><rect x="81.2070%" y="1173" width="0.0225%" height="15" fill="rgb(238,135,9)" fg:x="21623" fg:w="6"/><text x="81.4570%" y="1183.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="81.2146%" y="1157" width="0.0150%" height="15" fill="rgb(232,179,7)" fg:x="21625" fg:w="4"/><text x="81.4646%" y="1167.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="81.2333%" y="1237" width="0.0150%" height="15" fill="rgb(245,65,41)" fg:x="21630" fg:w="4"/><text x="81.4833%" y="1247.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.02%)</title><rect x="81.2333%" y="1221" width="0.0150%" height="15" fill="rgb(227,43,8)" fg:x="21630" fg:w="4"/><text x="81.4833%" y="1231.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::hash::Hash&gt;::hash (5 samples, 0.02%)</title><rect x="81.3460%" y="1157" width="0.0188%" height="15" fill="rgb(235,91,14)" fg:x="21660" fg:w="5"/><text x="81.5960%" y="1167.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (5 samples, 0.02%)</title><rect x="81.3460%" y="1141" width="0.0188%" height="15" fill="rgb(235,219,31)" fg:x="21660" fg:w="5"/><text x="81.5960%" y="1151.50"></text></g><g><title>core::hash::Hasher::write_u64 (5 samples, 0.02%)</title><rect x="81.3460%" y="1125" width="0.0188%" height="15" fill="rgb(227,121,25)" fg:x="21660" fg:w="5"/><text x="81.5960%" y="1135.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="81.3460%" y="1109" width="0.0188%" height="15" fill="rgb(254,129,24)" fg:x="21660" fg:w="5"/><text x="81.5960%" y="1119.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="81.3460%" y="1093" width="0.0188%" height="15" fill="rgb(226,144,49)" fg:x="21660" fg:w="5"/><text x="81.5960%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="81.3460%" y="1077" width="0.0188%" height="15" fill="rgb(214,187,32)" fg:x="21660" fg:w="5"/><text x="81.5960%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="81.3911%" y="1109" width="0.0113%" height="15" fill="rgb(243,129,46)" fg:x="21672" fg:w="3"/><text x="81.6411%" y="1119.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (47 samples, 0.18%)</title><rect x="81.2333%" y="1253" width="0.1765%" height="15" fill="rgb(221,185,35)" fg:x="21630" fg:w="47"/><text x="81.4833%" y="1263.50"></text></g><g><title>graph_craft::document::NodeNetwork::map_ids::_{{closure}}::_{{closure}} (43 samples, 0.16%)</title><rect x="81.2484%" y="1237" width="0.1615%" height="15" fill="rgb(205,0,32)" fg:x="21634" fg:w="43"/><text x="81.4984%" y="1247.50"></text></g><g><title>graph_craft::document::NodeInput::map_ids (43 samples, 0.16%)</title><rect x="81.2484%" y="1221" width="0.1615%" height="15" fill="rgb(229,179,12)" fg:x="21634" fg:w="43"/><text x="81.4984%" y="1231.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten_with_fns::_{{closure}} (17 samples, 0.06%)</title><rect x="81.3460%" y="1205" width="0.0638%" height="15" fill="rgb(252,107,19)" fg:x="21660" fg:w="17"/><text x="81.5960%" y="1215.50"></text></g><g><title>core::ops::function::Fn::call (17 samples, 0.06%)</title><rect x="81.3460%" y="1189" width="0.0638%" height="15" fill="rgb(220,95,27)" fg:x="21660" fg:w="17"/><text x="81.5960%" y="1199.50"></text></g><g><title>graph_craft::document::merge_ids (17 samples, 0.06%)</title><rect x="81.3460%" y="1173" width="0.0638%" height="15" fill="rgb(240,113,40)" fg:x="21660" fg:w="17"/><text x="81.5960%" y="1183.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 0.05%)</title><rect x="81.3648%" y="1157" width="0.0451%" height="15" fill="rgb(208,4,43)" fg:x="21665" fg:w="12"/><text x="81.6148%" y="1167.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 0.05%)</title><rect x="81.3648%" y="1141" width="0.0451%" height="15" fill="rgb(247,189,30)" fg:x="21665" fg:w="12"/><text x="81.6148%" y="1151.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 0.05%)</title><rect x="81.3648%" y="1125" width="0.0451%" height="15" fill="rgb(231,157,17)" fg:x="21665" fg:w="12"/><text x="81.6148%" y="1135.50"></text></g><g><title>__memmove_avx512_unaligned_erms (21 samples, 0.08%)</title><rect x="81.4098%" y="1253" width="0.0789%" height="15" fill="rgb(224,139,6)" fg:x="21677" fg:w="21"/><text x="81.6598%" y="1263.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::hash::Hash&gt;::hash (8 samples, 0.03%)</title><rect x="81.4925%" y="1205" width="0.0300%" height="15" fill="rgb(223,83,16)" fg:x="21699" fg:w="8"/><text x="81.7425%" y="1215.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (8 samples, 0.03%)</title><rect x="81.4925%" y="1189" width="0.0300%" height="15" fill="rgb(232,211,20)" fg:x="21699" fg:w="8"/><text x="81.7425%" y="1199.50"></text></g><g><title>core::hash::Hasher::write_u64 (8 samples, 0.03%)</title><rect x="81.4925%" y="1173" width="0.0300%" height="15" fill="rgb(225,203,35)" fg:x="21699" fg:w="8"/><text x="81.7425%" y="1183.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="81.4925%" y="1157" width="0.0300%" height="15" fill="rgb(215,211,44)" fg:x="21699" fg:w="8"/><text x="81.7425%" y="1167.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="81.4925%" y="1141" width="0.0300%" height="15" fill="rgb(248,213,26)" fg:x="21699" fg:w="8"/><text x="81.7425%" y="1151.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="81.4925%" y="1125" width="0.0300%" height="15" fill="rgb(214,23,52)" fg:x="21699" fg:w="8"/><text x="81.7425%" y="1135.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="81.5112%" y="1109" width="0.0113%" height="15" fill="rgb(225,173,50)" fg:x="21704" fg:w="3"/><text x="81.7612%" y="1119.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (11 samples, 0.04%)</title><rect x="81.5225%" y="1205" width="0.0413%" height="15" fill="rgb(206,150,22)" fg:x="21707" fg:w="11"/><text x="81.7725%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11 samples, 0.04%)</title><rect x="81.5225%" y="1189" width="0.0413%" height="15" fill="rgb(239,64,23)" fg:x="21707" fg:w="11"/><text x="81.7725%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11 samples, 0.04%)</title><rect x="81.5225%" y="1173" width="0.0413%" height="15" fill="rgb(242,50,38)" fg:x="21707" fg:w="11"/><text x="81.7725%" y="1183.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.02%)</title><rect x="81.5450%" y="1157" width="0.0188%" height="15" fill="rgb(217,91,15)" fg:x="21713" fg:w="5"/><text x="81.7950%" y="1167.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="81.5526%" y="1141" width="0.0113%" height="15" fill="rgb(230,172,6)" fg:x="21715" fg:w="3"/><text x="81.8026%" y="1151.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (139 samples, 0.52%)</title><rect x="81.0456%" y="1349" width="0.5220%" height="15" fill="rgb(221,98,26)" fg:x="21580" fg:w="139"/><text x="81.2956%" y="1359.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (139 samples, 0.52%)</title><rect x="81.0456%" y="1333" width="0.5220%" height="15" fill="rgb(227,210,45)" fg:x="21580" fg:w="139"/><text x="81.2956%" y="1343.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (139 samples, 0.52%)</title><rect x="81.0456%" y="1317" width="0.5220%" height="15" fill="rgb(206,8,30)" fg:x="21580" fg:w="139"/><text x="81.2956%" y="1327.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (138 samples, 0.52%)</title><rect x="81.0493%" y="1301" width="0.5183%" height="15" fill="rgb(241,219,17)" fg:x="21581" fg:w="138"/><text x="81.2993%" y="1311.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (124 samples, 0.47%)</title><rect x="81.1019%" y="1285" width="0.4657%" height="15" fill="rgb(247,121,29)" fg:x="21595" fg:w="124"/><text x="81.3519%" y="1295.50"></text></g><g><title>graph_craft::document::NodeNetwork::map_ids::_{{closure}} (90 samples, 0.34%)</title><rect x="81.2296%" y="1269" width="0.3380%" height="15" fill="rgb(219,169,49)" fg:x="21629" fg:w="90"/><text x="81.4796%" y="1279.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten_with_fns::_{{closure}} (21 samples, 0.08%)</title><rect x="81.4887%" y="1253" width="0.0789%" height="15" fill="rgb(253,49,49)" fg:x="21698" fg:w="21"/><text x="81.7387%" y="1263.50"></text></g><g><title>core::ops::function::Fn::call (20 samples, 0.08%)</title><rect x="81.4925%" y="1237" width="0.0751%" height="15" fill="rgb(217,178,3)" fg:x="21699" fg:w="20"/><text x="81.7425%" y="1247.50"></text></g><g><title>graph_craft::document::merge_ids (20 samples, 0.08%)</title><rect x="81.4925%" y="1221" width="0.0751%" height="15" fill="rgb(234,73,37)" fg:x="21699" fg:w="20"/><text x="81.7425%" y="1231.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (145 samples, 0.54%)</title><rect x="81.0456%" y="1365" width="0.5446%" height="15" fill="rgb(250,98,22)" fg:x="21580" fg:w="145"/><text x="81.2956%" y="1375.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 0.02%)</title><rect x="81.5676%" y="1349" width="0.0225%" height="15" fill="rgb(220,108,37)" fg:x="21719" fg:w="6"/><text x="81.8176%" y="1359.50"></text></g><g><title>_int_free_merge_chunk (5 samples, 0.02%)</title><rect x="81.5713%" y="1333" width="0.0188%" height="15" fill="rgb(225,168,10)" fg:x="21720" fg:w="5"/><text x="81.8213%" y="1343.50"></text></g><g><title>_int_free_create_chunk (3 samples, 0.01%)</title><rect x="81.5788%" y="1317" width="0.0113%" height="15" fill="rgb(247,215,21)" fg:x="21722" fg:w="3"/><text x="81.8288%" y="1327.50"></text></g><g><title>malloc_consolidate (9 samples, 0.03%)</title><rect x="81.7854%" y="1109" width="0.0338%" height="15" fill="rgb(253,189,31)" fg:x="21777" fg:w="9"/><text x="82.0354%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (41 samples, 0.15%)</title><rect x="81.6690%" y="1253" width="0.1540%" height="15" fill="rgb(241,54,22)" fg:x="21746" fg:w="41"/><text x="81.9190%" y="1263.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (40 samples, 0.15%)</title><rect x="81.6727%" y="1237" width="0.1502%" height="15" fill="rgb(211,87,4)" fg:x="21747" fg:w="40"/><text x="81.9227%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.15%)</title><rect x="81.6727%" y="1221" width="0.1502%" height="15" fill="rgb(245,112,24)" fg:x="21747" fg:w="40"/><text x="81.9227%" y="1231.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.15%)</title><rect x="81.6727%" y="1205" width="0.1502%" height="15" fill="rgb(235,190,41)" fg:x="21747" fg:w="40"/><text x="81.9227%" y="1215.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.15%)</title><rect x="81.6727%" y="1189" width="0.1502%" height="15" fill="rgb(214,89,8)" fg:x="21747" fg:w="40"/><text x="81.9227%" y="1199.50"></text></g><g><title>__rdl_alloc (40 samples, 0.15%)</title><rect x="81.6727%" y="1173" width="0.1502%" height="15" fill="rgb(249,155,35)" fg:x="21747" fg:w="40"/><text x="81.9227%" y="1183.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (40 samples, 0.15%)</title><rect x="81.6727%" y="1157" width="0.1502%" height="15" fill="rgb(249,88,26)" fg:x="21747" fg:w="40"/><text x="81.9227%" y="1167.50"></text></g><g><title>malloc (40 samples, 0.15%)</title><rect x="81.6727%" y="1141" width="0.1502%" height="15" fill="rgb(232,56,8)" fg:x="21747" fg:w="40"/><text x="81.9227%" y="1151.50"></text></g><g><title>_int_malloc (39 samples, 0.15%)</title><rect x="81.6765%" y="1125" width="0.1465%" height="15" fill="rgb(240,95,3)" fg:x="21748" fg:w="39"/><text x="81.9265%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (45 samples, 0.17%)</title><rect x="81.6652%" y="1301" width="0.1690%" height="15" fill="rgb(222,44,28)" fg:x="21745" fg:w="45"/><text x="81.9152%" y="1311.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (45 samples, 0.17%)</title><rect x="81.6652%" y="1285" width="0.1690%" height="15" fill="rgb(234,16,30)" fg:x="21745" fg:w="45"/><text x="81.9152%" y="1295.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (45 samples, 0.17%)</title><rect x="81.6652%" y="1269" width="0.1690%" height="15" fill="rgb(223,26,17)" fg:x="21745" fg:w="45"/><text x="81.9152%" y="1279.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (3 samples, 0.01%)</title><rect x="81.8230%" y="1253" width="0.0113%" height="15" fill="rgb(239,187,47)" fg:x="21787" fg:w="3"/><text x="82.0730%" y="1263.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (222 samples, 0.83%)</title><rect x="81.0193%" y="1429" width="0.8337%" height="15" fill="rgb(247,102,50)" fg:x="21573" fg:w="222"/><text x="81.2693%" y="1439.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (222 samples, 0.83%)</title><rect x="81.0193%" y="1413" width="0.8337%" height="15" fill="rgb(231,216,22)" fg:x="21573" fg:w="222"/><text x="81.2693%" y="1423.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (215 samples, 0.81%)</title><rect x="81.0456%" y="1397" width="0.8075%" height="15" fill="rgb(216,201,26)" fg:x="21580" fg:w="215"/><text x="81.2956%" y="1407.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (215 samples, 0.81%)</title><rect x="81.0456%" y="1381" width="0.8075%" height="15" fill="rgb(214,186,23)" fg:x="21580" fg:w="215"/><text x="81.2956%" y="1391.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (70 samples, 0.26%)</title><rect x="81.5901%" y="1365" width="0.2629%" height="15" fill="rgb(235,184,4)" fg:x="21725" fg:w="70"/><text x="81.8401%" y="1375.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (70 samples, 0.26%)</title><rect x="81.5901%" y="1349" width="0.2629%" height="15" fill="rgb(244,46,17)" fg:x="21725" fg:w="70"/><text x="81.8401%" y="1359.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (53 samples, 0.20%)</title><rect x="81.6540%" y="1333" width="0.1990%" height="15" fill="rgb(248,74,46)" fg:x="21742" fg:w="53"/><text x="81.9040%" y="1343.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (50 samples, 0.19%)</title><rect x="81.6652%" y="1317" width="0.1878%" height="15" fill="rgb(243,79,5)" fg:x="21745" fg:w="50"/><text x="81.9152%" y="1327.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (5 samples, 0.02%)</title><rect x="81.8342%" y="1301" width="0.0188%" height="15" fill="rgb(213,148,1)" fg:x="21790" fg:w="5"/><text x="82.0842%" y="1311.50"></text></g><g><title>graph_craft::document::NodeNetwork::map_ids (234 samples, 0.88%)</title><rect x="80.9780%" y="1445" width="0.8788%" height="15" fill="rgb(221,30,0)" fg:x="21562" fg:w="234"/><text x="81.2280%" y="1455.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (14 samples, 0.05%)</title><rect x="82.1046%" y="1429" width="0.0526%" height="15" fill="rgb(207,85,29)" fg:x="21862" fg:w="14"/><text x="82.3546%" y="1439.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (194 samples, 0.73%)</title><rect x="82.1572%" y="1413" width="0.7286%" height="15" fill="rgb(239,31,46)" fg:x="21876" fg:w="194"/><text x="82.4072%" y="1423.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (191 samples, 0.72%)</title><rect x="82.1685%" y="1397" width="0.7173%" height="15" fill="rgb(219,6,1)" fg:x="21879" fg:w="191"/><text x="82.4185%" y="1407.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (29 samples, 0.11%)</title><rect x="86.6639%" y="1365" width="0.1089%" height="15" fill="rgb(229,90,29)" fg:x="23076" fg:w="29"/><text x="86.9139%" y="1375.50"></text></g><g><title>&lt;graph_craft::document::NodeInput as core::cmp::PartialEq&gt;::eq (962 samples, 3.61%)</title><rect x="83.1712%" y="1397" width="3.6129%" height="15" fill="rgb(242,201,42)" fg:x="22146" fg:w="962"/><text x="83.4212%" y="1407.50">&lt;gra..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (32 samples, 0.12%)</title><rect x="86.6639%" y="1381" width="0.1202%" height="15" fill="rgb(243,80,54)" fg:x="23076" fg:w="32"/><text x="86.9139%" y="1391.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (3 samples, 0.01%)</title><rect x="86.7728%" y="1365" width="0.0113%" height="15" fill="rgb(223,166,15)" fg:x="23105" fg:w="3"/><text x="87.0228%" y="1375.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1,237 samples, 4.65%)</title><rect x="82.1572%" y="1429" width="4.6457%" height="15" fill="rgb(238,78,27)" fg:x="21876" fg:w="1237"/><text x="82.4072%" y="1439.50">&lt;core..</text></g><g><title>graph_craft::document::NodeNetwork::replace_node_inputs::_{{closure}} (1,043 samples, 3.92%)</title><rect x="82.8858%" y="1413" width="3.9171%" height="15" fill="rgb(235,28,43)" fg:x="22070" fg:w="1043"/><text x="83.1358%" y="1423.50">grap..</text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="86.7841%" y="1397" width="0.0188%" height="15" fill="rgb(240,210,28)" fg:x="23108" fg:w="5"/><text x="87.0341%" y="1407.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (25 samples, 0.09%)</title><rect x="86.8554%" y="1333" width="0.0939%" height="15" fill="rgb(253,6,46)" fg:x="23127" fg:w="25"/><text x="87.1054%" y="1343.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.17%)</title><rect x="86.8554%" y="1349" width="0.1690%" height="15" fill="rgb(250,159,47)" fg:x="23127" fg:w="45"/><text x="87.1054%" y="1359.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (20 samples, 0.08%)</title><rect x="86.9493%" y="1333" width="0.0751%" height="15" fill="rgb(216,139,2)" fg:x="23152" fg:w="20"/><text x="87.1993%" y="1343.50"></text></g><g><title>core::num::&lt;impl isize&gt;::unchecked_neg (15 samples, 0.06%)</title><rect x="87.0244%" y="1317" width="0.0563%" height="15" fill="rgb(221,124,44)" fg:x="23172" fg:w="15"/><text x="87.2744%" y="1327.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (17 samples, 0.06%)</title><rect x="87.0244%" y="1349" width="0.0638%" height="15" fill="rgb(205,37,22)" fg:x="23172" fg:w="17"/><text x="87.2744%" y="1359.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (17 samples, 0.06%)</title><rect x="87.0244%" y="1333" width="0.0638%" height="15" fill="rgb(250,55,8)" fg:x="23172" fg:w="17"/><text x="87.2744%" y="1343.50"></text></g><g><title>&lt;std::collections::hash::map::ValuesMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 0.41%)</title><rect x="86.8029%" y="1429" width="0.4056%" height="15" fill="rgb(215,83,48)" fg:x="23113" fg:w="108"/><text x="87.0529%" y="1439.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 0.41%)</title><rect x="86.8029%" y="1413" width="0.4056%" height="15" fill="rgb(253,2,32)" fg:x="23113" fg:w="108"/><text x="87.0529%" y="1423.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 0.41%)</title><rect x="86.8029%" y="1397" width="0.4056%" height="15" fill="rgb(236,67,28)" fg:x="23113" fg:w="108"/><text x="87.0529%" y="1407.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 0.41%)</title><rect x="86.8029%" y="1381" width="0.4056%" height="15" fill="rgb(252,55,15)" fg:x="23113" fg:w="108"/><text x="87.0529%" y="1391.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (94 samples, 0.35%)</title><rect x="86.8554%" y="1365" width="0.3530%" height="15" fill="rgb(243,173,17)" fg:x="23127" fg:w="94"/><text x="87.1054%" y="1375.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (32 samples, 0.12%)</title><rect x="87.0883%" y="1349" width="0.1202%" height="15" fill="rgb(215,212,13)" fg:x="23189" fg:w="32"/><text x="87.3383%" y="1359.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (32 samples, 0.12%)</title><rect x="87.0883%" y="1333" width="0.1202%" height="15" fill="rgb(253,176,6)" fg:x="23189" fg:w="32"/><text x="87.3383%" y="1343.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (32 samples, 0.12%)</title><rect x="87.0883%" y="1317" width="0.1202%" height="15" fill="rgb(236,105,26)" fg:x="23189" fg:w="32"/><text x="87.3383%" y="1327.50"></text></g><g><title>graph_craft::document::NodeNetwork::replace_node_inputs (1,426 samples, 5.36%)</title><rect x="81.8605%" y="1445" width="5.3555%" height="15" fill="rgb(239,226,32)" fg:x="21797" fg:w="1426"/><text x="82.1105%" y="1455.50">graph_c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="87.2836%" y="1269" width="0.0113%" height="15" fill="rgb(236,104,51)" fg:x="23241" fg:w="3"/><text x="87.5336%" y="1279.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.06%)</title><rect x="87.2423%" y="1413" width="0.0601%" height="15" fill="rgb(220,172,33)" fg:x="23230" fg:w="16"/><text x="87.4923%" y="1423.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.06%)</title><rect x="87.2423%" y="1397" width="0.0601%" height="15" fill="rgb(224,182,25)" fg:x="23230" fg:w="16"/><text x="87.4923%" y="1407.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (13 samples, 0.05%)</title><rect x="87.2535%" y="1381" width="0.0488%" height="15" fill="rgb(236,184,24)" fg:x="23233" fg:w="13"/><text x="87.5035%" y="1391.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (11 samples, 0.04%)</title><rect x="87.2611%" y="1365" width="0.0413%" height="15" fill="rgb(241,221,14)" fg:x="23235" fg:w="11"/><text x="87.5111%" y="1375.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (11 samples, 0.04%)</title><rect x="87.2611%" y="1349" width="0.0413%" height="15" fill="rgb(227,146,5)" fg:x="23235" fg:w="11"/><text x="87.5111%" y="1359.50"></text></g><g><title>core::hash::Hasher::write_u64 (11 samples, 0.04%)</title><rect x="87.2611%" y="1333" width="0.0413%" height="15" fill="rgb(214,15,23)" fg:x="23235" fg:w="11"/><text x="87.5111%" y="1343.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.04%)</title><rect x="87.2611%" y="1317" width="0.0413%" height="15" fill="rgb(233,157,31)" fg:x="23235" fg:w="11"/><text x="87.5111%" y="1327.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11 samples, 0.04%)</title><rect x="87.2611%" y="1301" width="0.0413%" height="15" fill="rgb(211,27,52)" fg:x="23235" fg:w="11"/><text x="87.5111%" y="1311.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.04%)</title><rect x="87.2611%" y="1285" width="0.0413%" height="15" fill="rgb(212,223,15)" fg:x="23235" fg:w="11"/><text x="87.5111%" y="1295.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.06%)</title><rect x="87.3099%" y="1333" width="0.0563%" height="15" fill="rgb(254,211,0)" fg:x="23248" fg:w="15"/><text x="87.5599%" y="1343.50"></text></g><g><title>__memmove_avx512_unaligned_erms (15 samples, 0.06%)</title><rect x="87.3099%" y="1317" width="0.0563%" height="15" fill="rgb(205,43,38)" fg:x="23248" fg:w="15"/><text x="87.5599%" y="1327.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="87.3662%" y="1269" width="0.0526%" height="15" fill="rgb(242,206,46)" fg:x="23263" fg:w="14"/><text x="87.6162%" y="1279.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="87.3662%" y="1253" width="0.0526%" height="15" fill="rgb(220,221,12)" fg:x="23263" fg:w="14"/><text x="87.6162%" y="1263.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (14 samples, 0.05%)</title><rect x="87.3662%" y="1237" width="0.0526%" height="15" fill="rgb(217,156,35)" fg:x="23263" fg:w="14"/><text x="87.6162%" y="1247.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.03%)</title><rect x="87.3925%" y="1221" width="0.0263%" height="15" fill="rgb(207,181,49)" fg:x="23270" fg:w="7"/><text x="87.6425%" y="1231.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.01%)</title><rect x="87.4075%" y="1205" width="0.0113%" height="15" fill="rgb(235,103,47)" fg:x="23274" fg:w="3"/><text x="87.6575%" y="1215.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="87.4188%" y="1205" width="0.0113%" height="15" fill="rgb(222,63,28)" fg:x="23277" fg:w="3"/><text x="87.6688%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="87.4188%" y="1189" width="0.0113%" height="15" fill="rgb(244,137,21)" fg:x="23277" fg:w="3"/><text x="87.6688%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="87.4188%" y="1173" width="0.0113%" height="15" fill="rgb(228,35,27)" fg:x="23277" fg:w="3"/><text x="87.6688%" y="1183.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (18 samples, 0.07%)</title><rect x="87.3662%" y="1317" width="0.0676%" height="15" fill="rgb(226,191,41)" fg:x="23263" fg:w="18"/><text x="87.6162%" y="1327.50"></text></g><g><title>hashbrown::map::make_hash (18 samples, 0.07%)</title><rect x="87.3662%" y="1301" width="0.0676%" height="15" fill="rgb(210,154,3)" fg:x="23263" fg:w="18"/><text x="87.6162%" y="1311.50"></text></g><g><title>core::hash::BuildHasher::hash_one (18 samples, 0.07%)</title><rect x="87.3662%" y="1285" width="0.0676%" height="15" fill="rgb(216,60,49)" fg:x="23263" fg:w="18"/><text x="87.6162%" y="1295.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.02%)</title><rect x="87.4188%" y="1269" width="0.0150%" height="15" fill="rgb(226,17,20)" fg:x="23277" fg:w="4"/><text x="87.6688%" y="1279.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (4 samples, 0.02%)</title><rect x="87.4188%" y="1253" width="0.0150%" height="15" fill="rgb(206,115,35)" fg:x="23277" fg:w="4"/><text x="87.6688%" y="1263.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (4 samples, 0.02%)</title><rect x="87.4188%" y="1237" width="0.0150%" height="15" fill="rgb(227,88,1)" fg:x="23277" fg:w="4"/><text x="87.6688%" y="1247.50"></text></g><g><title>core::hash::Hasher::write_u64 (4 samples, 0.02%)</title><rect x="87.4188%" y="1221" width="0.0150%" height="15" fill="rgb(230,222,24)" fg:x="23277" fg:w="4"/><text x="87.6688%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (19 samples, 0.07%)</title><rect x="87.3662%" y="1333" width="0.0714%" height="15" fill="rgb(214,124,32)" fg:x="23263" fg:w="19"/><text x="87.6162%" y="1343.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.01%)</title><rect x="87.4413%" y="1285" width="0.0113%" height="15" fill="rgb(240,41,36)" fg:x="23283" fg:w="3"/><text x="87.6913%" y="1295.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (5 samples, 0.02%)</title><rect x="87.4413%" y="1301" width="0.0188%" height="15" fill="rgb(221,17,52)" fg:x="23283" fg:w="5"/><text x="87.6913%" y="1311.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (9 samples, 0.03%)</title><rect x="87.4376%" y="1317" width="0.0338%" height="15" fill="rgb(252,70,16)" fg:x="23282" fg:w="9"/><text x="87.6876%" y="1327.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.01%)</title><rect x="87.4601%" y="1301" width="0.0113%" height="15" fill="rgb(250,177,4)" fg:x="23288" fg:w="3"/><text x="87.7101%" y="1311.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (47 samples, 0.18%)</title><rect x="87.3024%" y="1397" width="0.1765%" height="15" fill="rgb(240,188,47)" fg:x="23246" fg:w="47"/><text x="87.5524%" y="1407.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (47 samples, 0.18%)</title><rect x="87.3024%" y="1381" width="0.1765%" height="15" fill="rgb(215,92,12)" fg:x="23246" fg:w="47"/><text x="87.5524%" y="1391.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (47 samples, 0.18%)</title><rect x="87.3024%" y="1365" width="0.1765%" height="15" fill="rgb(242,110,29)" fg:x="23246" fg:w="47"/><text x="87.5524%" y="1375.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (47 samples, 0.18%)</title><rect x="87.3024%" y="1349" width="0.1765%" height="15" fill="rgb(208,211,26)" fg:x="23246" fg:w="47"/><text x="87.5524%" y="1359.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (11 samples, 0.04%)</title><rect x="87.4376%" y="1333" width="0.0413%" height="15" fill="rgb(244,147,6)" fg:x="23282" fg:w="11"/><text x="87.6876%" y="1343.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (53 samples, 0.20%)</title><rect x="87.3024%" y="1413" width="0.1990%" height="15" fill="rgb(211,130,42)" fg:x="23246" fg:w="53"/><text x="87.5524%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (6 samples, 0.02%)</title><rect x="87.4789%" y="1397" width="0.0225%" height="15" fill="rgb(220,63,1)" fg:x="23293" fg:w="6"/><text x="87.7289%" y="1407.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (85 samples, 0.32%)</title><rect x="87.2310%" y="1445" width="0.3192%" height="15" fill="rgb(241,212,30)" fg:x="23227" fg:w="85"/><text x="87.4810%" y="1455.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (85 samples, 0.32%)</title><rect x="87.2310%" y="1429" width="0.3192%" height="15" fill="rgb(233,153,17)" fg:x="23227" fg:w="85"/><text x="87.4810%" y="1439.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (13 samples, 0.05%)</title><rect x="87.5014%" y="1413" width="0.0488%" height="15" fill="rgb(236,3,10)" fg:x="23299" fg:w="13"/><text x="87.7514%" y="1423.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (13 samples, 0.05%)</title><rect x="87.5014%" y="1397" width="0.0488%" height="15" fill="rgb(232,41,21)" fg:x="23299" fg:w="13"/><text x="87.7514%" y="1407.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (13 samples, 0.05%)</title><rect x="87.5014%" y="1381" width="0.0488%" height="15" fill="rgb(206,63,51)" fg:x="23299" fg:w="13"/><text x="87.7514%" y="1391.50"></text></g><g><title>core::ptr::write (13 samples, 0.05%)</title><rect x="87.5014%" y="1365" width="0.0488%" height="15" fill="rgb(250,214,3)" fg:x="23299" fg:w="13"/><text x="87.7514%" y="1375.50"></text></g><g><title>__memmove_avx512_unaligned_erms (7 samples, 0.03%)</title><rect x="87.5239%" y="1349" width="0.0263%" height="15" fill="rgb(254,89,27)" fg:x="23305" fg:w="7"/><text x="87.7739%" y="1359.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.01%)</title><rect x="87.5615%" y="1397" width="0.0113%" height="15" fill="rgb(249,41,14)" fg:x="23315" fg:w="3"/><text x="87.8115%" y="1407.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.01%)</title><rect x="87.5615%" y="1381" width="0.0113%" height="15" fill="rgb(221,196,51)" fg:x="23315" fg:w="3"/><text x="87.8115%" y="1391.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::read (4 samples, 0.02%)</title><rect x="87.5728%" y="1381" width="0.0150%" height="15" fill="rgb(214,116,26)" fg:x="23318" fg:w="4"/><text x="87.8228%" y="1391.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (4 samples, 0.02%)</title><rect x="87.5728%" y="1365" width="0.0150%" height="15" fill="rgb(236,67,7)" fg:x="23318" fg:w="4"/><text x="87.8228%" y="1375.50"></text></g><g><title>core::ptr::read (4 samples, 0.02%)</title><rect x="87.5728%" y="1349" width="0.0150%" height="15" fill="rgb(253,179,32)" fg:x="23318" fg:w="4"/><text x="87.8228%" y="1359.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="87.5728%" y="1333" width="0.0150%" height="15" fill="rgb(218,33,15)" fg:x="23318" fg:w="4"/><text x="87.8228%" y="1343.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten (2,425 samples, 9.11%)</title><rect x="78.4842%" y="1477" width="9.1073%" height="15" fill="rgb(217,202,41)" fg:x="20898" fg:w="2425"/><text x="78.7342%" y="1487.50">graph_craft::..</text></g><g><title>graph_craft::document::NodeNetwork::flatten_with_fns (2,425 samples, 9.11%)</title><rect x="78.4842%" y="1461" width="9.1073%" height="15" fill="rgb(234,133,5)" fg:x="20898" fg:w="2425"/><text x="78.7342%" y="1471.50">graph_craft::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove_entry (11 samples, 0.04%)</title><rect x="87.5502%" y="1445" width="0.0413%" height="15" fill="rgb(240,47,40)" fg:x="23312" fg:w="11"/><text x="87.8002%" y="1455.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (11 samples, 0.04%)</title><rect x="87.5502%" y="1429" width="0.0413%" height="15" fill="rgb(234,166,26)" fg:x="23312" fg:w="11"/><text x="87.8002%" y="1439.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (8 samples, 0.03%)</title><rect x="87.5615%" y="1413" width="0.0300%" height="15" fill="rgb(244,125,51)" fg:x="23315" fg:w="8"/><text x="87.8115%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (5 samples, 0.02%)</title><rect x="87.5728%" y="1397" width="0.0188%" height="15" fill="rgb(229,171,11)" fg:x="23318" fg:w="5"/><text x="87.8228%" y="1407.50"></text></g><g><title>__memmove_avx512_unaligned_erms (37 samples, 0.14%)</title><rect x="87.6028%" y="1333" width="0.1390%" height="15" fill="rgb(224,38,45)" fg:x="23326" fg:w="37"/><text x="87.8528%" y="1343.50"></text></g><g><title>__memmove_avx512_unaligned_erms (46 samples, 0.17%)</title><rect x="87.7568%" y="1301" width="0.1728%" height="15" fill="rgb(237,27,7)" fg:x="23367" fg:w="46"/><text x="88.0068%" y="1311.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (36 samples, 0.14%)</title><rect x="87.9821%" y="1237" width="0.1352%" height="15" fill="rgb(216,52,7)" fg:x="23427" fg:w="36"/><text x="88.2321%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (36 samples, 0.14%)</title><rect x="87.9821%" y="1221" width="0.1352%" height="15" fill="rgb(243,11,11)" fg:x="23427" fg:w="36"/><text x="88.2321%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (35 samples, 0.13%)</title><rect x="87.9859%" y="1205" width="0.1314%" height="15" fill="rgb(253,167,20)" fg:x="23428" fg:w="35"/><text x="88.2359%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (34 samples, 0.13%)</title><rect x="87.9896%" y="1189" width="0.1277%" height="15" fill="rgb(215,207,5)" fg:x="23429" fg:w="34"/><text x="88.2396%" y="1199.50"></text></g><g><title>alloc::raw_vec::finish_grow (33 samples, 0.12%)</title><rect x="87.9934%" y="1173" width="0.1239%" height="15" fill="rgb(252,127,31)" fg:x="23430" fg:w="33"/><text x="88.2434%" y="1183.50"></text></g><g><title>malloc (33 samples, 0.12%)</title><rect x="87.9934%" y="1157" width="0.1239%" height="15" fill="rgb(209,106,27)" fg:x="23430" fg:w="33"/><text x="88.2434%" y="1167.50"></text></g><g><title>_int_malloc (29 samples, 0.11%)</title><rect x="88.0084%" y="1141" width="0.1089%" height="15" fill="rgb(214,220,18)" fg:x="23434" fg:w="29"/><text x="88.2584%" y="1151.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (37 samples, 0.14%)</title><rect x="87.9821%" y="1285" width="0.1390%" height="15" fill="rgb(237,89,12)" fg:x="23427" fg:w="37"/><text x="88.2321%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (37 samples, 0.14%)</title><rect x="87.9821%" y="1269" width="0.1390%" height="15" fill="rgb(209,167,36)" fg:x="23427" fg:w="37"/><text x="88.2321%" y="1279.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (37 samples, 0.14%)</title><rect x="87.9821%" y="1253" width="0.1390%" height="15" fill="rgb(243,45,22)" fg:x="23427" fg:w="37"/><text x="88.2321%" y="1263.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (4 samples, 0.02%)</title><rect x="88.1211%" y="1285" width="0.0150%" height="15" fill="rgb(239,2,46)" fg:x="23464" fg:w="4"/><text x="88.3711%" y="1295.50"></text></g><g><title>graph_craft::document::DocumentNode::resolve_proto_node::_{{closure}} (4 samples, 0.02%)</title><rect x="88.1211%" y="1269" width="0.0150%" height="15" fill="rgb(241,101,0)" fg:x="23464" fg:w="4"/><text x="88.3711%" y="1279.50"></text></g><g><title>__memmove_avx512_unaligned_erms (68 samples, 0.26%)</title><rect x="88.1361%" y="1285" width="0.2554%" height="15" fill="rgb(244,34,31)" fg:x="23468" fg:w="68"/><text x="88.3861%" y="1295.50"></text></g><g><title>core::intrinsics::copy (4 samples, 0.02%)</title><rect x="88.3915%" y="1269" width="0.0150%" height="15" fill="rgb(248,23,22)" fg:x="23536" fg:w="4"/><text x="88.6415%" y="1279.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="88.3915%" y="1253" width="0.0150%" height="15" fill="rgb(218,27,48)" fg:x="23536" fg:w="4"/><text x="88.6415%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (9 samples, 0.03%)</title><rect x="88.3915%" y="1285" width="0.0338%" height="15" fill="rgb(232,78,1)" fg:x="23536" fg:w="9"/><text x="88.6415%" y="1295.50"></text></g><g><title>core::ptr::read (5 samples, 0.02%)</title><rect x="88.4065%" y="1269" width="0.0188%" height="15" fill="rgb(233,169,12)" fg:x="23540" fg:w="5"/><text x="88.6565%" y="1279.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="88.4065%" y="1253" width="0.0188%" height="15" fill="rgb(225,222,54)" fg:x="23540" fg:w="5"/><text x="88.6565%" y="1263.50"></text></g><g><title>_int_free_create_chunk (4 samples, 0.02%)</title><rect x="88.4628%" y="1141" width="0.0150%" height="15" fill="rgb(245,126,29)" fg:x="23555" fg:w="4"/><text x="88.7128%" y="1151.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.06%)</title><rect x="88.4253%" y="1237" width="0.0638%" height="15" fill="rgb(241,63,48)" fg:x="23545" fg:w="17"/><text x="88.6753%" y="1247.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.06%)</title><rect x="88.4253%" y="1221" width="0.0638%" height="15" fill="rgb(235,126,38)" fg:x="23545" fg:w="17"/><text x="88.6753%" y="1231.50"></text></g><g><title>__rdl_dealloc (17 samples, 0.06%)</title><rect x="88.4253%" y="1205" width="0.0638%" height="15" fill="rgb(232,96,49)" fg:x="23545" fg:w="17"/><text x="88.6753%" y="1215.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (17 samples, 0.06%)</title><rect x="88.4253%" y="1189" width="0.0638%" height="15" fill="rgb(211,146,40)" fg:x="23545" fg:w="17"/><text x="88.6753%" y="1199.50"></text></g><g><title>cfree@GLIBC_2.2.5 (17 samples, 0.06%)</title><rect x="88.4253%" y="1173" width="0.0638%" height="15" fill="rgb(247,93,44)" fg:x="23545" fg:w="17"/><text x="88.6753%" y="1183.50"></text></g><g><title>_int_free_merge_chunk (10 samples, 0.04%)</title><rect x="88.4516%" y="1157" width="0.0376%" height="15" fill="rgb(251,41,49)" fg:x="23552" fg:w="10"/><text x="88.7016%" y="1167.50"></text></g><g><title>unlink_chunk.isra.0 (3 samples, 0.01%)</title><rect x="88.4779%" y="1141" width="0.0113%" height="15" fill="rgb(218,155,12)" fg:x="23559" fg:w="3"/><text x="88.7279%" y="1151.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (242 samples, 0.91%)</title><rect x="87.5915%" y="1365" width="0.9089%" height="15" fill="rgb(221,161,30)" fg:x="23323" fg:w="242"/><text x="87.8415%" y="1375.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (240 samples, 0.90%)</title><rect x="87.5991%" y="1349" width="0.9013%" height="15" fill="rgb(221,179,11)" fg:x="23325" fg:w="240"/><text x="87.8491%" y="1359.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (202 samples, 0.76%)</title><rect x="87.7418%" y="1333" width="0.7586%" height="15" fill="rgb(224,170,48)" fg:x="23363" fg:w="202"/><text x="87.9918%" y="1343.50"></text></g><g><title>graph_craft::document::NodeNetwork::into_proto_networks::_{{closure}} (202 samples, 0.76%)</title><rect x="87.7418%" y="1317" width="0.7586%" height="15" fill="rgb(223,117,5)" fg:x="23363" fg:w="202"/><text x="87.9918%" y="1327.50"></text></g><g><title>graph_craft::document::DocumentNode::resolve_proto_node (152 samples, 0.57%)</title><rect x="87.9295%" y="1301" width="0.5708%" height="15" fill="rgb(209,52,20)" fg:x="23413" fg:w="152"/><text x="88.1795%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeInput&gt;&gt; (20 samples, 0.08%)</title><rect x="88.4253%" y="1285" width="0.0751%" height="15" fill="rgb(209,19,41)" fg:x="23545" fg:w="20"/><text x="88.6753%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeInput&gt;&gt; (20 samples, 0.08%)</title><rect x="88.4253%" y="1269" width="0.0751%" height="15" fill="rgb(210,177,12)" fg:x="23545" fg:w="20"/><text x="88.6753%" y="1279.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.08%)</title><rect x="88.4253%" y="1253" width="0.0751%" height="15" fill="rgb(211,159,37)" fg:x="23545" fg:w="20"/><text x="88.6753%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.01%)</title><rect x="88.4891%" y="1237" width="0.0113%" height="15" fill="rgb(209,20,2)" fg:x="23562" fg:w="3"/><text x="88.7391%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (9 samples, 0.03%)</title><rect x="88.5004%" y="1365" width="0.0338%" height="15" fill="rgb(244,3,46)" fg:x="23565" fg:w="9"/><text x="88.7504%" y="1375.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (274 samples, 1.03%)</title><rect x="87.5915%" y="1397" width="1.0290%" height="15" fill="rgb(220,94,38)" fg:x="23323" fg:w="274"/><text x="87.8415%" y="1407.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (274 samples, 1.03%)</title><rect x="87.5915%" y="1381" width="1.0290%" height="15" fill="rgb(253,14,31)" fg:x="23323" fg:w="274"/><text x="87.8415%" y="1391.50"></text></g><g><title>core::ptr::write (23 samples, 0.09%)</title><rect x="88.5342%" y="1365" width="0.0864%" height="15" fill="rgb(234,176,13)" fg:x="23574" fg:w="23"/><text x="88.7842%" y="1375.50"></text></g><g><title>__memmove_avx512_unaligned_erms (23 samples, 0.09%)</title><rect x="88.5342%" y="1349" width="0.0864%" height="15" fill="rgb(218,62,25)" fg:x="23574" fg:w="23"/><text x="88.7842%" y="1359.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (279 samples, 1.05%)</title><rect x="87.5915%" y="1461" width="1.0478%" height="15" fill="rgb(216,124,40)" fg:x="23323" fg:w="279"/><text x="87.8415%" y="1471.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (279 samples, 1.05%)</title><rect x="87.5915%" y="1445" width="1.0478%" height="15" fill="rgb(228,170,12)" fg:x="23323" fg:w="279"/><text x="87.8415%" y="1455.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (279 samples, 1.05%)</title><rect x="87.5915%" y="1429" width="1.0478%" height="15" fill="rgb(231,226,5)" fg:x="23323" fg:w="279"/><text x="87.8415%" y="1439.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (279 samples, 1.05%)</title><rect x="87.5915%" y="1413" width="1.0478%" height="15" fill="rgb(237,122,22)" fg:x="23323" fg:w="279"/><text x="87.8415%" y="1423.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.02%)</title><rect x="88.6243%" y="1397" width="0.0150%" height="15" fill="rgb(209,185,25)" fg:x="23598" fg:w="4"/><text x="88.8743%" y="1407.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="88.6243%" y="1381" width="0.0150%" height="15" fill="rgb(228,200,32)" fg:x="23598" fg:w="4"/><text x="88.8743%" y="1391.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="88.6243%" y="1365" width="0.0150%" height="15" fill="rgb(217,140,10)" fg:x="23598" fg:w="4"/><text x="88.8743%" y="1375.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (4 samples, 0.02%)</title><rect x="88.6243%" y="1349" width="0.0150%" height="15" fill="rgb(253,17,24)" fg:x="23598" fg:w="4"/><text x="88.8743%" y="1359.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.02%)</title><rect x="88.6243%" y="1333" width="0.0150%" height="15" fill="rgb(212,61,6)" fg:x="23598" fg:w="4"/><text x="88.8743%" y="1343.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.02%)</title><rect x="88.6243%" y="1317" width="0.0150%" height="15" fill="rgb(205,14,25)" fg:x="23598" fg:w="4"/><text x="88.8743%" y="1327.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.02%)</title><rect x="88.6243%" y="1301" width="0.0150%" height="15" fill="rgb(232,69,41)" fg:x="23598" fg:w="4"/><text x="88.8743%" y="1311.50"></text></g><g><title>__rdl_alloc (4 samples, 0.02%)</title><rect x="88.6243%" y="1285" width="0.0150%" height="15" fill="rgb(241,106,47)" fg:x="23598" fg:w="4"/><text x="88.8743%" y="1295.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.02%)</title><rect x="88.6243%" y="1269" width="0.0150%" height="15" fill="rgb(210,213,53)" fg:x="23598" fg:w="4"/><text x="88.8743%" y="1279.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="88.6243%" y="1253" width="0.0150%" height="15" fill="rgb(253,175,27)" fg:x="23598" fg:w="4"/><text x="88.8743%" y="1263.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="88.6243%" y="1237" width="0.0150%" height="15" fill="rgb(211,171,24)" fg:x="23598" fg:w="4"/><text x="88.8743%" y="1247.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.05%)</title><rect x="88.6769%" y="1381" width="0.0526%" height="15" fill="rgb(229,80,7)" fg:x="23612" fg:w="14"/><text x="88.9269%" y="1391.50"></text></g><g><title>__memmove_avx512_unaligned_erms (14 samples, 0.05%)</title><rect x="88.6769%" y="1365" width="0.0526%" height="15" fill="rgb(212,46,39)" fg:x="23612" fg:w="14"/><text x="88.9269%" y="1375.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (27 samples, 0.10%)</title><rect x="88.6431%" y="1413" width="0.1014%" height="15" fill="rgb(240,80,45)" fg:x="23603" fg:w="27"/><text x="88.8931%" y="1423.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_hoare_branchy_cyclic (26 samples, 0.10%)</title><rect x="88.6469%" y="1397" width="0.0976%" height="15" fill="rgb(253,177,40)" fg:x="23604" fg:w="26"/><text x="88.8969%" y="1407.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (4 samples, 0.02%)</title><rect x="88.7295%" y="1381" width="0.0150%" height="15" fill="rgb(249,200,15)" fg:x="23626" fg:w="4"/><text x="88.9795%" y="1391.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (4 samples, 0.02%)</title><rect x="88.7295%" y="1365" width="0.0150%" height="15" fill="rgb(217,78,26)" fg:x="23626" fg:w="4"/><text x="88.9795%" y="1375.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="88.7445%" y="1317" width="0.0113%" height="15" fill="rgb(254,151,32)" fg:x="23630" fg:w="3"/><text x="88.9945%" y="1327.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="88.7445%" y="1301" width="0.0113%" height="15" fill="rgb(226,165,27)" fg:x="23630" fg:w="3"/><text x="88.9945%" y="1311.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (4 samples, 0.02%)</title><rect x="88.7445%" y="1397" width="0.0150%" height="15" fill="rgb(250,206,4)" fg:x="23630" fg:w="4"/><text x="88.9945%" y="1407.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (4 samples, 0.02%)</title><rect x="88.7445%" y="1381" width="0.0150%" height="15" fill="rgb(231,229,27)" fg:x="23630" fg:w="4"/><text x="88.9945%" y="1391.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_fallback (4 samples, 0.02%)</title><rect x="88.7445%" y="1365" width="0.0150%" height="15" fill="rgb(239,217,8)" fg:x="23630" fg:w="4"/><text x="88.9945%" y="1375.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (4 samples, 0.02%)</title><rect x="88.7445%" y="1349" width="0.0150%" height="15" fill="rgb(225,204,27)" fg:x="23630" fg:w="4"/><text x="88.9945%" y="1359.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (4 samples, 0.02%)</title><rect x="88.7445%" y="1333" width="0.0150%" height="15" fill="rgb(230,56,32)" fg:x="23630" fg:w="4"/><text x="88.9945%" y="1343.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.05%)</title><rect x="88.7633%" y="1365" width="0.0526%" height="15" fill="rgb(222,56,27)" fg:x="23635" fg:w="14"/><text x="89.0133%" y="1375.50"></text></g><g><title>__memmove_avx512_unaligned_erms (14 samples, 0.05%)</title><rect x="88.7633%" y="1349" width="0.0526%" height="15" fill="rgb(253,108,27)" fg:x="23635" fg:w="14"/><text x="89.0133%" y="1359.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (17 samples, 0.06%)</title><rect x="88.7595%" y="1397" width="0.0638%" height="15" fill="rgb(212,87,36)" fg:x="23634" fg:w="17"/><text x="89.0095%" y="1407.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_hoare_branchy_cyclic (17 samples, 0.06%)</title><rect x="88.7595%" y="1381" width="0.0638%" height="15" fill="rgb(247,82,36)" fg:x="23634" fg:w="17"/><text x="89.0095%" y="1391.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.03%)</title><rect x="88.8234%" y="1301" width="0.0338%" height="15" fill="rgb(222,143,9)" fg:x="23651" fg:w="9"/><text x="89.0734%" y="1311.50"></text></g><g><title>__memmove_avx512_unaligned_erms (7 samples, 0.03%)</title><rect x="88.8309%" y="1285" width="0.0263%" height="15" fill="rgb(238,162,48)" fg:x="23653" fg:w="7"/><text x="89.0809%" y="1295.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (12 samples, 0.05%)</title><rect x="88.8234%" y="1381" width="0.0451%" height="15" fill="rgb(221,59,43)" fg:x="23651" fg:w="12"/><text x="89.0734%" y="1391.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (12 samples, 0.05%)</title><rect x="88.8234%" y="1365" width="0.0451%" height="15" fill="rgb(205,166,41)" fg:x="23651" fg:w="12"/><text x="89.0734%" y="1375.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_fallback (12 samples, 0.05%)</title><rect x="88.8234%" y="1349" width="0.0451%" height="15" fill="rgb(241,186,40)" fg:x="23651" fg:w="12"/><text x="89.0734%" y="1359.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (12 samples, 0.05%)</title><rect x="88.8234%" y="1333" width="0.0451%" height="15" fill="rgb(216,119,35)" fg:x="23651" fg:w="12"/><text x="89.0734%" y="1343.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (12 samples, 0.05%)</title><rect x="88.8234%" y="1317" width="0.0451%" height="15" fill="rgb(208,68,38)" fg:x="23651" fg:w="12"/><text x="89.0734%" y="1327.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (4 samples, 0.02%)</title><rect x="88.8722%" y="1365" width="0.0150%" height="15" fill="rgb(217,113,1)" fg:x="23664" fg:w="4"/><text x="89.1222%" y="1375.50"></text></g><g><title>core::ptr::swap (4 samples, 0.02%)</title><rect x="88.8722%" y="1349" width="0.0150%" height="15" fill="rgb(242,153,3)" fg:x="23664" fg:w="4"/><text x="89.1222%" y="1359.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="88.8760%" y="1333" width="0.0113%" height="15" fill="rgb(229,76,35)" fg:x="23665" fg:w="3"/><text x="89.1260%" y="1343.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="88.8760%" y="1317" width="0.0113%" height="15" fill="rgb(229,125,34)" fg:x="23665" fg:w="3"/><text x="89.1260%" y="1327.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.04%)</title><rect x="88.8910%" y="1349" width="0.0376%" height="15" fill="rgb(238,179,36)" fg:x="23669" fg:w="10"/><text x="89.1410%" y="1359.50"></text></g><g><title>__memmove_avx512_unaligned_erms (10 samples, 0.04%)</title><rect x="88.8910%" y="1333" width="0.0376%" height="15" fill="rgb(244,183,19)" fg:x="23669" fg:w="10"/><text x="89.1410%" y="1343.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (16 samples, 0.06%)</title><rect x="88.8722%" y="1381" width="0.0601%" height="15" fill="rgb(216,85,49)" fg:x="23664" fg:w="16"/><text x="89.1222%" y="1391.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_hoare_branchy_cyclic (12 samples, 0.05%)</title><rect x="88.8872%" y="1365" width="0.0451%" height="15" fill="rgb(208,161,47)" fg:x="23668" fg:w="12"/><text x="89.1372%" y="1375.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.02%)</title><rect x="88.9360%" y="1285" width="0.0150%" height="15" fill="rgb(233,210,18)" fg:x="23681" fg:w="4"/><text x="89.1860%" y="1295.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="88.9398%" y="1269" width="0.0113%" height="15" fill="rgb(205,104,42)" fg:x="23682" fg:w="3"/><text x="89.1898%" y="1279.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (9 samples, 0.03%)</title><rect x="88.9323%" y="1365" width="0.0338%" height="15" fill="rgb(248,90,43)" fg:x="23680" fg:w="9"/><text x="89.1823%" y="1375.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (9 samples, 0.03%)</title><rect x="88.9323%" y="1349" width="0.0338%" height="15" fill="rgb(206,198,11)" fg:x="23680" fg:w="9"/><text x="89.1823%" y="1359.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_fallback (9 samples, 0.03%)</title><rect x="88.9323%" y="1333" width="0.0338%" height="15" fill="rgb(239,165,27)" fg:x="23680" fg:w="9"/><text x="89.1823%" y="1343.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (9 samples, 0.03%)</title><rect x="88.9323%" y="1317" width="0.0338%" height="15" fill="rgb(246,44,32)" fg:x="23680" fg:w="9"/><text x="89.1823%" y="1327.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (9 samples, 0.03%)</title><rect x="88.9323%" y="1301" width="0.0338%" height="15" fill="rgb(252,65,42)" fg:x="23680" fg:w="9"/><text x="89.1823%" y="1311.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (3 samples, 0.01%)</title><rect x="88.9548%" y="1285" width="0.0113%" height="15" fill="rgb(246,197,18)" fg:x="23686" fg:w="3"/><text x="89.2048%" y="1295.50"></text></g><g><title>core::ptr::read (3 samples, 0.01%)</title><rect x="88.9548%" y="1269" width="0.0113%" height="15" fill="rgb(216,192,4)" fg:x="23686" fg:w="3"/><text x="89.2048%" y="1279.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="88.9548%" y="1253" width="0.0113%" height="15" fill="rgb(208,117,10)" fg:x="23686" fg:w="3"/><text x="89.2048%" y="1263.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (3 samples, 0.01%)</title><rect x="88.9661%" y="1365" width="0.0113%" height="15" fill="rgb(240,61,47)" fg:x="23689" fg:w="3"/><text x="89.2161%" y="1375.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_hoare_branchy_cyclic (3 samples, 0.01%)</title><rect x="88.9661%" y="1349" width="0.0113%" height="15" fill="rgb(228,178,21)" fg:x="23689" fg:w="3"/><text x="89.2161%" y="1359.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="88.9774%" y="1269" width="0.0113%" height="15" fill="rgb(219,96,54)" fg:x="23692" fg:w="3"/><text x="89.2274%" y="1279.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="88.9774%" y="1253" width="0.0113%" height="15" fill="rgb(250,177,24)" fg:x="23692" fg:w="3"/><text x="89.2274%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (3 samples, 0.01%)</title><rect x="88.9886%" y="1269" width="0.0113%" height="15" fill="rgb(242,154,46)" fg:x="23695" fg:w="3"/><text x="89.2386%" y="1279.50"></text></g><g><title>&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="88.9886%" y="1253" width="0.0113%" height="15" fill="rgb(226,176,29)" fg:x="23695" fg:w="3"/><text x="89.2386%" y="1263.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="88.9886%" y="1237" width="0.0113%" height="15" fill="rgb(226,29,2)" fg:x="23695" fg:w="3"/><text x="89.2386%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="88.9886%" y="1221" width="0.0113%" height="15" fill="rgb(237,104,14)" fg:x="23695" fg:w="3"/><text x="89.2386%" y="1231.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (7 samples, 0.03%)</title><rect x="88.9774%" y="1349" width="0.0263%" height="15" fill="rgb(245,207,31)" fg:x="23692" fg:w="7"/><text x="89.2274%" y="1359.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (7 samples, 0.03%)</title><rect x="88.9774%" y="1333" width="0.0263%" height="15" fill="rgb(229,211,45)" fg:x="23692" fg:w="7"/><text x="89.2274%" y="1343.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_fallback (7 samples, 0.03%)</title><rect x="88.9774%" y="1317" width="0.0263%" height="15" fill="rgb(229,113,15)" fg:x="23692" fg:w="7"/><text x="89.2274%" y="1327.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (7 samples, 0.03%)</title><rect x="88.9774%" y="1301" width="0.0263%" height="15" fill="rgb(237,147,15)" fg:x="23692" fg:w="7"/><text x="89.2274%" y="1311.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (7 samples, 0.03%)</title><rect x="88.9774%" y="1285" width="0.0263%" height="15" fill="rgb(244,120,12)" fg:x="23692" fg:w="7"/><text x="89.2274%" y="1295.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (5 samples, 0.02%)</title><rect x="89.0036%" y="1349" width="0.0188%" height="15" fill="rgb(205,120,12)" fg:x="23699" fg:w="5"/><text x="89.2536%" y="1359.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_hoare_branchy_cyclic (4 samples, 0.02%)</title><rect x="89.0074%" y="1333" width="0.0150%" height="15" fill="rgb(231,26,45)" fg:x="23700" fg:w="4"/><text x="89.2574%" y="1343.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.02%)</title><rect x="89.0224%" y="1253" width="0.0188%" height="15" fill="rgb(246,98,1)" fg:x="23704" fg:w="5"/><text x="89.2724%" y="1263.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="89.0224%" y="1237" width="0.0188%" height="15" fill="rgb(207,68,45)" fg:x="23704" fg:w="5"/><text x="89.2724%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (3 samples, 0.01%)</title><rect x="89.0412%" y="1253" width="0.0113%" height="15" fill="rgb(231,27,38)" fg:x="23709" fg:w="3"/><text x="89.2912%" y="1263.50"></text></g><g><title>&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="89.0412%" y="1237" width="0.0113%" height="15" fill="rgb(214,223,3)" fg:x="23709" fg:w="3"/><text x="89.2912%" y="1247.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="89.0412%" y="1221" width="0.0113%" height="15" fill="rgb(228,195,46)" fg:x="23709" fg:w="3"/><text x="89.2912%" y="1231.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="89.0412%" y="1205" width="0.0113%" height="15" fill="rgb(231,100,42)" fg:x="23709" fg:w="3"/><text x="89.2912%" y="1215.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (11 samples, 0.04%)</title><rect x="89.0224%" y="1333" width="0.0413%" height="15" fill="rgb(236,53,4)" fg:x="23704" fg:w="11"/><text x="89.2724%" y="1343.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (11 samples, 0.04%)</title><rect x="89.0224%" y="1317" width="0.0413%" height="15" fill="rgb(230,152,12)" fg:x="23704" fg:w="11"/><text x="89.2724%" y="1327.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_fallback (11 samples, 0.04%)</title><rect x="89.0224%" y="1301" width="0.0413%" height="15" fill="rgb(226,101,19)" fg:x="23704" fg:w="11"/><text x="89.2724%" y="1311.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (11 samples, 0.04%)</title><rect x="89.0224%" y="1285" width="0.0413%" height="15" fill="rgb(250,149,32)" fg:x="23704" fg:w="11"/><text x="89.2724%" y="1295.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (11 samples, 0.04%)</title><rect x="89.0224%" y="1269" width="0.0413%" height="15" fill="rgb(232,178,12)" fg:x="23704" fg:w="11"/><text x="89.2724%" y="1279.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (3 samples, 0.01%)</title><rect x="89.0525%" y="1253" width="0.0113%" height="15" fill="rgb(246,151,17)" fg:x="23712" fg:w="3"/><text x="89.3025%" y="1263.50"></text></g><g><title>core::ptr::read (3 samples, 0.01%)</title><rect x="89.0525%" y="1237" width="0.0113%" height="15" fill="rgb(252,17,51)" fg:x="23712" fg:w="3"/><text x="89.3025%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="89.0525%" y="1221" width="0.0113%" height="15" fill="rgb(250,207,23)" fg:x="23712" fg:w="3"/><text x="89.3025%" y="1231.50"></text></g><g><title>graph_craft::document::NodeNetwork::into_proto_networks (395 samples, 1.48%)</title><rect x="87.5915%" y="1477" width="1.4835%" height="15" fill="rgb(205,27,5)" fg:x="23323" fg:w="395"/><text x="87.8415%" y="1487.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (116 samples, 0.44%)</title><rect x="88.6394%" y="1461" width="0.4356%" height="15" fill="rgb(224,32,19)" fg:x="23602" fg:w="116"/><text x="88.8894%" y="1471.50"></text></g><g><title>core::slice::sort::unstable::sort (116 samples, 0.44%)</title><rect x="88.6394%" y="1445" width="0.4356%" height="15" fill="rgb(247,214,40)" fg:x="23602" fg:w="116"/><text x="88.8894%" y="1455.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (116 samples, 0.44%)</title><rect x="88.6394%" y="1429" width="0.4356%" height="15" fill="rgb(239,199,17)" fg:x="23602" fg:w="116"/><text x="88.8894%" y="1439.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (88 samples, 0.33%)</title><rect x="88.7445%" y="1413" width="0.3305%" height="15" fill="rgb(251,159,9)" fg:x="23630" fg:w="88"/><text x="88.9945%" y="1423.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (67 samples, 0.25%)</title><rect x="88.8234%" y="1397" width="0.2516%" height="15" fill="rgb(225,78,32)" fg:x="23651" fg:w="67"/><text x="89.0734%" y="1407.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (38 samples, 0.14%)</title><rect x="88.9323%" y="1381" width="0.1427%" height="15" fill="rgb(206,97,47)" fg:x="23680" fg:w="38"/><text x="89.1823%" y="1391.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (26 samples, 0.10%)</title><rect x="88.9774%" y="1365" width="0.0976%" height="15" fill="rgb(227,107,4)" fg:x="23692" fg:w="26"/><text x="89.2274%" y="1375.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (14 samples, 0.05%)</title><rect x="89.0224%" y="1349" width="0.0526%" height="15" fill="rgb(241,146,50)" fg:x="23704" fg:w="14"/><text x="89.2724%" y="1359.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="89.0938%" y="1397" width="0.0150%" height="15" fill="rgb(232,92,30)" fg:x="23723" fg:w="4"/><text x="89.3438%" y="1407.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="89.0938%" y="1381" width="0.0150%" height="15" fill="rgb(222,0,40)" fg:x="23723" fg:w="4"/><text x="89.3438%" y="1391.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (4 samples, 0.02%)</title><rect x="89.0938%" y="1365" width="0.0150%" height="15" fill="rgb(219,54,33)" fg:x="23723" fg:w="4"/><text x="89.3438%" y="1375.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4 samples, 0.02%)</title><rect x="89.0938%" y="1349" width="0.0150%" height="15" fill="rgb(226,209,28)" fg:x="23723" fg:w="4"/><text x="89.3438%" y="1359.50"></text></g><g><title>graph_craft::document::NodeNetwork::remove_dead_nodes::_{{closure}} (4 samples, 0.02%)</title><rect x="89.0938%" y="1333" width="0.0150%" height="15" fill="rgb(254,205,35)" fg:x="23723" fg:w="4"/><text x="89.3438%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (5 samples, 0.02%)</title><rect x="89.0938%" y="1461" width="0.0188%" height="15" fill="rgb(230,159,3)" fg:x="23723" fg:w="5"/><text x="89.3438%" y="1471.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (5 samples, 0.02%)</title><rect x="89.0938%" y="1445" width="0.0188%" height="15" fill="rgb(232,190,24)" fg:x="23723" fg:w="5"/><text x="89.3438%" y="1455.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 0.02%)</title><rect x="89.0938%" y="1429" width="0.0188%" height="15" fill="rgb(217,227,44)" fg:x="23723" fg:w="5"/><text x="89.3438%" y="1439.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (5 samples, 0.02%)</title><rect x="89.0938%" y="1413" width="0.0188%" height="15" fill="rgb(236,211,1)" fg:x="23723" fg:w="5"/><text x="89.3438%" y="1423.50"></text></g><g><title>__memmove_avx512_unaligned_erms (52 samples, 0.20%)</title><rect x="89.1201%" y="1461" width="0.1953%" height="15" fill="rgb(250,127,46)" fg:x="23730" fg:w="52"/><text x="89.3701%" y="1471.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="89.3154%" y="1285" width="0.0113%" height="15" fill="rgb(229,213,6)" fg:x="23782" fg:w="3"/><text x="89.5654%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;[graph_craft::document::NodeInput]&gt; (3 samples, 0.01%)</title><rect x="89.3154%" y="1269" width="0.0113%" height="15" fill="rgb(237,15,36)" fg:x="23782" fg:w="3"/><text x="89.5654%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeInput&gt;&gt; (10 samples, 0.04%)</title><rect x="89.3154%" y="1301" width="0.0376%" height="15" fill="rgb(213,131,41)" fg:x="23782" fg:w="10"/><text x="89.5654%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeInput&gt;&gt; (7 samples, 0.03%)</title><rect x="89.3266%" y="1285" width="0.0263%" height="15" fill="rgb(225,82,44)" fg:x="23785" fg:w="7"/><text x="89.5766%" y="1295.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.03%)</title><rect x="89.3266%" y="1269" width="0.0263%" height="15" fill="rgb(249,42,11)" fg:x="23785" fg:w="7"/><text x="89.5766%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.03%)</title><rect x="89.3266%" y="1253" width="0.0263%" height="15" fill="rgb(253,11,29)" fg:x="23785" fg:w="7"/><text x="89.5766%" y="1263.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.03%)</title><rect x="89.3266%" y="1237" width="0.0263%" height="15" fill="rgb(206,8,54)" fg:x="23785" fg:w="7"/><text x="89.5766%" y="1247.50"></text></g><g><title>__rdl_dealloc (7 samples, 0.03%)</title><rect x="89.3266%" y="1221" width="0.0263%" height="15" fill="rgb(222,186,2)" fg:x="23785" fg:w="7"/><text x="89.5766%" y="1231.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7 samples, 0.03%)</title><rect x="89.3266%" y="1205" width="0.0263%" height="15" fill="rgb(221,206,53)" fg:x="23785" fg:w="7"/><text x="89.5766%" y="1215.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7 samples, 0.03%)</title><rect x="89.3266%" y="1189" width="0.0263%" height="15" fill="rgb(230,150,21)" fg:x="23785" fg:w="7"/><text x="89.5766%" y="1199.50"></text></g><g><title>_int_free_merge_chunk (3 samples, 0.01%)</title><rect x="89.3416%" y="1173" width="0.0113%" height="15" fill="rgb(253,202,10)" fg:x="23789" fg:w="3"/><text x="89.5916%" y="1183.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (12 samples, 0.05%)</title><rect x="89.3154%" y="1381" width="0.0451%" height="15" fill="rgb(238,109,40)" fg:x="23782" fg:w="12"/><text x="89.5654%" y="1391.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (12 samples, 0.05%)</title><rect x="89.3154%" y="1365" width="0.0451%" height="15" fill="rgb(247,120,22)" fg:x="23782" fg:w="12"/><text x="89.5654%" y="1375.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (12 samples, 0.05%)</title><rect x="89.3154%" y="1349" width="0.0451%" height="15" fill="rgb(207,43,30)" fg:x="23782" fg:w="12"/><text x="89.5654%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,graph_craft::document::DocumentNode)&gt; (12 samples, 0.05%)</title><rect x="89.3154%" y="1333" width="0.0451%" height="15" fill="rgb(213,211,24)" fg:x="23782" fg:w="12"/><text x="89.5654%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::DocumentNode&gt; (12 samples, 0.05%)</title><rect x="89.3154%" y="1317" width="0.0451%" height="15" fill="rgb(239,73,39)" fg:x="23782" fg:w="12"/><text x="89.5654%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graph_craft::document::NodeId,graph_craft::document::DocumentNode&gt;&gt; (15 samples, 0.06%)</title><rect x="89.3154%" y="1461" width="0.0563%" height="15" fill="rgb(245,182,19)" fg:x="23782" fg:w="15"/><text x="89.5654%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graph_craft::document::NodeId,graph_craft::document::DocumentNode,std::hash::random::RandomState&gt;&gt; (15 samples, 0.06%)</title><rect x="89.3154%" y="1445" width="0.0563%" height="15" fill="rgb(247,143,26)" fg:x="23782" fg:w="15"/><text x="89.5654%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graph_craft::document::NodeId,graph_craft::document::DocumentNode)&gt;&gt; (15 samples, 0.06%)</title><rect x="89.3154%" y="1429" width="0.0563%" height="15" fill="rgb(228,191,23)" fg:x="23782" fg:w="15"/><text x="89.5654%" y="1439.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.06%)</title><rect x="89.3154%" y="1413" width="0.0563%" height="15" fill="rgb(253,165,31)" fg:x="23782" fg:w="15"/><text x="89.5654%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (15 samples, 0.06%)</title><rect x="89.3154%" y="1397" width="0.0563%" height="15" fill="rgb(234,138,20)" fg:x="23782" fg:w="15"/><text x="89.5654%" y="1407.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3 samples, 0.01%)</title><rect x="89.3604%" y="1381" width="0.0113%" height="15" fill="rgb(218,191,29)" fg:x="23794" fg:w="3"/><text x="89.6104%" y="1391.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="89.3604%" y="1365" width="0.0113%" height="15" fill="rgb(221,157,19)" fg:x="23794" fg:w="3"/><text x="89.6104%" y="1375.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="89.3604%" y="1349" width="0.0113%" height="15" fill="rgb(237,26,42)" fg:x="23794" fg:w="3"/><text x="89.6104%" y="1359.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.01%)</title><rect x="89.3604%" y="1333" width="0.0113%" height="15" fill="rgb(220,163,24)" fg:x="23794" fg:w="3"/><text x="89.6104%" y="1343.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.01%)</title><rect x="89.3604%" y="1317" width="0.0113%" height="15" fill="rgb(242,115,20)" fg:x="23794" fg:w="3"/><text x="89.6104%" y="1327.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.01%)</title><rect x="89.3604%" y="1301" width="0.0113%" height="15" fill="rgb(210,206,9)" fg:x="23794" fg:w="3"/><text x="89.6104%" y="1311.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="89.3754%" y="1397" width="0.0263%" height="15" fill="rgb(208,71,17)" fg:x="23798" fg:w="7"/><text x="89.6254%" y="1407.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="89.3754%" y="1381" width="0.0263%" height="15" fill="rgb(233,7,5)" fg:x="23798" fg:w="7"/><text x="89.6254%" y="1391.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="89.3754%" y="1365" width="0.0263%" height="15" fill="rgb(207,92,33)" fg:x="23798" fg:w="7"/><text x="89.6254%" y="1375.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.04%)</title><rect x="89.3754%" y="1429" width="0.0376%" height="15" fill="rgb(218,87,9)" fg:x="23798" fg:w="10"/><text x="89.6254%" y="1439.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.04%)</title><rect x="89.3754%" y="1413" width="0.0376%" height="15" fill="rgb(219,47,37)" fg:x="23798" fg:w="10"/><text x="89.6254%" y="1423.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.01%)</title><rect x="89.4017%" y="1397" width="0.0113%" height="15" fill="rgb(221,152,34)" fg:x="23805" fg:w="3"/><text x="89.6517%" y="1407.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="89.4017%" y="1381" width="0.0113%" height="15" fill="rgb(235,176,21)" fg:x="23805" fg:w="3"/><text x="89.6517%" y="1391.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.01%)</title><rect x="89.4017%" y="1365" width="0.0113%" height="15" fill="rgb(232,212,21)" fg:x="23805" fg:w="3"/><text x="89.6517%" y="1375.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.01%)</title><rect x="89.4017%" y="1349" width="0.0113%" height="15" fill="rgb(245,82,39)" fg:x="23805" fg:w="3"/><text x="89.6517%" y="1359.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="89.4017%" y="1333" width="0.0113%" height="15" fill="rgb(241,52,51)" fg:x="23805" fg:w="3"/><text x="89.6517%" y="1343.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="89.4017%" y="1317" width="0.0113%" height="15" fill="rgb(219,91,24)" fg:x="23805" fg:w="3"/><text x="89.6517%" y="1327.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="89.4017%" y="1301" width="0.0113%" height="15" fill="rgb(241,142,12)" fg:x="23805" fg:w="3"/><text x="89.6517%" y="1311.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.06%)</title><rect x="89.4205%" y="1349" width="0.0563%" height="15" fill="rgb(230,27,9)" fg:x="23810" fg:w="15"/><text x="89.6705%" y="1359.50"></text></g><g><title>__memmove_avx512_unaligned_erms (15 samples, 0.06%)</title><rect x="89.4205%" y="1333" width="0.0563%" height="15" fill="rgb(249,181,32)" fg:x="23810" fg:w="15"/><text x="89.6705%" y="1343.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.02%)</title><rect x="89.5182%" y="1221" width="0.0150%" height="15" fill="rgb(230,107,3)" fg:x="23836" fg:w="4"/><text x="89.7682%" y="1231.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (15 samples, 0.06%)</title><rect x="89.4844%" y="1285" width="0.0563%" height="15" fill="rgb(246,204,14)" fg:x="23827" fg:w="15"/><text x="89.7344%" y="1295.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (15 samples, 0.06%)</title><rect x="89.4844%" y="1269" width="0.0563%" height="15" fill="rgb(213,192,47)" fg:x="23827" fg:w="15"/><text x="89.7344%" y="1279.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (15 samples, 0.06%)</title><rect x="89.4844%" y="1253" width="0.0563%" height="15" fill="rgb(240,44,36)" fg:x="23827" fg:w="15"/><text x="89.7344%" y="1263.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (10 samples, 0.04%)</title><rect x="89.5031%" y="1237" width="0.0376%" height="15" fill="rgb(244,209,38)" fg:x="23832" fg:w="10"/><text x="89.7531%" y="1247.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.02%)</title><rect x="89.5407%" y="1285" width="0.0150%" height="15" fill="rgb(219,34,37)" fg:x="23842" fg:w="4"/><text x="89.7907%" y="1295.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (30 samples, 0.11%)</title><rect x="89.4806%" y="1349" width="0.1127%" height="15" fill="rgb(210,28,6)" fg:x="23826" fg:w="30"/><text x="89.7306%" y="1359.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (30 samples, 0.11%)</title><rect x="89.4806%" y="1333" width="0.1127%" height="15" fill="rgb(244,110,52)" fg:x="23826" fg:w="30"/><text x="89.7306%" y="1343.50"></text></g><g><title>hashbrown::map::make_hash (30 samples, 0.11%)</title><rect x="89.4806%" y="1317" width="0.1127%" height="15" fill="rgb(254,124,47)" fg:x="23826" fg:w="30"/><text x="89.7306%" y="1327.50"></text></g><g><title>core::hash::BuildHasher::hash_one (30 samples, 0.11%)</title><rect x="89.4806%" y="1301" width="0.1127%" height="15" fill="rgb(254,110,13)" fg:x="23826" fg:w="30"/><text x="89.7306%" y="1311.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.04%)</title><rect x="89.5557%" y="1285" width="0.0376%" height="15" fill="rgb(252,57,21)" fg:x="23846" fg:w="10"/><text x="89.8057%" y="1295.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (10 samples, 0.04%)</title><rect x="89.5557%" y="1269" width="0.0376%" height="15" fill="rgb(242,60,45)" fg:x="23846" fg:w="10"/><text x="89.8057%" y="1279.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (10 samples, 0.04%)</title><rect x="89.5557%" y="1253" width="0.0376%" height="15" fill="rgb(234,49,30)" fg:x="23846" fg:w="10"/><text x="89.8057%" y="1263.50"></text></g><g><title>core::hash::Hasher::write_u64 (10 samples, 0.04%)</title><rect x="89.5557%" y="1237" width="0.0376%" height="15" fill="rgb(218,98,6)" fg:x="23846" fg:w="10"/><text x="89.8057%" y="1247.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.04%)</title><rect x="89.5557%" y="1221" width="0.0376%" height="15" fill="rgb(220,174,29)" fg:x="23846" fg:w="10"/><text x="89.8057%" y="1231.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.04%)</title><rect x="89.5557%" y="1205" width="0.0376%" height="15" fill="rgb(236,163,23)" fg:x="23846" fg:w="10"/><text x="89.8057%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.04%)</title><rect x="89.5557%" y="1189" width="0.0376%" height="15" fill="rgb(242,114,45)" fg:x="23846" fg:w="10"/><text x="89.8057%" y="1199.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3 samples, 0.01%)</title><rect x="89.5933%" y="1317" width="0.0113%" height="15" fill="rgb(232,10,53)" fg:x="23856" fg:w="3"/><text x="89.8433%" y="1327.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (4 samples, 0.02%)</title><rect x="89.6045%" y="1317" width="0.0150%" height="15" fill="rgb(245,108,29)" fg:x="23859" fg:w="4"/><text x="89.8545%" y="1327.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (4 samples, 0.02%)</title><rect x="89.6196%" y="1317" width="0.0150%" height="15" fill="rgb(240,89,53)" fg:x="23863" fg:w="4"/><text x="89.8696%" y="1327.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (12 samples, 0.05%)</title><rect x="89.5933%" y="1333" width="0.0451%" height="15" fill="rgb(226,60,45)" fg:x="23856" fg:w="12"/><text x="89.8433%" y="1343.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (14 samples, 0.05%)</title><rect x="89.5933%" y="1349" width="0.0526%" height="15" fill="rgb(230,41,44)" fg:x="23856" fg:w="14"/><text x="89.8433%" y="1359.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (64 samples, 0.24%)</title><rect x="89.4168%" y="1413" width="0.2404%" height="15" fill="rgb(230,26,20)" fg:x="23809" fg:w="64"/><text x="89.6668%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (64 samples, 0.24%)</title><rect x="89.4168%" y="1397" width="0.2404%" height="15" fill="rgb(237,170,32)" fg:x="23809" fg:w="64"/><text x="89.6668%" y="1407.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (63 samples, 0.24%)</title><rect x="89.4205%" y="1381" width="0.2366%" height="15" fill="rgb(212,35,42)" fg:x="23810" fg:w="63"/><text x="89.6705%" y="1391.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (63 samples, 0.24%)</title><rect x="89.4205%" y="1365" width="0.2366%" height="15" fill="rgb(227,31,34)" fg:x="23810" fg:w="63"/><text x="89.6705%" y="1375.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (3 samples, 0.01%)</title><rect x="89.6458%" y="1349" width="0.0113%" height="15" fill="rgb(216,19,18)" fg:x="23870" fg:w="3"/><text x="89.8958%" y="1359.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (3 samples, 0.01%)</title><rect x="89.6458%" y="1333" width="0.0113%" height="15" fill="rgb(211,133,42)" fg:x="23870" fg:w="3"/><text x="89.8958%" y="1343.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3 samples, 0.01%)</title><rect x="89.6458%" y="1317" width="0.0113%" height="15" fill="rgb(244,66,13)" fg:x="23870" fg:w="3"/><text x="89.8958%" y="1327.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (3 samples, 0.01%)</title><rect x="89.6458%" y="1301" width="0.0113%" height="15" fill="rgb(218,185,50)" fg:x="23870" fg:w="3"/><text x="89.8958%" y="1311.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="89.6458%" y="1285" width="0.0113%" height="15" fill="rgb(219,149,13)" fg:x="23870" fg:w="3"/><text x="89.8958%" y="1295.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="89.6458%" y="1269" width="0.0113%" height="15" fill="rgb(221,125,0)" fg:x="23870" fg:w="3"/><text x="89.8958%" y="1279.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="89.6458%" y="1253" width="0.0113%" height="15" fill="rgb(247,126,27)" fg:x="23870" fg:w="3"/><text x="89.8958%" y="1263.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="89.6458%" y="1237" width="0.0113%" height="15" fill="rgb(250,138,30)" fg:x="23870" fg:w="3"/><text x="89.8958%" y="1247.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="89.6458%" y="1221" width="0.0113%" height="15" fill="rgb(230,151,9)" fg:x="23870" fg:w="3"/><text x="89.8958%" y="1231.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="89.6458%" y="1205" width="0.0113%" height="15" fill="rgb(233,80,38)" fg:x="23870" fg:w="3"/><text x="89.8958%" y="1215.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="89.6458%" y="1189" width="0.0113%" height="15" fill="rgb(232,68,43)" fg:x="23870" fg:w="3"/><text x="89.8958%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (70 samples, 0.26%)</title><rect x="89.4130%" y="1429" width="0.2629%" height="15" fill="rgb(254,5,50)" fg:x="23808" fg:w="70"/><text x="89.6630%" y="1439.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (5 samples, 0.02%)</title><rect x="89.6571%" y="1413" width="0.0188%" height="15" fill="rgb(225,45,5)" fg:x="23873" fg:w="5"/><text x="89.9071%" y="1423.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4 samples, 0.02%)</title><rect x="89.6759%" y="1413" width="0.0150%" height="15" fill="rgb(239,22,3)" fg:x="23878" fg:w="4"/><text x="89.9259%" y="1423.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 0.02%)</title><rect x="89.6759%" y="1397" width="0.0150%" height="15" fill="rgb(243,129,0)" fg:x="23878" fg:w="4"/><text x="89.9259%" y="1407.50"></text></g><g><title>core::ptr::write (4 samples, 0.02%)</title><rect x="89.6759%" y="1381" width="0.0150%" height="15" fill="rgb(223,164,0)" fg:x="23878" fg:w="4"/><text x="89.9259%" y="1391.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (86 samples, 0.32%)</title><rect x="89.3717%" y="1461" width="0.3230%" height="15" fill="rgb(221,46,29)" fg:x="23797" fg:w="86"/><text x="89.6217%" y="1471.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (86 samples, 0.32%)</title><rect x="89.3717%" y="1445" width="0.3230%" height="15" fill="rgb(205,97,47)" fg:x="23797" fg:w="86"/><text x="89.6217%" y="1455.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (5 samples, 0.02%)</title><rect x="89.6759%" y="1429" width="0.0188%" height="15" fill="rgb(249,14,8)" fg:x="23878" fg:w="5"/><text x="89.9259%" y="1439.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="89.7172%" y="1349" width="0.0113%" height="15" fill="rgb(216,77,3)" fg:x="23889" fg:w="3"/><text x="89.9672%" y="1359.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="89.6984%" y="1397" width="0.0376%" height="15" fill="rgb(206,168,54)" fg:x="23884" fg:w="10"/><text x="89.9484%" y="1407.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="89.6984%" y="1381" width="0.0376%" height="15" fill="rgb(236,3,41)" fg:x="23884" fg:w="10"/><text x="89.9484%" y="1391.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.04%)</title><rect x="89.6984%" y="1365" width="0.0376%" height="15" fill="rgb(231,132,24)" fg:x="23884" fg:w="10"/><text x="89.9484%" y="1375.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="89.7397%" y="1333" width="0.0225%" height="15" fill="rgb(227,221,40)" fg:x="23895" fg:w="6"/><text x="89.9897%" y="1343.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="89.7397%" y="1317" width="0.0225%" height="15" fill="rgb(233,151,11)" fg:x="23895" fg:w="6"/><text x="89.9897%" y="1327.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="89.7397%" y="1301" width="0.0225%" height="15" fill="rgb(247,81,35)" fg:x="23895" fg:w="6"/><text x="89.9897%" y="1311.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="89.7510%" y="1285" width="0.0113%" height="15" fill="rgb(243,128,48)" fg:x="23898" fg:w="3"/><text x="90.0010%" y="1295.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.08%)</title><rect x="89.6947%" y="1429" width="0.0751%" height="15" fill="rgb(253,16,10)" fg:x="23883" fg:w="20"/><text x="89.9447%" y="1439.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 0.07%)</title><rect x="89.6984%" y="1413" width="0.0714%" height="15" fill="rgb(228,67,27)" fg:x="23884" fg:w="19"/><text x="89.9484%" y="1423.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 0.03%)</title><rect x="89.7397%" y="1397" width="0.0300%" height="15" fill="rgb(231,105,25)" fg:x="23895" fg:w="8"/><text x="89.9897%" y="1407.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (8 samples, 0.03%)</title><rect x="89.7397%" y="1381" width="0.0300%" height="15" fill="rgb(213,166,47)" fg:x="23895" fg:w="8"/><text x="89.9897%" y="1391.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (8 samples, 0.03%)</title><rect x="89.7397%" y="1365" width="0.0300%" height="15" fill="rgb(209,27,10)" fg:x="23895" fg:w="8"/><text x="89.9897%" y="1375.50"></text></g><g><title>core::hash::Hasher::write_u64 (8 samples, 0.03%)</title><rect x="89.7397%" y="1349" width="0.0300%" height="15" fill="rgb(241,44,30)" fg:x="23895" fg:w="8"/><text x="89.9897%" y="1359.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.02%)</title><rect x="89.8111%" y="1381" width="0.0188%" height="15" fill="rgb(223,216,15)" fg:x="23914" fg:w="5"/><text x="90.0611%" y="1391.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.02%)</title><rect x="89.8111%" y="1365" width="0.0188%" height="15" fill="rgb(227,14,7)" fg:x="23914" fg:w="5"/><text x="90.0611%" y="1375.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16 samples, 0.06%)</title><rect x="89.7735%" y="1413" width="0.0601%" height="15" fill="rgb(237,14,5)" fg:x="23904" fg:w="16"/><text x="90.0235%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (16 samples, 0.06%)</title><rect x="89.7735%" y="1397" width="0.0601%" height="15" fill="rgb(232,14,36)" fg:x="23904" fg:w="16"/><text x="90.0235%" y="1407.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::read (4 samples, 0.02%)</title><rect x="89.8336%" y="1397" width="0.0150%" height="15" fill="rgb(234,0,38)" fg:x="23920" fg:w="4"/><text x="90.0836%" y="1407.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (4 samples, 0.02%)</title><rect x="89.8336%" y="1381" width="0.0150%" height="15" fill="rgb(207,170,14)" fg:x="23920" fg:w="4"/><text x="90.0836%" y="1391.50"></text></g><g><title>core::ptr::read (4 samples, 0.02%)</title><rect x="89.8336%" y="1365" width="0.0150%" height="15" fill="rgb(252,45,13)" fg:x="23920" fg:w="4"/><text x="90.0836%" y="1375.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="89.8336%" y="1349" width="0.0150%" height="15" fill="rgb(213,142,7)" fg:x="23920" fg:w="4"/><text x="90.0836%" y="1359.50"></text></g><g><title>graph_craft::document::NodeNetwork::remove_dead_nodes (207 samples, 0.78%)</title><rect x="89.0750%" y="1477" width="0.7774%" height="15" fill="rgb(216,157,23)" fg:x="23718" fg:w="207"/><text x="89.3250%" y="1487.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove_entry (42 samples, 0.16%)</title><rect x="89.6947%" y="1461" width="0.1577%" height="15" fill="rgb(212,145,33)" fg:x="23883" fg:w="42"/><text x="89.9447%" y="1471.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (42 samples, 0.16%)</title><rect x="89.6947%" y="1445" width="0.1577%" height="15" fill="rgb(233,26,13)" fg:x="23883" fg:w="42"/><text x="89.9447%" y="1455.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (22 samples, 0.08%)</title><rect x="89.7698%" y="1429" width="0.0826%" height="15" fill="rgb(219,196,19)" fg:x="23903" fg:w="22"/><text x="90.0198%" y="1439.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (5 samples, 0.02%)</title><rect x="89.8336%" y="1413" width="0.0188%" height="15" fill="rgb(246,56,21)" fg:x="23920" fg:w="5"/><text x="90.0836%" y="1423.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="89.8524%" y="1333" width="0.0113%" height="15" fill="rgb(222,28,53)" fg:x="23925" fg:w="3"/><text x="90.1024%" y="1343.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="89.8524%" y="1317" width="0.0113%" height="15" fill="rgb(224,5,27)" fg:x="23925" fg:w="3"/><text x="90.1024%" y="1327.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="89.8524%" y="1301" width="0.0113%" height="15" fill="rgb(220,153,33)" fg:x="23925" fg:w="3"/><text x="90.1024%" y="1311.50"></text></g><g><title>graph_craft::document::NodeNetwork::remove_redundant_id_nodes (6 samples, 0.02%)</title><rect x="89.8524%" y="1477" width="0.0225%" height="15" fill="rgb(226,58,19)" fg:x="23925" fg:w="6"/><text x="90.1024%" y="1487.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 0.02%)</title><rect x="89.8524%" y="1461" width="0.0225%" height="15" fill="rgb(239,112,23)" fg:x="23925" fg:w="6"/><text x="90.1024%" y="1471.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6 samples, 0.02%)</title><rect x="89.8524%" y="1445" width="0.0225%" height="15" fill="rgb(251,213,20)" fg:x="23925" fg:w="6"/><text x="90.1024%" y="1455.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.02%)</title><rect x="89.8524%" y="1429" width="0.0225%" height="15" fill="rgb(215,181,21)" fg:x="23925" fg:w="6"/><text x="90.1024%" y="1439.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6 samples, 0.02%)</title><rect x="89.8524%" y="1413" width="0.0225%" height="15" fill="rgb(240,8,35)" fg:x="23925" fg:w="6"/><text x="90.1024%" y="1423.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="89.8524%" y="1397" width="0.0225%" height="15" fill="rgb(232,203,3)" fg:x="23925" fg:w="6"/><text x="90.1024%" y="1407.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="89.8524%" y="1381" width="0.0225%" height="15" fill="rgb(214,202,43)" fg:x="23925" fg:w="6"/><text x="90.1024%" y="1391.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (6 samples, 0.02%)</title><rect x="89.8524%" y="1365" width="0.0225%" height="15" fill="rgb(254,35,11)" fg:x="23925" fg:w="6"/><text x="90.1024%" y="1375.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6 samples, 0.02%)</title><rect x="89.8524%" y="1349" width="0.0225%" height="15" fill="rgb(239,173,13)" fg:x="23925" fg:w="6"/><text x="90.1024%" y="1359.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (3 samples, 0.01%)</title><rect x="89.8637%" y="1333" width="0.0113%" height="15" fill="rgb(220,141,0)" fg:x="23928" fg:w="3"/><text x="90.1137%" y="1343.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.01%)</title><rect x="89.8637%" y="1317" width="0.0113%" height="15" fill="rgb(210,98,12)" fg:x="23928" fg:w="3"/><text x="90.1137%" y="1327.50"></text></g><g><title>graph_craft::document::NodeNetwork::remove_redundant_id_nodes::_{{closure}} (3 samples, 0.01%)</title><rect x="89.8637%" y="1301" width="0.0113%" height="15" fill="rgb(254,153,22)" fg:x="23928" fg:w="3"/><text x="90.1137%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (5,762 samples, 21.64%)</title><rect x="68.2578%" y="1669" width="21.6397%" height="15" fill="rgb(247,223,17)" fg:x="18175" fg:w="5762"/><text x="68.5078%" y="1679.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5,762 samples, 21.64%)</title><rect x="68.2578%" y="1653" width="21.6397%" height="15" fill="rgb(246,56,7)" fg:x="18175" fg:w="5762"/><text x="68.5078%" y="1663.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::ve..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (5,762 samples, 21.64%)</title><rect x="68.2578%" y="1637" width="21.6397%" height="15" fill="rgb(240,226,12)" fg:x="18175" fg:w="5762"/><text x="68.5078%" y="1647.50">alloc::vec::Vec&lt;T,A&gt;::extend_trust..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5,762 samples, 21.64%)</title><rect x="68.2578%" y="1621" width="21.6397%" height="15" fill="rgb(205,87,46)" fg:x="18175" fg:w="5762"/><text x="68.5078%" y="1631.50">core::iter::traits::iterator::Iter..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,762 samples, 21.64%)</title><rect x="68.2578%" y="1605" width="21.6397%" height="15" fill="rgb(245,214,51)" fg:x="18175" fg:w="5762"/><text x="68.5078%" y="1615.50">&lt;core::iter::adapters::map::Map&lt;I,..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,762 samples, 21.64%)</title><rect x="68.2578%" y="1589" width="21.6397%" height="15" fill="rgb(223,172,33)" fg:x="18175" fg:w="5762"/><text x="68.5078%" y="1599.50">&lt;alloc::vec::into_iter::IntoIter&lt;T..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (5,762 samples, 21.64%)</title><rect x="68.2578%" y="1573" width="21.6397%" height="15" fill="rgb(227,203,34)" fg:x="18175" fg:w="5762"/><text x="68.5078%" y="1583.50">core::iter::adapters::map::map_fol..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (5,762 samples, 21.64%)</title><rect x="68.2578%" y="1557" width="21.6397%" height="15" fill="rgb(248,143,44)" fg:x="18175" fg:w="5762"/><text x="68.5078%" y="1567.50">core::ops::function::impls::&lt;impl ..</text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (5,762 samples, 21.64%)</title><rect x="68.2578%" y="1541" width="21.6397%" height="15" fill="rgb(226,162,5)" fg:x="18175" fg:w="5762"/><text x="68.5078%" y="1551.50">compile_demo_art::compile_to_proto..</text></g><g><title>compile_demo_art::compile (5,762 samples, 21.64%)</title><rect x="68.2578%" y="1525" width="21.6397%" height="15" fill="rgb(211,143,1)" fg:x="18175" fg:w="5762"/><text x="68.5078%" y="1535.50">compile_demo_art::compile</text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (5,762 samples, 21.64%)</title><rect x="68.2578%" y="1509" width="21.6397%" height="15" fill="rgb(224,96,15)" fg:x="18175" fg:w="5762"/><text x="68.5078%" y="1519.50">graph_craft::graphene_compiler::Co..</text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (5,762 samples, 21.64%)</title><rect x="68.2578%" y="1493" width="21.6397%" height="15" fill="rgb(222,4,38)" fg:x="18175" fg:w="5762"/><text x="68.5078%" y="1503.50">graph_craft::graphene_compiler::Co..</text></g><g><title>graph_craft::document::NodeNetwork::resolve_scope_inputs (6 samples, 0.02%)</title><rect x="89.8749%" y="1477" width="0.0225%" height="15" fill="rgb(253,228,15)" fg:x="23931" fg:w="6"/><text x="90.1249%" y="1487.50"></text></g><g><title>&lt;graph_craft::document::NodeInput as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="89.9087%" y="1461" width="0.0113%" height="15" fill="rgb(242,194,12)" fg:x="23940" fg:w="3"/><text x="90.1587%" y="1471.50"></text></g><g><title>&lt;graphene_core::memo::MemoHash&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="89.9087%" y="1445" width="0.0113%" height="15" fill="rgb(214,177,31)" fg:x="23940" fg:w="3"/><text x="90.1587%" y="1455.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="89.9012%" y="1525" width="0.0300%" height="15" fill="rgb(226,58,51)" fg:x="23938" fg:w="8"/><text x="90.1512%" y="1535.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.03%)</title><rect x="89.9050%" y="1509" width="0.0263%" height="15" fill="rgb(250,119,16)" fg:x="23939" fg:w="7"/><text x="90.1550%" y="1519.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.03%)</title><rect x="89.9050%" y="1493" width="0.0263%" height="15" fill="rgb(223,128,53)" fg:x="23939" fg:w="7"/><text x="90.1550%" y="1503.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.03%)</title><rect x="89.9050%" y="1477" width="0.0263%" height="15" fill="rgb(251,199,15)" fg:x="23939" fg:w="7"/><text x="90.1550%" y="1487.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="89.9388%" y="1493" width="0.0188%" height="15" fill="rgb(235,168,42)" fg:x="23948" fg:w="5"/><text x="90.1888%" y="1503.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.02%)</title><rect x="89.9388%" y="1477" width="0.0188%" height="15" fill="rgb(250,210,17)" fg:x="23948" fg:w="5"/><text x="90.1888%" y="1487.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.02%)</title><rect x="89.9388%" y="1461" width="0.0188%" height="15" fill="rgb(226,36,41)" fg:x="23948" fg:w="5"/><text x="90.1888%" y="1471.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.02%)</title><rect x="89.9388%" y="1445" width="0.0188%" height="15" fill="rgb(225,87,10)" fg:x="23948" fg:w="5"/><text x="90.1888%" y="1455.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (3 samples, 0.01%)</title><rect x="89.9463%" y="1429" width="0.0113%" height="15" fill="rgb(228,83,9)" fg:x="23950" fg:w="3"/><text x="90.1963%" y="1439.50"></text></g><g><title>&lt;graph_craft::document::NodeInput as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="89.9726%" y="1317" width="0.0113%" height="15" fill="rgb(225,16,36)" fg:x="23957" fg:w="3"/><text x="90.2226%" y="1327.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="89.9726%" y="1301" width="0.0113%" height="15" fill="rgb(242,198,13)" fg:x="23957" fg:w="3"/><text x="90.2226%" y="1311.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="89.9726%" y="1285" width="0.0113%" height="15" fill="rgb(239,25,51)" fg:x="23957" fg:w="3"/><text x="90.2226%" y="1295.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="89.9726%" y="1269" width="0.0113%" height="15" fill="rgb(239,28,37)" fg:x="23957" fg:w="3"/><text x="90.2226%" y="1279.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (3 samples, 0.01%)</title><rect x="89.9726%" y="1253" width="0.0113%" height="15" fill="rgb(234,70,17)" fg:x="23957" fg:w="3"/><text x="90.2226%" y="1263.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (3 samples, 0.01%)</title><rect x="89.9726%" y="1237" width="0.0113%" height="15" fill="rgb(231,215,53)" fg:x="23957" fg:w="3"/><text x="90.2226%" y="1247.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.01%)</title><rect x="89.9726%" y="1221" width="0.0113%" height="15" fill="rgb(218,140,42)" fg:x="23957" fg:w="3"/><text x="90.2226%" y="1231.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.01%)</title><rect x="89.9726%" y="1205" width="0.0113%" height="15" fill="rgb(233,227,45)" fg:x="23957" fg:w="3"/><text x="90.2226%" y="1215.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.01%)</title><rect x="89.9726%" y="1189" width="0.0113%" height="15" fill="rgb(225,189,21)" fg:x="23957" fg:w="3"/><text x="90.2226%" y="1199.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="89.9726%" y="1173" width="0.0113%" height="15" fill="rgb(237,176,54)" fg:x="23957" fg:w="3"/><text x="90.2226%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="89.9839%" y="1317" width="0.0150%" height="15" fill="rgb(215,131,46)" fg:x="23960" fg:w="4"/><text x="90.2339%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="89.9839%" y="1301" width="0.0150%" height="15" fill="rgb(218,95,20)" fg:x="23960" fg:w="4"/><text x="90.2339%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (4 samples, 0.02%)</title><rect x="89.9839%" y="1285" width="0.0150%" height="15" fill="rgb(208,198,12)" fg:x="23960" fg:w="4"/><text x="90.2339%" y="1295.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.02%)</title><rect x="89.9839%" y="1269" width="0.0150%" height="15" fill="rgb(239,107,50)" fg:x="23960" fg:w="4"/><text x="90.2339%" y="1279.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.02%)</title><rect x="89.9839%" y="1253" width="0.0150%" height="15" fill="rgb(240,217,37)" fg:x="23960" fg:w="4"/><text x="90.2339%" y="1263.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.02%)</title><rect x="89.9839%" y="1237" width="0.0150%" height="15" fill="rgb(242,197,49)" fg:x="23960" fg:w="4"/><text x="90.2339%" y="1247.50"></text></g><g><title>__rdl_alloc (4 samples, 0.02%)</title><rect x="89.9839%" y="1221" width="0.0150%" height="15" fill="rgb(219,171,17)" fg:x="23960" fg:w="4"/><text x="90.2339%" y="1231.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.02%)</title><rect x="89.9839%" y="1205" width="0.0150%" height="15" fill="rgb(209,81,40)" fg:x="23960" fg:w="4"/><text x="90.2339%" y="1215.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="89.9839%" y="1189" width="0.0150%" height="15" fill="rgb(237,156,30)" fg:x="23960" fg:w="4"/><text x="90.2339%" y="1199.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="89.9839%" y="1173" width="0.0150%" height="15" fill="rgb(212,127,16)" fg:x="23960" fg:w="4"/><text x="90.2339%" y="1183.50"></text></g><g><title>unlink_chunk.isra.0 (3 samples, 0.01%)</title><rect x="89.9876%" y="1157" width="0.0113%" height="15" fill="rgb(226,66,32)" fg:x="23961" fg:w="3"/><text x="90.2376%" y="1167.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (14 samples, 0.05%)</title><rect x="89.9576%" y="1445" width="0.0526%" height="15" fill="rgb(245,22,46)" fg:x="23953" fg:w="14"/><text x="90.2076%" y="1455.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (14 samples, 0.05%)</title><rect x="89.9576%" y="1429" width="0.0526%" height="15" fill="rgb(210,112,21)" fg:x="23953" fg:w="14"/><text x="90.2076%" y="1439.50"></text></g><g><title>core::clone::Clone::clone (14 samples, 0.05%)</title><rect x="89.9576%" y="1413" width="0.0526%" height="15" fill="rgb(207,118,39)" fg:x="23953" fg:w="14"/><text x="90.2076%" y="1423.50"></text></g><g><title>&lt;graph_craft::document::DocumentNode as core::clone::Clone&gt;::clone (12 samples, 0.05%)</title><rect x="89.9651%" y="1397" width="0.0451%" height="15" fill="rgb(205,206,35)" fg:x="23955" fg:w="12"/><text x="90.2151%" y="1407.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.04%)</title><rect x="89.9688%" y="1381" width="0.0413%" height="15" fill="rgb(222,120,2)" fg:x="23956" fg:w="11"/><text x="90.2188%" y="1391.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11 samples, 0.04%)</title><rect x="89.9688%" y="1365" width="0.0413%" height="15" fill="rgb(205,38,18)" fg:x="23956" fg:w="11"/><text x="90.2188%" y="1375.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.04%)</title><rect x="89.9688%" y="1349" width="0.0413%" height="15" fill="rgb(226,61,2)" fg:x="23956" fg:w="11"/><text x="90.2188%" y="1359.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11 samples, 0.04%)</title><rect x="89.9688%" y="1333" width="0.0413%" height="15" fill="rgb(242,161,23)" fg:x="23956" fg:w="11"/><text x="90.2188%" y="1343.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (3 samples, 0.01%)</title><rect x="89.9989%" y="1317" width="0.0113%" height="15" fill="rgb(213,13,52)" fg:x="23964" fg:w="3"/><text x="90.2489%" y="1327.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (30 samples, 0.11%)</title><rect x="89.9012%" y="1589" width="0.1127%" height="15" fill="rgb(246,209,47)" fg:x="23938" fg:w="30"/><text x="90.1512%" y="1599.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (30 samples, 0.11%)</title><rect x="89.9012%" y="1573" width="0.1127%" height="15" fill="rgb(214,41,3)" fg:x="23938" fg:w="30"/><text x="90.1512%" y="1583.50"></text></g><g><title>core::clone::Clone::clone (30 samples, 0.11%)</title><rect x="89.9012%" y="1557" width="0.1127%" height="15" fill="rgb(236,119,38)" fg:x="23938" fg:w="30"/><text x="90.1512%" y="1567.50"></text></g><g><title>&lt;graph_craft::document::DocumentNode as core::clone::Clone&gt;::clone (30 samples, 0.11%)</title><rect x="89.9012%" y="1541" width="0.1127%" height="15" fill="rgb(218,50,11)" fg:x="23938" fg:w="30"/><text x="90.1512%" y="1551.50"></text></g><g><title>&lt;graph_craft::document::DocumentNodeImplementation as core::clone::Clone&gt;::clone (22 samples, 0.08%)</title><rect x="89.9313%" y="1525" width="0.0826%" height="15" fill="rgb(228,38,11)" fg:x="23946" fg:w="22"/><text x="90.1813%" y="1535.50"></text></g><g><title>&lt;graph_craft::document::NodeNetwork as core::clone::Clone&gt;::clone (20 samples, 0.08%)</title><rect x="89.9388%" y="1509" width="0.0751%" height="15" fill="rgb(212,13,9)" fg:x="23948" fg:w="20"/><text x="90.1888%" y="1519.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (15 samples, 0.06%)</title><rect x="89.9576%" y="1493" width="0.0563%" height="15" fill="rgb(208,211,9)" fg:x="23953" fg:w="15"/><text x="90.2076%" y="1503.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.06%)</title><rect x="89.9576%" y="1477" width="0.0563%" height="15" fill="rgb(239,39,32)" fg:x="23953" fg:w="15"/><text x="90.2076%" y="1487.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.06%)</title><rect x="89.9576%" y="1461" width="0.0563%" height="15" fill="rgb(254,179,26)" fg:x="23953" fg:w="15"/><text x="90.2076%" y="1471.50"></text></g><g><title>&lt;graph_craft::document::NodeNetwork as core::clone::Clone&gt;::clone (34 samples, 0.13%)</title><rect x="89.8975%" y="1653" width="0.1277%" height="15" fill="rgb(249,165,28)" fg:x="23937" fg:w="34"/><text x="90.1475%" y="1663.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (33 samples, 0.12%)</title><rect x="89.9012%" y="1637" width="0.1239%" height="15" fill="rgb(225,59,50)" fg:x="23938" fg:w="33"/><text x="90.1512%" y="1647.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (33 samples, 0.12%)</title><rect x="89.9012%" y="1621" width="0.1239%" height="15" fill="rgb(209,122,5)" fg:x="23938" fg:w="33"/><text x="90.1512%" y="1631.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (33 samples, 0.12%)</title><rect x="89.9012%" y="1605" width="0.1239%" height="15" fill="rgb(214,65,34)" fg:x="23938" fg:w="33"/><text x="90.1512%" y="1615.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (3 samples, 0.01%)</title><rect x="90.0139%" y="1589" width="0.0113%" height="15" fill="rgb(249,183,32)" fg:x="23968" fg:w="3"/><text x="90.2639%" y="1599.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3 samples, 0.01%)</title><rect x="90.0139%" y="1573" width="0.0113%" height="15" fill="rgb(218,122,24)" fg:x="23968" fg:w="3"/><text x="90.2639%" y="1583.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (3 samples, 0.01%)</title><rect x="90.0139%" y="1557" width="0.0113%" height="15" fill="rgb(224,109,18)" fg:x="23968" fg:w="3"/><text x="90.2639%" y="1567.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="90.0139%" y="1541" width="0.0113%" height="15" fill="rgb(210,68,50)" fg:x="23968" fg:w="3"/><text x="90.2639%" y="1551.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="90.0139%" y="1525" width="0.0113%" height="15" fill="rgb(212,184,34)" fg:x="23968" fg:w="3"/><text x="90.2639%" y="1535.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="90.0139%" y="1509" width="0.0113%" height="15" fill="rgb(238,105,48)" fg:x="23968" fg:w="3"/><text x="90.2639%" y="1519.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="90.0139%" y="1493" width="0.0113%" height="15" fill="rgb(222,134,54)" fg:x="23968" fg:w="3"/><text x="90.2639%" y="1503.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="90.0139%" y="1477" width="0.0113%" height="15" fill="rgb(246,24,43)" fg:x="23968" fg:w="3"/><text x="90.2639%" y="1487.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="90.0139%" y="1461" width="0.0113%" height="15" fill="rgb(227,169,22)" fg:x="23968" fg:w="3"/><text x="90.2639%" y="1471.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="90.0139%" y="1445" width="0.0113%" height="15" fill="rgb(253,152,4)" fg:x="23968" fg:w="3"/><text x="90.2639%" y="1455.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7 samples, 0.03%)</title><rect x="90.0289%" y="1477" width="0.0263%" height="15" fill="rgb(219,158,36)" fg:x="23972" fg:w="7"/><text x="90.2789%" y="1487.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (7 samples, 0.03%)</title><rect x="90.0289%" y="1461" width="0.0263%" height="15" fill="rgb(251,128,40)" fg:x="23972" fg:w="7"/><text x="90.2789%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::GenericShunt&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;graph_craft::document::NodeInput&gt;,graph_craft::document::NodeNetwork::into_proto_networks::{{closure}}&gt;,graph_craft::graphene_compiler::Compiler::compile::{{closure}}&gt;,core::result::Result&lt;core::convert::Infallible,alloc::string::String&gt;&gt;&gt; (6 samples, 0.02%)</title><rect x="90.0327%" y="1445" width="0.0225%" height="15" fill="rgb(254,101,39)" fg:x="23973" fg:w="6"/><text x="90.2827%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;graph_craft::document::NodeInput&gt;,graph_craft::document::NodeNetwork::into_proto_networks::{{closure}}&gt;,graph_craft::graphene_compiler::Compiler::compile::{{closure}}&gt;&gt; (6 samples, 0.02%)</title><rect x="90.0327%" y="1429" width="0.0225%" height="15" fill="rgb(221,168,40)" fg:x="23973" fg:w="6"/><text x="90.2827%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;graph_craft::document::NodeInput&gt;,graph_craft::document::NodeNetwork::into_proto_networks::{{closure}}&gt;&gt; (6 samples, 0.02%)</title><rect x="90.0327%" y="1413" width="0.0225%" height="15" fill="rgb(221,14,27)" fg:x="23973" fg:w="6"/><text x="90.2827%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::NodeNetwork::into_proto_networks::{{closure}}&gt; (6 samples, 0.02%)</title><rect x="90.0327%" y="1397" width="0.0225%" height="15" fill="rgb(207,36,43)" fg:x="23973" fg:w="6"/><text x="90.2827%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (6 samples, 0.02%)</title><rect x="90.0327%" y="1381" width="0.0225%" height="15" fill="rgb(240,172,53)" fg:x="23973" fg:w="6"/><text x="90.2827%" y="1391.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="90.0327%" y="1365" width="0.0225%" height="15" fill="rgb(241,138,43)" fg:x="23973" fg:w="6"/><text x="90.2827%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)]&gt; (6 samples, 0.02%)</title><rect x="90.0327%" y="1349" width="0.0225%" height="15" fill="rgb(227,78,19)" fg:x="23973" fg:w="6"/><text x="90.2827%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt; (6 samples, 0.02%)</title><rect x="90.0327%" y="1333" width="0.0225%" height="15" fill="rgb(215,127,44)" fg:x="23973" fg:w="6"/><text x="90.2827%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNode&gt; (5 samples, 0.02%)</title><rect x="90.0364%" y="1317" width="0.0188%" height="15" fill="rgb(227,13,10)" fg:x="23974" fg:w="5"/><text x="90.2864%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.01%)</title><rect x="90.0777%" y="1301" width="0.0113%" height="15" fill="rgb(249,177,6)" fg:x="23985" fg:w="3"/><text x="90.3277%" y="1311.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref (31 samples, 0.12%)</title><rect x="90.0890%" y="1301" width="0.1164%" height="15" fill="rgb(215,154,26)" fg:x="23988" fg:w="31"/><text x="90.3390%" y="1311.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (31 samples, 0.12%)</title><rect x="90.0890%" y="1285" width="0.1164%" height="15" fill="rgb(250,168,20)" fg:x="23988" fg:w="31"/><text x="90.3390%" y="1295.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref::_{{closure}} (14 samples, 0.05%)</title><rect x="90.1529%" y="1269" width="0.0526%" height="15" fill="rgb(222,53,38)" fg:x="24005" fg:w="14"/><text x="90.4029%" y="1279.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (14 samples, 0.05%)</title><rect x="90.1529%" y="1253" width="0.0526%" height="15" fill="rgb(245,154,5)" fg:x="24005" fg:w="14"/><text x="90.4029%" y="1263.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (14 samples, 0.05%)</title><rect x="90.1529%" y="1237" width="0.0526%" height="15" fill="rgb(214,89,50)" fg:x="24005" fg:w="14"/><text x="90.4029%" y="1247.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (4 samples, 0.02%)</title><rect x="90.2054%" y="1269" width="0.0150%" height="15" fill="rgb(232,73,14)" fg:x="24019" fg:w="4"/><text x="90.4554%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4 samples, 0.02%)</title><rect x="90.2054%" y="1253" width="0.0150%" height="15" fill="rgb(230,101,20)" fg:x="24019" fg:w="4"/><text x="90.4554%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.02%)</title><rect x="90.2054%" y="1237" width="0.0150%" height="15" fill="rgb(208,56,28)" fg:x="24019" fg:w="4"/><text x="90.4554%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (4 samples, 0.02%)</title><rect x="90.2054%" y="1221" width="0.0150%" height="15" fill="rgb(247,205,22)" fg:x="24019" fg:w="4"/><text x="90.4554%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (4 samples, 0.02%)</title><rect x="90.2054%" y="1205" width="0.0150%" height="15" fill="rgb(252,109,51)" fg:x="24019" fg:w="4"/><text x="90.4554%" y="1215.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::collect_outwards_edges (41 samples, 0.15%)</title><rect x="90.0702%" y="1317" width="0.1540%" height="15" fill="rgb(220,40,24)" fg:x="23983" fg:w="41"/><text x="90.3202%" y="1327.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (5 samples, 0.02%)</title><rect x="90.2054%" y="1301" width="0.0188%" height="15" fill="rgb(251,108,7)" fg:x="24019" fg:w="5"/><text x="90.4554%" y="1311.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.02%)</title><rect x="90.2054%" y="1285" width="0.0188%" height="15" fill="rgb(238,102,51)" fg:x="24019" fg:w="5"/><text x="90.4554%" y="1295.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::generate_stable_node_ids (45 samples, 0.17%)</title><rect x="90.0627%" y="1333" width="0.1690%" height="15" fill="rgb(219,149,34)" fg:x="23981" fg:w="45"/><text x="90.3127%" y="1343.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.01%)</title><rect x="90.2355%" y="1317" width="0.0113%" height="15" fill="rgb(239,70,0)" fg:x="24027" fg:w="3"/><text x="90.4855%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.01%)</title><rect x="90.2355%" y="1301" width="0.0113%" height="15" fill="rgb(246,214,23)" fg:x="24027" fg:w="3"/><text x="90.4855%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.01%)</title><rect x="90.2355%" y="1285" width="0.0113%" height="15" fill="rgb(239,221,51)" fg:x="24027" fg:w="3"/><text x="90.4855%" y="1295.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="90.2355%" y="1269" width="0.0113%" height="15" fill="rgb(254,62,14)" fg:x="24027" fg:w="3"/><text x="90.4855%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.01%)</title><rect x="90.2355%" y="1253" width="0.0113%" height="15" fill="rgb(253,57,33)" fg:x="24027" fg:w="3"/><text x="90.4855%" y="1263.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.01%)</title><rect x="90.2355%" y="1237" width="0.0113%" height="15" fill="rgb(229,34,6)" fg:x="24027" fg:w="3"/><text x="90.4855%" y="1247.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.01%)</title><rect x="90.2355%" y="1221" width="0.0113%" height="15" fill="rgb(235,191,23)" fg:x="24027" fg:w="3"/><text x="90.4855%" y="1231.50"></text></g><g><title>__rdl_realloc (3 samples, 0.01%)</title><rect x="90.2355%" y="1205" width="0.0113%" height="15" fill="rgb(217,207,27)" fg:x="24027" fg:w="3"/><text x="90.4855%" y="1215.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.01%)</title><rect x="90.2355%" y="1189" width="0.0113%" height="15" fill="rgb(232,41,44)" fg:x="24027" fg:w="3"/><text x="90.4855%" y="1199.50"></text></g><g><title>realloc (3 samples, 0.01%)</title><rect x="90.2355%" y="1173" width="0.0113%" height="15" fill="rgb(221,188,19)" fg:x="24027" fg:w="3"/><text x="90.4855%" y="1183.50"></text></g><g><title>_int_realloc (3 samples, 0.01%)</title><rect x="90.2355%" y="1157" width="0.0113%" height="15" fill="rgb(245,180,45)" fg:x="24027" fg:w="3"/><text x="90.4855%" y="1167.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="90.2355%" y="1141" width="0.0113%" height="15" fill="rgb(250,220,42)" fg:x="24027" fg:w="3"/><text x="90.4855%" y="1151.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref (17 samples, 0.06%)</title><rect x="90.2543%" y="1301" width="0.0638%" height="15" fill="rgb(234,16,34)" fg:x="24032" fg:w="17"/><text x="90.5043%" y="1311.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (17 samples, 0.06%)</title><rect x="90.2543%" y="1285" width="0.0638%" height="15" fill="rgb(233,217,23)" fg:x="24032" fg:w="17"/><text x="90.5043%" y="1295.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref::_{{closure}} (10 samples, 0.04%)</title><rect x="90.2805%" y="1269" width="0.0376%" height="15" fill="rgb(209,22,46)" fg:x="24039" fg:w="10"/><text x="90.5305%" y="1279.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10 samples, 0.04%)</title><rect x="90.2805%" y="1253" width="0.0376%" height="15" fill="rgb(213,101,18)" fg:x="24039" fg:w="10"/><text x="90.5305%" y="1263.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (10 samples, 0.04%)</title><rect x="90.2805%" y="1237" width="0.0376%" height="15" fill="rgb(215,179,52)" fg:x="24039" fg:w="10"/><text x="90.5305%" y="1247.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::collect_outwards_edges (20 samples, 0.08%)</title><rect x="90.2505%" y="1317" width="0.0751%" height="15" fill="rgb(223,50,25)" fg:x="24031" fg:w="20"/><text x="90.5005%" y="1327.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.02%)</title><rect x="90.3256%" y="1253" width="0.0150%" height="15" fill="rgb(224,51,44)" fg:x="24051" fg:w="4"/><text x="90.5756%" y="1263.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.02%)</title><rect x="90.3256%" y="1237" width="0.0150%" height="15" fill="rgb(224,13,54)" fg:x="24051" fg:w="4"/><text x="90.5756%" y="1247.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.02%)</title><rect x="90.3256%" y="1221" width="0.0150%" height="15" fill="rgb(219,58,47)" fg:x="24051" fg:w="4"/><text x="90.5756%" y="1231.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (3 samples, 0.01%)</title><rect x="90.3294%" y="1205" width="0.0113%" height="15" fill="rgb(246,124,34)" fg:x="24052" fg:w="3"/><text x="90.5794%" y="1215.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.01%)</title><rect x="90.3294%" y="1189" width="0.0113%" height="15" fill="rgb(245,109,25)" fg:x="24052" fg:w="3"/><text x="90.5794%" y="1199.50"></text></g><g><title>graph_craft::proto::ProtoNode::map_ids::_{{closure}} (3 samples, 0.01%)</title><rect x="90.3294%" y="1173" width="0.0113%" height="15" fill="rgb(235,48,23)" fg:x="24052" fg:w="3"/><text x="90.5794%" y="1183.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids::_{{closure}}::_{{closure}} (3 samples, 0.01%)</title><rect x="90.3294%" y="1157" width="0.0113%" height="15" fill="rgb(229,203,36)" fg:x="24052" fg:w="3"/><text x="90.5794%" y="1167.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.01%)</title><rect x="90.3294%" y="1141" width="0.0113%" height="15" fill="rgb(234,180,9)" fg:x="24052" fg:w="3"/><text x="90.5794%" y="1151.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.01%)</title><rect x="90.3294%" y="1125" width="0.0113%" height="15" fill="rgb(228,98,45)" fg:x="24052" fg:w="3"/><text x="90.5794%" y="1135.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="90.3294%" y="1109" width="0.0113%" height="15" fill="rgb(240,24,36)" fg:x="24052" fg:w="3"/><text x="90.5794%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.01%)</title><rect x="90.3294%" y="1093" width="0.0113%" height="15" fill="rgb(227,154,19)" fg:x="24052" fg:w="3"/><text x="90.5794%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.01%)</title><rect x="90.3294%" y="1077" width="0.0113%" height="15" fill="rgb(231,2,48)" fg:x="24052" fg:w="3"/><text x="90.5794%" y="1087.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.01%)</title><rect x="90.3294%" y="1061" width="0.0113%" height="15" fill="rgb(219,216,0)" fg:x="24052" fg:w="3"/><text x="90.5794%" y="1071.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (5 samples, 0.02%)</title><rect x="90.3256%" y="1301" width="0.0188%" height="15" fill="rgb(251,88,0)" fg:x="24051" fg:w="5"/><text x="90.5756%" y="1311.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids::_{{closure}} (5 samples, 0.02%)</title><rect x="90.3256%" y="1285" width="0.0188%" height="15" fill="rgb(242,45,45)" fg:x="24051" fg:w="5"/><text x="90.5756%" y="1295.50"></text></g><g><title>graph_craft::proto::ProtoNode::map_ids (5 samples, 0.02%)</title><rect x="90.3256%" y="1269" width="0.0188%" height="15" fill="rgb(218,149,45)" fg:x="24051" fg:w="5"/><text x="90.5756%" y="1279.50"></text></g><g><title>&lt;graph_craft::document::OriginalLocation as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="90.3444%" y="1285" width="0.0225%" height="15" fill="rgb(247,194,10)" fg:x="24056" fg:w="6"/><text x="90.5944%" y="1295.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="90.3519%" y="1269" width="0.0150%" height="15" fill="rgb(234,33,37)" fg:x="24058" fg:w="4"/><text x="90.6019%" y="1279.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="90.3519%" y="1253" width="0.0150%" height="15" fill="rgb(218,61,13)" fg:x="24058" fg:w="4"/><text x="90.6019%" y="1263.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="90.3519%" y="1237" width="0.0150%" height="15" fill="rgb(210,80,52)" fg:x="24058" fg:w="4"/><text x="90.6019%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (3 samples, 0.01%)</title><rect x="90.3557%" y="1221" width="0.0113%" height="15" fill="rgb(218,203,27)" fg:x="24059" fg:w="3"/><text x="90.6057%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3 samples, 0.01%)</title><rect x="90.3557%" y="1205" width="0.0113%" height="15" fill="rgb(209,126,33)" fg:x="24059" fg:w="3"/><text x="90.6057%" y="1215.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (3 samples, 0.01%)</title><rect x="90.3557%" y="1189" width="0.0113%" height="15" fill="rgb(234,173,41)" fg:x="24059" fg:w="3"/><text x="90.6057%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="90.3557%" y="1173" width="0.0113%" height="15" fill="rgb(228,166,9)" fg:x="24059" fg:w="3"/><text x="90.6057%" y="1183.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="90.3557%" y="1157" width="0.0113%" height="15" fill="rgb(208,124,43)" fg:x="24059" fg:w="3"/><text x="90.6057%" y="1167.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="90.3557%" y="1141" width="0.0113%" height="15" fill="rgb(212,154,38)" fg:x="24059" fg:w="3"/><text x="90.6057%" y="1151.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="90.3557%" y="1125" width="0.0113%" height="15" fill="rgb(246,179,35)" fg:x="24059" fg:w="3"/><text x="90.6057%" y="1135.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="90.3557%" y="1109" width="0.0113%" height="15" fill="rgb(251,3,50)" fg:x="24059" fg:w="3"/><text x="90.6057%" y="1119.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="90.3557%" y="1093" width="0.0113%" height="15" fill="rgb(219,96,8)" fg:x="24059" fg:w="3"/><text x="90.6057%" y="1103.50"></text></g><g><title>&lt;graphene_core::memo::MemoHash&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="90.3744%" y="1269" width="0.0150%" height="15" fill="rgb(251,216,33)" fg:x="24064" fg:w="4"/><text x="90.6244%" y="1279.50"></text></g><g><title>&lt;graph_craft::document::value::TaggedValue as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="90.3782%" y="1253" width="0.0113%" height="15" fill="rgb(243,145,29)" fg:x="24065" fg:w="3"/><text x="90.6282%" y="1263.50"></text></g><g><title>&lt;graph_craft::proto::ConstructionArgs as core::clone::Clone&gt;::clone (7 samples, 0.03%)</title><rect x="90.3669%" y="1285" width="0.0263%" height="15" fill="rgb(210,75,20)" fg:x="24062" fg:w="7"/><text x="90.6169%" y="1295.50"></text></g><g><title>&lt;graph_craft::proto::ProtoNode as core::clone::Clone&gt;::clone (17 samples, 0.06%)</title><rect x="90.3444%" y="1301" width="0.0638%" height="15" fill="rgb(235,56,8)" fg:x="24056" fg:w="17"/><text x="90.5944%" y="1311.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.02%)</title><rect x="90.4120%" y="1301" width="0.0150%" height="15" fill="rgb(226,175,49)" fg:x="24074" fg:w="4"/><text x="90.6620%" y="1311.50"></text></g><g><title>core::ptr::write (4 samples, 0.02%)</title><rect x="90.4120%" y="1285" width="0.0150%" height="15" fill="rgb(242,204,23)" fg:x="24074" fg:w="4"/><text x="90.6620%" y="1295.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="90.4120%" y="1269" width="0.0150%" height="15" fill="rgb(225,104,24)" fg:x="24074" fg:w="4"/><text x="90.6620%" y="1279.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.02%)</title><rect x="90.4270%" y="1301" width="0.0150%" height="15" fill="rgb(253,34,1)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1311.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.02%)</title><rect x="90.4270%" y="1285" width="0.0150%" height="15" fill="rgb(233,199,23)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1295.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4 samples, 0.02%)</title><rect x="90.4270%" y="1269" width="0.0150%" height="15" fill="rgb(247,7,51)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1279.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4 samples, 0.02%)</title><rect x="90.4270%" y="1253" width="0.0150%" height="15" fill="rgb(214,146,12)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1263.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.02%)</title><rect x="90.4270%" y="1237" width="0.0150%" height="15" fill="rgb(234,181,43)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1247.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.02%)</title><rect x="90.4270%" y="1221" width="0.0150%" height="15" fill="rgb(239,148,6)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1231.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.02%)</title><rect x="90.4270%" y="1205" width="0.0150%" height="15" fill="rgb(206,151,17)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1215.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.02%)</title><rect x="90.4270%" y="1189" width="0.0150%" height="15" fill="rgb(213,215,10)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1199.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (4 samples, 0.02%)</title><rect x="90.4270%" y="1173" width="0.0150%" height="15" fill="rgb(215,220,44)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1183.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (4 samples, 0.02%)</title><rect x="90.4270%" y="1157" width="0.0150%" height="15" fill="rgb(245,205,37)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1167.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.02%)</title><rect x="90.4270%" y="1141" width="0.0150%" height="15" fill="rgb(245,130,43)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1151.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (4 samples, 0.02%)</title><rect x="90.4270%" y="1125" width="0.0150%" height="15" fill="rgb(231,227,38)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1135.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.02%)</title><rect x="90.4270%" y="1109" width="0.0150%" height="15" fill="rgb(233,185,4)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1119.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.02%)</title><rect x="90.4270%" y="1093" width="0.0150%" height="15" fill="rgb(224,154,43)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1103.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.02%)</title><rect x="90.4270%" y="1077" width="0.0150%" height="15" fill="rgb(235,156,15)" fg:x="24078" fg:w="4"/><text x="90.6770%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ConstructionArgs&gt; (4 samples, 0.02%)</title><rect x="90.4458%" y="1221" width="0.0150%" height="15" fill="rgb(211,55,43)" fg:x="24083" fg:w="4"/><text x="90.6958%" y="1231.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="90.4420%" y="1285" width="0.0225%" height="15" fill="rgb(247,149,40)" fg:x="24082" fg:w="6"/><text x="90.6920%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)]&gt; (6 samples, 0.02%)</title><rect x="90.4420%" y="1269" width="0.0225%" height="15" fill="rgb(232,171,16)" fg:x="24082" fg:w="6"/><text x="90.6920%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt; (6 samples, 0.02%)</title><rect x="90.4420%" y="1253" width="0.0225%" height="15" fill="rgb(215,117,49)" fg:x="24082" fg:w="6"/><text x="90.6920%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNode&gt; (5 samples, 0.02%)</title><rect x="90.4458%" y="1237" width="0.0188%" height="15" fill="rgb(246,194,11)" fg:x="24083" fg:w="5"/><text x="90.6958%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (10 samples, 0.04%)</title><rect x="90.4420%" y="1301" width="0.0376%" height="15" fill="rgb(242,101,44)" fg:x="24082" fg:w="10"/><text x="90.6920%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (4 samples, 0.02%)</title><rect x="90.4646%" y="1285" width="0.0150%" height="15" fill="rgb(226,174,6)" fg:x="24088" fg:w="4"/><text x="90.7146%" y="1295.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="90.4646%" y="1269" width="0.0150%" height="15" fill="rgb(213,150,20)" fg:x="24088" fg:w="4"/><text x="90.7146%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.02%)</title><rect x="90.4646%" y="1253" width="0.0150%" height="15" fill="rgb(222,124,42)" fg:x="24088" fg:w="4"/><text x="90.7146%" y="1263.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.02%)</title><rect x="90.4646%" y="1237" width="0.0150%" height="15" fill="rgb(250,19,47)" fg:x="24088" fg:w="4"/><text x="90.7146%" y="1247.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.02%)</title><rect x="90.4646%" y="1221" width="0.0150%" height="15" fill="rgb(241,217,19)" fg:x="24088" fg:w="4"/><text x="90.7146%" y="1231.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.02%)</title><rect x="90.4646%" y="1205" width="0.0150%" height="15" fill="rgb(207,210,34)" fg:x="24088" fg:w="4"/><text x="90.7146%" y="1215.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.02%)</title><rect x="90.4646%" y="1189" width="0.0150%" height="15" fill="rgb(244,45,4)" fg:x="24088" fg:w="4"/><text x="90.7146%" y="1199.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (4 samples, 0.02%)</title><rect x="90.4646%" y="1173" width="0.0150%" height="15" fill="rgb(252,134,50)" fg:x="24088" fg:w="4"/><text x="90.7146%" y="1183.50"></text></g><g><title>malloc_consolidate (4 samples, 0.02%)</title><rect x="90.4646%" y="1157" width="0.0150%" height="15" fill="rgb(238,74,2)" fg:x="24088" fg:w="4"/><text x="90.7146%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 0.03%)</title><rect x="90.4909%" y="1269" width="0.0263%" height="15" fill="rgb(226,58,46)" fg:x="24095" fg:w="7"/><text x="90.7409%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.02%)</title><rect x="90.4946%" y="1253" width="0.0225%" height="15" fill="rgb(232,83,35)" fg:x="24096" fg:w="6"/><text x="90.7446%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.02%)</title><rect x="90.4984%" y="1237" width="0.0188%" height="15" fill="rgb(212,148,47)" fg:x="24097" fg:w="5"/><text x="90.7484%" y="1247.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.02%)</title><rect x="90.4984%" y="1221" width="0.0188%" height="15" fill="rgb(235,29,1)" fg:x="24097" fg:w="5"/><text x="90.7484%" y="1231.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="90.5021%" y="1205" width="0.0150%" height="15" fill="rgb(247,55,37)" fg:x="24098" fg:w="4"/><text x="90.7521%" y="1215.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="90.5059%" y="1189" width="0.0113%" height="15" fill="rgb(222,48,3)" fg:x="24099" fg:w="3"/><text x="90.7559%" y="1199.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (55 samples, 0.21%)</title><rect x="90.5171%" y="1253" width="0.2066%" height="15" fill="rgb(234,21,33)" fg:x="24102" fg:w="55"/><text x="90.7671%" y="1263.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref::_{{closure}} (28 samples, 0.11%)</title><rect x="90.6185%" y="1237" width="0.1052%" height="15" fill="rgb(247,178,53)" fg:x="24129" fg:w="28"/><text x="90.8685%" y="1247.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (28 samples, 0.11%)</title><rect x="90.6185%" y="1221" width="0.1052%" height="15" fill="rgb(225,75,7)" fg:x="24129" fg:w="28"/><text x="90.8685%" y="1231.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (28 samples, 0.11%)</title><rect x="90.6185%" y="1205" width="0.1052%" height="15" fill="rgb(219,199,7)" fg:x="24129" fg:w="28"/><text x="90.8685%" y="1215.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::check_ref (56 samples, 0.21%)</title><rect x="90.5171%" y="1269" width="0.2103%" height="15" fill="rgb(209,93,42)" fg:x="24102" fg:w="56"/><text x="90.7671%" y="1279.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (3 samples, 0.01%)</title><rect x="90.7275%" y="1269" width="0.0113%" height="15" fill="rgb(240,175,17)" fg:x="24158" fg:w="3"/><text x="90.9775%" y="1279.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.01%)</title><rect x="90.7275%" y="1253" width="0.0113%" height="15" fill="rgb(232,106,7)" fg:x="24158" fg:w="3"/><text x="90.9775%" y="1263.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.01%)</title><rect x="90.7275%" y="1237" width="0.0113%" height="15" fill="rgb(242,106,43)" fg:x="24158" fg:w="3"/><text x="90.9775%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (3 samples, 0.01%)</title><rect x="90.7275%" y="1221" width="0.0113%" height="15" fill="rgb(242,61,37)" fg:x="24158" fg:w="3"/><text x="90.9775%" y="1231.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::collect_inwards_edges (71 samples, 0.27%)</title><rect x="90.4871%" y="1285" width="0.2666%" height="15" fill="rgb(205,72,10)" fg:x="24094" fg:w="71"/><text x="90.7371%" y="1295.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4 samples, 0.02%)</title><rect x="90.7387%" y="1269" width="0.0150%" height="15" fill="rgb(214,184,36)" fg:x="24161" fg:w="4"/><text x="90.9887%" y="1279.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.02%)</title><rect x="90.7387%" y="1253" width="0.0150%" height="15" fill="rgb(206,107,18)" fg:x="24161" fg:w="4"/><text x="90.9887%" y="1263.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (74 samples, 0.28%)</title><rect x="90.4796%" y="1301" width="0.2779%" height="15" fill="rgb(210,75,5)" fg:x="24092" fg:w="74"/><text x="90.7296%" y="1311.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (190 samples, 0.71%)</title><rect x="90.0552%" y="1365" width="0.7136%" height="15" fill="rgb(205,3,19)" fg:x="23979" fg:w="190"/><text x="90.3052%" y="1375.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (190 samples, 0.71%)</title><rect x="90.0552%" y="1349" width="0.7136%" height="15" fill="rgb(207,181,42)" fg:x="23979" fg:w="190"/><text x="90.3052%" y="1359.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (143 samples, 0.54%)</title><rect x="90.2317%" y="1333" width="0.5370%" height="15" fill="rgb(229,179,43)" fg:x="24026" fg:w="143"/><text x="90.4817%" y="1343.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (118 samples, 0.44%)</title><rect x="90.3256%" y="1317" width="0.4432%" height="15" fill="rgb(246,95,30)" fg:x="24051" fg:w="118"/><text x="90.5756%" y="1327.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.01%)</title><rect x="90.7575%" y="1301" width="0.0113%" height="15" fill="rgb(234,144,45)" fg:x="24166" fg:w="3"/><text x="91.0075%" y="1311.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.01%)</title><rect x="90.7575%" y="1285" width="0.0113%" height="15" fill="rgb(250,54,25)" fg:x="24166" fg:w="3"/><text x="91.0075%" y="1295.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="90.7575%" y="1269" width="0.0113%" height="15" fill="rgb(215,195,40)" fg:x="24166" fg:w="3"/><text x="91.0075%" y="1279.50"></text></g><g><title>&lt;graph_craft::proto::ProtoNodeInput as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="90.7763%" y="1253" width="0.0150%" height="15" fill="rgb(233,188,42)" fg:x="24171" fg:w="4"/><text x="91.0263%" y="1263.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (207 samples, 0.78%)</title><rect x="90.0252%" y="1605" width="0.7774%" height="15" fill="rgb(247,227,35)" fg:x="23971" fg:w="207"/><text x="90.2752%" y="1615.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (206 samples, 0.77%)</title><rect x="90.0289%" y="1589" width="0.7737%" height="15" fill="rgb(249,124,27)" fg:x="23972" fg:w="206"/><text x="90.2789%" y="1599.50"></text></g><g><title>core::iter::adapters::try_process (206 samples, 0.77%)</title><rect x="90.0289%" y="1573" width="0.7737%" height="15" fill="rgb(219,207,25)" fg:x="23972" fg:w="206"/><text x="90.2789%" y="1583.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (206 samples, 0.77%)</title><rect x="90.0289%" y="1557" width="0.7737%" height="15" fill="rgb(241,216,47)" fg:x="23972" fg:w="206"/><text x="90.2789%" y="1567.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (206 samples, 0.77%)</title><rect x="90.0289%" y="1541" width="0.7737%" height="15" fill="rgb(233,82,50)" fg:x="23972" fg:w="206"/><text x="90.2789%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (206 samples, 0.77%)</title><rect x="90.0289%" y="1525" width="0.7737%" height="15" fill="rgb(232,63,2)" fg:x="23972" fg:w="206"/><text x="90.2789%" y="1535.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (206 samples, 0.77%)</title><rect x="90.0289%" y="1509" width="0.7737%" height="15" fill="rgb(236,184,28)" fg:x="23972" fg:w="206"/><text x="90.2789%" y="1519.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (206 samples, 0.77%)</title><rect x="90.0289%" y="1493" width="0.7737%" height="15" fill="rgb(254,63,27)" fg:x="23972" fg:w="206"/><text x="90.2789%" y="1503.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (199 samples, 0.75%)</title><rect x="90.0552%" y="1477" width="0.7474%" height="15" fill="rgb(253,106,28)" fg:x="23979" fg:w="199"/><text x="90.3052%" y="1487.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (199 samples, 0.75%)</title><rect x="90.0552%" y="1461" width="0.7474%" height="15" fill="rgb(225,141,39)" fg:x="23979" fg:w="199"/><text x="90.3052%" y="1471.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (199 samples, 0.75%)</title><rect x="90.0552%" y="1445" width="0.7474%" height="15" fill="rgb(222,157,20)" fg:x="23979" fg:w="199"/><text x="90.3052%" y="1455.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (199 samples, 0.75%)</title><rect x="90.0552%" y="1429" width="0.7474%" height="15" fill="rgb(210,190,9)" fg:x="23979" fg:w="199"/><text x="90.3052%" y="1439.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (199 samples, 0.75%)</title><rect x="90.0552%" y="1413" width="0.7474%" height="15" fill="rgb(242,167,7)" fg:x="23979" fg:w="199"/><text x="90.3052%" y="1423.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (199 samples, 0.75%)</title><rect x="90.0552%" y="1397" width="0.7474%" height="15" fill="rgb(227,82,41)" fg:x="23979" fg:w="199"/><text x="90.3052%" y="1407.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (199 samples, 0.75%)</title><rect x="90.0552%" y="1381" width="0.7474%" height="15" fill="rgb(222,131,13)" fg:x="23979" fg:w="199"/><text x="90.3052%" y="1391.50"></text></g><g><title>graph_craft::document::NodeNetwork::into_proto_networks::_{{closure}} (9 samples, 0.03%)</title><rect x="90.7688%" y="1365" width="0.0338%" height="15" fill="rgb(221,98,26)" fg:x="24169" fg:w="9"/><text x="91.0188%" y="1375.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="90.7688%" y="1349" width="0.0338%" height="15" fill="rgb(251,63,52)" fg:x="24169" fg:w="9"/><text x="91.0188%" y="1359.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.03%)</title><rect x="90.7688%" y="1333" width="0.0338%" height="15" fill="rgb(246,25,43)" fg:x="24169" fg:w="9"/><text x="91.0188%" y="1343.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.03%)</title><rect x="90.7688%" y="1317" width="0.0338%" height="15" fill="rgb(247,167,15)" fg:x="24169" fg:w="9"/><text x="91.0188%" y="1327.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.03%)</title><rect x="90.7688%" y="1301" width="0.0338%" height="15" fill="rgb(240,104,42)" fg:x="24169" fg:w="9"/><text x="91.0188%" y="1311.50"></text></g><g><title>core::clone::Clone::clone (9 samples, 0.03%)</title><rect x="90.7688%" y="1285" width="0.0338%" height="15" fill="rgb(224,54,6)" fg:x="24169" fg:w="9"/><text x="91.0188%" y="1295.50"></text></g><g><title>&lt;graph_craft::proto::ProtoNode as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="90.7688%" y="1269" width="0.0338%" height="15" fill="rgb(244,108,35)" fg:x="24169" fg:w="9"/><text x="91.0188%" y="1279.50"></text></g><g><title>&lt;graphene_core::types::ProtoNodeIdentifier as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="90.7913%" y="1253" width="0.0113%" height="15" fill="rgb(216,154,2)" fg:x="24175" fg:w="3"/><text x="91.0413%" y="1263.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="90.7913%" y="1237" width="0.0113%" height="15" fill="rgb(222,8,47)" fg:x="24175" fg:w="3"/><text x="91.0413%" y="1247.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (3 samples, 0.01%)</title><rect x="90.7913%" y="1221" width="0.0113%" height="15" fill="rgb(252,93,1)" fg:x="24175" fg:w="3"/><text x="91.0413%" y="1231.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (3 samples, 0.01%)</title><rect x="90.7913%" y="1205" width="0.0113%" height="15" fill="rgb(223,226,51)" fg:x="24175" fg:w="3"/><text x="91.0413%" y="1215.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.01%)</title><rect x="90.7913%" y="1189" width="0.0113%" height="15" fill="rgb(206,147,9)" fg:x="24175" fg:w="3"/><text x="91.0413%" y="1199.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.01%)</title><rect x="90.7913%" y="1173" width="0.0113%" height="15" fill="rgb(248,180,41)" fg:x="24175" fg:w="3"/><text x="91.0413%" y="1183.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.01%)</title><rect x="90.7913%" y="1157" width="0.0113%" height="15" fill="rgb(209,47,50)" fg:x="24175" fg:w="3"/><text x="91.0413%" y="1167.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="90.7913%" y="1141" width="0.0113%" height="15" fill="rgb(243,65,31)" fg:x="24175" fg:w="3"/><text x="91.0413%" y="1151.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="90.8138%" y="1557" width="0.0113%" height="15" fill="rgb(228,128,1)" fg:x="24181" fg:w="3"/><text x="91.0638%" y="1567.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.01%)</title><rect x="90.8138%" y="1541" width="0.0113%" height="15" fill="rgb(231,192,16)" fg:x="24181" fg:w="3"/><text x="91.0638%" y="1551.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.01%)</title><rect x="90.8138%" y="1525" width="0.0113%" height="15" fill="rgb(224,26,40)" fg:x="24181" fg:w="3"/><text x="91.0638%" y="1535.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="90.8138%" y="1509" width="0.0113%" height="15" fill="rgb(214,192,17)" fg:x="24181" fg:w="3"/><text x="91.0638%" y="1519.50"></text></g><g><title>&lt;graph_craft::document::DocumentNode as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="90.8101%" y="1573" width="0.0188%" height="15" fill="rgb(225,147,18)" fg:x="24180" fg:w="5"/><text x="91.0601%" y="1583.50"></text></g><g><title>&lt;graph_craft::document::DocumentNode as core::default::Default&gt;::default (4 samples, 0.02%)</title><rect x="90.8289%" y="1573" width="0.0150%" height="15" fill="rgb(205,35,11)" fg:x="24185" fg:w="4"/><text x="91.0789%" y="1583.50"></text></g><g><title>__memmove_avx512_unaligned_erms (7 samples, 0.03%)</title><rect x="90.8439%" y="1573" width="0.0263%" height="15" fill="rgb(242,40,42)" fg:x="24189" fg:w="7"/><text x="91.0939%" y="1583.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="90.8739%" y="1557" width="0.0113%" height="15" fill="rgb(250,170,13)" fg:x="24197" fg:w="3"/><text x="91.1239%" y="1567.50"></text></g><g><title>graph_craft::document::DocumentNode::populate_first_network_input (5 samples, 0.02%)</title><rect x="90.8739%" y="1573" width="0.0188%" height="15" fill="rgb(240,161,28)" fg:x="24197" fg:w="5"/><text x="91.1239%" y="1583.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="90.8965%" y="1557" width="0.0188%" height="15" fill="rgb(245,179,12)" fg:x="24203" fg:w="5"/><text x="91.1465%" y="1567.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten_with_fns (9 samples, 0.03%)</title><rect x="90.8965%" y="1573" width="0.0338%" height="15" fill="rgb(250,92,32)" fg:x="24203" fg:w="9"/><text x="91.1465%" y="1583.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.02%)</title><rect x="90.9378%" y="1381" width="0.0150%" height="15" fill="rgb(233,10,40)" fg:x="24214" fg:w="4"/><text x="91.1878%" y="1391.50"></text></g><g><title>graph_craft::document::NodeNetwork::map_ids (9 samples, 0.03%)</title><rect x="90.9303%" y="1573" width="0.0338%" height="15" fill="rgb(217,98,1)" fg:x="24212" fg:w="9"/><text x="91.1803%" y="1583.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.03%)</title><rect x="90.9340%" y="1557" width="0.0300%" height="15" fill="rgb(238,202,7)" fg:x="24213" fg:w="8"/><text x="91.1840%" y="1567.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.03%)</title><rect x="90.9340%" y="1541" width="0.0300%" height="15" fill="rgb(222,91,3)" fg:x="24213" fg:w="8"/><text x="91.1840%" y="1551.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (8 samples, 0.03%)</title><rect x="90.9340%" y="1525" width="0.0300%" height="15" fill="rgb(211,170,49)" fg:x="24213" fg:w="8"/><text x="91.1840%" y="1535.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (8 samples, 0.03%)</title><rect x="90.9340%" y="1509" width="0.0300%" height="15" fill="rgb(253,139,18)" fg:x="24213" fg:w="8"/><text x="91.1840%" y="1519.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.03%)</title><rect x="90.9340%" y="1493" width="0.0300%" height="15" fill="rgb(222,4,43)" fg:x="24213" fg:w="8"/><text x="91.1840%" y="1503.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.03%)</title><rect x="90.9340%" y="1477" width="0.0300%" height="15" fill="rgb(207,205,12)" fg:x="24213" fg:w="8"/><text x="91.1840%" y="1487.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.03%)</title><rect x="90.9340%" y="1461" width="0.0300%" height="15" fill="rgb(216,159,46)" fg:x="24213" fg:w="8"/><text x="91.1840%" y="1471.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.03%)</title><rect x="90.9340%" y="1445" width="0.0300%" height="15" fill="rgb(236,115,1)" fg:x="24213" fg:w="8"/><text x="91.1840%" y="1455.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 0.03%)</title><rect x="90.9340%" y="1429" width="0.0300%" height="15" fill="rgb(251,35,33)" fg:x="24213" fg:w="8"/><text x="91.1840%" y="1439.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (8 samples, 0.03%)</title><rect x="90.9340%" y="1413" width="0.0300%" height="15" fill="rgb(248,62,51)" fg:x="24213" fg:w="8"/><text x="91.1840%" y="1423.50"></text></g><g><title>graph_craft::document::NodeNetwork::map_ids::_{{closure}} (8 samples, 0.03%)</title><rect x="90.9340%" y="1397" width="0.0300%" height="15" fill="rgb(254,180,19)" fg:x="24213" fg:w="8"/><text x="91.1840%" y="1407.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten_with_fns::_{{closure}} (3 samples, 0.01%)</title><rect x="90.9528%" y="1381" width="0.0113%" height="15" fill="rgb(217,100,32)" fg:x="24218" fg:w="3"/><text x="91.2028%" y="1391.50"></text></g><g><title>core::ops::function::Fn::call (3 samples, 0.01%)</title><rect x="90.9528%" y="1365" width="0.0113%" height="15" fill="rgb(224,71,22)" fg:x="24218" fg:w="3"/><text x="91.2028%" y="1375.50"></text></g><g><title>graph_craft::document::merge_ids (3 samples, 0.01%)</title><rect x="90.9528%" y="1349" width="0.0113%" height="15" fill="rgb(251,185,33)" fg:x="24218" fg:w="3"/><text x="91.2028%" y="1359.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.05%)</title><rect x="90.9903%" y="1541" width="0.0526%" height="15" fill="rgb(209,75,48)" fg:x="24228" fg:w="14"/><text x="91.2403%" y="1551.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.05%)</title><rect x="90.9941%" y="1525" width="0.0488%" height="15" fill="rgb(253,190,16)" fg:x="24229" fg:w="13"/><text x="91.2441%" y="1535.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (101 samples, 0.38%)</title><rect x="90.9903%" y="1557" width="0.3793%" height="15" fill="rgb(226,140,1)" fg:x="24228" fg:w="101"/><text x="91.2403%" y="1567.50"></text></g><g><title>graph_craft::document::NodeNetwork::replace_node_inputs::_{{closure}} (87 samples, 0.33%)</title><rect x="91.0429%" y="1541" width="0.3267%" height="15" fill="rgb(206,75,30)" fg:x="24242" fg:w="87"/><text x="91.2929%" y="1551.50"></text></g><g><title>&lt;graph_craft::document::NodeInput as core::cmp::PartialEq&gt;::eq (80 samples, 0.30%)</title><rect x="91.0692%" y="1525" width="0.3004%" height="15" fill="rgb(231,208,37)" fg:x="24249" fg:w="80"/><text x="91.3192%" y="1535.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.01%)</title><rect x="91.3584%" y="1509" width="0.0113%" height="15" fill="rgb(238,136,40)" fg:x="24326" fg:w="3"/><text x="91.6084%" y="1519.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="91.3584%" y="1493" width="0.0113%" height="15" fill="rgb(247,137,17)" fg:x="24326" fg:w="3"/><text x="91.6084%" y="1503.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5 samples, 0.02%)</title><rect x="91.3697%" y="1461" width="0.0188%" height="15" fill="rgb(240,60,40)" fg:x="24329" fg:w="5"/><text x="91.6197%" y="1471.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="91.3697%" y="1477" width="0.0300%" height="15" fill="rgb(236,68,50)" fg:x="24329" fg:w="8"/><text x="91.6197%" y="1487.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (3 samples, 0.01%)</title><rect x="91.3884%" y="1461" width="0.0113%" height="15" fill="rgb(230,42,12)" fg:x="24334" fg:w="3"/><text x="91.6384%" y="1471.50"></text></g><g><title>graph_craft::document::NodeNetwork::replace_node_inputs (117 samples, 0.44%)</title><rect x="90.9678%" y="1573" width="0.4394%" height="15" fill="rgb(219,16,16)" fg:x="24222" fg:w="117"/><text x="91.2178%" y="1583.50"></text></g><g><title>&lt;std::collections::hash::map::ValuesMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.04%)</title><rect x="91.3697%" y="1557" width="0.0376%" height="15" fill="rgb(220,38,35)" fg:x="24329" fg:w="10"/><text x="91.6197%" y="1567.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.04%)</title><rect x="91.3697%" y="1541" width="0.0376%" height="15" fill="rgb(228,33,1)" fg:x="24329" fg:w="10"/><text x="91.6197%" y="1551.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.04%)</title><rect x="91.3697%" y="1525" width="0.0376%" height="15" fill="rgb(241,46,31)" fg:x="24329" fg:w="10"/><text x="91.6197%" y="1535.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.04%)</title><rect x="91.3697%" y="1509" width="0.0376%" height="15" fill="rgb(232,58,20)" fg:x="24329" fg:w="10"/><text x="91.6197%" y="1519.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (10 samples, 0.04%)</title><rect x="91.3697%" y="1493" width="0.0376%" height="15" fill="rgb(206,228,53)" fg:x="24329" fg:w="10"/><text x="91.6197%" y="1503.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (3 samples, 0.01%)</title><rect x="91.4222%" y="1461" width="0.0113%" height="15" fill="rgb(206,88,33)" fg:x="24343" fg:w="3"/><text x="91.6722%" y="1471.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (3 samples, 0.01%)</title><rect x="91.4222%" y="1445" width="0.0113%" height="15" fill="rgb(238,69,7)" fg:x="24343" fg:w="3"/><text x="91.6722%" y="1455.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="91.4222%" y="1429" width="0.0113%" height="15" fill="rgb(250,21,46)" fg:x="24343" fg:w="3"/><text x="91.6722%" y="1439.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="91.4222%" y="1413" width="0.0113%" height="15" fill="rgb(215,212,21)" fg:x="24343" fg:w="3"/><text x="91.6722%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (6 samples, 0.02%)</title><rect x="91.4185%" y="1541" width="0.0225%" height="15" fill="rgb(211,35,12)" fg:x="24342" fg:w="6"/><text x="91.6685%" y="1551.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (6 samples, 0.02%)</title><rect x="91.4185%" y="1525" width="0.0225%" height="15" fill="rgb(231,184,16)" fg:x="24342" fg:w="6"/><text x="91.6685%" y="1535.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.02%)</title><rect x="91.4185%" y="1509" width="0.0225%" height="15" fill="rgb(242,140,15)" fg:x="24342" fg:w="6"/><text x="91.6685%" y="1519.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (6 samples, 0.02%)</title><rect x="91.4185%" y="1493" width="0.0225%" height="15" fill="rgb(220,37,14)" fg:x="24342" fg:w="6"/><text x="91.6685%" y="1503.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (6 samples, 0.02%)</title><rect x="91.4185%" y="1477" width="0.0225%" height="15" fill="rgb(223,146,22)" fg:x="24342" fg:w="6"/><text x="91.6685%" y="1487.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten (172 samples, 0.65%)</title><rect x="90.8026%" y="1605" width="0.6460%" height="15" fill="rgb(216,132,15)" fg:x="24178" fg:w="172"/><text x="91.0526%" y="1615.50"></text></g><g><title>graph_craft::document::NodeNetwork::flatten_with_fns (172 samples, 0.65%)</title><rect x="90.8026%" y="1589" width="0.6460%" height="15" fill="rgb(248,83,5)" fg:x="24178" fg:w="172"/><text x="91.0526%" y="1599.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (11 samples, 0.04%)</title><rect x="91.4072%" y="1573" width="0.0413%" height="15" fill="rgb(231,206,48)" fg:x="24339" fg:w="11"/><text x="91.6572%" y="1583.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 0.04%)</title><rect x="91.4072%" y="1557" width="0.0413%" height="15" fill="rgb(253,185,37)" fg:x="24339" fg:w="11"/><text x="91.6572%" y="1567.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="91.4485%" y="1461" width="0.0113%" height="15" fill="rgb(208,21,44)" fg:x="24350" fg:w="3"/><text x="91.6985%" y="1471.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.05%)</title><rect x="91.4485%" y="1493" width="0.0451%" height="15" fill="rgb(236,125,4)" fg:x="24350" fg:w="12"/><text x="91.6985%" y="1503.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (12 samples, 0.05%)</title><rect x="91.4485%" y="1477" width="0.0451%" height="15" fill="rgb(226,134,25)" fg:x="24350" fg:w="12"/><text x="91.6985%" y="1487.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9 samples, 0.03%)</title><rect x="91.4598%" y="1461" width="0.0338%" height="15" fill="rgb(250,201,12)" fg:x="24353" fg:w="9"/><text x="91.7098%" y="1471.50"></text></g><g><title>graph_craft::document::NodeNetwork::into_proto_networks::_{{closure}} (9 samples, 0.03%)</title><rect x="91.4598%" y="1445" width="0.0338%" height="15" fill="rgb(225,92,18)" fg:x="24353" fg:w="9"/><text x="91.7098%" y="1455.50"></text></g><g><title>graph_craft::document::DocumentNode::resolve_proto_node (7 samples, 0.03%)</title><rect x="91.4673%" y="1429" width="0.0263%" height="15" fill="rgb(227,35,22)" fg:x="24355" fg:w="7"/><text x="91.7173%" y="1439.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (13 samples, 0.05%)</title><rect x="91.4485%" y="1525" width="0.0488%" height="15" fill="rgb(214,180,52)" fg:x="24350" fg:w="13"/><text x="91.6985%" y="1535.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (13 samples, 0.05%)</title><rect x="91.4485%" y="1509" width="0.0488%" height="15" fill="rgb(233,55,38)" fg:x="24350" fg:w="13"/><text x="91.6985%" y="1519.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (14 samples, 0.05%)</title><rect x="91.4485%" y="1589" width="0.0526%" height="15" fill="rgb(249,171,43)" fg:x="24350" fg:w="14"/><text x="91.6985%" y="1599.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (14 samples, 0.05%)</title><rect x="91.4485%" y="1573" width="0.0526%" height="15" fill="rgb(239,87,2)" fg:x="24350" fg:w="14"/><text x="91.6985%" y="1583.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 0.05%)</title><rect x="91.4485%" y="1557" width="0.0526%" height="15" fill="rgb(248,141,5)" fg:x="24350" fg:w="14"/><text x="91.6985%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (14 samples, 0.05%)</title><rect x="91.4485%" y="1541" width="0.0526%" height="15" fill="rgb(238,33,42)" fg:x="24350" fg:w="14"/><text x="91.6985%" y="1551.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (3 samples, 0.01%)</title><rect x="91.5011%" y="1541" width="0.0113%" height="15" fill="rgb(231,57,19)" fg:x="24364" fg:w="3"/><text x="91.7511%" y="1551.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_hoare_branchy_cyclic (3 samples, 0.01%)</title><rect x="91.5011%" y="1525" width="0.0113%" height="15" fill="rgb(214,78,53)" fg:x="24364" fg:w="3"/><text x="91.7511%" y="1535.50"></text></g><g><title>graph_craft::document::NodeNetwork::into_proto_networks (27 samples, 0.10%)</title><rect x="91.4485%" y="1605" width="0.1014%" height="15" fill="rgb(206,132,29)" fg:x="24350" fg:w="27"/><text x="91.6985%" y="1615.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (13 samples, 0.05%)</title><rect x="91.5011%" y="1589" width="0.0488%" height="15" fill="rgb(248,174,31)" fg:x="24364" fg:w="13"/><text x="91.7511%" y="1599.50"></text></g><g><title>core::slice::sort::unstable::sort (13 samples, 0.05%)</title><rect x="91.5011%" y="1573" width="0.0488%" height="15" fill="rgb(221,87,13)" fg:x="24364" fg:w="13"/><text x="91.7511%" y="1583.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (13 samples, 0.05%)</title><rect x="91.5011%" y="1557" width="0.0488%" height="15" fill="rgb(223,197,17)" fg:x="24364" fg:w="13"/><text x="91.7511%" y="1567.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (10 samples, 0.04%)</title><rect x="91.5124%" y="1541" width="0.0376%" height="15" fill="rgb(220,144,50)" fg:x="24367" fg:w="10"/><text x="91.7624%" y="1551.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (7 samples, 0.03%)</title><rect x="91.5236%" y="1525" width="0.0263%" height="15" fill="rgb(244,201,11)" fg:x="24370" fg:w="7"/><text x="91.7736%" y="1535.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (6 samples, 0.02%)</title><rect x="91.5274%" y="1509" width="0.0225%" height="15" fill="rgb(249,81,34)" fg:x="24371" fg:w="6"/><text x="91.7774%" y="1519.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (5 samples, 0.02%)</title><rect x="91.5312%" y="1493" width="0.0188%" height="15" fill="rgb(205,161,12)" fg:x="24372" fg:w="5"/><text x="91.7812%" y="1503.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (5 samples, 0.02%)</title><rect x="91.5650%" y="1589" width="0.0188%" height="15" fill="rgb(252,139,50)" fg:x="24381" fg:w="5"/><text x="91.8150%" y="1599.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.02%)</title><rect x="91.5650%" y="1573" width="0.0188%" height="15" fill="rgb(205,169,14)" fg:x="24381" fg:w="5"/><text x="91.8150%" y="1583.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (451 samples, 1.69%)</title><rect x="89.8975%" y="1669" width="1.6938%" height="15" fill="rgb(248,198,33)" fg:x="23937" fg:w="451"/><text x="90.1475%" y="1679.50"></text></g><g><title>compile_demo_art::compile (417 samples, 1.57%)</title><rect x="90.0252%" y="1653" width="1.5661%" height="15" fill="rgb(236,23,21)" fg:x="23971" fg:w="417"/><text x="90.2752%" y="1663.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (417 samples, 1.57%)</title><rect x="90.0252%" y="1637" width="1.5661%" height="15" fill="rgb(231,13,38)" fg:x="23971" fg:w="417"/><text x="90.2752%" y="1647.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (417 samples, 1.57%)</title><rect x="90.0252%" y="1621" width="1.5661%" height="15" fill="rgb(239,139,21)" fg:x="23971" fg:w="417"/><text x="90.2752%" y="1631.50"></text></g><g><title>graph_craft::document::NodeNetwork::remove_dead_nodes (11 samples, 0.04%)</title><rect x="91.5499%" y="1605" width="0.0413%" height="15" fill="rgb(222,164,45)" fg:x="24377" fg:w="11"/><text x="91.7999%" y="1615.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="91.7152%" y="1141" width="0.0113%" height="15" fill="rgb(230,52,27)" fg:x="24421" fg:w="3"/><text x="91.9652%" y="1151.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="91.7152%" y="1125" width="0.0113%" height="15" fill="rgb(227,143,42)" fg:x="24421" fg:w="3"/><text x="91.9652%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.01%)</title><rect x="91.7152%" y="1109" width="0.0113%" height="15" fill="rgb(249,127,1)" fg:x="24421" fg:w="3"/><text x="91.9652%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="91.7152%" y="1093" width="0.0113%" height="15" fill="rgb(243,107,26)" fg:x="24421" fg:w="3"/><text x="91.9652%" y="1103.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="91.7152%" y="1077" width="0.0113%" height="15" fill="rgb(225,7,45)" fg:x="24421" fg:w="3"/><text x="91.9652%" y="1087.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="91.7152%" y="1061" width="0.0113%" height="15" fill="rgb(241,88,38)" fg:x="24421" fg:w="3"/><text x="91.9652%" y="1071.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="91.7152%" y="1045" width="0.0113%" height="15" fill="rgb(226,121,9)" fg:x="24421" fg:w="3"/><text x="91.9652%" y="1055.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="91.7152%" y="1029" width="0.0113%" height="15" fill="rgb(253,60,29)" fg:x="24421" fg:w="3"/><text x="91.9652%" y="1039.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="91.7152%" y="1013" width="0.0113%" height="15" fill="rgb(244,181,39)" fg:x="24421" fg:w="3"/><text x="91.9652%" y="1023.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="91.7152%" y="997" width="0.0113%" height="15" fill="rgb(252,203,31)" fg:x="24421" fg:w="3"/><text x="91.9652%" y="1007.50"></text></g><g><title>&lt;graphene_core::vector::style::Gradient as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="91.7152%" y="1237" width="0.0150%" height="15" fill="rgb(224,120,8)" fg:x="24421" fg:w="4"/><text x="91.9652%" y="1247.50"></text></g><g><title>&lt;graphene_core::vector::style::GradientStops as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="91.7152%" y="1221" width="0.0150%" height="15" fill="rgb(205,171,54)" fg:x="24421" fg:w="4"/><text x="91.9652%" y="1231.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="91.7152%" y="1205" width="0.0150%" height="15" fill="rgb(235,89,11)" fg:x="24421" fg:w="4"/><text x="91.9652%" y="1215.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.02%)</title><rect x="91.7152%" y="1189" width="0.0150%" height="15" fill="rgb(212,180,28)" fg:x="24421" fg:w="4"/><text x="91.9652%" y="1199.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.02%)</title><rect x="91.7152%" y="1173" width="0.0150%" height="15" fill="rgb(247,84,49)" fg:x="24421" fg:w="4"/><text x="91.9652%" y="1183.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.02%)</title><rect x="91.7152%" y="1157" width="0.0150%" height="15" fill="rgb(236,187,52)" fg:x="24421" fg:w="4"/><text x="91.9652%" y="1167.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::VectorData as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="91.7302%" y="1237" width="0.0338%" height="15" fill="rgb(227,24,15)" fg:x="24425" fg:w="9"/><text x="91.9802%" y="1247.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::SegmentDomain as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="91.7490%" y="1221" width="0.0150%" height="15" fill="rgb(227,211,13)" fg:x="24430" fg:w="4"/><text x="91.9990%" y="1231.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="91.7490%" y="1205" width="0.0150%" height="15" fill="rgb(245,52,14)" fg:x="24430" fg:w="4"/><text x="91.9990%" y="1215.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.01%)</title><rect x="91.7527%" y="1189" width="0.0113%" height="15" fill="rgb(225,185,13)" fg:x="24431" fg:w="3"/><text x="92.0027%" y="1199.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.01%)</title><rect x="91.7527%" y="1173" width="0.0113%" height="15" fill="rgb(217,160,29)" fg:x="24431" fg:w="3"/><text x="92.0027%" y="1183.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="91.7527%" y="1157" width="0.0113%" height="15" fill="rgb(216,115,53)" fg:x="24431" fg:w="3"/><text x="92.0027%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="91.7715%" y="1141" width="0.0113%" height="15" fill="rgb(236,99,5)" fg:x="24436" fg:w="3"/><text x="92.0215%" y="1151.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="91.7715%" y="1125" width="0.0113%" height="15" fill="rgb(222,60,38)" fg:x="24436" fg:w="3"/><text x="92.0215%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.01%)</title><rect x="91.7715%" y="1109" width="0.0113%" height="15" fill="rgb(212,82,22)" fg:x="24436" fg:w="3"/><text x="92.0215%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="91.7715%" y="1093" width="0.0113%" height="15" fill="rgb(214,48,28)" fg:x="24436" fg:w="3"/><text x="92.0215%" y="1103.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="91.7715%" y="1077" width="0.0113%" height="15" fill="rgb(245,196,50)" fg:x="24436" fg:w="3"/><text x="92.0215%" y="1087.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="91.7715%" y="1061" width="0.0113%" height="15" fill="rgb(225,159,46)" fg:x="24436" fg:w="3"/><text x="92.0215%" y="1071.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="91.7715%" y="1045" width="0.0113%" height="15" fill="rgb(207,195,48)" fg:x="24436" fg:w="3"/><text x="92.0215%" y="1055.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="91.7715%" y="1029" width="0.0113%" height="15" fill="rgb(240,73,3)" fg:x="24436" fg:w="3"/><text x="92.0215%" y="1039.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="91.7715%" y="1013" width="0.0113%" height="15" fill="rgb(245,57,23)" fg:x="24436" fg:w="3"/><text x="92.0215%" y="1023.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="91.7715%" y="997" width="0.0113%" height="15" fill="rgb(240,75,18)" fg:x="24436" fg:w="3"/><text x="92.0215%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="91.7715%" y="1205" width="0.0150%" height="15" fill="rgb(238,168,12)" fg:x="24436" fg:w="4"/><text x="92.0215%" y="1215.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.02%)</title><rect x="91.7715%" y="1189" width="0.0150%" height="15" fill="rgb(226,20,40)" fg:x="24436" fg:w="4"/><text x="92.0215%" y="1199.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.02%)</title><rect x="91.7715%" y="1173" width="0.0150%" height="15" fill="rgb(224,130,35)" fg:x="24436" fg:w="4"/><text x="92.0215%" y="1183.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.02%)</title><rect x="91.7715%" y="1157" width="0.0150%" height="15" fill="rgb(225,63,41)" fg:x="24436" fg:w="4"/><text x="92.0215%" y="1167.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::PointModification as core::clone::Clone&gt;::clone (10 samples, 0.04%)</title><rect x="91.7715%" y="1221" width="0.0376%" height="15" fill="rgb(219,3,3)" fg:x="24436" fg:w="10"/><text x="92.0215%" y="1231.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="91.7865%" y="1205" width="0.0225%" height="15" fill="rgb(218,157,4)" fg:x="24440" fg:w="6"/><text x="92.0365%" y="1215.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="91.7940%" y="1189" width="0.0150%" height="15" fill="rgb(232,76,36)" fg:x="24442" fg:w="4"/><text x="92.0440%" y="1199.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="91.7940%" y="1173" width="0.0150%" height="15" fill="rgb(247,36,0)" fg:x="24442" fg:w="4"/><text x="92.0440%" y="1183.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="91.8091%" y="1205" width="0.0113%" height="15" fill="rgb(205,2,34)" fg:x="24446" fg:w="3"/><text x="92.0591%" y="1215.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.01%)</title><rect x="91.8091%" y="1189" width="0.0113%" height="15" fill="rgb(239,136,13)" fg:x="24446" fg:w="3"/><text x="92.0591%" y="1199.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.01%)</title><rect x="91.8091%" y="1173" width="0.0113%" height="15" fill="rgb(253,122,12)" fg:x="24446" fg:w="3"/><text x="92.0591%" y="1183.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="91.8091%" y="1157" width="0.0113%" height="15" fill="rgb(222,174,7)" fg:x="24446" fg:w="3"/><text x="92.0591%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="91.8091%" y="1141" width="0.0113%" height="15" fill="rgb(208,191,42)" fg:x="24446" fg:w="3"/><text x="92.0591%" y="1151.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="91.8091%" y="1125" width="0.0113%" height="15" fill="rgb(237,212,15)" fg:x="24446" fg:w="3"/><text x="92.0591%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.01%)</title><rect x="91.8091%" y="1109" width="0.0113%" height="15" fill="rgb(215,65,20)" fg:x="24446" fg:w="3"/><text x="92.0591%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="91.8091%" y="1093" width="0.0113%" height="15" fill="rgb(232,103,11)" fg:x="24446" fg:w="3"/><text x="92.0591%" y="1103.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="91.8091%" y="1077" width="0.0113%" height="15" fill="rgb(235,148,18)" fg:x="24446" fg:w="3"/><text x="92.0591%" y="1087.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="91.8091%" y="1061" width="0.0113%" height="15" fill="rgb(240,173,7)" fg:x="24446" fg:w="3"/><text x="92.0591%" y="1071.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="91.8091%" y="1045" width="0.0113%" height="15" fill="rgb(228,182,25)" fg:x="24446" fg:w="3"/><text x="92.0591%" y="1055.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="91.8091%" y="1029" width="0.0113%" height="15" fill="rgb(247,3,52)" fg:x="24446" fg:w="3"/><text x="92.0591%" y="1039.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="91.8091%" y="1013" width="0.0113%" height="15" fill="rgb(226,155,8)" fg:x="24446" fg:w="3"/><text x="92.0591%" y="1023.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::RegionModification as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="91.8091%" y="1221" width="0.0188%" height="15" fill="rgb(243,195,38)" fg:x="24446" fg:w="5"/><text x="92.0591%" y="1231.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (6 samples, 0.02%)</title><rect x="91.8354%" y="1157" width="0.0225%" height="15" fill="rgb(254,181,33)" fg:x="24453" fg:w="6"/><text x="92.0854%" y="1167.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (6 samples, 0.02%)</title><rect x="91.8354%" y="1141" width="0.0225%" height="15" fill="rgb(232,98,23)" fg:x="24453" fg:w="6"/><text x="92.0854%" y="1151.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.02%)</title><rect x="91.8354%" y="1125" width="0.0225%" height="15" fill="rgb(205,23,10)" fg:x="24453" fg:w="6"/><text x="92.0854%" y="1135.50"></text></g><g><title>__memmove_avx512_unaligned_erms (6 samples, 0.02%)</title><rect x="91.8354%" y="1109" width="0.0225%" height="15" fill="rgb(212,124,38)" fg:x="24453" fg:w="6"/><text x="92.0854%" y="1119.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (11 samples, 0.04%)</title><rect x="91.8354%" y="1205" width="0.0413%" height="15" fill="rgb(228,207,2)" fg:x="24453" fg:w="11"/><text x="92.0854%" y="1215.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.04%)</title><rect x="91.8354%" y="1189" width="0.0413%" height="15" fill="rgb(215,120,22)" fg:x="24453" fg:w="11"/><text x="92.0854%" y="1199.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.04%)</title><rect x="91.8354%" y="1173" width="0.0413%" height="15" fill="rgb(251,172,33)" fg:x="24453" fg:w="11"/><text x="92.0854%" y="1183.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (5 samples, 0.02%)</title><rect x="91.8579%" y="1157" width="0.0188%" height="15" fill="rgb(250,83,2)" fg:x="24459" fg:w="5"/><text x="92.1079%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (5 samples, 0.02%)</title><rect x="91.8579%" y="1141" width="0.0188%" height="15" fill="rgb(210,132,53)" fg:x="24459" fg:w="5"/><text x="92.1079%" y="1151.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (3 samples, 0.01%)</title><rect x="91.8654%" y="1125" width="0.0113%" height="15" fill="rgb(221,208,36)" fg:x="24461" fg:w="3"/><text x="92.1154%" y="1135.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="91.8654%" y="1109" width="0.0113%" height="15" fill="rgb(205,192,46)" fg:x="24461" fg:w="3"/><text x="92.1154%" y="1119.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="91.8654%" y="1093" width="0.0113%" height="15" fill="rgb(223,163,14)" fg:x="24461" fg:w="3"/><text x="92.1154%" y="1103.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="91.8654%" y="1077" width="0.0113%" height="15" fill="rgb(218,41,28)" fg:x="24461" fg:w="3"/><text x="92.1154%" y="1087.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="91.8654%" y="1061" width="0.0113%" height="15" fill="rgb(235,104,10)" fg:x="24461" fg:w="3"/><text x="92.1154%" y="1071.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="91.8654%" y="1045" width="0.0113%" height="15" fill="rgb(246,17,4)" fg:x="24461" fg:w="3"/><text x="92.1154%" y="1055.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="91.8654%" y="1029" width="0.0113%" height="15" fill="rgb(240,7,16)" fg:x="24461" fg:w="3"/><text x="92.1154%" y="1039.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="91.8654%" y="1013" width="0.0113%" height="15" fill="rgb(213,160,23)" fg:x="24461" fg:w="3"/><text x="92.1154%" y="1023.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::VectorModification as core::clone::Clone&gt;::clone (31 samples, 0.12%)</title><rect x="91.7640%" y="1237" width="0.1164%" height="15" fill="rgb(251,179,49)" fg:x="24434" fg:w="31"/><text x="92.0140%" y="1247.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::modification::SegmentModification as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="91.8278%" y="1221" width="0.0526%" height="15" fill="rgb(247,198,10)" fg:x="24451" fg:w="14"/><text x="92.0778%" y="1231.50"></text></g><g><title>&lt;graph_craft::document::value::TaggedValue as core::clone::Clone&gt;::clone (50 samples, 0.19%)</title><rect x="91.7002%" y="1253" width="0.1878%" height="15" fill="rgb(220,65,29)" fg:x="24417" fg:w="50"/><text x="91.9502%" y="1263.50"></text></g><g><title>&lt;graph_craft::document::NodeInput as core::clone::Clone&gt;::clone (118 samples, 0.44%)</title><rect x="91.6175%" y="1285" width="0.4432%" height="15" fill="rgb(237,171,28)" fg:x="24395" fg:w="118"/><text x="91.8675%" y="1295.50"></text></g><g><title>&lt;graphene_core::memo::MemoHash&lt;T&gt; as core::clone::Clone&gt;::clone (106 samples, 0.40%)</title><rect x="91.6626%" y="1269" width="0.3981%" height="15" fill="rgb(228,44,26)" fg:x="24407" fg:w="106"/><text x="91.9126%" y="1279.50"></text></g><g><title>__memmove_avx512_unaligned_erms (46 samples, 0.17%)</title><rect x="91.8879%" y="1253" width="0.1728%" height="15" fill="rgb(216,210,27)" fg:x="24467" fg:w="46"/><text x="92.1379%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.06%)</title><rect x="92.0607%" y="1285" width="0.0638%" height="15" fill="rgb(252,10,17)" fg:x="24513" fg:w="17"/><text x="92.3107%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.06%)</title><rect x="92.0607%" y="1269" width="0.0638%" height="15" fill="rgb(214,172,30)" fg:x="24513" fg:w="17"/><text x="92.3107%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (17 samples, 0.06%)</title><rect x="92.0607%" y="1253" width="0.0638%" height="15" fill="rgb(253,130,48)" fg:x="24513" fg:w="17"/><text x="92.3107%" y="1263.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.06%)</title><rect x="92.0607%" y="1237" width="0.0638%" height="15" fill="rgb(226,99,43)" fg:x="24513" fg:w="17"/><text x="92.3107%" y="1247.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.06%)</title><rect x="92.0607%" y="1221" width="0.0638%" height="15" fill="rgb(239,111,26)" fg:x="24513" fg:w="17"/><text x="92.3107%" y="1231.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.06%)</title><rect x="92.0607%" y="1205" width="0.0638%" height="15" fill="rgb(240,27,53)" fg:x="24513" fg:w="17"/><text x="92.3107%" y="1215.50"></text></g><g><title>__rdl_alloc (17 samples, 0.06%)</title><rect x="92.0607%" y="1189" width="0.0638%" height="15" fill="rgb(254,163,12)" fg:x="24513" fg:w="17"/><text x="92.3107%" y="1199.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17 samples, 0.06%)</title><rect x="92.0607%" y="1173" width="0.0638%" height="15" fill="rgb(225,51,48)" fg:x="24513" fg:w="17"/><text x="92.3107%" y="1183.50"></text></g><g><title>malloc (17 samples, 0.06%)</title><rect x="92.0607%" y="1157" width="0.0638%" height="15" fill="rgb(205,19,32)" fg:x="24513" fg:w="17"/><text x="92.3107%" y="1167.50"></text></g><g><title>_int_malloc (17 samples, 0.06%)</title><rect x="92.0607%" y="1141" width="0.0638%" height="15" fill="rgb(218,119,26)" fg:x="24513" fg:w="17"/><text x="92.3107%" y="1151.50"></text></g><g><title>unlink_chunk.isra.0 (6 samples, 0.02%)</title><rect x="92.1020%" y="1125" width="0.0225%" height="15" fill="rgb(231,173,33)" fg:x="24524" fg:w="6"/><text x="92.3520%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (174 samples, 0.65%)</title><rect x="91.6100%" y="1349" width="0.6535%" height="15" fill="rgb(241,100,29)" fg:x="24393" fg:w="174"/><text x="91.8600%" y="1359.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (173 samples, 0.65%)</title><rect x="91.6138%" y="1333" width="0.6497%" height="15" fill="rgb(250,194,34)" fg:x="24394" fg:w="173"/><text x="91.8638%" y="1343.50"></text></g><g><title>alloc::slice::hack::to_vec (173 samples, 0.65%)</title><rect x="91.6138%" y="1317" width="0.6497%" height="15" fill="rgb(215,23,50)" fg:x="24394" fg:w="173"/><text x="91.8638%" y="1327.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (173 samples, 0.65%)</title><rect x="91.6138%" y="1301" width="0.6497%" height="15" fill="rgb(206,49,37)" fg:x="24394" fg:w="173"/><text x="91.8638%" y="1311.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (37 samples, 0.14%)</title><rect x="92.1245%" y="1285" width="0.1390%" height="15" fill="rgb(247,39,21)" fg:x="24530" fg:w="37"/><text x="92.3745%" y="1295.50"></text></g><g><title>__memmove_avx512_unaligned_erms (7 samples, 0.03%)</title><rect x="92.2372%" y="1269" width="0.0263%" height="15" fill="rgb(209,220,15)" fg:x="24560" fg:w="7"/><text x="92.4872%" y="1279.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="92.2635%" y="1349" width="0.0113%" height="15" fill="rgb(206,41,33)" fg:x="24567" fg:w="3"/><text x="92.5135%" y="1359.50"></text></g><g><title>&lt;graph_craft::document::NodeInput as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="92.3010%" y="1253" width="0.0113%" height="15" fill="rgb(221,225,45)" fg:x="24577" fg:w="3"/><text x="92.5510%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.05%)</title><rect x="92.3123%" y="1253" width="0.0488%" height="15" fill="rgb(216,27,18)" fg:x="24580" fg:w="13"/><text x="92.5623%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.05%)</title><rect x="92.3123%" y="1237" width="0.0488%" height="15" fill="rgb(250,193,34)" fg:x="24580" fg:w="13"/><text x="92.5623%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (13 samples, 0.05%)</title><rect x="92.3123%" y="1221" width="0.0488%" height="15" fill="rgb(227,215,20)" fg:x="24580" fg:w="13"/><text x="92.5623%" y="1231.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.05%)</title><rect x="92.3161%" y="1205" width="0.0451%" height="15" fill="rgb(242,211,27)" fg:x="24581" fg:w="12"/><text x="92.5661%" y="1215.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.05%)</title><rect x="92.3161%" y="1189" width="0.0451%" height="15" fill="rgb(229,190,30)" fg:x="24581" fg:w="12"/><text x="92.5661%" y="1199.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.05%)</title><rect x="92.3161%" y="1173" width="0.0451%" height="15" fill="rgb(253,31,29)" fg:x="24581" fg:w="12"/><text x="92.5661%" y="1183.50"></text></g><g><title>__rdl_alloc (12 samples, 0.05%)</title><rect x="92.3161%" y="1157" width="0.0451%" height="15" fill="rgb(229,177,52)" fg:x="24581" fg:w="12"/><text x="92.5661%" y="1167.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (12 samples, 0.05%)</title><rect x="92.3161%" y="1141" width="0.0451%" height="15" fill="rgb(226,88,8)" fg:x="24581" fg:w="12"/><text x="92.5661%" y="1151.50"></text></g><g><title>malloc (12 samples, 0.05%)</title><rect x="92.3161%" y="1125" width="0.0451%" height="15" fill="rgb(214,55,27)" fg:x="24581" fg:w="12"/><text x="92.5661%" y="1135.50"></text></g><g><title>_int_malloc (12 samples, 0.05%)</title><rect x="92.3161%" y="1109" width="0.0451%" height="15" fill="rgb(233,202,5)" fg:x="24581" fg:w="12"/><text x="92.5661%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (27 samples, 0.10%)</title><rect x="92.2973%" y="1317" width="0.1014%" height="15" fill="rgb(251,49,30)" fg:x="24576" fg:w="27"/><text x="92.5473%" y="1327.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (27 samples, 0.10%)</title><rect x="92.2973%" y="1301" width="0.1014%" height="15" fill="rgb(235,18,52)" fg:x="24576" fg:w="27"/><text x="92.5473%" y="1311.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.10%)</title><rect x="92.2973%" y="1285" width="0.1014%" height="15" fill="rgb(250,111,51)" fg:x="24576" fg:w="27"/><text x="92.5473%" y="1295.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (27 samples, 0.10%)</title><rect x="92.2973%" y="1269" width="0.1014%" height="15" fill="rgb(218,13,25)" fg:x="24576" fg:w="27"/><text x="92.5473%" y="1279.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (10 samples, 0.04%)</title><rect x="92.3611%" y="1253" width="0.0376%" height="15" fill="rgb(248,96,7)" fg:x="24593" fg:w="10"/><text x="92.6111%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="92.4963%" y="1189" width="0.0113%" height="15" fill="rgb(217,31,15)" fg:x="24629" fg:w="3"/><text x="92.7463%" y="1199.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="92.5114%" y="1141" width="0.0150%" height="15" fill="rgb(228,59,49)" fg:x="24633" fg:w="4"/><text x="92.7614%" y="1151.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="92.6203%" y="1109" width="0.0188%" height="15" fill="rgb(210,152,38)" fg:x="24662" fg:w="5"/><text x="92.8703%" y="1119.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (5 samples, 0.02%)</title><rect x="92.6203%" y="1093" width="0.0188%" height="15" fill="rgb(206,71,11)" fg:x="24662" fg:w="5"/><text x="92.8703%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (5 samples, 0.02%)</title><rect x="92.6203%" y="1077" width="0.0188%" height="15" fill="rgb(244,199,5)" fg:x="24662" fg:w="5"/><text x="92.8703%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.02%)</title><rect x="92.6203%" y="1061" width="0.0188%" height="15" fill="rgb(253,49,1)" fg:x="24662" fg:w="5"/><text x="92.8703%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.02%)</title><rect x="92.6203%" y="1045" width="0.0188%" height="15" fill="rgb(225,206,40)" fg:x="24662" fg:w="5"/><text x="92.8703%" y="1055.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.02%)</title><rect x="92.6203%" y="1029" width="0.0188%" height="15" fill="rgb(243,116,47)" fg:x="24662" fg:w="5"/><text x="92.8703%" y="1039.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.02%)</title><rect x="92.6203%" y="1013" width="0.0188%" height="15" fill="rgb(219,225,16)" fg:x="24662" fg:w="5"/><text x="92.8703%" y="1023.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.01%)</title><rect x="92.6278%" y="997" width="0.0113%" height="15" fill="rgb(233,29,47)" fg:x="24664" fg:w="3"/><text x="92.8778%" y="1007.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="92.6278%" y="981" width="0.0113%" height="15" fill="rgb(250,179,18)" fg:x="24664" fg:w="3"/><text x="92.8778%" y="991.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="92.6278%" y="965" width="0.0113%" height="15" fill="rgb(215,176,6)" fg:x="24664" fg:w="3"/><text x="92.8778%" y="975.50"></text></g><g><title>__rdl_alloc (37 samples, 0.14%)</title><rect x="92.6503%" y="885" width="0.1390%" height="15" fill="rgb(214,117,39)" fg:x="24670" fg:w="37"/><text x="92.9003%" y="895.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (37 samples, 0.14%)</title><rect x="92.6503%" y="869" width="0.1390%" height="15" fill="rgb(247,183,36)" fg:x="24670" fg:w="37"/><text x="92.9003%" y="879.50"></text></g><g><title>malloc (37 samples, 0.14%)</title><rect x="92.6503%" y="853" width="0.1390%" height="15" fill="rgb(237,200,3)" fg:x="24670" fg:w="37"/><text x="92.9003%" y="863.50"></text></g><g><title>_int_malloc (34 samples, 0.13%)</title><rect x="92.6616%" y="837" width="0.1277%" height="15" fill="rgb(212,220,24)" fg:x="24673" fg:w="34"/><text x="92.9116%" y="847.50"></text></g><g><title>unlink_chunk.isra.0 (4 samples, 0.02%)</title><rect x="92.7743%" y="821" width="0.0150%" height="15" fill="rgb(245,216,20)" fg:x="24703" fg:w="4"/><text x="93.0243%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (38 samples, 0.14%)</title><rect x="92.6503%" y="981" width="0.1427%" height="15" fill="rgb(219,124,7)" fg:x="24670" fg:w="38"/><text x="92.9003%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (38 samples, 0.14%)</title><rect x="92.6503%" y="965" width="0.1427%" height="15" fill="rgb(227,167,8)" fg:x="24670" fg:w="38"/><text x="92.9003%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (38 samples, 0.14%)</title><rect x="92.6503%" y="949" width="0.1427%" height="15" fill="rgb(241,37,2)" fg:x="24670" fg:w="38"/><text x="92.9003%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.14%)</title><rect x="92.6503%" y="933" width="0.1427%" height="15" fill="rgb(238,134,33)" fg:x="24670" fg:w="38"/><text x="92.9003%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.14%)</title><rect x="92.6503%" y="917" width="0.1427%" height="15" fill="rgb(248,48,27)" fg:x="24670" fg:w="38"/><text x="92.9003%" y="927.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.14%)</title><rect x="92.6503%" y="901" width="0.1427%" height="15" fill="rgb(212,14,16)" fg:x="24670" fg:w="38"/><text x="92.9003%" y="911.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (52 samples, 0.20%)</title><rect x="92.6466%" y="1093" width="0.1953%" height="15" fill="rgb(217,205,37)" fg:x="24669" fg:w="52"/><text x="92.8966%" y="1103.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (51 samples, 0.19%)</title><rect x="92.6503%" y="1077" width="0.1915%" height="15" fill="rgb(233,185,47)" fg:x="24670" fg:w="51"/><text x="92.9003%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (51 samples, 0.19%)</title><rect x="92.6503%" y="1061" width="0.1915%" height="15" fill="rgb(244,88,8)" fg:x="24670" fg:w="51"/><text x="92.9003%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (51 samples, 0.19%)</title><rect x="92.6503%" y="1045" width="0.1915%" height="15" fill="rgb(213,0,20)" fg:x="24670" fg:w="51"/><text x="92.9003%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (51 samples, 0.19%)</title><rect x="92.6503%" y="1029" width="0.1915%" height="15" fill="rgb(238,159,36)" fg:x="24670" fg:w="51"/><text x="92.9003%" y="1039.50"></text></g><g><title>alloc::slice::hack::to_vec (51 samples, 0.19%)</title><rect x="92.6503%" y="1013" width="0.1915%" height="15" fill="rgb(253,173,17)" fg:x="24670" fg:w="51"/><text x="92.9003%" y="1023.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (51 samples, 0.19%)</title><rect x="92.6503%" y="997" width="0.1915%" height="15" fill="rgb(221,23,28)" fg:x="24670" fg:w="51"/><text x="92.9003%" y="1007.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.05%)</title><rect x="92.7930%" y="981" width="0.0488%" height="15" fill="rgb(218,113,15)" fg:x="24708" fg:w="13"/><text x="93.0430%" y="991.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.05%)</title><rect x="92.7930%" y="965" width="0.0488%" height="15" fill="rgb(233,58,3)" fg:x="24708" fg:w="13"/><text x="93.0430%" y="975.50"></text></g><g><title>__memmove_avx512_unaligned_erms (13 samples, 0.05%)</title><rect x="92.7930%" y="949" width="0.0488%" height="15" fill="rgb(250,46,35)" fg:x="24708" fg:w="13"/><text x="93.0430%" y="959.50"></text></g><g><title>&lt;graph_craft::document::NodeInput as core::clone::Clone&gt;::clone (85 samples, 0.32%)</title><rect x="92.5264%" y="1141" width="0.3192%" height="15" fill="rgb(210,169,11)" fg:x="24637" fg:w="85"/><text x="92.7764%" y="1151.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (62 samples, 0.23%)</title><rect x="92.6128%" y="1125" width="0.2328%" height="15" fill="rgb(246,88,19)" fg:x="24660" fg:w="62"/><text x="92.8628%" y="1135.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (53 samples, 0.20%)</title><rect x="92.6466%" y="1109" width="0.1990%" height="15" fill="rgb(206,81,49)" fg:x="24669" fg:w="53"/><text x="92.8966%" y="1119.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (46 samples, 0.17%)</title><rect x="92.8456%" y="1141" width="0.1728%" height="15" fill="rgb(232,144,18)" fg:x="24722" fg:w="46"/><text x="93.0956%" y="1151.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (46 samples, 0.17%)</title><rect x="92.8456%" y="1125" width="0.1728%" height="15" fill="rgb(235,2,27)" fg:x="24722" fg:w="46"/><text x="93.0956%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (46 samples, 0.17%)</title><rect x="92.8456%" y="1109" width="0.1728%" height="15" fill="rgb(239,157,39)" fg:x="24722" fg:w="46"/><text x="93.0956%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (43 samples, 0.16%)</title><rect x="92.8569%" y="1093" width="0.1615%" height="15" fill="rgb(220,11,17)" fg:x="24725" fg:w="43"/><text x="93.1069%" y="1103.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 0.16%)</title><rect x="92.8569%" y="1077" width="0.1615%" height="15" fill="rgb(243,94,50)" fg:x="24725" fg:w="43"/><text x="93.1069%" y="1087.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.16%)</title><rect x="92.8569%" y="1061" width="0.1615%" height="15" fill="rgb(218,22,0)" fg:x="24725" fg:w="43"/><text x="93.1069%" y="1071.50"></text></g><g><title>__rdl_alloc (43 samples, 0.16%)</title><rect x="92.8569%" y="1045" width="0.1615%" height="15" fill="rgb(249,70,21)" fg:x="24725" fg:w="43"/><text x="93.1069%" y="1055.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (43 samples, 0.16%)</title><rect x="92.8569%" y="1029" width="0.1615%" height="15" fill="rgb(245,111,46)" fg:x="24725" fg:w="43"/><text x="93.1069%" y="1039.50"></text></g><g><title>malloc (43 samples, 0.16%)</title><rect x="92.8569%" y="1013" width="0.1615%" height="15" fill="rgb(244,183,12)" fg:x="24725" fg:w="43"/><text x="93.1069%" y="1023.50"></text></g><g><title>_int_malloc (38 samples, 0.14%)</title><rect x="92.8757%" y="997" width="0.1427%" height="15" fill="rgb(207,117,0)" fg:x="24730" fg:w="38"/><text x="93.1257%" y="1007.50"></text></g><g><title>unlink_chunk.isra.0 (17 samples, 0.06%)</title><rect x="92.9545%" y="981" width="0.0638%" height="15" fill="rgb(206,20,43)" fg:x="24751" fg:w="17"/><text x="93.2045%" y="991.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (58 samples, 0.22%)</title><rect x="93.0184%" y="1141" width="0.2178%" height="15" fill="rgb(221,104,11)" fg:x="24768" fg:w="58"/><text x="93.2684%" y="1151.50"></text></g><g><title>__memmove_avx512_unaligned_erms (10 samples, 0.04%)</title><rect x="93.1986%" y="1125" width="0.0376%" height="15" fill="rgb(254,36,50)" fg:x="24816" fg:w="10"/><text x="93.4486%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (199 samples, 0.75%)</title><rect x="92.4926%" y="1205" width="0.7474%" height="15" fill="rgb(252,17,15)" fg:x="24628" fg:w="199"/><text x="92.7426%" y="1215.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (195 samples, 0.73%)</title><rect x="92.5076%" y="1189" width="0.7323%" height="15" fill="rgb(219,129,43)" fg:x="24632" fg:w="195"/><text x="92.7576%" y="1199.50"></text></g><g><title>alloc::slice::hack::to_vec (195 samples, 0.73%)</title><rect x="92.5076%" y="1173" width="0.7323%" height="15" fill="rgb(205,34,45)" fg:x="24632" fg:w="195"/><text x="92.7576%" y="1183.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (195 samples, 0.73%)</title><rect x="92.5076%" y="1157" width="0.7323%" height="15" fill="rgb(251,201,32)" fg:x="24632" fg:w="195"/><text x="92.7576%" y="1167.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="93.2550%" y="1173" width="0.0150%" height="15" fill="rgb(205,56,0)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="1183.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4 samples, 0.02%)</title><rect x="93.2550%" y="1157" width="0.0150%" height="15" fill="rgb(211,193,27)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="1167.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4 samples, 0.02%)</title><rect x="93.2550%" y="1141" width="0.0150%" height="15" fill="rgb(231,100,42)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="1151.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.02%)</title><rect x="93.2550%" y="1125" width="0.0150%" height="15" fill="rgb(245,85,27)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="1135.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.02%)</title><rect x="93.2550%" y="1109" width="0.0150%" height="15" fill="rgb(241,76,24)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="1119.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.02%)</title><rect x="93.2550%" y="1093" width="0.0150%" height="15" fill="rgb(249,157,15)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="1103.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.02%)</title><rect x="93.2550%" y="1077" width="0.0150%" height="15" fill="rgb(222,218,25)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="93.2550%" y="1061" width="0.0150%" height="15" fill="rgb(252,156,52)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="93.2550%" y="1045" width="0.0150%" height="15" fill="rgb(211,185,7)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (4 samples, 0.02%)</title><rect x="93.2550%" y="1029" width="0.0150%" height="15" fill="rgb(234,108,24)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.02%)</title><rect x="93.2550%" y="1013" width="0.0150%" height="15" fill="rgb(227,218,2)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="1023.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.02%)</title><rect x="93.2550%" y="997" width="0.0150%" height="15" fill="rgb(224,0,36)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="1007.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.02%)</title><rect x="93.2550%" y="981" width="0.0150%" height="15" fill="rgb(233,201,10)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="991.50"></text></g><g><title>__rdl_alloc (4 samples, 0.02%)</title><rect x="93.2550%" y="965" width="0.0150%" height="15" fill="rgb(252,209,14)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="975.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.02%)</title><rect x="93.2550%" y="949" width="0.0150%" height="15" fill="rgb(205,93,49)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="959.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="93.2550%" y="933" width="0.0150%" height="15" fill="rgb(234,116,45)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="943.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="93.2550%" y="917" width="0.0150%" height="15" fill="rgb(248,89,35)" fg:x="24831" fg:w="4"/><text x="93.5050%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.04%)</title><rect x="93.2737%" y="1045" width="0.0413%" height="15" fill="rgb(233,167,45)" fg:x="24836" fg:w="11"/><text x="93.5237%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.04%)</title><rect x="93.2737%" y="1029" width="0.0413%" height="15" fill="rgb(248,228,14)" fg:x="24836" fg:w="11"/><text x="93.5237%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (11 samples, 0.04%)</title><rect x="93.2737%" y="1013" width="0.0413%" height="15" fill="rgb(246,91,14)" fg:x="24836" fg:w="11"/><text x="93.5237%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.04%)</title><rect x="93.2737%" y="997" width="0.0413%" height="15" fill="rgb(227,142,5)" fg:x="24836" fg:w="11"/><text x="93.5237%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.04%)</title><rect x="93.2737%" y="981" width="0.0413%" height="15" fill="rgb(221,63,33)" fg:x="24836" fg:w="11"/><text x="93.5237%" y="991.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.04%)</title><rect x="93.2737%" y="965" width="0.0413%" height="15" fill="rgb(233,49,0)" fg:x="24836" fg:w="11"/><text x="93.5237%" y="975.50"></text></g><g><title>__rdl_alloc (11 samples, 0.04%)</title><rect x="93.2737%" y="949" width="0.0413%" height="15" fill="rgb(251,115,38)" fg:x="24836" fg:w="11"/><text x="93.5237%" y="959.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (11 samples, 0.04%)</title><rect x="93.2737%" y="933" width="0.0413%" height="15" fill="rgb(231,214,32)" fg:x="24836" fg:w="11"/><text x="93.5237%" y="943.50"></text></g><g><title>malloc (11 samples, 0.04%)</title><rect x="93.2737%" y="917" width="0.0413%" height="15" fill="rgb(248,73,46)" fg:x="24836" fg:w="11"/><text x="93.5237%" y="927.50"></text></g><g><title>_int_malloc (11 samples, 0.04%)</title><rect x="93.2737%" y="901" width="0.0413%" height="15" fill="rgb(237,156,4)" fg:x="24836" fg:w="11"/><text x="93.5237%" y="911.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (25 samples, 0.09%)</title><rect x="93.2399%" y="1205" width="0.0939%" height="15" fill="rgb(227,132,2)" fg:x="24827" fg:w="25"/><text x="93.4899%" y="1215.50"></text></g><g><title>&lt;graphene_core::types::Type as core::clone::Clone&gt;::clone (21 samples, 0.08%)</title><rect x="93.2550%" y="1189" width="0.0789%" height="15" fill="rgb(248,161,9)" fg:x="24831" fg:w="21"/><text x="93.5050%" y="1199.50"></text></g><g><title>&lt;graphene_core::types::TypeDescriptor as core::clone::Clone&gt;::clone (17 samples, 0.06%)</title><rect x="93.2700%" y="1173" width="0.0638%" height="15" fill="rgb(238,77,38)" fg:x="24835" fg:w="17"/><text x="93.5200%" y="1183.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (16 samples, 0.06%)</title><rect x="93.2737%" y="1157" width="0.0601%" height="15" fill="rgb(222,166,40)" fg:x="24836" fg:w="16"/><text x="93.5237%" y="1167.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (16 samples, 0.06%)</title><rect x="93.2737%" y="1141" width="0.0601%" height="15" fill="rgb(214,168,45)" fg:x="24836" fg:w="16"/><text x="93.5237%" y="1151.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (16 samples, 0.06%)</title><rect x="93.2737%" y="1125" width="0.0601%" height="15" fill="rgb(226,64,37)" fg:x="24836" fg:w="16"/><text x="93.5237%" y="1135.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 0.06%)</title><rect x="93.2737%" y="1109" width="0.0601%" height="15" fill="rgb(232,210,43)" fg:x="24836" fg:w="16"/><text x="93.5237%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.06%)</title><rect x="93.2737%" y="1093" width="0.0601%" height="15" fill="rgb(214,76,33)" fg:x="24836" fg:w="16"/><text x="93.5237%" y="1103.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.06%)</title><rect x="93.2737%" y="1077" width="0.0601%" height="15" fill="rgb(210,78,5)" fg:x="24836" fg:w="16"/><text x="93.5237%" y="1087.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.06%)</title><rect x="93.2737%" y="1061" width="0.0601%" height="15" fill="rgb(211,107,37)" fg:x="24836" fg:w="16"/><text x="93.5237%" y="1071.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.02%)</title><rect x="93.3151%" y="1045" width="0.0188%" height="15" fill="rgb(249,67,16)" fg:x="24847" fg:w="5"/><text x="93.5651%" y="1055.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.02%)</title><rect x="93.3151%" y="1029" width="0.0188%" height="15" fill="rgb(222,114,31)" fg:x="24847" fg:w="5"/><text x="93.5651%" y="1039.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.02%)</title><rect x="93.3151%" y="1013" width="0.0188%" height="15" fill="rgb(242,118,19)" fg:x="24847" fg:w="5"/><text x="93.5651%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.02%)</title><rect x="93.3413%" y="1061" width="0.0225%" height="15" fill="rgb(223,115,1)" fg:x="24854" fg:w="6"/><text x="93.5913%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.02%)</title><rect x="93.3413%" y="1045" width="0.0225%" height="15" fill="rgb(241,182,54)" fg:x="24854" fg:w="6"/><text x="93.5913%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (6 samples, 0.02%)</title><rect x="93.3413%" y="1029" width="0.0225%" height="15" fill="rgb(244,166,36)" fg:x="24854" fg:w="6"/><text x="93.5913%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.02%)</title><rect x="93.3451%" y="1013" width="0.0188%" height="15" fill="rgb(241,52,43)" fg:x="24855" fg:w="5"/><text x="93.5951%" y="1023.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.02%)</title><rect x="93.3451%" y="997" width="0.0188%" height="15" fill="rgb(236,82,9)" fg:x="24855" fg:w="5"/><text x="93.5951%" y="1007.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="93.3451%" y="981" width="0.0188%" height="15" fill="rgb(241,119,0)" fg:x="24855" fg:w="5"/><text x="93.5951%" y="991.50"></text></g><g><title>__rdl_alloc (5 samples, 0.02%)</title><rect x="93.3451%" y="965" width="0.0188%" height="15" fill="rgb(221,19,22)" fg:x="24855" fg:w="5"/><text x="93.5951%" y="975.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.02%)</title><rect x="93.3451%" y="949" width="0.0188%" height="15" fill="rgb(254,144,35)" fg:x="24855" fg:w="5"/><text x="93.5951%" y="959.50"></text></g><g><title>malloc (5 samples, 0.02%)</title><rect x="93.3451%" y="933" width="0.0188%" height="15" fill="rgb(246,132,30)" fg:x="24855" fg:w="5"/><text x="93.5951%" y="943.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="93.3526%" y="917" width="0.0113%" height="15" fill="rgb(234,69,28)" fg:x="24857" fg:w="3"/><text x="93.6026%" y="927.50"></text></g><g><title>&lt;graph_craft::document::DocumentNodeImplementation as core::clone::Clone&gt;::clone (11 samples, 0.04%)</title><rect x="93.3338%" y="1205" width="0.0413%" height="15" fill="rgb(219,106,47)" fg:x="24852" fg:w="11"/><text x="93.5838%" y="1215.50"></text></g><g><title>&lt;graphene_core::types::ProtoNodeIdentifier as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="93.3413%" y="1189" width="0.0338%" height="15" fill="rgb(218,79,24)" fg:x="24854" fg:w="9"/><text x="93.5913%" y="1199.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="93.3413%" y="1173" width="0.0338%" height="15" fill="rgb(225,26,21)" fg:x="24854" fg:w="9"/><text x="93.5913%" y="1183.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (9 samples, 0.03%)</title><rect x="93.3413%" y="1157" width="0.0338%" height="15" fill="rgb(217,68,49)" fg:x="24854" fg:w="9"/><text x="93.5913%" y="1167.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (9 samples, 0.03%)</title><rect x="93.3413%" y="1141" width="0.0338%" height="15" fill="rgb(220,204,28)" fg:x="24854" fg:w="9"/><text x="93.5913%" y="1151.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.03%)</title><rect x="93.3413%" y="1125" width="0.0338%" height="15" fill="rgb(237,208,43)" fg:x="24854" fg:w="9"/><text x="93.5913%" y="1135.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.03%)</title><rect x="93.3413%" y="1109" width="0.0338%" height="15" fill="rgb(213,97,42)" fg:x="24854" fg:w="9"/><text x="93.5913%" y="1119.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.03%)</title><rect x="93.3413%" y="1093" width="0.0338%" height="15" fill="rgb(238,96,52)" fg:x="24854" fg:w="9"/><text x="93.5913%" y="1103.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.03%)</title><rect x="93.3413%" y="1077" width="0.0338%" height="15" fill="rgb(228,14,13)" fg:x="24854" fg:w="9"/><text x="93.5913%" y="1087.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.01%)</title><rect x="93.3639%" y="1061" width="0.0113%" height="15" fill="rgb(219,123,13)" fg:x="24860" fg:w="3"/><text x="93.6139%" y="1071.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="93.3639%" y="1045" width="0.0113%" height="15" fill="rgb(216,144,17)" fg:x="24860" fg:w="3"/><text x="93.6139%" y="1055.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="93.3639%" y="1029" width="0.0113%" height="15" fill="rgb(230,228,29)" fg:x="24860" fg:w="3"/><text x="93.6139%" y="1039.50"></text></g><g><title>core::clone::Clone::clone (248 samples, 0.93%)</title><rect x="92.4513%" y="1237" width="0.9314%" height="15" fill="rgb(233,18,5)" fg:x="24617" fg:w="248"/><text x="92.7013%" y="1247.50"></text></g><g><title>&lt;graph_craft::document::DocumentNode as core::clone::Clone&gt;::clone (242 samples, 0.91%)</title><rect x="92.4738%" y="1221" width="0.9089%" height="15" fill="rgb(233,197,12)" fg:x="24623" fg:w="242"/><text x="92.7238%" y="1231.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (3 samples, 0.01%)</title><rect x="93.3827%" y="1237" width="0.0113%" height="15" fill="rgb(234,140,29)" fg:x="24865" fg:w="3"/><text x="93.6327%" y="1247.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="93.3827%" y="1221" width="0.0113%" height="15" fill="rgb(233,113,19)" fg:x="24865" fg:w="3"/><text x="93.6327%" y="1231.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.01%)</title><rect x="93.3827%" y="1205" width="0.0113%" height="15" fill="rgb(246,209,13)" fg:x="24865" fg:w="3"/><text x="93.6327%" y="1215.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (256 samples, 0.96%)</title><rect x="92.4438%" y="1269" width="0.9614%" height="15" fill="rgb(242,79,54)" fg:x="24615" fg:w="256"/><text x="92.6938%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (256 samples, 0.96%)</title><rect x="92.4438%" y="1253" width="0.9614%" height="15" fill="rgb(219,73,16)" fg:x="24615" fg:w="256"/><text x="92.6938%" y="1263.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (3 samples, 0.01%)</title><rect x="93.3939%" y="1237" width="0.0113%" height="15" fill="rgb(224,52,10)" fg:x="24868" fg:w="3"/><text x="93.6439%" y="1247.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (3 samples, 0.01%)</title><rect x="93.3939%" y="1221" width="0.0113%" height="15" fill="rgb(237,179,5)" fg:x="24868" fg:w="3"/><text x="93.6439%" y="1231.50"></text></g><g><title>core::ptr::write (3 samples, 0.01%)</title><rect x="93.3939%" y="1205" width="0.0113%" height="15" fill="rgb(231,20,6)" fg:x="24868" fg:w="3"/><text x="93.6439%" y="1215.50"></text></g><g><title>&lt;graph_craft::document::NodeNetwork as core::clone::Clone&gt;::clone (312 samples, 1.17%)</title><rect x="92.2973%" y="1333" width="1.1717%" height="15" fill="rgb(253,171,45)" fg:x="24576" fg:w="312"/><text x="92.5473%" y="1343.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (285 samples, 1.07%)</title><rect x="92.3987%" y="1317" width="1.0703%" height="15" fill="rgb(230,75,49)" fg:x="24603" fg:w="285"/><text x="92.6487%" y="1327.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (278 samples, 1.04%)</title><rect x="92.4250%" y="1301" width="1.0441%" height="15" fill="rgb(216,83,46)" fg:x="24610" fg:w="278"/><text x="92.6750%" y="1311.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (274 samples, 1.03%)</title><rect x="92.4400%" y="1285" width="1.0290%" height="15" fill="rgb(236,56,9)" fg:x="24614" fg:w="274"/><text x="92.6900%" y="1295.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (17 samples, 0.06%)</title><rect x="93.4052%" y="1269" width="0.0638%" height="15" fill="rgb(215,28,34)" fg:x="24871" fg:w="17"/><text x="93.6552%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (17 samples, 0.06%)</title><rect x="93.4052%" y="1253" width="0.0638%" height="15" fill="rgb(230,222,20)" fg:x="24871" fg:w="17"/><text x="93.6552%" y="1263.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (17 samples, 0.06%)</title><rect x="93.4052%" y="1237" width="0.0638%" height="15" fill="rgb(235,209,51)" fg:x="24871" fg:w="17"/><text x="93.6552%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.06%)</title><rect x="93.4052%" y="1221" width="0.0638%" height="15" fill="rgb(235,167,1)" fg:x="24871" fg:w="17"/><text x="93.6552%" y="1231.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.06%)</title><rect x="93.4052%" y="1205" width="0.0638%" height="15" fill="rgb(248,220,0)" fg:x="24871" fg:w="17"/><text x="93.6552%" y="1215.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.06%)</title><rect x="93.4052%" y="1189" width="0.0638%" height="15" fill="rgb(239,0,18)" fg:x="24871" fg:w="17"/><text x="93.6552%" y="1199.50"></text></g><g><title>__rdl_alloc (17 samples, 0.06%)</title><rect x="93.4052%" y="1173" width="0.0638%" height="15" fill="rgb(229,179,11)" fg:x="24871" fg:w="17"/><text x="93.6552%" y="1183.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17 samples, 0.06%)</title><rect x="93.4052%" y="1157" width="0.0638%" height="15" fill="rgb(226,116,53)" fg:x="24871" fg:w="17"/><text x="93.6552%" y="1167.50"></text></g><g><title>malloc (17 samples, 0.06%)</title><rect x="93.4052%" y="1141" width="0.0638%" height="15" fill="rgb(218,1,49)" fg:x="24871" fg:w="17"/><text x="93.6552%" y="1151.50"></text></g><g><title>_int_malloc (16 samples, 0.06%)</title><rect x="93.4089%" y="1125" width="0.0601%" height="15" fill="rgb(208,184,47)" fg:x="24872" fg:w="16"/><text x="93.6589%" y="1135.50"></text></g><g><title>unlink_chunk.isra.0 (4 samples, 0.02%)</title><rect x="93.4540%" y="1109" width="0.0150%" height="15" fill="rgb(238,174,3)" fg:x="24884" fg:w="4"/><text x="93.7040%" y="1119.50"></text></g><g><title>core::clone::Clone::clone (500 samples, 1.88%)</title><rect x="91.5950%" y="1381" width="1.8778%" height="15" fill="rgb(247,188,6)" fg:x="24389" fg:w="500"/><text x="91.8450%" y="1391.50">c..</text></g><g><title>&lt;graph_craft::document::DocumentNode as core::clone::Clone&gt;::clone (496 samples, 1.86%)</title><rect x="91.6100%" y="1365" width="1.8628%" height="15" fill="rgb(211,165,46)" fg:x="24393" fg:w="496"/><text x="91.8600%" y="1375.50">&lt;..</text></g><g><title>&lt;graph_craft::document::DocumentNodeImplementation as core::clone::Clone&gt;::clone (319 samples, 1.20%)</title><rect x="92.2748%" y="1349" width="1.1980%" height="15" fill="rgb(222,190,10)" fg:x="24570" fg:w="319"/><text x="92.5248%" y="1359.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (501 samples, 1.88%)</title><rect x="91.5950%" y="1413" width="1.8815%" height="15" fill="rgb(206,185,3)" fg:x="24389" fg:w="501"/><text x="91.8450%" y="1423.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (501 samples, 1.88%)</title><rect x="91.5950%" y="1397" width="1.8815%" height="15" fill="rgb(244,125,37)" fg:x="24389" fg:w="501"/><text x="91.8450%" y="1407.50">h..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (507 samples, 1.90%)</title><rect x="91.5912%" y="1605" width="1.9041%" height="15" fill="rgb(211,43,7)" fg:x="24388" fg:w="507"/><text x="91.8412%" y="1615.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (507 samples, 1.90%)</title><rect x="91.5912%" y="1589" width="1.9041%" height="15" fill="rgb(250,41,42)" fg:x="24388" fg:w="507"/><text x="91.8412%" y="1599.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (507 samples, 1.90%)</title><rect x="91.5912%" y="1573" width="1.9041%" height="15" fill="rgb(254,54,42)" fg:x="24388" fg:w="507"/><text x="91.8412%" y="1583.50">c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (507 samples, 1.90%)</title><rect x="91.5912%" y="1557" width="1.9041%" height="15" fill="rgb(213,71,43)" fg:x="24388" fg:w="507"/><text x="91.8412%" y="1567.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (507 samples, 1.90%)</title><rect x="91.5912%" y="1541" width="1.9041%" height="15" fill="rgb(249,3,44)" fg:x="24388" fg:w="507"/><text x="91.8412%" y="1551.50">c..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (507 samples, 1.90%)</title><rect x="91.5912%" y="1525" width="1.9041%" height="15" fill="rgb(229,80,41)" fg:x="24388" fg:w="507"/><text x="91.8412%" y="1535.50">c..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched::_{{closure}} (506 samples, 1.90%)</title><rect x="91.5950%" y="1509" width="1.9003%" height="15" fill="rgb(231,25,28)" fg:x="24389" fg:w="506"/><text x="91.8450%" y="1519.50">c..</text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (506 samples, 1.90%)</title><rect x="91.5950%" y="1493" width="1.9003%" height="15" fill="rgb(208,79,48)" fg:x="24389" fg:w="506"/><text x="91.8450%" y="1503.50">c..</text></g><g><title>&lt;graph_craft::document::NodeNetwork as core::clone::Clone&gt;::clone (506 samples, 1.90%)</title><rect x="91.5950%" y="1477" width="1.9003%" height="15" fill="rgb(207,196,38)" fg:x="24389" fg:w="506"/><text x="91.8450%" y="1487.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (506 samples, 1.90%)</title><rect x="91.5950%" y="1461" width="1.9003%" height="15" fill="rgb(228,105,49)" fg:x="24389" fg:w="506"/><text x="91.8450%" y="1471.50">&lt;..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (506 samples, 1.90%)</title><rect x="91.5950%" y="1445" width="1.9003%" height="15" fill="rgb(237,99,15)" fg:x="24389" fg:w="506"/><text x="91.8450%" y="1455.50">&lt;..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (506 samples, 1.90%)</title><rect x="91.5950%" y="1429" width="1.9003%" height="15" fill="rgb(224,207,46)" fg:x="24389" fg:w="506"/><text x="91.8450%" y="1439.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (5 samples, 0.02%)</title><rect x="93.4765%" y="1413" width="0.0188%" height="15" fill="rgb(249,117,50)" fg:x="24890" fg:w="5"/><text x="93.7265%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (5 samples, 0.02%)</title><rect x="93.4765%" y="1397" width="0.0188%" height="15" fill="rgb(248,17,13)" fg:x="24890" fg:w="5"/><text x="93.7265%" y="1407.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5 samples, 0.02%)</title><rect x="93.4765%" y="1381" width="0.0188%" height="15" fill="rgb(228,187,36)" fg:x="24890" fg:w="5"/><text x="93.7265%" y="1391.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.02%)</title><rect x="93.4765%" y="1365" width="0.0188%" height="15" fill="rgb(234,132,20)" fg:x="24890" fg:w="5"/><text x="93.7265%" y="1375.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.02%)</title><rect x="93.4765%" y="1349" width="0.0188%" height="15" fill="rgb(209,170,46)" fg:x="24890" fg:w="5"/><text x="93.7265%" y="1359.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="93.4765%" y="1333" width="0.0188%" height="15" fill="rgb(237,23,19)" fg:x="24890" fg:w="5"/><text x="93.7265%" y="1343.50"></text></g><g><title>__rdl_alloc (5 samples, 0.02%)</title><rect x="93.4765%" y="1317" width="0.0188%" height="15" fill="rgb(227,21,26)" fg:x="24890" fg:w="5"/><text x="93.7265%" y="1327.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.02%)</title><rect x="93.4765%" y="1301" width="0.0188%" height="15" fill="rgb(222,220,48)" fg:x="24890" fg:w="5"/><text x="93.7265%" y="1311.50"></text></g><g><title>malloc (5 samples, 0.02%)</title><rect x="93.4765%" y="1285" width="0.0188%" height="15" fill="rgb(214,9,16)" fg:x="24890" fg:w="5"/><text x="93.7265%" y="1295.50"></text></g><g><title>_int_malloc (5 samples, 0.02%)</title><rect x="93.4765%" y="1269" width="0.0188%" height="15" fill="rgb(209,73,30)" fg:x="24890" fg:w="5"/><text x="93.7265%" y="1279.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (508 samples, 1.91%)</title><rect x="91.5912%" y="1669" width="1.9078%" height="15" fill="rgb(207,20,33)" fg:x="24388" fg:w="508"/><text x="91.8412%" y="1679.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (508 samples, 1.91%)</title><rect x="91.5912%" y="1653" width="1.9078%" height="15" fill="rgb(219,153,12)" fg:x="24388" fg:w="508"/><text x="91.8412%" y="1663.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (508 samples, 1.91%)</title><rect x="91.5912%" y="1637" width="1.9078%" height="15" fill="rgb(235,97,25)" fg:x="24388" fg:w="508"/><text x="91.8412%" y="1647.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (508 samples, 1.91%)</title><rect x="91.5912%" y="1621" width="1.9078%" height="15" fill="rgb(244,30,34)" fg:x="24388" fg:w="508"/><text x="91.8412%" y="1631.50">&lt;..</text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.01%)</title><rect x="93.4991%" y="1653" width="0.0113%" height="15" fill="rgb(214,106,45)" fg:x="24896" fg:w="3"/><text x="93.7491%" y="1663.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (3 samples, 0.01%)</title><rect x="93.4991%" y="1637" width="0.0113%" height="15" fill="rgb(226,41,9)" fg:x="24896" fg:w="3"/><text x="93.7491%" y="1647.50"></text></g><g><title>malloc_consolidate (3 samples, 0.01%)</title><rect x="93.4991%" y="1621" width="0.0113%" height="15" fill="rgb(253,139,29)" fg:x="24896" fg:w="3"/><text x="93.7491%" y="1631.50"></text></g><g><title>core::mem::drop (4 samples, 0.02%)</title><rect x="93.4991%" y="1669" width="0.0150%" height="15" fill="rgb(213,205,39)" fg:x="24896" fg:w="4"/><text x="93.7491%" y="1679.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (4 samples, 0.02%)</title><rect x="93.5404%" y="1509" width="0.0150%" height="15" fill="rgb(209,27,10)" fg:x="24907" fg:w="4"/><text x="93.7904%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (4 samples, 0.02%)</title><rect x="93.5404%" y="1493" width="0.0150%" height="15" fill="rgb(249,142,16)" fg:x="24907" fg:w="4"/><text x="93.7904%" y="1503.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="93.5404%" y="1477" width="0.0150%" height="15" fill="rgb(242,65,12)" fg:x="24907" fg:w="4"/><text x="93.7904%" y="1487.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.02%)</title><rect x="93.5404%" y="1461" width="0.0150%" height="15" fill="rgb(232,48,10)" fg:x="24907" fg:w="4"/><text x="93.7904%" y="1471.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4 samples, 0.02%)</title><rect x="93.5855%" y="1413" width="0.0150%" height="15" fill="rgb(253,67,19)" fg:x="24919" fg:w="4"/><text x="93.8355%" y="1423.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (4 samples, 0.02%)</title><rect x="93.5855%" y="1397" width="0.0150%" height="15" fill="rgb(227,93,29)" fg:x="24919" fg:w="4"/><text x="93.8355%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::Source,usize)&gt; (4 samples, 0.02%)</title><rect x="93.5855%" y="1381" width="0.0150%" height="15" fill="rgb(226,189,53)" fg:x="24919" fg:w="4"/><text x="93.8355%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::Source&gt; (4 samples, 0.02%)</title><rect x="93.5855%" y="1365" width="0.0150%" height="15" fill="rgb(223,224,1)" fg:x="24919" fg:w="4"/><text x="93.8355%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::document::NodeId&gt;&gt; (4 samples, 0.02%)</title><rect x="93.5855%" y="1349" width="0.0150%" height="15" fill="rgb(221,84,32)" fg:x="24919" fg:w="4"/><text x="93.8355%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;graph_craft::document::NodeId&gt;&gt; (4 samples, 0.02%)</title><rect x="93.5855%" y="1333" width="0.0150%" height="15" fill="rgb(214,189,28)" fg:x="24919" fg:w="4"/><text x="93.8355%" y="1343.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="93.5855%" y="1317" width="0.0150%" height="15" fill="rgb(234,7,52)" fg:x="24919" fg:w="4"/><text x="93.8355%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.02%)</title><rect x="93.5855%" y="1301" width="0.0150%" height="15" fill="rgb(249,73,31)" fg:x="24919" fg:w="4"/><text x="93.8355%" y="1311.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (9 samples, 0.03%)</title><rect x="93.5817%" y="1429" width="0.0338%" height="15" fill="rgb(253,153,41)" fg:x="24918" fg:w="9"/><text x="93.8317%" y="1439.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (4 samples, 0.02%)</title><rect x="93.6005%" y="1413" width="0.0150%" height="15" fill="rgb(249,52,34)" fg:x="24923" fg:w="4"/><text x="93.8505%" y="1423.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (4 samples, 0.02%)</title><rect x="93.6005%" y="1397" width="0.0150%" height="15" fill="rgb(236,177,47)" fg:x="24923" fg:w="4"/><text x="93.8505%" y="1407.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (4 samples, 0.02%)</title><rect x="93.6005%" y="1381" width="0.0150%" height="15" fill="rgb(252,185,45)" fg:x="24923" fg:w="4"/><text x="93.8505%" y="1391.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (4 samples, 0.02%)</title><rect x="93.6005%" y="1365" width="0.0150%" height="15" fill="rgb(251,15,30)" fg:x="24923" fg:w="4"/><text x="93.8505%" y="1375.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.02%)</title><rect x="93.6005%" y="1349" width="0.0150%" height="15" fill="rgb(233,31,4)" fg:x="24923" fg:w="4"/><text x="93.8505%" y="1359.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (6 samples, 0.02%)</title><rect x="93.6343%" y="1333" width="0.0225%" height="15" fill="rgb(254,44,24)" fg:x="24932" fg:w="6"/><text x="93.8843%" y="1343.50"></text></g><g><title>malloc_consolidate (6 samples, 0.02%)</title><rect x="93.6343%" y="1317" width="0.0225%" height="15" fill="rgb(218,54,1)" fg:x="24932" fg:w="6"/><text x="93.8843%" y="1327.50"></text></g><g><title>unlink_chunk.isra.0 (4 samples, 0.02%)</title><rect x="93.6418%" y="1301" width="0.0150%" height="15" fill="rgb(243,209,39)" fg:x="24934" fg:w="4"/><text x="93.8918%" y="1311.50"></text></g><g><title>_int_free_create_chunk (5 samples, 0.02%)</title><rect x="93.6681%" y="1317" width="0.0188%" height="15" fill="rgb(206,75,33)" fg:x="24941" fg:w="5"/><text x="93.9181%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::OriginalLocation&gt; (42 samples, 0.16%)</title><rect x="93.5404%" y="1525" width="0.1577%" height="15" fill="rgb(223,108,18)" fg:x="24907" fg:w="42"/><text x="93.7904%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graph_craft::document::Source,usize&gt;&gt; (38 samples, 0.14%)</title><rect x="93.5554%" y="1509" width="0.1427%" height="15" fill="rgb(244,89,31)" fg:x="24911" fg:w="38"/><text x="93.8054%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graph_craft::document::Source,usize,std::hash::random::RandomState&gt;&gt; (38 samples, 0.14%)</title><rect x="93.5554%" y="1493" width="0.1427%" height="15" fill="rgb(222,167,27)" fg:x="24911" fg:w="38"/><text x="93.8054%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graph_craft::document::Source,usize)&gt;&gt; (38 samples, 0.14%)</title><rect x="93.5554%" y="1477" width="0.1427%" height="15" fill="rgb(247,41,16)" fg:x="24911" fg:w="38"/><text x="93.8054%" y="1487.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.14%)</title><rect x="93.5554%" y="1461" width="0.1427%" height="15" fill="rgb(233,168,40)" fg:x="24911" fg:w="38"/><text x="93.8054%" y="1471.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (38 samples, 0.14%)</title><rect x="93.5554%" y="1445" width="0.1427%" height="15" fill="rgb(205,211,8)" fg:x="24911" fg:w="38"/><text x="93.8054%" y="1455.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (22 samples, 0.08%)</title><rect x="93.6155%" y="1429" width="0.0826%" height="15" fill="rgb(238,105,11)" fg:x="24927" fg:w="22"/><text x="93.8655%" y="1439.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 0.08%)</title><rect x="93.6155%" y="1413" width="0.0826%" height="15" fill="rgb(223,142,52)" fg:x="24927" fg:w="22"/><text x="93.8655%" y="1423.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 0.08%)</title><rect x="93.6155%" y="1397" width="0.0826%" height="15" fill="rgb(238,51,33)" fg:x="24927" fg:w="22"/><text x="93.8655%" y="1407.50"></text></g><g><title>__rdl_dealloc (22 samples, 0.08%)</title><rect x="93.6155%" y="1381" width="0.0826%" height="15" fill="rgb(231,188,43)" fg:x="24927" fg:w="22"/><text x="93.8655%" y="1391.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (22 samples, 0.08%)</title><rect x="93.6155%" y="1365" width="0.0826%" height="15" fill="rgb(216,92,17)" fg:x="24927" fg:w="22"/><text x="93.8655%" y="1375.50"></text></g><g><title>cfree@GLIBC_2.2.5 (22 samples, 0.08%)</title><rect x="93.6155%" y="1349" width="0.0826%" height="15" fill="rgb(228,2,40)" fg:x="24927" fg:w="22"/><text x="93.8655%" y="1359.50"></text></g><g><title>_int_free_merge_chunk (11 samples, 0.04%)</title><rect x="93.6568%" y="1333" width="0.0413%" height="15" fill="rgb(226,73,15)" fg:x="24938" fg:w="11"/><text x="93.9068%" y="1343.50"></text></g><g><title>unlink_chunk.isra.0 (3 samples, 0.01%)</title><rect x="93.6869%" y="1317" width="0.0113%" height="15" fill="rgb(227,66,46)" fg:x="24946" fg:w="3"/><text x="93.9369%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(graph_craft::document::NodeId,bool)&gt;&gt; (9 samples, 0.03%)</title><rect x="93.7094%" y="1509" width="0.0338%" height="15" fill="rgb(209,71,6)" fg:x="24952" fg:w="9"/><text x="93.9594%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(graph_craft::document::NodeId,bool)&gt;&gt; (9 samples, 0.03%)</title><rect x="93.7094%" y="1493" width="0.0338%" height="15" fill="rgb(246,100,25)" fg:x="24952" fg:w="9"/><text x="93.9594%" y="1503.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="93.7094%" y="1477" width="0.0338%" height="15" fill="rgb(248,185,27)" fg:x="24952" fg:w="9"/><text x="93.9594%" y="1487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.03%)</title><rect x="93.7094%" y="1461" width="0.0338%" height="15" fill="rgb(225,118,47)" fg:x="24952" fg:w="9"/><text x="93.9594%" y="1471.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.03%)</title><rect x="93.7094%" y="1445" width="0.0338%" height="15" fill="rgb(220,185,44)" fg:x="24952" fg:w="9"/><text x="93.9594%" y="1455.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.03%)</title><rect x="93.7094%" y="1429" width="0.0338%" height="15" fill="rgb(227,95,24)" fg:x="24952" fg:w="9"/><text x="93.9594%" y="1439.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.03%)</title><rect x="93.7094%" y="1413" width="0.0338%" height="15" fill="rgb(252,84,24)" fg:x="24952" fg:w="9"/><text x="93.9594%" y="1423.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 0.03%)</title><rect x="93.7131%" y="1397" width="0.0300%" height="15" fill="rgb(240,34,44)" fg:x="24953" fg:w="8"/><text x="93.9631%" y="1407.50"></text></g><g><title>_int_free (4 samples, 0.02%)</title><rect x="93.7282%" y="1381" width="0.0150%" height="15" fill="rgb(209,72,54)" fg:x="24957" fg:w="4"/><text x="93.9782%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::document::value::TaggedValue&gt; (5 samples, 0.02%)</title><rect x="93.7507%" y="1493" width="0.0188%" height="15" fill="rgb(226,19,45)" fg:x="24963" fg:w="5"/><text x="94.0007%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::VectorData&gt; (5 samples, 0.02%)</title><rect x="93.7695%" y="1493" width="0.0188%" height="15" fill="rgb(246,7,45)" fg:x="24968" fg:w="5"/><text x="94.0195%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 0.02%)</title><rect x="93.7883%" y="1477" width="0.0225%" height="15" fill="rgb(225,45,2)" fg:x="24973" fg:w="6"/><text x="94.0383%" y="1487.50"></text></g><g><title>_int_free_merge_chunk (3 samples, 0.01%)</title><rect x="93.7995%" y="1461" width="0.0113%" height="15" fill="rgb(221,80,29)" fg:x="24976" fg:w="3"/><text x="94.0495%" y="1471.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (5 samples, 0.02%)</title><rect x="93.8183%" y="1285" width="0.0188%" height="15" fill="rgb(228,11,19)" fg:x="24981" fg:w="5"/><text x="94.0683%" y="1295.50"></text></g><g><title>malloc_consolidate (5 samples, 0.02%)</title><rect x="93.8183%" y="1269" width="0.0188%" height="15" fill="rgb(243,17,21)" fg:x="24981" fg:w="5"/><text x="94.0683%" y="1279.50"></text></g><g><title>_int_free_create_chunk (4 samples, 0.02%)</title><rect x="93.8371%" y="1269" width="0.0150%" height="15" fill="rgb(243,88,8)" fg:x="24986" fg:w="4"/><text x="94.0871%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::PointModification&gt; (13 samples, 0.05%)</title><rect x="93.8108%" y="1477" width="0.0488%" height="15" fill="rgb(214,17,9)" fg:x="24979" fg:w="13"/><text x="94.0608%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2&gt;&gt; (13 samples, 0.05%)</title><rect x="93.8108%" y="1461" width="0.0488%" height="15" fill="rgb(232,169,15)" fg:x="24979" fg:w="13"/><text x="94.0608%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2,std::hash::random::RandomState&gt;&gt; (13 samples, 0.05%)</title><rect x="93.8108%" y="1445" width="0.0488%" height="15" fill="rgb(232,86,53)" fg:x="24979" fg:w="13"/><text x="94.0608%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::PointId,glam::f64::dvec2::DVec2)&gt;&gt; (13 samples, 0.05%)</title><rect x="93.8108%" y="1429" width="0.0488%" height="15" fill="rgb(222,100,4)" fg:x="24979" fg:w="13"/><text x="94.0608%" y="1439.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.05%)</title><rect x="93.8108%" y="1413" width="0.0488%" height="15" fill="rgb(253,151,38)" fg:x="24979" fg:w="13"/><text x="94.0608%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (13 samples, 0.05%)</title><rect x="93.8108%" y="1397" width="0.0488%" height="15" fill="rgb(238,215,29)" fg:x="24979" fg:w="13"/><text x="94.0608%" y="1407.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (13 samples, 0.05%)</title><rect x="93.8108%" y="1381" width="0.0488%" height="15" fill="rgb(205,128,53)" fg:x="24979" fg:w="13"/><text x="94.0608%" y="1391.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.05%)</title><rect x="93.8108%" y="1365" width="0.0488%" height="15" fill="rgb(248,183,14)" fg:x="24979" fg:w="13"/><text x="94.0608%" y="1375.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.05%)</title><rect x="93.8108%" y="1349" width="0.0488%" height="15" fill="rgb(244,172,35)" fg:x="24979" fg:w="13"/><text x="94.0608%" y="1359.50"></text></g><g><title>__rdl_dealloc (13 samples, 0.05%)</title><rect x="93.8108%" y="1333" width="0.0488%" height="15" fill="rgb(234,93,19)" fg:x="24979" fg:w="13"/><text x="94.0608%" y="1343.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (13 samples, 0.05%)</title><rect x="93.8108%" y="1317" width="0.0488%" height="15" fill="rgb(227,109,7)" fg:x="24979" fg:w="13"/><text x="94.0608%" y="1327.50"></text></g><g><title>cfree@GLIBC_2.2.5 (13 samples, 0.05%)</title><rect x="93.8108%" y="1301" width="0.0488%" height="15" fill="rgb(233,136,54)" fg:x="24979" fg:w="13"/><text x="94.0608%" y="1311.50"></text></g><g><title>_int_free_merge_chunk (6 samples, 0.02%)</title><rect x="93.8371%" y="1285" width="0.0225%" height="15" fill="rgb(233,19,40)" fg:x="24986" fg:w="6"/><text x="94.0871%" y="1295.50"></text></g><g><title>_int_free_create_chunk (3 samples, 0.01%)</title><rect x="93.8784%" y="1269" width="0.0113%" height="15" fill="rgb(247,41,18)" fg:x="24997" fg:w="3"/><text x="94.1284%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;&gt;&gt; (7 samples, 0.03%)</title><rect x="93.8671%" y="1461" width="0.0263%" height="15" fill="rgb(220,34,34)" fg:x="24994" fg:w="7"/><text x="94.1171%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;,std::hash::random::RandomState&gt;&gt; (7 samples, 0.03%)</title><rect x="93.8671%" y="1445" width="0.0263%" height="15" fill="rgb(222,135,32)" fg:x="24994" fg:w="7"/><text x="94.1171%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::SegmentId,core::option::Option&lt;glam::f64::dvec2::DVec2&gt;)&gt;&gt; (7 samples, 0.03%)</title><rect x="93.8671%" y="1429" width="0.0263%" height="15" fill="rgb(214,80,19)" fg:x="24994" fg:w="7"/><text x="94.1171%" y="1439.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.03%)</title><rect x="93.8671%" y="1413" width="0.0263%" height="15" fill="rgb(234,54,46)" fg:x="24994" fg:w="7"/><text x="94.1171%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (7 samples, 0.03%)</title><rect x="93.8671%" y="1397" width="0.0263%" height="15" fill="rgb(251,48,23)" fg:x="24994" fg:w="7"/><text x="94.1171%" y="1407.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (7 samples, 0.03%)</title><rect x="93.8671%" y="1381" width="0.0263%" height="15" fill="rgb(254,109,52)" fg:x="24994" fg:w="7"/><text x="94.1171%" y="1391.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.03%)</title><rect x="93.8671%" y="1365" width="0.0263%" height="15" fill="rgb(240,186,19)" fg:x="24994" fg:w="7"/><text x="94.1171%" y="1375.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.03%)</title><rect x="93.8671%" y="1349" width="0.0263%" height="15" fill="rgb(246,187,17)" fg:x="24994" fg:w="7"/><text x="94.1171%" y="1359.50"></text></g><g><title>__rdl_dealloc (7 samples, 0.03%)</title><rect x="93.8671%" y="1333" width="0.0263%" height="15" fill="rgb(212,21,5)" fg:x="24994" fg:w="7"/><text x="94.1171%" y="1343.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7 samples, 0.03%)</title><rect x="93.8671%" y="1317" width="0.0263%" height="15" fill="rgb(225,185,18)" fg:x="24994" fg:w="7"/><text x="94.1171%" y="1327.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7 samples, 0.03%)</title><rect x="93.8671%" y="1301" width="0.0263%" height="15" fill="rgb(245,114,17)" fg:x="24994" fg:w="7"/><text x="94.1171%" y="1311.50"></text></g><g><title>_int_free_merge_chunk (5 samples, 0.02%)</title><rect x="93.8746%" y="1285" width="0.0188%" height="15" fill="rgb(223,164,24)" fg:x="24996" fg:w="5"/><text x="94.1246%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::SegmentModification&gt; (17 samples, 0.06%)</title><rect x="93.8634%" y="1477" width="0.0638%" height="15" fill="rgb(211,228,3)" fg:x="24993" fg:w="17"/><text x="94.1134%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId&gt;&gt; (9 samples, 0.03%)</title><rect x="93.8934%" y="1461" width="0.0338%" height="15" fill="rgb(223,16,38)" fg:x="25001" fg:w="9"/><text x="94.1434%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId,std::hash::random::RandomState&gt;&gt; (9 samples, 0.03%)</title><rect x="93.8934%" y="1445" width="0.0338%" height="15" fill="rgb(207,31,54)" fg:x="25001" fg:w="9"/><text x="94.1434%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(graphene_core::vector::vector_data::attributes::SegmentId,graphene_core::vector::vector_data::attributes::PointId)&gt;&gt; (9 samples, 0.03%)</title><rect x="93.8934%" y="1429" width="0.0338%" height="15" fill="rgb(220,39,11)" fg:x="25001" fg:w="9"/><text x="94.1434%" y="1439.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="93.8934%" y="1413" width="0.0338%" height="15" fill="rgb(235,185,0)" fg:x="25001" fg:w="9"/><text x="94.1434%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (9 samples, 0.03%)</title><rect x="93.8934%" y="1397" width="0.0338%" height="15" fill="rgb(249,39,18)" fg:x="25001" fg:w="9"/><text x="94.1434%" y="1407.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (8 samples, 0.03%)</title><rect x="93.8972%" y="1381" width="0.0300%" height="15" fill="rgb(240,110,33)" fg:x="25002" fg:w="8"/><text x="94.1472%" y="1391.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.03%)</title><rect x="93.8972%" y="1365" width="0.0300%" height="15" fill="rgb(210,92,42)" fg:x="25002" fg:w="8"/><text x="94.1472%" y="1375.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.03%)</title><rect x="93.8972%" y="1349" width="0.0300%" height="15" fill="rgb(218,215,28)" fg:x="25002" fg:w="8"/><text x="94.1472%" y="1359.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.03%)</title><rect x="93.8972%" y="1333" width="0.0300%" height="15" fill="rgb(238,215,36)" fg:x="25002" fg:w="8"/><text x="94.1472%" y="1343.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.03%)</title><rect x="93.8972%" y="1317" width="0.0300%" height="15" fill="rgb(220,31,10)" fg:x="25002" fg:w="8"/><text x="94.1472%" y="1327.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 0.03%)</title><rect x="93.8972%" y="1301" width="0.0300%" height="15" fill="rgb(212,93,14)" fg:x="25002" fg:w="8"/><text x="94.1472%" y="1311.50"></text></g><g><title>_int_free_merge_chunk (6 samples, 0.02%)</title><rect x="93.9047%" y="1285" width="0.0225%" height="15" fill="rgb(254,207,2)" fg:x="25004" fg:w="6"/><text x="94.1547%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ConstructionArgs&gt; (65 samples, 0.24%)</title><rect x="93.6981%" y="1525" width="0.2441%" height="15" fill="rgb(205,57,44)" fg:x="24949" fg:w="65"/><text x="93.9481%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::memo::MemoHash&lt;graph_craft::document::value::TaggedValue&gt;&gt; (53 samples, 0.20%)</title><rect x="93.7432%" y="1509" width="0.1990%" height="15" fill="rgb(226,151,19)" fg:x="24961" fg:w="53"/><text x="93.9932%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::vector::vector_data::modification::VectorModification&gt; (41 samples, 0.15%)</title><rect x="93.7883%" y="1493" width="0.1540%" height="15" fill="rgb(230,72,30)" fg:x="24973" fg:w="41"/><text x="94.0383%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;[graphene_core::vector::vector_data::HandleId: 2]&gt;&gt; (4 samples, 0.02%)</title><rect x="93.9272%" y="1477" width="0.0150%" height="15" fill="rgb(244,0,8)" fg:x="25010" fg:w="4"/><text x="94.1772%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;[graphene_core::vector::vector_data::HandleId: 2],std::hash::random::RandomState&gt;&gt; (4 samples, 0.02%)</title><rect x="93.9272%" y="1461" width="0.0150%" height="15" fill="rgb(230,192,6)" fg:x="25010" fg:w="4"/><text x="94.1772%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;[graphene_core::vector::vector_data::HandleId: 2],(),std::hash::random::RandomState&gt;&gt; (4 samples, 0.02%)</title><rect x="93.9272%" y="1445" width="0.0150%" height="15" fill="rgb(233,207,13)" fg:x="25010" fg:w="4"/><text x="94.1772%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;([graphene_core::vector::vector_data::HandleId: 2],())&gt;&gt; (4 samples, 0.02%)</title><rect x="93.9272%" y="1429" width="0.0150%" height="15" fill="rgb(206,227,7)" fg:x="25010" fg:w="4"/><text x="94.1772%" y="1439.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="93.9272%" y="1413" width="0.0150%" height="15" fill="rgb(213,217,25)" fg:x="25010" fg:w="4"/><text x="94.1772%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (4 samples, 0.02%)</title><rect x="93.9272%" y="1397" width="0.0150%" height="15" fill="rgb(249,75,4)" fg:x="25010" fg:w="4"/><text x="94.1772%" y="1407.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (4 samples, 0.02%)</title><rect x="93.9272%" y="1381" width="0.0150%" height="15" fill="rgb(225,114,18)" fg:x="25010" fg:w="4"/><text x="94.1772%" y="1391.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.02%)</title><rect x="93.9272%" y="1365" width="0.0150%" height="15" fill="rgb(211,162,40)" fg:x="25010" fg:w="4"/><text x="94.1772%" y="1375.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.02%)</title><rect x="93.9272%" y="1349" width="0.0150%" height="15" fill="rgb(206,49,29)" fg:x="25010" fg:w="4"/><text x="94.1772%" y="1359.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.02%)</title><rect x="93.9272%" y="1333" width="0.0150%" height="15" fill="rgb(244,8,6)" fg:x="25010" fg:w="4"/><text x="94.1772%" y="1343.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.02%)</title><rect x="93.9272%" y="1317" width="0.0150%" height="15" fill="rgb(231,194,28)" fg:x="25010" fg:w="4"/><text x="94.1772%" y="1327.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.02%)</title><rect x="93.9272%" y="1301" width="0.0150%" height="15" fill="rgb(210,69,5)" fg:x="25010" fg:w="4"/><text x="94.1772%" y="1311.50"></text></g><g><title>_int_free_merge_chunk (3 samples, 0.01%)</title><rect x="93.9310%" y="1285" width="0.0113%" height="15" fill="rgb(216,186,12)" fg:x="25011" fg:w="3"/><text x="94.1810%" y="1295.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7 samples, 0.03%)</title><rect x="93.9460%" y="1509" width="0.0263%" height="15" fill="rgb(238,61,15)" fg:x="25015" fg:w="7"/><text x="94.1960%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNodeInput&gt; (15 samples, 0.06%)</title><rect x="93.9422%" y="1525" width="0.0563%" height="15" fill="rgb(226,104,1)" fg:x="25014" fg:w="15"/><text x="94.1922%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::Type&gt; (7 samples, 0.03%)</title><rect x="93.9723%" y="1509" width="0.0263%" height="15" fill="rgb(229,128,15)" fg:x="25022" fg:w="7"/><text x="94.2223%" y="1519.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.03%)</title><rect x="94.0061%" y="1429" width="0.0338%" height="15" fill="rgb(247,110,15)" fg:x="25031" fg:w="9"/><text x="94.2561%" y="1439.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.03%)</title><rect x="94.0061%" y="1413" width="0.0338%" height="15" fill="rgb(210,74,48)" fg:x="25031" fg:w="9"/><text x="94.2561%" y="1423.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.03%)</title><rect x="94.0061%" y="1397" width="0.0338%" height="15" fill="rgb(246,121,10)" fg:x="25031" fg:w="9"/><text x="94.2561%" y="1407.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.03%)</title><rect x="94.0061%" y="1381" width="0.0338%" height="15" fill="rgb(214,156,37)" fg:x="25031" fg:w="9"/><text x="94.2561%" y="1391.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.03%)</title><rect x="94.0061%" y="1365" width="0.0338%" height="15" fill="rgb(214,210,34)" fg:x="25031" fg:w="9"/><text x="94.2561%" y="1375.50"></text></g><g><title>_int_free (5 samples, 0.02%)</title><rect x="94.0211%" y="1349" width="0.0188%" height="15" fill="rgb(237,93,35)" fg:x="25035" fg:w="5"/><text x="94.2711%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (141 samples, 0.53%)</title><rect x="93.5141%" y="1589" width="0.5295%" height="15" fill="rgb(206,36,8)" fg:x="24900" fg:w="141"/><text x="93.7641%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)]&gt; (141 samples, 0.53%)</title><rect x="93.5141%" y="1573" width="0.5295%" height="15" fill="rgb(208,151,12)" fg:x="24900" fg:w="141"/><text x="93.7641%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt; (139 samples, 0.52%)</title><rect x="93.5216%" y="1557" width="0.5220%" height="15" fill="rgb(225,133,52)" fg:x="24902" fg:w="139"/><text x="93.7716%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNode&gt; (134 samples, 0.50%)</title><rect x="93.5404%" y="1541" width="0.5032%" height="15" fill="rgb(231,71,53)" fg:x="24907" fg:w="134"/><text x="93.7904%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphene_core::types::ProtoNodeIdentifier&gt; (12 samples, 0.05%)</title><rect x="93.9986%" y="1525" width="0.0451%" height="15" fill="rgb(243,76,21)" fg:x="25029" fg:w="12"/><text x="94.2486%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (12 samples, 0.05%)</title><rect x="93.9986%" y="1509" width="0.0451%" height="15" fill="rgb(252,144,3)" fg:x="25029" fg:w="12"/><text x="94.2486%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (10 samples, 0.04%)</title><rect x="94.0061%" y="1493" width="0.0376%" height="15" fill="rgb(231,199,10)" fg:x="25031" fg:w="10"/><text x="94.2561%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (10 samples, 0.04%)</title><rect x="94.0061%" y="1477" width="0.0376%" height="15" fill="rgb(215,18,11)" fg:x="25031" fg:w="10"/><text x="94.2561%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (10 samples, 0.04%)</title><rect x="94.0061%" y="1461" width="0.0376%" height="15" fill="rgb(241,65,24)" fg:x="25031" fg:w="10"/><text x="94.2561%" y="1471.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.04%)</title><rect x="94.0061%" y="1445" width="0.0376%" height="15" fill="rgb(251,192,38)" fg:x="25031" fg:w="10"/><text x="94.2561%" y="1455.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (24,368 samples, 91.52%)</title><rect x="2.6289%" y="2085" width="91.5161%" height="15" fill="rgb(205,9,35)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="2095.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (24,368 samples, 91.52%)</title><rect x="2.6289%" y="2069" width="91.5161%" height="15" fill="rgb(229,225,49)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="2079.50">__libc_start_call_main</text></g><g><title>main (24,368 samples, 91.52%)</title><rect x="2.6289%" y="2053" width="91.5161%" height="15" fill="rgb(207,125,39)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="2063.50">main</text></g><g><title>std::rt::lang_start_internal (24,368 samples, 91.52%)</title><rect x="2.6289%" y="2037" width="91.5161%" height="15" fill="rgb(222,78,19)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="2047.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (24,368 samples, 91.52%)</title><rect x="2.6289%" y="2021" width="91.5161%" height="15" fill="rgb(248,207,20)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="2031.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (24,368 samples, 91.52%)</title><rect x="2.6289%" y="2005" width="91.5161%" height="15" fill="rgb(205,103,49)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="2015.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (24,368 samples, 91.52%)</title><rect x="2.6289%" y="1989" width="91.5161%" height="15" fill="rgb(216,42,28)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="1999.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (24,368 samples, 91.52%)</title><rect x="2.6289%" y="1973" width="91.5161%" height="15" fill="rgb(213,205,53)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="1983.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (24,368 samples, 91.52%)</title><rect x="2.6289%" y="1957" width="91.5161%" height="15" fill="rgb(239,140,53)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="1967.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (24,368 samples, 91.52%)</title><rect x="2.6289%" y="1941" width="91.5161%" height="15" fill="rgb(248,95,9)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="1951.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (24,368 samples, 91.52%)</title><rect x="2.6289%" y="1925" width="91.5161%" height="15" fill="rgb(254,58,47)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="1935.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (24,368 samples, 91.52%)</title><rect x="2.6289%" y="1909" width="91.5161%" height="15" fill="rgb(234,227,14)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="1919.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (24,368 samples, 91.52%)</title><rect x="2.6289%" y="1893" width="91.5161%" height="15" fill="rgb(205,192,45)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="1903.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (24,368 samples, 91.52%)</title><rect x="2.6289%" y="1877" width="91.5161%" height="15" fill="rgb(253,187,31)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="1887.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (24,368 samples, 91.52%)</title><rect x="2.6289%" y="1861" width="91.5161%" height="15" fill="rgb(222,6,32)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="1871.50">core::ops::function::FnOnce::call_once</text></g><g><title>compile_demo_art::main (24,368 samples, 91.52%)</title><rect x="2.6289%" y="1845" width="91.5161%" height="15" fill="rgb(249,190,19)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="1855.50">compile_demo_art::main</text></g><g><title>compile_demo_art::benches (24,368 samples, 91.52%)</title><rect x="2.6289%" y="1829" width="91.5161%" height="15" fill="rgb(251,28,20)" fg:x="700" fg:w="24368"/><text x="2.8789%" y="1839.50">compile_demo_art::benches</text></g><g><title>compile_demo_art::compile_to_proto (24,355 samples, 91.47%)</title><rect x="2.6777%" y="1813" width="91.4673%" height="15" fill="rgb(210,223,40)" fg:x="713" fg:w="24355"/><text x="2.9277%" y="1823.50">compile_demo_art::compile_to_proto</text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (24,285 samples, 91.20%)</title><rect x="2.9406%" y="1797" width="91.2044%" height="15" fill="rgb(216,137,22)" fg:x="783" fg:w="24285"/><text x="3.1906%" y="1807.50">criterion::Criterion&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (24,285 samples, 91.20%)</title><rect x="2.9406%" y="1781" width="91.2044%" height="15" fill="rgb(247,39,34)" fg:x="783" fg:w="24285"/><text x="3.1906%" y="1791.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (24,285 samples, 91.20%)</title><rect x="2.9406%" y="1765" width="91.2044%" height="15" fill="rgb(239,43,50)" fg:x="783" fg:w="24285"/><text x="3.1906%" y="1775.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench</text></g><g><title>criterion::routine::Routine::profile (24,285 samples, 91.20%)</title><rect x="2.9406%" y="1749" width="91.2044%" height="15" fill="rgb(241,212,9)" fg:x="783" fg:w="24285"/><text x="3.1906%" y="1759.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (6,893 samples, 25.89%)</title><rect x="68.2578%" y="1733" width="25.8873%" height="15" fill="rgb(205,8,2)" fg:x="18175" fg:w="6893"/><text x="68.5078%" y="1743.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as c..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (6,893 samples, 25.89%)</title><rect x="68.2578%" y="1717" width="25.8873%" height="15" fill="rgb(217,173,54)" fg:x="18175" fg:w="6893"/><text x="68.5078%" y="1727.50">criterion::benchmark_group::BenchmarkGrou..</text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}} (6,893 samples, 25.89%)</title><rect x="68.2578%" y="1701" width="25.8873%" height="15" fill="rgb(208,149,52)" fg:x="18175" fg:w="6893"/><text x="68.5078%" y="1711.50">compile_demo_art::compile_to_proto::_{{cl..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (6,893 samples, 25.89%)</title><rect x="68.2578%" y="1685" width="25.8873%" height="15" fill="rgb(239,99,40)" fg:x="18175" fg:w="6893"/><text x="68.5078%" y="1695.50">criterion::bencher::Bencher&lt;M&gt;::iter_batc..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;graph_craft::proto::ProtoNetwork&gt;&gt; (168 samples, 0.63%)</title><rect x="93.5141%" y="1669" width="0.6309%" height="15" fill="rgb(233,214,26)" fg:x="24900" fg:w="168"/><text x="93.7641%" y="1679.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (168 samples, 0.63%)</title><rect x="93.5141%" y="1653" width="0.6309%" height="15" fill="rgb(231,225,37)" fg:x="24900" fg:w="168"/><text x="93.7641%" y="1663.50"></text></g><g><title>core::ptr::drop_in_place&lt;[graph_craft::proto::ProtoNetwork]&gt; (168 samples, 0.63%)</title><rect x="93.5141%" y="1637" width="0.6309%" height="15" fill="rgb(252,55,35)" fg:x="24900" fg:w="168"/><text x="93.7641%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_craft::proto::ProtoNetwork&gt; (168 samples, 0.63%)</title><rect x="93.5141%" y="1621" width="0.6309%" height="15" fill="rgb(239,43,18)" fg:x="24900" fg:w="168"/><text x="93.7641%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (168 samples, 0.63%)</title><rect x="93.5141%" y="1605" width="0.6309%" height="15" fill="rgb(251,125,49)" fg:x="24900" fg:w="168"/><text x="93.7641%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(graph_craft::document::NodeId,graph_craft::proto::ProtoNode)&gt;&gt; (27 samples, 0.10%)</title><rect x="94.0436%" y="1589" width="0.1014%" height="15" fill="rgb(212,83,54)" fg:x="25041" fg:w="27"/><text x="94.2936%" y="1599.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.10%)</title><rect x="94.0436%" y="1573" width="0.1014%" height="15" fill="rgb(250,75,6)" fg:x="25041" fg:w="27"/><text x="94.2936%" y="1583.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27 samples, 0.10%)</title><rect x="94.0436%" y="1557" width="0.1014%" height="15" fill="rgb(252,36,40)" fg:x="25041" fg:w="27"/><text x="94.2936%" y="1567.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.10%)</title><rect x="94.0436%" y="1541" width="0.1014%" height="15" fill="rgb(230,91,51)" fg:x="25041" fg:w="27"/><text x="94.2936%" y="1551.50"></text></g><g><title>__rdl_dealloc (27 samples, 0.10%)</title><rect x="94.0436%" y="1525" width="0.1014%" height="15" fill="rgb(212,92,28)" fg:x="25041" fg:w="27"/><text x="94.2936%" y="1535.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (27 samples, 0.10%)</title><rect x="94.0436%" y="1509" width="0.1014%" height="15" fill="rgb(227,13,22)" fg:x="25041" fg:w="27"/><text x="94.2936%" y="1519.50"></text></g><g><title>cfree@GLIBC_2.2.5 (27 samples, 0.10%)</title><rect x="94.0436%" y="1493" width="0.1014%" height="15" fill="rgb(239,204,32)" fg:x="25041" fg:w="27"/><text x="94.2936%" y="1503.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (27 samples, 0.10%)</title><rect x="94.0436%" y="1477" width="0.1014%" height="15" fill="rgb(228,49,41)" fg:x="25041" fg:w="27"/><text x="94.2936%" y="1487.50"></text></g><g><title>malloc_consolidate (27 samples, 0.10%)</title><rect x="94.0436%" y="1461" width="0.1014%" height="15" fill="rgb(206,95,6)" fg:x="25041" fg:w="27"/><text x="94.2936%" y="1471.50"></text></g><g><title>unlink_chunk.isra.0 (10 samples, 0.04%)</title><rect x="94.1075%" y="1445" width="0.0376%" height="15" fill="rgb(251,20,14)" fg:x="25058" fg:w="10"/><text x="94.3575%" y="1455.50"></text></g><g><title>_start (24,376 samples, 91.55%)</title><rect x="2.6214%" y="2101" width="91.5462%" height="15" fill="rgb(214,99,28)" fg:x="698" fg:w="24376"/><text x="2.8714%" y="2111.50">_start</text></g><g><title>_dl_start (6 samples, 0.02%)</title><rect x="94.1450%" y="2085" width="0.0225%" height="15" fill="rgb(239,122,54)" fg:x="25068" fg:w="6"/><text x="94.3950%" y="2095.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (38 samples, 0.14%)</title><rect x="94.1713%" y="1525" width="0.1427%" height="15" fill="rgb(218,217,46)" fg:x="25075" fg:w="38"/><text x="94.4213%" y="1535.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (38 samples, 0.14%)</title><rect x="94.1713%" y="1509" width="0.1427%" height="15" fill="rgb(249,106,28)" fg:x="25075" fg:w="38"/><text x="94.4213%" y="1519.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (38 samples, 0.14%)</title><rect x="94.1713%" y="1493" width="0.1427%" height="15" fill="rgb(250,158,18)" fg:x="25075" fg:w="38"/><text x="94.4213%" y="1503.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (9 samples, 0.03%)</title><rect x="94.2802%" y="1477" width="0.0338%" height="15" fill="rgb(226,137,29)" fg:x="25104" fg:w="9"/><text x="94.5302%" y="1487.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (9 samples, 0.03%)</title><rect x="94.2802%" y="1461" width="0.0338%" height="15" fill="rgb(210,188,1)" fg:x="25104" fg:w="9"/><text x="94.5302%" y="1471.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.02%)</title><rect x="94.3140%" y="1525" width="0.0150%" height="15" fill="rgb(227,84,42)" fg:x="25113" fg:w="4"/><text x="94.5640%" y="1535.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4 samples, 0.02%)</title><rect x="94.3140%" y="1509" width="0.0150%" height="15" fill="rgb(222,147,48)" fg:x="25113" fg:w="4"/><text x="94.5640%" y="1519.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.02%)</title><rect x="94.3140%" y="1493" width="0.0150%" height="15" fill="rgb(241,150,43)" fg:x="25113" fg:w="4"/><text x="94.5640%" y="1503.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4 samples, 0.02%)</title><rect x="94.3140%" y="1477" width="0.0150%" height="15" fill="rgb(206,139,52)" fg:x="25113" fg:w="4"/><text x="94.5640%" y="1487.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.02%)</title><rect x="94.3140%" y="1461" width="0.0150%" height="15" fill="rgb(230,63,14)" fg:x="25113" fg:w="4"/><text x="94.5640%" y="1471.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.02%)</title><rect x="94.3140%" y="1445" width="0.0150%" height="15" fill="rgb(247,8,20)" fg:x="25113" fg:w="4"/><text x="94.5640%" y="1455.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (4 samples, 0.02%)</title><rect x="94.3291%" y="1525" width="0.0150%" height="15" fill="rgb(213,115,4)" fg:x="25117" fg:w="4"/><text x="94.5791%" y="1535.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (4 samples, 0.02%)</title><rect x="94.3291%" y="1509" width="0.0150%" height="15" fill="rgb(241,79,49)" fg:x="25117" fg:w="4"/><text x="94.5791%" y="1519.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (4 samples, 0.02%)</title><rect x="94.3291%" y="1493" width="0.0150%" height="15" fill="rgb(222,42,35)" fg:x="25117" fg:w="4"/><text x="94.5791%" y="1503.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.02%)</title><rect x="94.3291%" y="1477" width="0.0150%" height="15" fill="rgb(247,59,23)" fg:x="25117" fg:w="4"/><text x="94.5791%" y="1487.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="94.3328%" y="1461" width="0.0113%" height="15" fill="rgb(247,93,18)" fg:x="25118" fg:w="3"/><text x="94.5828%" y="1471.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="94.3328%" y="1445" width="0.0113%" height="15" fill="rgb(249,107,47)" fg:x="25118" fg:w="3"/><text x="94.5828%" y="1455.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="94.3516%" y="1461" width="0.0113%" height="15" fill="rgb(219,27,1)" fg:x="25123" fg:w="3"/><text x="94.6016%" y="1471.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (53 samples, 0.20%)</title><rect x="94.1676%" y="2101" width="0.1990%" height="15" fill="rgb(217,82,32)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="2111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (53 samples, 0.20%)</title><rect x="94.1676%" y="2085" width="0.1990%" height="15" fill="rgb(250,129,47)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="2095.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 0.20%)</title><rect x="94.1676%" y="2069" width="0.1990%" height="15" fill="rgb(253,88,35)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="2079.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (53 samples, 0.20%)</title><rect x="94.1676%" y="2053" width="0.1990%" height="15" fill="rgb(245,221,14)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="2063.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (53 samples, 0.20%)</title><rect x="94.1676%" y="2037" width="0.1990%" height="15" fill="rgb(217,119,54)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="2047.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (53 samples, 0.20%)</title><rect x="94.1676%" y="2021" width="0.1990%" height="15" fill="rgb(247,128,31)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="2031.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (53 samples, 0.20%)</title><rect x="94.1676%" y="2005" width="0.1990%" height="15" fill="rgb(211,99,22)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="2015.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (53 samples, 0.20%)</title><rect x="94.1676%" y="1989" width="0.1990%" height="15" fill="rgb(212,20,17)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1999.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (53 samples, 0.20%)</title><rect x="94.1676%" y="1973" width="0.1990%" height="15" fill="rgb(209,159,29)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1983.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (53 samples, 0.20%)</title><rect x="94.1676%" y="1957" width="0.1990%" height="15" fill="rgb(222,177,53)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1967.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (53 samples, 0.20%)</title><rect x="94.1676%" y="1941" width="0.1990%" height="15" fill="rgb(234,46,43)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1951.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (53 samples, 0.20%)</title><rect x="94.1676%" y="1925" width="0.1990%" height="15" fill="rgb(208,108,14)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1935.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (53 samples, 0.20%)</title><rect x="94.1676%" y="1909" width="0.1990%" height="15" fill="rgb(226,78,53)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1919.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (53 samples, 0.20%)</title><rect x="94.1676%" y="1893" width="0.1990%" height="15" fill="rgb(230,20,41)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1903.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1877" width="0.1990%" height="15" fill="rgb(213,195,35)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1887.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1861" width="0.1990%" height="15" fill="rgb(242,62,36)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1871.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1845" width="0.1990%" height="15" fill="rgb(222,210,37)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1855.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1829" width="0.1990%" height="15" fill="rgb(232,107,19)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1839.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1813" width="0.1990%" height="15" fill="rgb(235,85,17)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1823.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1797" width="0.1990%" height="15" fill="rgb(219,195,31)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1807.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1781" width="0.1990%" height="15" fill="rgb(231,183,30)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1791.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1765" width="0.1990%" height="15" fill="rgb(212,0,11)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1775.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1749" width="0.1990%" height="15" fill="rgb(249,53,54)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1759.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1733" width="0.1990%" height="15" fill="rgb(211,118,13)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1743.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1717" width="0.1990%" height="15" fill="rgb(237,42,9)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1727.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1701" width="0.1990%" height="15" fill="rgb(227,68,32)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1711.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1685" width="0.1990%" height="15" fill="rgb(238,10,7)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1695.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1669" width="0.1990%" height="15" fill="rgb(224,42,12)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1679.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1653" width="0.1990%" height="15" fill="rgb(252,190,5)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1663.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1637" width="0.1990%" height="15" fill="rgb(220,214,39)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1647.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1621" width="0.1990%" height="15" fill="rgb(247,98,4)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1631.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1605" width="0.1990%" height="15" fill="rgb(211,60,12)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1615.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1589" width="0.1990%" height="15" fill="rgb(224,42,10)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1599.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1573" width="0.1990%" height="15" fill="rgb(217,167,4)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1583.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1557" width="0.1990%" height="15" fill="rgb(253,18,17)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1567.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (53 samples, 0.20%)</title><rect x="94.1676%" y="1541" width="0.1990%" height="15" fill="rgb(249,186,44)" fg:x="25074" fg:w="53"/><text x="94.4176%" y="1551.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (5 samples, 0.02%)</title><rect x="94.3478%" y="1525" width="0.0188%" height="15" fill="rgb(254,124,54)" fg:x="25122" fg:w="5"/><text x="94.5978%" y="1535.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (5 samples, 0.02%)</title><rect x="94.3478%" y="1509" width="0.0188%" height="15" fill="rgb(220,124,39)" fg:x="25122" fg:w="5"/><text x="94.5978%" y="1519.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (5 samples, 0.02%)</title><rect x="94.3478%" y="1493" width="0.0188%" height="15" fill="rgb(225,96,46)" fg:x="25122" fg:w="5"/><text x="94.5978%" y="1503.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (5 samples, 0.02%)</title><rect x="94.3478%" y="1477" width="0.0188%" height="15" fill="rgb(221,106,12)" fg:x="25122" fg:w="5"/><text x="94.5978%" y="1487.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (4 samples, 0.02%)</title><rect x="94.3779%" y="1125" width="0.0150%" height="15" fill="rgb(227,133,23)" fg:x="25130" fg:w="4"/><text x="94.6279%" y="1135.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (4 samples, 0.02%)</title><rect x="94.3779%" y="1109" width="0.0150%" height="15" fill="rgb(216,44,52)" fg:x="25130" fg:w="4"/><text x="94.6279%" y="1119.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (4 samples, 0.02%)</title><rect x="94.3779%" y="1093" width="0.0150%" height="15" fill="rgb(239,149,7)" fg:x="25130" fg:w="4"/><text x="94.6279%" y="1103.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (12 samples, 0.05%)</title><rect x="94.3967%" y="1109" width="0.0451%" height="15" fill="rgb(211,157,31)" fg:x="25135" fg:w="12"/><text x="94.6467%" y="1119.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (12 samples, 0.05%)</title><rect x="94.3967%" y="1093" width="0.0451%" height="15" fill="rgb(206,215,22)" fg:x="25135" fg:w="12"/><text x="94.6467%" y="1103.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (12 samples, 0.05%)</title><rect x="94.3967%" y="1077" width="0.0451%" height="15" fill="rgb(208,113,15)" fg:x="25135" fg:w="12"/><text x="94.6467%" y="1087.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (10 samples, 0.04%)</title><rect x="94.4417%" y="1093" width="0.0376%" height="15" fill="rgb(207,189,15)" fg:x="25147" fg:w="10"/><text x="94.6917%" y="1103.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (10 samples, 0.04%)</title><rect x="94.4417%" y="1077" width="0.0376%" height="15" fill="rgb(231,115,4)" fg:x="25147" fg:w="10"/><text x="94.6917%" y="1087.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (10 samples, 0.04%)</title><rect x="94.4417%" y="1061" width="0.0376%" height="15" fill="rgb(253,117,2)" fg:x="25147" fg:w="10"/><text x="94.6917%" y="1071.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (8 samples, 0.03%)</title><rect x="94.4830%" y="1077" width="0.0300%" height="15" fill="rgb(248,48,24)" fg:x="25158" fg:w="8"/><text x="94.7330%" y="1087.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (8 samples, 0.03%)</title><rect x="94.4830%" y="1061" width="0.0300%" height="15" fill="rgb(241,28,46)" fg:x="25158" fg:w="8"/><text x="94.7330%" y="1071.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (8 samples, 0.03%)</title><rect x="94.4830%" y="1045" width="0.0300%" height="15" fill="rgb(216,165,52)" fg:x="25158" fg:w="8"/><text x="94.7330%" y="1055.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (4 samples, 0.02%)</title><rect x="94.4981%" y="1029" width="0.0150%" height="15" fill="rgb(220,222,34)" fg:x="25162" fg:w="4"/><text x="94.7481%" y="1039.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (4 samples, 0.02%)</title><rect x="94.4981%" y="1013" width="0.0150%" height="15" fill="rgb(247,222,49)" fg:x="25162" fg:w="4"/><text x="94.7481%" y="1023.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (15 samples, 0.06%)</title><rect x="94.5168%" y="1061" width="0.0563%" height="15" fill="rgb(240,10,31)" fg:x="25167" fg:w="15"/><text x="94.7668%" y="1071.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (15 samples, 0.06%)</title><rect x="94.5168%" y="1045" width="0.0563%" height="15" fill="rgb(221,199,35)" fg:x="25167" fg:w="15"/><text x="94.7668%" y="1055.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (15 samples, 0.06%)</title><rect x="94.5168%" y="1029" width="0.0563%" height="15" fill="rgb(230,223,11)" fg:x="25167" fg:w="15"/><text x="94.7668%" y="1039.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (5 samples, 0.02%)</title><rect x="94.5544%" y="1013" width="0.0188%" height="15" fill="rgb(218,82,45)" fg:x="25177" fg:w="5"/><text x="94.8044%" y="1023.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (5 samples, 0.02%)</title><rect x="94.5544%" y="997" width="0.0188%" height="15" fill="rgb(233,213,33)" fg:x="25177" fg:w="5"/><text x="94.8044%" y="1007.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (18 samples, 0.07%)</title><rect x="94.5131%" y="1077" width="0.0676%" height="15" fill="rgb(210,143,52)" fg:x="25166" fg:w="18"/><text x="94.7631%" y="1087.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (3 samples, 0.01%)</title><rect x="94.5957%" y="1077" width="0.0113%" height="15" fill="rgb(206,95,4)" fg:x="25188" fg:w="3"/><text x="94.8457%" y="1087.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="94.5957%" y="1061" width="0.0113%" height="15" fill="rgb(246,164,46)" fg:x="25188" fg:w="3"/><text x="94.8457%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="94.5957%" y="1045" width="0.0113%" height="15" fill="rgb(213,210,47)" fg:x="25188" fg:w="3"/><text x="94.8457%" y="1055.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (36 samples, 0.14%)</title><rect x="94.4793%" y="1093" width="0.1352%" height="15" fill="rgb(210,12,38)" fg:x="25157" fg:w="36"/><text x="94.7293%" y="1103.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="94.4417%" y="1109" width="0.1953%" height="15" fill="rgb(252,192,54)" fg:x="25147" fg:w="52"/><text x="94.6917%" y="1119.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (3 samples, 0.01%)</title><rect x="94.6258%" y="1093" width="0.0113%" height="15" fill="rgb(242,92,6)" fg:x="25196" fg:w="3"/><text x="94.8758%" y="1103.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (3 samples, 0.01%)</title><rect x="94.6258%" y="1077" width="0.0113%" height="15" fill="rgb(253,154,15)" fg:x="25196" fg:w="3"/><text x="94.8758%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (3 samples, 0.01%)</title><rect x="94.6258%" y="1061" width="0.0113%" height="15" fill="rgb(209,20,43)" fg:x="25196" fg:w="3"/><text x="94.8758%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (3 samples, 0.01%)</title><rect x="94.6258%" y="1045" width="0.0113%" height="15" fill="rgb(232,28,49)" fg:x="25196" fg:w="3"/><text x="94.8758%" y="1055.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (3 samples, 0.01%)</title><rect x="94.6445%" y="1109" width="0.0113%" height="15" fill="rgb(248,131,53)" fg:x="25201" fg:w="3"/><text x="94.8945%" y="1119.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="94.6445%" y="1093" width="0.0113%" height="15" fill="rgb(214,16,30)" fg:x="25201" fg:w="3"/><text x="94.8945%" y="1103.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="94.6445%" y="1077" width="0.0113%" height="15" fill="rgb(245,16,0)" fg:x="25201" fg:w="3"/><text x="94.8945%" y="1087.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (79 samples, 0.30%)</title><rect x="94.3704%" y="1141" width="0.2967%" height="15" fill="rgb(245,17,35)" fg:x="25128" fg:w="79"/><text x="94.6204%" y="1151.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (73 samples, 0.27%)</title><rect x="94.3929%" y="1125" width="0.2742%" height="15" fill="rgb(249,27,53)" fg:x="25134" fg:w="73"/><text x="94.6429%" y="1135.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (3 samples, 0.01%)</title><rect x="94.6558%" y="1109" width="0.0113%" height="15" fill="rgb(214,73,24)" fg:x="25204" fg:w="3"/><text x="94.9058%" y="1119.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (3 samples, 0.01%)</title><rect x="94.6558%" y="1093" width="0.0113%" height="15" fill="rgb(223,84,37)" fg:x="25204" fg:w="3"/><text x="94.9058%" y="1103.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (3 samples, 0.01%)</title><rect x="94.6558%" y="1077" width="0.0113%" height="15" fill="rgb(210,109,28)" fg:x="25204" fg:w="3"/><text x="94.9058%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (3 samples, 0.01%)</title><rect x="94.6558%" y="1061" width="0.0113%" height="15" fill="rgb(208,186,6)" fg:x="25204" fg:w="3"/><text x="94.9058%" y="1071.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (80 samples, 0.30%)</title><rect x="94.3704%" y="1989" width="0.3004%" height="15" fill="rgb(235,201,30)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1999.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (80 samples, 0.30%)</title><rect x="94.3704%" y="1973" width="0.3004%" height="15" fill="rgb(216,198,48)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1983.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (80 samples, 0.30%)</title><rect x="94.3704%" y="1957" width="0.3004%" height="15" fill="rgb(254,186,25)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1967.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (80 samples, 0.30%)</title><rect x="94.3704%" y="1941" width="0.3004%" height="15" fill="rgb(227,87,5)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1951.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (80 samples, 0.30%)</title><rect x="94.3704%" y="1925" width="0.3004%" height="15" fill="rgb(236,205,25)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1935.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (80 samples, 0.30%)</title><rect x="94.3704%" y="1909" width="0.3004%" height="15" fill="rgb(229,99,32)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1919.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (80 samples, 0.30%)</title><rect x="94.3704%" y="1893" width="0.3004%" height="15" fill="rgb(231,177,31)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1903.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (80 samples, 0.30%)</title><rect x="94.3704%" y="1877" width="0.3004%" height="15" fill="rgb(246,15,2)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1887.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (80 samples, 0.30%)</title><rect x="94.3704%" y="1861" width="0.3004%" height="15" fill="rgb(207,39,15)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1871.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (80 samples, 0.30%)</title><rect x="94.3704%" y="1845" width="0.3004%" height="15" fill="rgb(207,44,9)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1855.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (80 samples, 0.30%)</title><rect x="94.3704%" y="1829" width="0.3004%" height="15" fill="rgb(225,224,33)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1839.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure}} (80 samples, 0.30%)</title><rect x="94.3704%" y="1813" width="0.3004%" height="15" fill="rgb(252,151,3)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1823.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (80 samples, 0.30%)</title><rect x="94.3704%" y="1797" width="0.3004%" height="15" fill="rgb(211,140,13)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1807.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}} (80 samples, 0.30%)</title><rect x="94.3704%" y="1781" width="0.3004%" height="15" fill="rgb(239,225,17)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1791.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (80 samples, 0.30%)</title><rect x="94.3704%" y="1765" width="0.3004%" height="15" fill="rgb(223,170,52)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1775.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (80 samples, 0.30%)</title><rect x="94.3704%" y="1749" width="0.3004%" height="15" fill="rgb(212,64,21)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1759.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (80 samples, 0.30%)</title><rect x="94.3704%" y="1733" width="0.3004%" height="15" fill="rgb(236,126,48)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1743.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (80 samples, 0.30%)</title><rect x="94.3704%" y="1717" width="0.3004%" height="15" fill="rgb(209,135,11)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1727.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (80 samples, 0.30%)</title><rect x="94.3704%" y="1701" width="0.3004%" height="15" fill="rgb(228,126,40)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1711.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (80 samples, 0.30%)</title><rect x="94.3704%" y="1685" width="0.3004%" height="15" fill="rgb(205,196,36)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1695.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (80 samples, 0.30%)</title><rect x="94.3704%" y="1669" width="0.3004%" height="15" fill="rgb(243,160,33)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1679.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (80 samples, 0.30%)</title><rect x="94.3704%" y="1653" width="0.3004%" height="15" fill="rgb(210,84,20)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1663.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (80 samples, 0.30%)</title><rect x="94.3704%" y="1637" width="0.3004%" height="15" fill="rgb(228,213,30)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1647.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (80 samples, 0.30%)</title><rect x="94.3704%" y="1621" width="0.3004%" height="15" fill="rgb(252,33,45)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1631.50"></text></g><g><title>compile_demo_art::compile (80 samples, 0.30%)</title><rect x="94.3704%" y="1605" width="0.3004%" height="15" fill="rgb(254,227,20)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1615.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (80 samples, 0.30%)</title><rect x="94.3704%" y="1589" width="0.3004%" height="15" fill="rgb(228,192,2)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1599.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (80 samples, 0.30%)</title><rect x="94.3704%" y="1573" width="0.3004%" height="15" fill="rgb(233,32,8)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1583.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (80 samples, 0.30%)</title><rect x="94.3704%" y="1557" width="0.3004%" height="15" fill="rgb(220,146,47)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1567.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (80 samples, 0.30%)</title><rect x="94.3704%" y="1541" width="0.3004%" height="15" fill="rgb(246,194,1)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1551.50"></text></g><g><title>core::iter::adapters::try_process (80 samples, 0.30%)</title><rect x="94.3704%" y="1525" width="0.3004%" height="15" fill="rgb(218,203,9)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1535.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (80 samples, 0.30%)</title><rect x="94.3704%" y="1509" width="0.3004%" height="15" fill="rgb(237,97,14)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1519.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (80 samples, 0.30%)</title><rect x="94.3704%" y="1493" width="0.3004%" height="15" fill="rgb(239,76,15)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1503.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (80 samples, 0.30%)</title><rect x="94.3704%" y="1477" width="0.3004%" height="15" fill="rgb(222,53,45)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1487.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (80 samples, 0.30%)</title><rect x="94.3704%" y="1461" width="0.3004%" height="15" fill="rgb(237,88,5)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1471.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (80 samples, 0.30%)</title><rect x="94.3704%" y="1445" width="0.3004%" height="15" fill="rgb(218,223,35)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1455.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (80 samples, 0.30%)</title><rect x="94.3704%" y="1429" width="0.3004%" height="15" fill="rgb(243,229,38)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1439.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (80 samples, 0.30%)</title><rect x="94.3704%" y="1413" width="0.3004%" height="15" fill="rgb(240,75,41)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1423.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (80 samples, 0.30%)</title><rect x="94.3704%" y="1397" width="0.3004%" height="15" fill="rgb(209,110,37)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1407.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (80 samples, 0.30%)</title><rect x="94.3704%" y="1381" width="0.3004%" height="15" fill="rgb(221,130,46)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1391.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (80 samples, 0.30%)</title><rect x="94.3704%" y="1365" width="0.3004%" height="15" fill="rgb(237,160,20)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1375.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (80 samples, 0.30%)</title><rect x="94.3704%" y="1349" width="0.3004%" height="15" fill="rgb(234,126,24)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1359.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (80 samples, 0.30%)</title><rect x="94.3704%" y="1333" width="0.3004%" height="15" fill="rgb(207,177,9)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1343.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (80 samples, 0.30%)</title><rect x="94.3704%" y="1317" width="0.3004%" height="15" fill="rgb(231,191,33)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1327.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (80 samples, 0.30%)</title><rect x="94.3704%" y="1301" width="0.3004%" height="15" fill="rgb(207,42,1)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1311.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (80 samples, 0.30%)</title><rect x="94.3704%" y="1285" width="0.3004%" height="15" fill="rgb(218,34,50)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1295.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (80 samples, 0.30%)</title><rect x="94.3704%" y="1269" width="0.3004%" height="15" fill="rgb(254,126,39)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1279.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (80 samples, 0.30%)</title><rect x="94.3704%" y="1253" width="0.3004%" height="15" fill="rgb(251,17,26)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1263.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (80 samples, 0.30%)</title><rect x="94.3704%" y="1237" width="0.3004%" height="15" fill="rgb(252,215,34)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1247.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (80 samples, 0.30%)</title><rect x="94.3704%" y="1221" width="0.3004%" height="15" fill="rgb(217,120,44)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1231.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (80 samples, 0.30%)</title><rect x="94.3704%" y="1205" width="0.3004%" height="15" fill="rgb(211,31,11)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1215.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (80 samples, 0.30%)</title><rect x="94.3704%" y="1189" width="0.3004%" height="15" fill="rgb(222,69,51)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1199.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (80 samples, 0.30%)</title><rect x="94.3704%" y="1173" width="0.3004%" height="15" fill="rgb(215,229,42)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1183.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (80 samples, 0.30%)</title><rect x="94.3704%" y="1157" width="0.3004%" height="15" fill="rgb(212,102,15)" fg:x="25128" fg:w="80"/><text x="94.6204%" y="1167.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (4 samples, 0.02%)</title><rect x="94.6783%" y="1285" width="0.0150%" height="15" fill="rgb(205,179,41)" fg:x="25210" fg:w="4"/><text x="94.9283%" y="1295.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (4 samples, 0.02%)</title><rect x="94.6783%" y="1269" width="0.0150%" height="15" fill="rgb(219,148,46)" fg:x="25210" fg:w="4"/><text x="94.9283%" y="1279.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (4 samples, 0.02%)</title><rect x="94.6783%" y="1253" width="0.0150%" height="15" fill="rgb(243,40,19)" fg:x="25210" fg:w="4"/><text x="94.9283%" y="1263.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (5 samples, 0.02%)</title><rect x="94.6934%" y="1269" width="0.0188%" height="15" fill="rgb(208,206,34)" fg:x="25214" fg:w="5"/><text x="94.9434%" y="1279.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (5 samples, 0.02%)</title><rect x="94.6934%" y="1253" width="0.0188%" height="15" fill="rgb(244,184,38)" fg:x="25214" fg:w="5"/><text x="94.9434%" y="1263.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (5 samples, 0.02%)</title><rect x="94.6934%" y="1237" width="0.0188%" height="15" fill="rgb(244,151,47)" fg:x="25214" fg:w="5"/><text x="94.9434%" y="1247.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (10 samples, 0.04%)</title><rect x="94.7121%" y="1253" width="0.0376%" height="15" fill="rgb(236,134,42)" fg:x="25219" fg:w="10"/><text x="94.9621%" y="1263.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (10 samples, 0.04%)</title><rect x="94.7121%" y="1237" width="0.0376%" height="15" fill="rgb(233,93,22)" fg:x="25219" fg:w="10"/><text x="94.9621%" y="1247.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (10 samples, 0.04%)</title><rect x="94.7121%" y="1221" width="0.0376%" height="15" fill="rgb(211,202,10)" fg:x="25219" fg:w="10"/><text x="94.9621%" y="1231.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (4 samples, 0.02%)</title><rect x="94.7347%" y="1205" width="0.0150%" height="15" fill="rgb(240,63,8)" fg:x="25225" fg:w="4"/><text x="94.9847%" y="1215.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (4 samples, 0.02%)</title><rect x="94.7347%" y="1189" width="0.0150%" height="15" fill="rgb(214,9,4)" fg:x="25225" fg:w="4"/><text x="94.9847%" y="1199.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="94.7497%" y="1253" width="0.0150%" height="15" fill="rgb(243,66,45)" fg:x="25229" fg:w="4"/><text x="94.9997%" y="1263.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (4 samples, 0.02%)</title><rect x="94.7497%" y="1237" width="0.0150%" height="15" fill="rgb(220,50,42)" fg:x="25229" fg:w="4"/><text x="94.9997%" y="1247.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (4 samples, 0.02%)</title><rect x="94.7497%" y="1221" width="0.0150%" height="15" fill="rgb(220,134,27)" fg:x="25229" fg:w="4"/><text x="94.9997%" y="1231.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (4 samples, 0.02%)</title><rect x="94.7497%" y="1205" width="0.0150%" height="15" fill="rgb(246,151,50)" fg:x="25229" fg:w="4"/><text x="94.9997%" y="1215.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (15 samples, 0.06%)</title><rect x="94.7121%" y="1269" width="0.0563%" height="15" fill="rgb(238,216,27)" fg:x="25219" fg:w="15"/><text x="94.9621%" y="1279.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (22 samples, 0.08%)</title><rect x="94.6934%" y="1285" width="0.0826%" height="15" fill="rgb(250,92,11)" fg:x="25214" fg:w="22"/><text x="94.9434%" y="1295.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (3 samples, 0.01%)</title><rect x="94.7797%" y="1285" width="0.0113%" height="15" fill="rgb(248,183,6)" fg:x="25237" fg:w="3"/><text x="95.0297%" y="1295.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="94.7797%" y="1269" width="0.0113%" height="15" fill="rgb(211,204,50)" fg:x="25237" fg:w="3"/><text x="95.0297%" y="1279.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="94.7797%" y="1253" width="0.0113%" height="15" fill="rgb(252,55,47)" fg:x="25237" fg:w="3"/><text x="95.0297%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3 samples, 0.01%)</title><rect x="94.7797%" y="1237" width="0.0113%" height="15" fill="rgb(240,198,32)" fg:x="25237" fg:w="3"/><text x="95.0297%" y="1247.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (31 samples, 0.12%)</title><rect x="94.6783%" y="1301" width="0.1164%" height="15" fill="rgb(224,203,19)" fg:x="25210" fg:w="31"/><text x="94.9283%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (34 samples, 0.13%)</title><rect x="94.6708%" y="1925" width="0.1277%" height="15" fill="rgb(205,27,16)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1935.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (34 samples, 0.13%)</title><rect x="94.6708%" y="1909" width="0.1277%" height="15" fill="rgb(224,226,17)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1919.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (34 samples, 0.13%)</title><rect x="94.6708%" y="1893" width="0.1277%" height="15" fill="rgb(205,216,54)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1903.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (34 samples, 0.13%)</title><rect x="94.6708%" y="1877" width="0.1277%" height="15" fill="rgb(248,168,46)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1887.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (34 samples, 0.13%)</title><rect x="94.6708%" y="1861" width="0.1277%" height="15" fill="rgb(226,111,45)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1871.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (34 samples, 0.13%)</title><rect x="94.6708%" y="1845" width="0.1277%" height="15" fill="rgb(231,15,9)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1855.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (34 samples, 0.13%)</title><rect x="94.6708%" y="1829" width="0.1277%" height="15" fill="rgb(243,168,3)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1839.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (34 samples, 0.13%)</title><rect x="94.6708%" y="1813" width="0.1277%" height="15" fill="rgb(221,220,54)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1823.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (34 samples, 0.13%)</title><rect x="94.6708%" y="1797" width="0.1277%" height="15" fill="rgb(232,174,38)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1807.50"></text></g><g><title>compile_demo_art::compile (34 samples, 0.13%)</title><rect x="94.6708%" y="1781" width="0.1277%" height="15" fill="rgb(205,14,38)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1791.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (34 samples, 0.13%)</title><rect x="94.6708%" y="1765" width="0.1277%" height="15" fill="rgb(234,89,19)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1775.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (34 samples, 0.13%)</title><rect x="94.6708%" y="1749" width="0.1277%" height="15" fill="rgb(216,68,51)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1759.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (34 samples, 0.13%)</title><rect x="94.6708%" y="1733" width="0.1277%" height="15" fill="rgb(213,49,2)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1743.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (34 samples, 0.13%)</title><rect x="94.6708%" y="1717" width="0.1277%" height="15" fill="rgb(242,146,30)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1727.50"></text></g><g><title>core::iter::adapters::try_process (34 samples, 0.13%)</title><rect x="94.6708%" y="1701" width="0.1277%" height="15" fill="rgb(224,188,11)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1711.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (34 samples, 0.13%)</title><rect x="94.6708%" y="1685" width="0.1277%" height="15" fill="rgb(213,159,11)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1695.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (34 samples, 0.13%)</title><rect x="94.6708%" y="1669" width="0.1277%" height="15" fill="rgb(229,13,31)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1679.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (34 samples, 0.13%)</title><rect x="94.6708%" y="1653" width="0.1277%" height="15" fill="rgb(209,103,11)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1663.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (34 samples, 0.13%)</title><rect x="94.6708%" y="1637" width="0.1277%" height="15" fill="rgb(206,3,4)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1647.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (34 samples, 0.13%)</title><rect x="94.6708%" y="1621" width="0.1277%" height="15" fill="rgb(252,10,49)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.13%)</title><rect x="94.6708%" y="1605" width="0.1277%" height="15" fill="rgb(217,160,32)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1615.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (34 samples, 0.13%)</title><rect x="94.6708%" y="1589" width="0.1277%" height="15" fill="rgb(249,196,0)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1599.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34 samples, 0.13%)</title><rect x="94.6708%" y="1573" width="0.1277%" height="15" fill="rgb(213,17,48)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1583.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34 samples, 0.13%)</title><rect x="94.6708%" y="1557" width="0.1277%" height="15" fill="rgb(206,42,46)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1567.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34 samples, 0.13%)</title><rect x="94.6708%" y="1541" width="0.1277%" height="15" fill="rgb(212,105,24)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1551.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34 samples, 0.13%)</title><rect x="94.6708%" y="1525" width="0.1277%" height="15" fill="rgb(243,216,30)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1535.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (34 samples, 0.13%)</title><rect x="94.6708%" y="1509" width="0.1277%" height="15" fill="rgb(207,121,3)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1519.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (34 samples, 0.13%)</title><rect x="94.6708%" y="1493" width="0.1277%" height="15" fill="rgb(249,78,0)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1503.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (34 samples, 0.13%)</title><rect x="94.6708%" y="1477" width="0.1277%" height="15" fill="rgb(244,151,32)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1487.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (34 samples, 0.13%)</title><rect x="94.6708%" y="1461" width="0.1277%" height="15" fill="rgb(228,63,25)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1471.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (34 samples, 0.13%)</title><rect x="94.6708%" y="1445" width="0.1277%" height="15" fill="rgb(231,158,23)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1455.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (34 samples, 0.13%)</title><rect x="94.6708%" y="1429" width="0.1277%" height="15" fill="rgb(248,107,23)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1439.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (34 samples, 0.13%)</title><rect x="94.6708%" y="1413" width="0.1277%" height="15" fill="rgb(215,168,21)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1423.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (34 samples, 0.13%)</title><rect x="94.6708%" y="1397" width="0.1277%" height="15" fill="rgb(227,83,22)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1407.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (34 samples, 0.13%)</title><rect x="94.6708%" y="1381" width="0.1277%" height="15" fill="rgb(217,118,43)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1391.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (34 samples, 0.13%)</title><rect x="94.6708%" y="1365" width="0.1277%" height="15" fill="rgb(229,220,41)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1375.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (34 samples, 0.13%)</title><rect x="94.6708%" y="1349" width="0.1277%" height="15" fill="rgb(254,146,46)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1359.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (34 samples, 0.13%)</title><rect x="94.6708%" y="1333" width="0.1277%" height="15" fill="rgb(233,208,31)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1343.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (34 samples, 0.13%)</title><rect x="94.6708%" y="1317" width="0.1277%" height="15" fill="rgb(222,162,7)" fg:x="25208" fg:w="34"/><text x="94.9208%" y="1327.50"></text></g><g><title>compile_demo_art::main (116 samples, 0.44%)</title><rect x="94.3666%" y="2101" width="0.4356%" height="15" fill="rgb(230,117,45)" fg:x="25127" fg:w="116"/><text x="94.6166%" y="2111.50"></text></g><g><title>compile_demo_art::benches (116 samples, 0.44%)</title><rect x="94.3666%" y="2085" width="0.4356%" height="15" fill="rgb(239,163,6)" fg:x="25127" fg:w="116"/><text x="94.6166%" y="2095.50"></text></g><g><title>compile_demo_art::compile_to_proto (116 samples, 0.44%)</title><rect x="94.3666%" y="2069" width="0.4356%" height="15" fill="rgb(246,130,17)" fg:x="25127" fg:w="116"/><text x="94.6166%" y="2079.50"></text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (115 samples, 0.43%)</title><rect x="94.3704%" y="2053" width="0.4319%" height="15" fill="rgb(216,84,5)" fg:x="25128" fg:w="115"/><text x="94.6204%" y="2063.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (115 samples, 0.43%)</title><rect x="94.3704%" y="2037" width="0.4319%" height="15" fill="rgb(230,200,21)" fg:x="25128" fg:w="115"/><text x="94.6204%" y="2047.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (115 samples, 0.43%)</title><rect x="94.3704%" y="2021" width="0.4319%" height="15" fill="rgb(224,2,8)" fg:x="25128" fg:w="115"/><text x="94.6204%" y="2031.50"></text></g><g><title>criterion::routine::Routine::profile (115 samples, 0.43%)</title><rect x="94.3704%" y="2005" width="0.4319%" height="15" fill="rgb(238,178,10)" fg:x="25128" fg:w="115"/><text x="94.6204%" y="2015.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (35 samples, 0.13%)</title><rect x="94.6708%" y="1989" width="0.1314%" height="15" fill="rgb(242,153,24)" fg:x="25208" fg:w="35"/><text x="94.9208%" y="1999.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (35 samples, 0.13%)</title><rect x="94.6708%" y="1973" width="0.1314%" height="15" fill="rgb(242,32,48)" fg:x="25208" fg:w="35"/><text x="94.9208%" y="1983.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}} (35 samples, 0.13%)</title><rect x="94.6708%" y="1957" width="0.1314%" height="15" fill="rgb(227,36,0)" fg:x="25208" fg:w="35"/><text x="94.9208%" y="1967.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (35 samples, 0.13%)</title><rect x="94.6708%" y="1941" width="0.1314%" height="15" fill="rgb(251,33,35)" fg:x="25208" fg:w="35"/><text x="94.9208%" y="1951.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.01%)</title><rect x="94.8023%" y="1493" width="0.0113%" height="15" fill="rgb(232,168,51)" fg:x="25243" fg:w="3"/><text x="95.0523%" y="1503.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.01%)</title><rect x="94.8023%" y="1477" width="0.0113%" height="15" fill="rgb(228,56,10)" fg:x="25243" fg:w="3"/><text x="95.0523%" y="1487.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.01%)</title><rect x="94.8023%" y="1461" width="0.0113%" height="15" fill="rgb(231,10,26)" fg:x="25243" fg:w="3"/><text x="95.0523%" y="1471.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="94.8023%" y="1445" width="0.0113%" height="15" fill="rgb(226,202,12)" fg:x="25243" fg:w="3"/><text x="95.0523%" y="1455.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.01%)</title><rect x="94.8023%" y="1429" width="0.0113%" height="15" fill="rgb(251,49,21)" fg:x="25243" fg:w="3"/><text x="95.0523%" y="1439.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.01%)</title><rect x="94.8023%" y="1413" width="0.0113%" height="15" fill="rgb(206,228,28)" fg:x="25243" fg:w="3"/><text x="95.0523%" y="1423.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.01%)</title><rect x="94.8023%" y="1397" width="0.0113%" height="15" fill="rgb(205,198,31)" fg:x="25243" fg:w="3"/><text x="95.0523%" y="1407.50"></text></g><g><title>__rdl_realloc (3 samples, 0.01%)</title><rect x="94.8023%" y="1381" width="0.0113%" height="15" fill="rgb(213,69,1)" fg:x="25243" fg:w="3"/><text x="95.0523%" y="1391.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.01%)</title><rect x="94.8023%" y="1365" width="0.0113%" height="15" fill="rgb(209,177,9)" fg:x="25243" fg:w="3"/><text x="95.0523%" y="1375.50"></text></g><g><title>realloc (3 samples, 0.01%)</title><rect x="94.8023%" y="1349" width="0.0113%" height="15" fill="rgb(227,119,30)" fg:x="25243" fg:w="3"/><text x="95.0523%" y="1359.50"></text></g><g><title>_int_realloc (3 samples, 0.01%)</title><rect x="94.8023%" y="1333" width="0.0113%" height="15" fill="rgb(234,106,41)" fg:x="25243" fg:w="3"/><text x="95.0523%" y="1343.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.03%)</title><rect x="94.8023%" y="2101" width="0.0300%" height="15" fill="rgb(244,103,47)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="2111.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (8 samples, 0.03%)</title><rect x="94.8023%" y="2085" width="0.0300%" height="15" fill="rgb(212,211,25)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="2095.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.03%)</title><rect x="94.8023%" y="2069" width="0.0300%" height="15" fill="rgb(208,63,53)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="2079.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.03%)</title><rect x="94.8023%" y="2053" width="0.0300%" height="15" fill="rgb(213,176,21)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="2063.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (8 samples, 0.03%)</title><rect x="94.8023%" y="2037" width="0.0300%" height="15" fill="rgb(243,124,12)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="2047.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.03%)</title><rect x="94.8023%" y="2021" width="0.0300%" height="15" fill="rgb(239,2,35)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="2031.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="94.8023%" y="2005" width="0.0300%" height="15" fill="rgb(253,169,22)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="2015.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (8 samples, 0.03%)</title><rect x="94.8023%" y="1989" width="0.0300%" height="15" fill="rgb(254,51,12)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1999.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.03%)</title><rect x="94.8023%" y="1973" width="0.0300%" height="15" fill="rgb(244,17,47)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1983.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.03%)</title><rect x="94.8023%" y="1957" width="0.0300%" height="15" fill="rgb(251,45,46)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1967.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.03%)</title><rect x="94.8023%" y="1941" width="0.0300%" height="15" fill="rgb(223,87,43)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1951.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.03%)</title><rect x="94.8023%" y="1925" width="0.0300%" height="15" fill="rgb(230,132,31)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1935.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (8 samples, 0.03%)</title><rect x="94.8023%" y="1909" width="0.0300%" height="15" fill="rgb(206,99,1)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1919.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (8 samples, 0.03%)</title><rect x="94.8023%" y="1893" width="0.0300%" height="15" fill="rgb(227,110,25)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1903.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (8 samples, 0.03%)</title><rect x="94.8023%" y="1877" width="0.0300%" height="15" fill="rgb(217,182,7)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1887.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (8 samples, 0.03%)</title><rect x="94.8023%" y="1861" width="0.0300%" height="15" fill="rgb(250,176,4)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1871.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (8 samples, 0.03%)</title><rect x="94.8023%" y="1845" width="0.0300%" height="15" fill="rgb(244,98,30)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1855.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (8 samples, 0.03%)</title><rect x="94.8023%" y="1829" width="0.0300%" height="15" fill="rgb(228,150,42)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1839.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1813" width="0.0300%" height="15" fill="rgb(231,91,46)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1823.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1797" width="0.0300%" height="15" fill="rgb(252,161,32)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1807.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1781" width="0.0300%" height="15" fill="rgb(236,69,41)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1791.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1765" width="0.0300%" height="15" fill="rgb(212,160,3)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1775.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1749" width="0.0300%" height="15" fill="rgb(216,5,50)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1759.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1733" width="0.0300%" height="15" fill="rgb(241,138,25)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1743.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1717" width="0.0300%" height="15" fill="rgb(239,42,18)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1727.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1701" width="0.0300%" height="15" fill="rgb(239,40,7)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1711.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1685" width="0.0300%" height="15" fill="rgb(239,11,31)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1695.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1669" width="0.0300%" height="15" fill="rgb(224,77,40)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1679.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1653" width="0.0300%" height="15" fill="rgb(226,15,5)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1663.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1637" width="0.0300%" height="15" fill="rgb(254,188,5)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1647.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1621" width="0.0300%" height="15" fill="rgb(241,148,52)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1631.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1605" width="0.0300%" height="15" fill="rgb(251,48,36)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1615.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1589" width="0.0300%" height="15" fill="rgb(243,83,13)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1599.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1573" width="0.0300%" height="15" fill="rgb(210,105,0)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1583.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1557" width="0.0300%" height="15" fill="rgb(239,60,36)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1567.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1541" width="0.0300%" height="15" fill="rgb(210,20,0)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1525" width="0.0300%" height="15" fill="rgb(244,26,53)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1535.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (8 samples, 0.03%)</title><rect x="94.8023%" y="1509" width="0.0300%" height="15" fill="rgb(240,100,49)" fg:x="25243" fg:w="8"/><text x="95.0523%" y="1519.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (5 samples, 0.02%)</title><rect x="94.8135%" y="1493" width="0.0188%" height="15" fill="rgb(250,46,45)" fg:x="25246" fg:w="5"/><text x="95.0635%" y="1503.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (8 samples, 0.03%)</title><rect x="94.9900%" y="1349" width="0.0300%" height="15" fill="rgb(220,181,29)" fg:x="25293" fg:w="8"/><text x="95.2400%" y="1359.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (8 samples, 0.03%)</title><rect x="94.9900%" y="1333" width="0.0300%" height="15" fill="rgb(213,137,33)" fg:x="25293" fg:w="8"/><text x="95.2400%" y="1343.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (52 samples, 0.20%)</title><rect x="94.8361%" y="1397" width="0.1953%" height="15" fill="rgb(213,27,48)" fg:x="25252" fg:w="52"/><text x="95.0861%" y="1407.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (52 samples, 0.20%)</title><rect x="94.8361%" y="1381" width="0.1953%" height="15" fill="rgb(245,180,39)" fg:x="25252" fg:w="52"/><text x="95.0861%" y="1391.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (52 samples, 0.20%)</title><rect x="94.8361%" y="1365" width="0.1953%" height="15" fill="rgb(212,158,42)" fg:x="25252" fg:w="52"/><text x="95.0861%" y="1375.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="95.0201%" y="1349" width="0.0113%" height="15" fill="rgb(228,193,18)" fg:x="25301" fg:w="3"/><text x="95.2701%" y="1359.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.02%)</title><rect x="95.0314%" y="1397" width="0.0150%" height="15" fill="rgb(245,172,29)" fg:x="25304" fg:w="4"/><text x="95.2814%" y="1407.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4 samples, 0.02%)</title><rect x="95.0314%" y="1381" width="0.0150%" height="15" fill="rgb(207,98,24)" fg:x="25304" fg:w="4"/><text x="95.2814%" y="1391.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.02%)</title><rect x="95.0314%" y="1365" width="0.0150%" height="15" fill="rgb(249,92,26)" fg:x="25304" fg:w="4"/><text x="95.2814%" y="1375.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="95.0464%" y="1333" width="0.0113%" height="15" fill="rgb(217,176,26)" fg:x="25308" fg:w="3"/><text x="95.2964%" y="1343.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="95.0464%" y="1317" width="0.0113%" height="15" fill="rgb(221,8,39)" fg:x="25308" fg:w="3"/><text x="95.2964%" y="1327.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (7 samples, 0.03%)</title><rect x="95.0464%" y="1397" width="0.0263%" height="15" fill="rgb(208,90,18)" fg:x="25308" fg:w="7"/><text x="95.2964%" y="1407.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (7 samples, 0.03%)</title><rect x="95.0464%" y="1381" width="0.0263%" height="15" fill="rgb(207,202,30)" fg:x="25308" fg:w="7"/><text x="95.2964%" y="1391.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (7 samples, 0.03%)</title><rect x="95.0464%" y="1365" width="0.0263%" height="15" fill="rgb(231,124,22)" fg:x="25308" fg:w="7"/><text x="95.2964%" y="1375.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 0.03%)</title><rect x="95.0464%" y="1349" width="0.0263%" height="15" fill="rgb(206,15,5)" fg:x="25308" fg:w="7"/><text x="95.2964%" y="1359.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4 samples, 0.02%)</title><rect x="95.0576%" y="1333" width="0.0150%" height="15" fill="rgb(239,16,52)" fg:x="25311" fg:w="4"/><text x="95.3076%" y="1343.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.02%)</title><rect x="95.0576%" y="1317" width="0.0150%" height="15" fill="rgb(245,213,29)" fg:x="25311" fg:w="4"/><text x="95.3076%" y="1327.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.02%)</title><rect x="95.0576%" y="1301" width="0.0150%" height="15" fill="rgb(213,203,36)" fg:x="25311" fg:w="4"/><text x="95.3076%" y="1311.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (3 samples, 0.01%)</title><rect x="95.0727%" y="1397" width="0.0113%" height="15" fill="rgb(209,55,18)" fg:x="25315" fg:w="3"/><text x="95.3227%" y="1407.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="95.0727%" y="1381" width="0.0113%" height="15" fill="rgb(207,133,49)" fg:x="25315" fg:w="3"/><text x="95.3227%" y="1391.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="95.0727%" y="1365" width="0.0113%" height="15" fill="rgb(240,33,46)" fg:x="25315" fg:w="3"/><text x="95.3227%" y="1375.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3 samples, 0.01%)</title><rect x="95.0727%" y="1349" width="0.0113%" height="15" fill="rgb(212,35,2)" fg:x="25315" fg:w="3"/><text x="95.3227%" y="1359.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (3 samples, 0.01%)</title><rect x="95.0727%" y="1333" width="0.0113%" height="15" fill="rgb(231,119,28)" fg:x="25315" fg:w="3"/><text x="95.3227%" y="1343.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (70 samples, 0.26%)</title><rect x="94.8323%" y="1413" width="0.2629%" height="15" fill="rgb(252,178,7)" fg:x="25251" fg:w="70"/><text x="95.0823%" y="1423.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (3 samples, 0.01%)</title><rect x="95.0839%" y="1397" width="0.0113%" height="15" fill="rgb(251,91,4)" fg:x="25318" fg:w="3"/><text x="95.3339%" y="1407.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (3 samples, 0.01%)</title><rect x="95.0839%" y="1381" width="0.0113%" height="15" fill="rgb(233,122,19)" fg:x="25318" fg:w="3"/><text x="95.3339%" y="1391.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (3 samples, 0.01%)</title><rect x="95.0839%" y="1365" width="0.0113%" height="15" fill="rgb(231,208,46)" fg:x="25318" fg:w="3"/><text x="95.3339%" y="1375.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (3 samples, 0.01%)</title><rect x="95.0839%" y="1349" width="0.0113%" height="15" fill="rgb(243,15,41)" fg:x="25318" fg:w="3"/><text x="95.3339%" y="1359.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.01%)</title><rect x="95.0952%" y="1413" width="0.0113%" height="15" fill="rgb(210,32,43)" fg:x="25321" fg:w="3"/><text x="95.3452%" y="1423.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.01%)</title><rect x="95.0952%" y="1397" width="0.0113%" height="15" fill="rgb(222,177,15)" fg:x="25321" fg:w="3"/><text x="95.3452%" y="1407.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="95.0952%" y="1381" width="0.0113%" height="15" fill="rgb(244,121,34)" fg:x="25321" fg:w="3"/><text x="95.3452%" y="1391.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="95.0952%" y="1365" width="0.0113%" height="15" fill="rgb(234,138,4)" fg:x="25321" fg:w="3"/><text x="95.3452%" y="1375.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="95.0952%" y="1349" width="0.0113%" height="15" fill="rgb(240,97,48)" fg:x="25321" fg:w="3"/><text x="95.3452%" y="1359.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (6 samples, 0.02%)</title><rect x="95.1065%" y="1413" width="0.0225%" height="15" fill="rgb(237,65,54)" fg:x="25324" fg:w="6"/><text x="95.3565%" y="1423.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (6 samples, 0.02%)</title><rect x="95.1065%" y="1397" width="0.0225%" height="15" fill="rgb(214,25,24)" fg:x="25324" fg:w="6"/><text x="95.3565%" y="1407.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (6 samples, 0.02%)</title><rect x="95.1065%" y="1381" width="0.0225%" height="15" fill="rgb(213,5,3)" fg:x="25324" fg:w="6"/><text x="95.3565%" y="1391.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 0.02%)</title><rect x="95.1065%" y="1365" width="0.0225%" height="15" fill="rgb(219,81,29)" fg:x="25324" fg:w="6"/><text x="95.3565%" y="1375.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.02%)</title><rect x="95.1065%" y="1349" width="0.0225%" height="15" fill="rgb(220,43,48)" fg:x="25324" fg:w="6"/><text x="95.3565%" y="1359.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.02%)</title><rect x="95.1065%" y="1333" width="0.0225%" height="15" fill="rgb(239,157,2)" fg:x="25324" fg:w="6"/><text x="95.3565%" y="1343.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.02%)</title><rect x="95.1140%" y="1317" width="0.0150%" height="15" fill="rgb(213,104,43)" fg:x="25326" fg:w="4"/><text x="95.3640%" y="1327.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (4 samples, 0.02%)</title><rect x="95.1140%" y="1301" width="0.0150%" height="15" fill="rgb(237,84,9)" fg:x="25326" fg:w="4"/><text x="95.3640%" y="1311.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (4 samples, 0.02%)</title><rect x="95.1140%" y="1285" width="0.0150%" height="15" fill="rgb(252,6,33)" fg:x="25326" fg:w="4"/><text x="95.3640%" y="1295.50"></text></g><g><title>core::hash::Hasher::write_u64 (4 samples, 0.02%)</title><rect x="95.1140%" y="1269" width="0.0150%" height="15" fill="rgb(251,172,22)" fg:x="25326" fg:w="4"/><text x="95.3640%" y="1279.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="95.1140%" y="1253" width="0.0150%" height="15" fill="rgb(244,91,53)" fg:x="25326" fg:w="4"/><text x="95.3640%" y="1263.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="95.1140%" y="1237" width="0.0150%" height="15" fill="rgb(219,29,30)" fg:x="25326" fg:w="4"/><text x="95.3640%" y="1247.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="95.1140%" y="1221" width="0.0150%" height="15" fill="rgb(213,3,15)" fg:x="25326" fg:w="4"/><text x="95.3640%" y="1231.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="95.1177%" y="1205" width="0.0113%" height="15" fill="rgb(208,25,28)" fg:x="25327" fg:w="3"/><text x="95.3677%" y="1215.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (3 samples, 0.01%)</title><rect x="95.1290%" y="1413" width="0.0113%" height="15" fill="rgb(252,144,25)" fg:x="25330" fg:w="3"/><text x="95.3790%" y="1423.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="95.1290%" y="1397" width="0.0113%" height="15" fill="rgb(226,220,25)" fg:x="25330" fg:w="3"/><text x="95.3790%" y="1407.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="95.1290%" y="1381" width="0.0113%" height="15" fill="rgb(212,131,28)" fg:x="25330" fg:w="3"/><text x="95.3790%" y="1391.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="95.1290%" y="1365" width="0.0113%" height="15" fill="rgb(219,143,52)" fg:x="25330" fg:w="3"/><text x="95.3790%" y="1375.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="95.1290%" y="1349" width="0.0113%" height="15" fill="rgb(215,56,7)" fg:x="25330" fg:w="3"/><text x="95.3790%" y="1359.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (84 samples, 0.32%)</title><rect x="94.8323%" y="2101" width="0.3155%" height="15" fill="rgb(239,59,51)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="2111.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (84 samples, 0.32%)</title><rect x="94.8323%" y="2085" width="0.3155%" height="15" fill="rgb(209,215,4)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="2095.50"></text></g><g><title>compile_demo_art::compile (84 samples, 0.32%)</title><rect x="94.8323%" y="2069" width="0.3155%" height="15" fill="rgb(221,118,39)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="2079.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (84 samples, 0.32%)</title><rect x="94.8323%" y="2053" width="0.3155%" height="15" fill="rgb(236,6,44)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="2063.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (84 samples, 0.32%)</title><rect x="94.8323%" y="2037" width="0.3155%" height="15" fill="rgb(216,122,9)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="2047.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (84 samples, 0.32%)</title><rect x="94.8323%" y="2021" width="0.3155%" height="15" fill="rgb(244,134,42)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="2031.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (84 samples, 0.32%)</title><rect x="94.8323%" y="2005" width="0.3155%" height="15" fill="rgb(209,189,35)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="2015.50"></text></g><g><title>core::iter::adapters::try_process (84 samples, 0.32%)</title><rect x="94.8323%" y="1989" width="0.3155%" height="15" fill="rgb(250,47,36)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1999.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (84 samples, 0.32%)</title><rect x="94.8323%" y="1973" width="0.3155%" height="15" fill="rgb(252,112,4)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1983.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (84 samples, 0.32%)</title><rect x="94.8323%" y="1957" width="0.3155%" height="15" fill="rgb(221,79,51)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1967.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (84 samples, 0.32%)</title><rect x="94.8323%" y="1941" width="0.3155%" height="15" fill="rgb(232,65,53)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1951.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (84 samples, 0.32%)</title><rect x="94.8323%" y="1925" width="0.3155%" height="15" fill="rgb(211,37,7)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1935.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (84 samples, 0.32%)</title><rect x="94.8323%" y="1909" width="0.3155%" height="15" fill="rgb(234,221,18)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1919.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.32%)</title><rect x="94.8323%" y="1893" width="0.3155%" height="15" fill="rgb(220,158,26)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1903.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (84 samples, 0.32%)</title><rect x="94.8323%" y="1877" width="0.3155%" height="15" fill="rgb(220,70,6)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1887.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (84 samples, 0.32%)</title><rect x="94.8323%" y="1861" width="0.3155%" height="15" fill="rgb(250,39,48)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1871.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (84 samples, 0.32%)</title><rect x="94.8323%" y="1845" width="0.3155%" height="15" fill="rgb(206,40,27)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1855.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (84 samples, 0.32%)</title><rect x="94.8323%" y="1829" width="0.3155%" height="15" fill="rgb(247,80,36)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1839.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (84 samples, 0.32%)</title><rect x="94.8323%" y="1813" width="0.3155%" height="15" fill="rgb(222,9,20)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1823.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (84 samples, 0.32%)</title><rect x="94.8323%" y="1797" width="0.3155%" height="15" fill="rgb(217,26,45)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1807.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (84 samples, 0.32%)</title><rect x="94.8323%" y="1781" width="0.3155%" height="15" fill="rgb(221,67,14)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1791.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (84 samples, 0.32%)</title><rect x="94.8323%" y="1765" width="0.3155%" height="15" fill="rgb(248,100,24)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1775.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (84 samples, 0.32%)</title><rect x="94.8323%" y="1749" width="0.3155%" height="15" fill="rgb(230,187,16)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1759.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (84 samples, 0.32%)</title><rect x="94.8323%" y="1733" width="0.3155%" height="15" fill="rgb(205,108,13)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1743.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (84 samples, 0.32%)</title><rect x="94.8323%" y="1717" width="0.3155%" height="15" fill="rgb(235,71,51)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1727.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1701" width="0.3155%" height="15" fill="rgb(251,172,48)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1711.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1685" width="0.3155%" height="15" fill="rgb(240,96,49)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1695.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1669" width="0.3155%" height="15" fill="rgb(235,46,36)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1679.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1653" width="0.3155%" height="15" fill="rgb(244,3,49)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1663.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1637" width="0.3155%" height="15" fill="rgb(206,78,54)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1647.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1621" width="0.3155%" height="15" fill="rgb(208,85,42)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1631.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1605" width="0.3155%" height="15" fill="rgb(219,196,21)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1615.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1589" width="0.3155%" height="15" fill="rgb(238,19,9)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1599.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1573" width="0.3155%" height="15" fill="rgb(206,86,13)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1583.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1557" width="0.3155%" height="15" fill="rgb(214,123,40)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1567.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1541" width="0.3155%" height="15" fill="rgb(243,53,5)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1525" width="0.3155%" height="15" fill="rgb(254,186,31)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1535.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1509" width="0.3155%" height="15" fill="rgb(221,216,25)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1519.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1493" width="0.3155%" height="15" fill="rgb(248,107,42)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1503.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1477" width="0.3155%" height="15" fill="rgb(221,85,43)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1487.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1461" width="0.3155%" height="15" fill="rgb(225,34,24)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1471.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1445" width="0.3155%" height="15" fill="rgb(211,119,1)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1455.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (84 samples, 0.32%)</title><rect x="94.8323%" y="1429" width="0.3155%" height="15" fill="rgb(254,216,46)" fg:x="25251" fg:w="84"/><text x="95.0823%" y="1439.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (34 samples, 0.13%)</title><rect x="95.1515%" y="1333" width="0.1277%" height="15" fill="rgb(238,11,38)" fg:x="25336" fg:w="34"/><text x="95.4015%" y="1343.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (34 samples, 0.13%)</title><rect x="95.1515%" y="1317" width="0.1277%" height="15" fill="rgb(233,50,15)" fg:x="25336" fg:w="34"/><text x="95.4015%" y="1327.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (34 samples, 0.13%)</title><rect x="95.1515%" y="1301" width="0.1277%" height="15" fill="rgb(217,181,29)" fg:x="25336" fg:w="34"/><text x="95.4015%" y="1311.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (6 samples, 0.02%)</title><rect x="95.2567%" y="1285" width="0.0225%" height="15" fill="rgb(214,56,3)" fg:x="25364" fg:w="6"/><text x="95.5067%" y="1295.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (6 samples, 0.02%)</title><rect x="95.2567%" y="1269" width="0.0225%" height="15" fill="rgb(230,69,45)" fg:x="25364" fg:w="6"/><text x="95.5067%" y="1279.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (33 samples, 0.12%)</title><rect x="95.2905%" y="1317" width="0.1239%" height="15" fill="rgb(224,201,50)" fg:x="25373" fg:w="33"/><text x="95.5405%" y="1327.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (33 samples, 0.12%)</title><rect x="95.2905%" y="1301" width="0.1239%" height="15" fill="rgb(217,228,18)" fg:x="25373" fg:w="33"/><text x="95.5405%" y="1311.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (33 samples, 0.12%)</title><rect x="95.2905%" y="1285" width="0.1239%" height="15" fill="rgb(239,33,44)" fg:x="25373" fg:w="33"/><text x="95.5405%" y="1295.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (7 samples, 0.03%)</title><rect x="95.3881%" y="1269" width="0.0263%" height="15" fill="rgb(248,210,23)" fg:x="25399" fg:w="7"/><text x="95.6381%" y="1279.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (7 samples, 0.03%)</title><rect x="95.3881%" y="1253" width="0.0263%" height="15" fill="rgb(253,135,8)" fg:x="25399" fg:w="7"/><text x="95.6381%" y="1263.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (15 samples, 0.06%)</title><rect x="95.5421%" y="1253" width="0.0563%" height="15" fill="rgb(217,98,21)" fg:x="25440" fg:w="15"/><text x="95.7921%" y="1263.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (15 samples, 0.06%)</title><rect x="95.5421%" y="1237" width="0.0563%" height="15" fill="rgb(253,130,21)" fg:x="25440" fg:w="15"/><text x="95.7921%" y="1247.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (47 samples, 0.18%)</title><rect x="95.4257%" y="1301" width="0.1765%" height="15" fill="rgb(207,81,54)" fg:x="25409" fg:w="47"/><text x="95.6757%" y="1311.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (47 samples, 0.18%)</title><rect x="95.4257%" y="1285" width="0.1765%" height="15" fill="rgb(232,48,33)" fg:x="25409" fg:w="47"/><text x="95.6757%" y="1295.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (47 samples, 0.18%)</title><rect x="95.4257%" y="1269" width="0.1765%" height="15" fill="rgb(211,9,35)" fg:x="25409" fg:w="47"/><text x="95.6757%" y="1279.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.02%)</title><rect x="95.6060%" y="1301" width="0.0150%" height="15" fill="rgb(205,152,21)" fg:x="25457" fg:w="4"/><text x="95.8560%" y="1311.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4 samples, 0.02%)</title><rect x="95.6060%" y="1285" width="0.0150%" height="15" fill="rgb(249,21,27)" fg:x="25457" fg:w="4"/><text x="95.8560%" y="1295.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.02%)</title><rect x="95.6060%" y="1269" width="0.0150%" height="15" fill="rgb(252,29,24)" fg:x="25457" fg:w="4"/><text x="95.8560%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4 samples, 0.02%)</title><rect x="95.6060%" y="1253" width="0.0150%" height="15" fill="rgb(230,130,50)" fg:x="25457" fg:w="4"/><text x="95.8560%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.02%)</title><rect x="95.6060%" y="1237" width="0.0150%" height="15" fill="rgb(239,144,14)" fg:x="25457" fg:w="4"/><text x="95.8560%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.02%)</title><rect x="95.6060%" y="1221" width="0.0150%" height="15" fill="rgb(227,111,50)" fg:x="25457" fg:w="4"/><text x="95.8560%" y="1231.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.01%)</title><rect x="95.6210%" y="1301" width="0.0113%" height="15" fill="rgb(254,84,20)" fg:x="25461" fg:w="3"/><text x="95.8710%" y="1311.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.01%)</title><rect x="95.6210%" y="1285" width="0.0113%" height="15" fill="rgb(232,90,48)" fg:x="25461" fg:w="3"/><text x="95.8710%" y="1295.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.01%)</title><rect x="95.6210%" y="1269" width="0.0113%" height="15" fill="rgb(253,63,47)" fg:x="25461" fg:w="3"/><text x="95.8710%" y="1279.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="95.6210%" y="1253" width="0.0113%" height="15" fill="rgb(251,146,35)" fg:x="25461" fg:w="3"/><text x="95.8710%" y="1263.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (3 samples, 0.01%)</title><rect x="95.6323%" y="1301" width="0.0113%" height="15" fill="rgb(229,192,35)" fg:x="25464" fg:w="3"/><text x="95.8823%" y="1311.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="95.6323%" y="1285" width="0.0113%" height="15" fill="rgb(225,68,9)" fg:x="25464" fg:w="3"/><text x="95.8823%" y="1295.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="95.6323%" y="1269" width="0.0113%" height="15" fill="rgb(214,97,34)" fg:x="25464" fg:w="3"/><text x="95.8823%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3 samples, 0.01%)</title><rect x="95.6323%" y="1253" width="0.0113%" height="15" fill="rgb(253,31,26)" fg:x="25464" fg:w="3"/><text x="95.8823%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (3 samples, 0.01%)</title><rect x="95.6323%" y="1237" width="0.0113%" height="15" fill="rgb(225,151,47)" fg:x="25464" fg:w="3"/><text x="95.8823%" y="1247.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (64 samples, 0.24%)</title><rect x="95.4144%" y="1317" width="0.2404%" height="15" fill="rgb(206,185,9)" fg:x="25406" fg:w="64"/><text x="95.6644%" y="1327.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (3 samples, 0.01%)</title><rect x="95.6435%" y="1301" width="0.0113%" height="15" fill="rgb(249,65,17)" fg:x="25467" fg:w="3"/><text x="95.8935%" y="1311.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (3 samples, 0.01%)</title><rect x="95.6435%" y="1285" width="0.0113%" height="15" fill="rgb(220,110,10)" fg:x="25467" fg:w="3"/><text x="95.8935%" y="1295.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (3 samples, 0.01%)</title><rect x="95.6435%" y="1269" width="0.0113%" height="15" fill="rgb(222,198,49)" fg:x="25467" fg:w="3"/><text x="95.8935%" y="1279.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (3 samples, 0.01%)</title><rect x="95.6435%" y="1253" width="0.0113%" height="15" fill="rgb(239,81,13)" fg:x="25467" fg:w="3"/><text x="95.8935%" y="1263.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="95.6548%" y="1237" width="0.0113%" height="15" fill="rgb(216,128,11)" fg:x="25470" fg:w="3"/><text x="95.9048%" y="1247.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="95.6548%" y="1221" width="0.0113%" height="15" fill="rgb(247,156,8)" fg:x="25470" fg:w="3"/><text x="95.9048%" y="1231.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="95.6548%" y="1205" width="0.0113%" height="15" fill="rgb(219,173,1)" fg:x="25470" fg:w="3"/><text x="95.9048%" y="1215.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.02%)</title><rect x="95.6548%" y="1269" width="0.0150%" height="15" fill="rgb(227,42,24)" fg:x="25470" fg:w="4"/><text x="95.9048%" y="1279.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.02%)</title><rect x="95.6548%" y="1253" width="0.0150%" height="15" fill="rgb(253,219,50)" fg:x="25470" fg:w="4"/><text x="95.9048%" y="1263.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (7 samples, 0.03%)</title><rect x="95.6548%" y="1317" width="0.0263%" height="15" fill="rgb(215,191,54)" fg:x="25470" fg:w="7"/><text x="95.9048%" y="1327.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (7 samples, 0.03%)</title><rect x="95.6548%" y="1301" width="0.0263%" height="15" fill="rgb(238,83,12)" fg:x="25470" fg:w="7"/><text x="95.9048%" y="1311.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 0.03%)</title><rect x="95.6548%" y="1285" width="0.0263%" height="15" fill="rgb(205,124,9)" fg:x="25470" fg:w="7"/><text x="95.9048%" y="1295.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.01%)</title><rect x="95.6698%" y="1269" width="0.0113%" height="15" fill="rgb(253,174,7)" fg:x="25474" fg:w="3"/><text x="95.9198%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.01%)</title><rect x="95.6698%" y="1253" width="0.0113%" height="15" fill="rgb(206,134,49)" fg:x="25474" fg:w="3"/><text x="95.9198%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.01%)</title><rect x="95.6698%" y="1237" width="0.0113%" height="15" fill="rgb(221,89,20)" fg:x="25474" fg:w="3"/><text x="95.9198%" y="1247.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.01%)</title><rect x="95.6811%" y="1317" width="0.0113%" height="15" fill="rgb(240,205,13)" fg:x="25477" fg:w="3"/><text x="95.9311%" y="1327.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.01%)</title><rect x="95.6811%" y="1301" width="0.0113%" height="15" fill="rgb(237,174,32)" fg:x="25477" fg:w="3"/><text x="95.9311%" y="1311.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.01%)</title><rect x="95.6811%" y="1285" width="0.0113%" height="15" fill="rgb(226,12,15)" fg:x="25477" fg:w="3"/><text x="95.9311%" y="1295.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="95.6811%" y="1269" width="0.0113%" height="15" fill="rgb(245,160,52)" fg:x="25477" fg:w="3"/><text x="95.9311%" y="1279.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="95.6811%" y="1253" width="0.0113%" height="15" fill="rgb(253,80,21)" fg:x="25477" fg:w="3"/><text x="95.9311%" y="1263.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="95.6811%" y="1237" width="0.0113%" height="15" fill="rgb(231,225,22)" fg:x="25477" fg:w="3"/><text x="95.9311%" y="1247.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.01%)</title><rect x="95.6811%" y="1221" width="0.0113%" height="15" fill="rgb(253,185,12)" fg:x="25477" fg:w="3"/><text x="95.9311%" y="1231.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="95.6811%" y="1205" width="0.0113%" height="15" fill="rgb(234,197,21)" fg:x="25477" fg:w="3"/><text x="95.9311%" y="1215.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.01%)</title><rect x="95.6811%" y="1189" width="0.0113%" height="15" fill="rgb(210,47,30)" fg:x="25477" fg:w="3"/><text x="95.9311%" y="1199.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.01%)</title><rect x="95.6811%" y="1173" width="0.0113%" height="15" fill="rgb(246,139,27)" fg:x="25477" fg:w="3"/><text x="95.9311%" y="1183.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="95.6811%" y="1157" width="0.0113%" height="15" fill="rgb(226,130,16)" fg:x="25477" fg:w="3"/><text x="95.9311%" y="1167.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="95.6811%" y="1141" width="0.0113%" height="15" fill="rgb(237,208,20)" fg:x="25477" fg:w="3"/><text x="95.9311%" y="1151.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="95.6811%" y="1125" width="0.0113%" height="15" fill="rgb(245,186,28)" fg:x="25477" fg:w="3"/><text x="95.9311%" y="1135.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (117 samples, 0.44%)</title><rect x="95.2792%" y="1333" width="0.4394%" height="15" fill="rgb(238,105,39)" fg:x="25370" fg:w="117"/><text x="95.5292%" y="1343.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (5 samples, 0.02%)</title><rect x="95.6999%" y="1317" width="0.0188%" height="15" fill="rgb(253,228,11)" fg:x="25482" fg:w="5"/><text x="95.9499%" y="1327.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (5 samples, 0.02%)</title><rect x="95.6999%" y="1301" width="0.0188%" height="15" fill="rgb(224,136,38)" fg:x="25482" fg:w="5"/><text x="95.9499%" y="1311.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (5 samples, 0.02%)</title><rect x="95.6999%" y="1285" width="0.0188%" height="15" fill="rgb(211,3,25)" fg:x="25482" fg:w="5"/><text x="95.9499%" y="1295.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (5 samples, 0.02%)</title><rect x="95.6999%" y="1269" width="0.0188%" height="15" fill="rgb(238,66,34)" fg:x="25482" fg:w="5"/><text x="95.9499%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (3 samples, 0.01%)</title><rect x="95.7074%" y="1253" width="0.0113%" height="15" fill="rgb(223,188,11)" fg:x="25484" fg:w="3"/><text x="95.9574%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.01%)</title><rect x="95.7074%" y="1237" width="0.0113%" height="15" fill="rgb(221,10,35)" fg:x="25484" fg:w="3"/><text x="95.9574%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.01%)</title><rect x="95.7074%" y="1221" width="0.0113%" height="15" fill="rgb(223,18,44)" fg:x="25484" fg:w="3"/><text x="95.9574%" y="1231.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.02%)</title><rect x="95.7186%" y="1333" width="0.0150%" height="15" fill="rgb(220,97,41)" fg:x="25487" fg:w="4"/><text x="95.9686%" y="1343.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4 samples, 0.02%)</title><rect x="95.7186%" y="1317" width="0.0150%" height="15" fill="rgb(206,95,45)" fg:x="25487" fg:w="4"/><text x="95.9686%" y="1327.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.02%)</title><rect x="95.7186%" y="1301" width="0.0150%" height="15" fill="rgb(209,96,13)" fg:x="25487" fg:w="4"/><text x="95.9686%" y="1311.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="95.7337%" y="1237" width="0.0150%" height="15" fill="rgb(237,39,34)" fg:x="25491" fg:w="4"/><text x="95.9837%" y="1247.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="95.7337%" y="1221" width="0.0150%" height="15" fill="rgb(213,49,47)" fg:x="25491" fg:w="4"/><text x="95.9837%" y="1231.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="95.7337%" y="1205" width="0.0150%" height="15" fill="rgb(205,107,27)" fg:x="25491" fg:w="4"/><text x="95.9837%" y="1215.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (6 samples, 0.02%)</title><rect x="95.7337%" y="1333" width="0.0225%" height="15" fill="rgb(212,142,9)" fg:x="25491" fg:w="6"/><text x="95.9837%" y="1343.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (6 samples, 0.02%)</title><rect x="95.7337%" y="1317" width="0.0225%" height="15" fill="rgb(226,182,0)" fg:x="25491" fg:w="6"/><text x="95.9837%" y="1327.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (6 samples, 0.02%)</title><rect x="95.7337%" y="1301" width="0.0225%" height="15" fill="rgb(231,3,53)" fg:x="25491" fg:w="6"/><text x="95.9837%" y="1311.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 0.02%)</title><rect x="95.7337%" y="1285" width="0.0225%" height="15" fill="rgb(246,111,28)" fg:x="25491" fg:w="6"/><text x="95.9837%" y="1295.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.02%)</title><rect x="95.7337%" y="1269" width="0.0225%" height="15" fill="rgb(254,183,7)" fg:x="25491" fg:w="6"/><text x="95.9837%" y="1279.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.02%)</title><rect x="95.7337%" y="1253" width="0.0225%" height="15" fill="rgb(247,177,28)" fg:x="25491" fg:w="6"/><text x="95.9837%" y="1263.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="95.7562%" y="1253" width="0.0113%" height="15" fill="rgb(244,43,1)" fg:x="25497" fg:w="3"/><text x="96.0062%" y="1263.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="95.7562%" y="1237" width="0.0113%" height="15" fill="rgb(207,2,35)" fg:x="25497" fg:w="3"/><text x="96.0062%" y="1247.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="95.7562%" y="1221" width="0.0113%" height="15" fill="rgb(213,83,22)" fg:x="25497" fg:w="3"/><text x="96.0062%" y="1231.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.02%)</title><rect x="95.7562%" y="1285" width="0.0225%" height="15" fill="rgb(246,212,13)" fg:x="25497" fg:w="6"/><text x="96.0062%" y="1295.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.02%)</title><rect x="95.7562%" y="1269" width="0.0225%" height="15" fill="rgb(213,127,46)" fg:x="25497" fg:w="6"/><text x="96.0062%" y="1279.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.01%)</title><rect x="95.7675%" y="1253" width="0.0113%" height="15" fill="rgb(219,215,39)" fg:x="25500" fg:w="3"/><text x="96.0175%" y="1263.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="95.7675%" y="1237" width="0.0113%" height="15" fill="rgb(227,99,17)" fg:x="25500" fg:w="3"/><text x="96.0175%" y="1247.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.01%)</title><rect x="95.7675%" y="1221" width="0.0113%" height="15" fill="rgb(208,155,18)" fg:x="25500" fg:w="3"/><text x="96.0175%" y="1231.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.01%)</title><rect x="95.7675%" y="1205" width="0.0113%" height="15" fill="rgb(223,204,38)" fg:x="25500" fg:w="3"/><text x="96.0175%" y="1215.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="95.7675%" y="1189" width="0.0113%" height="15" fill="rgb(212,114,21)" fg:x="25500" fg:w="3"/><text x="96.0175%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="95.7675%" y="1173" width="0.0113%" height="15" fill="rgb(250,74,13)" fg:x="25500" fg:w="3"/><text x="96.0175%" y="1183.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (4 samples, 0.02%)</title><rect x="95.7825%" y="1205" width="0.0150%" height="15" fill="rgb(234,7,1)" fg:x="25504" fg:w="4"/><text x="96.0325%" y="1215.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (4 samples, 0.02%)</title><rect x="95.7825%" y="1189" width="0.0150%" height="15" fill="rgb(207,138,31)" fg:x="25504" fg:w="4"/><text x="96.0325%" y="1199.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.02%)</title><rect x="95.7825%" y="1173" width="0.0150%" height="15" fill="rgb(215,186,42)" fg:x="25504" fg:w="4"/><text x="96.0325%" y="1183.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.02%)</title><rect x="95.7825%" y="1157" width="0.0150%" height="15" fill="rgb(229,205,49)" fg:x="25504" fg:w="4"/><text x="96.0325%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3 samples, 0.01%)</title><rect x="95.7975%" y="1173" width="0.0113%" height="15" fill="rgb(216,156,32)" fg:x="25508" fg:w="3"/><text x="96.0475%" y="1183.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (3 samples, 0.01%)</title><rect x="95.7975%" y="1157" width="0.0113%" height="15" fill="rgb(238,7,21)" fg:x="25508" fg:w="3"/><text x="96.0475%" y="1167.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.01%)</title><rect x="95.7975%" y="1141" width="0.0113%" height="15" fill="rgb(249,190,22)" fg:x="25508" fg:w="3"/><text x="96.0475%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (5 samples, 0.02%)</title><rect x="95.7975%" y="1189" width="0.0188%" height="15" fill="rgb(253,51,31)" fg:x="25508" fg:w="5"/><text x="96.0475%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (11 samples, 0.04%)</title><rect x="95.7787%" y="1269" width="0.0413%" height="15" fill="rgb(237,90,54)" fg:x="25503" fg:w="11"/><text x="96.0287%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.04%)</title><rect x="95.7787%" y="1253" width="0.0413%" height="15" fill="rgb(250,214,33)" fg:x="25503" fg:w="11"/><text x="96.0287%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (10 samples, 0.04%)</title><rect x="95.7825%" y="1237" width="0.0376%" height="15" fill="rgb(237,10,49)" fg:x="25504" fg:w="10"/><text x="96.0325%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (10 samples, 0.04%)</title><rect x="95.7825%" y="1221" width="0.0376%" height="15" fill="rgb(241,56,36)" fg:x="25504" fg:w="10"/><text x="96.0325%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (6 samples, 0.02%)</title><rect x="95.7975%" y="1205" width="0.0225%" height="15" fill="rgb(227,164,12)" fg:x="25508" fg:w="6"/><text x="96.0475%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (12 samples, 0.05%)</title><rect x="95.7787%" y="1285" width="0.0451%" height="15" fill="rgb(249,149,35)" fg:x="25503" fg:w="12"/><text x="96.0287%" y="1295.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (19 samples, 0.07%)</title><rect x="95.7562%" y="1333" width="0.0714%" height="15" fill="rgb(238,227,50)" fg:x="25497" fg:w="19"/><text x="96.0062%" y="1343.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (19 samples, 0.07%)</title><rect x="95.7562%" y="1317" width="0.0714%" height="15" fill="rgb(235,102,45)" fg:x="25497" fg:w="19"/><text x="96.0062%" y="1327.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (19 samples, 0.07%)</title><rect x="95.7562%" y="1301" width="0.0714%" height="15" fill="rgb(211,10,38)" fg:x="25497" fg:w="19"/><text x="96.0062%" y="1311.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="95.8275%" y="1269" width="0.0113%" height="15" fill="rgb(219,77,48)" fg:x="25516" fg:w="3"/><text x="96.0775%" y="1279.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="95.8275%" y="1253" width="0.0113%" height="15" fill="rgb(246,6,15)" fg:x="25516" fg:w="3"/><text x="96.0775%" y="1263.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.01%)</title><rect x="95.8275%" y="1237" width="0.0113%" height="15" fill="rgb(207,220,2)" fg:x="25516" fg:w="3"/><text x="96.0775%" y="1247.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="95.8275%" y="1221" width="0.0113%" height="15" fill="rgb(242,48,14)" fg:x="25516" fg:w="3"/><text x="96.0775%" y="1231.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.01%)</title><rect x="95.8275%" y="1205" width="0.0113%" height="15" fill="rgb(218,19,27)" fg:x="25516" fg:w="3"/><text x="96.0775%" y="1215.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.01%)</title><rect x="95.8275%" y="1189" width="0.0113%" height="15" fill="rgb(228,0,35)" fg:x="25516" fg:w="3"/><text x="96.0775%" y="1199.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="95.8275%" y="1173" width="0.0113%" height="15" fill="rgb(244,142,54)" fg:x="25516" fg:w="3"/><text x="96.0775%" y="1183.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="95.8275%" y="1157" width="0.0113%" height="15" fill="rgb(243,217,40)" fg:x="25516" fg:w="3"/><text x="96.0775%" y="1167.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="95.8275%" y="1141" width="0.0113%" height="15" fill="rgb(207,114,16)" fg:x="25516" fg:w="3"/><text x="96.0775%" y="1151.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (186 samples, 0.70%)</title><rect x="95.1478%" y="2085" width="0.6985%" height="15" fill="rgb(224,33,25)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="2095.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (186 samples, 0.70%)</title><rect x="95.1478%" y="2069" width="0.6985%" height="15" fill="rgb(230,93,54)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="2079.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (186 samples, 0.70%)</title><rect x="95.1478%" y="2053" width="0.6985%" height="15" fill="rgb(224,56,24)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="2063.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (186 samples, 0.70%)</title><rect x="95.1478%" y="2037" width="0.6985%" height="15" fill="rgb(235,189,50)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="2047.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (186 samples, 0.70%)</title><rect x="95.1478%" y="2021" width="0.6985%" height="15" fill="rgb(242,173,8)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="2031.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (186 samples, 0.70%)</title><rect x="95.1478%" y="2005" width="0.6985%" height="15" fill="rgb(209,206,10)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="2015.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (186 samples, 0.70%)</title><rect x="95.1478%" y="1989" width="0.6985%" height="15" fill="rgb(213,182,44)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1999.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (186 samples, 0.70%)</title><rect x="95.1478%" y="1973" width="0.6985%" height="15" fill="rgb(243,51,15)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1983.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (186 samples, 0.70%)</title><rect x="95.1478%" y="1957" width="0.6985%" height="15" fill="rgb(241,13,14)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1967.50"></text></g><g><title>compile_demo_art::compile (186 samples, 0.70%)</title><rect x="95.1478%" y="1941" width="0.6985%" height="15" fill="rgb(239,147,24)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1951.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (186 samples, 0.70%)</title><rect x="95.1478%" y="1925" width="0.6985%" height="15" fill="rgb(223,129,16)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1935.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (186 samples, 0.70%)</title><rect x="95.1478%" y="1909" width="0.6985%" height="15" fill="rgb(209,169,13)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1919.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (186 samples, 0.70%)</title><rect x="95.1478%" y="1893" width="0.6985%" height="15" fill="rgb(235,159,41)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1903.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (186 samples, 0.70%)</title><rect x="95.1478%" y="1877" width="0.6985%" height="15" fill="rgb(223,219,48)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1887.50"></text></g><g><title>core::iter::adapters::try_process (186 samples, 0.70%)</title><rect x="95.1478%" y="1861" width="0.6985%" height="15" fill="rgb(236,80,13)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1871.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (186 samples, 0.70%)</title><rect x="95.1478%" y="1845" width="0.6985%" height="15" fill="rgb(213,5,6)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1855.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (186 samples, 0.70%)</title><rect x="95.1478%" y="1829" width="0.6985%" height="15" fill="rgb(205,59,21)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1839.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (186 samples, 0.70%)</title><rect x="95.1478%" y="1813" width="0.6985%" height="15" fill="rgb(247,137,35)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1823.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (186 samples, 0.70%)</title><rect x="95.1478%" y="1797" width="0.6985%" height="15" fill="rgb(242,208,28)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1807.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (186 samples, 0.70%)</title><rect x="95.1478%" y="1781" width="0.6985%" height="15" fill="rgb(245,62,25)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1791.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (186 samples, 0.70%)</title><rect x="95.1478%" y="1765" width="0.6985%" height="15" fill="rgb(233,99,54)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1775.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (186 samples, 0.70%)</title><rect x="95.1478%" y="1749" width="0.6985%" height="15" fill="rgb(213,10,37)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1759.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (186 samples, 0.70%)</title><rect x="95.1478%" y="1733" width="0.6985%" height="15" fill="rgb(235,143,30)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1743.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (186 samples, 0.70%)</title><rect x="95.1478%" y="1717" width="0.6985%" height="15" fill="rgb(250,146,33)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1727.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (186 samples, 0.70%)</title><rect x="95.1478%" y="1701" width="0.6985%" height="15" fill="rgb(226,198,42)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1711.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (186 samples, 0.70%)</title><rect x="95.1478%" y="1685" width="0.6985%" height="15" fill="rgb(222,55,6)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1695.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (186 samples, 0.70%)</title><rect x="95.1478%" y="1669" width="0.6985%" height="15" fill="rgb(213,224,31)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1679.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (186 samples, 0.70%)</title><rect x="95.1478%" y="1653" width="0.6985%" height="15" fill="rgb(226,103,35)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1663.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (186 samples, 0.70%)</title><rect x="95.1478%" y="1637" width="0.6985%" height="15" fill="rgb(205,66,45)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1647.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (186 samples, 0.70%)</title><rect x="95.1478%" y="1621" width="0.6985%" height="15" fill="rgb(226,51,42)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1631.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (186 samples, 0.70%)</title><rect x="95.1478%" y="1605" width="0.6985%" height="15" fill="rgb(206,69,1)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1615.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (186 samples, 0.70%)</title><rect x="95.1478%" y="1589" width="0.6985%" height="15" fill="rgb(213,228,47)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1599.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1573" width="0.6985%" height="15" fill="rgb(224,204,18)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1583.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1557" width="0.6985%" height="15" fill="rgb(253,187,47)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1567.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1541" width="0.6985%" height="15" fill="rgb(232,61,2)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1525" width="0.6985%" height="15" fill="rgb(213,132,35)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1535.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1509" width="0.6985%" height="15" fill="rgb(247,33,21)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1519.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1493" width="0.6985%" height="15" fill="rgb(233,71,46)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1503.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1477" width="0.6985%" height="15" fill="rgb(222,173,43)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1487.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1461" width="0.6985%" height="15" fill="rgb(249,218,47)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1471.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1445" width="0.6985%" height="15" fill="rgb(254,185,48)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1455.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1429" width="0.6985%" height="15" fill="rgb(252,165,50)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1439.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1413" width="0.6985%" height="15" fill="rgb(206,219,6)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1423.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1397" width="0.6985%" height="15" fill="rgb(212,212,45)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1407.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1381" width="0.6985%" height="15" fill="rgb(221,31,9)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1391.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1365" width="0.6985%" height="15" fill="rgb(234,198,39)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1375.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (186 samples, 0.70%)</title><rect x="95.1478%" y="1349" width="0.6985%" height="15" fill="rgb(252,145,46)" fg:x="25335" fg:w="186"/><text x="95.3978%" y="1359.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (5 samples, 0.02%)</title><rect x="95.8275%" y="1333" width="0.0188%" height="15" fill="rgb(237,149,0)" fg:x="25516" fg:w="5"/><text x="96.0775%" y="1343.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (5 samples, 0.02%)</title><rect x="95.8275%" y="1317" width="0.0188%" height="15" fill="rgb(229,65,5)" fg:x="25516" fg:w="5"/><text x="96.0775%" y="1327.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (5 samples, 0.02%)</title><rect x="95.8275%" y="1301" width="0.0188%" height="15" fill="rgb(235,60,36)" fg:x="25516" fg:w="5"/><text x="96.0775%" y="1311.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (5 samples, 0.02%)</title><rect x="95.8275%" y="1285" width="0.0188%" height="15" fill="rgb(222,47,18)" fg:x="25516" fg:w="5"/><text x="96.0775%" y="1295.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (187 samples, 0.70%)</title><rect x="95.1478%" y="2101" width="0.7023%" height="15" fill="rgb(235,114,22)" fg:x="25335" fg:w="187"/><text x="95.3978%" y="2111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (20 samples, 0.08%)</title><rect x="95.8538%" y="1109" width="0.0751%" height="15" fill="rgb(209,167,11)" fg:x="25523" fg:w="20"/><text x="96.1038%" y="1119.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (20 samples, 0.08%)</title><rect x="95.8538%" y="1093" width="0.0751%" height="15" fill="rgb(251,73,18)" fg:x="25523" fg:w="20"/><text x="96.1038%" y="1103.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (20 samples, 0.08%)</title><rect x="95.8538%" y="1077" width="0.0751%" height="15" fill="rgb(217,60,17)" fg:x="25523" fg:w="20"/><text x="96.1038%" y="1087.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (5 samples, 0.02%)</title><rect x="95.9102%" y="1061" width="0.0188%" height="15" fill="rgb(224,36,37)" fg:x="25538" fg:w="5"/><text x="96.1602%" y="1071.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (5 samples, 0.02%)</title><rect x="95.9102%" y="1045" width="0.0188%" height="15" fill="rgb(211,21,32)" fg:x="25538" fg:w="5"/><text x="96.1602%" y="1055.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (5 samples, 0.02%)</title><rect x="95.9778%" y="1045" width="0.0188%" height="15" fill="rgb(231,55,48)" fg:x="25556" fg:w="5"/><text x="96.2278%" y="1055.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (5 samples, 0.02%)</title><rect x="95.9778%" y="1029" width="0.0188%" height="15" fill="rgb(227,42,18)" fg:x="25556" fg:w="5"/><text x="96.2278%" y="1039.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (18 samples, 0.07%)</title><rect x="95.9327%" y="1093" width="0.0676%" height="15" fill="rgb(217,2,27)" fg:x="25544" fg:w="18"/><text x="96.1827%" y="1103.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (18 samples, 0.07%)</title><rect x="95.9327%" y="1077" width="0.0676%" height="15" fill="rgb(251,138,23)" fg:x="25544" fg:w="18"/><text x="96.1827%" y="1087.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (18 samples, 0.07%)</title><rect x="95.9327%" y="1061" width="0.0676%" height="15" fill="rgb(226,184,11)" fg:x="25544" fg:w="18"/><text x="96.1827%" y="1071.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (28 samples, 0.11%)</title><rect x="95.9289%" y="1109" width="0.1052%" height="15" fill="rgb(242,142,12)" fg:x="25543" fg:w="28"/><text x="96.1789%" y="1119.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (4 samples, 0.02%)</title><rect x="96.0191%" y="1093" width="0.0150%" height="15" fill="rgb(234,187,18)" fg:x="25567" fg:w="4"/><text x="96.2691%" y="1103.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (4 samples, 0.02%)</title><rect x="96.0191%" y="1077" width="0.0150%" height="15" fill="rgb(237,44,42)" fg:x="25567" fg:w="4"/><text x="96.2691%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (4 samples, 0.02%)</title><rect x="96.0191%" y="1061" width="0.0150%" height="15" fill="rgb(211,90,23)" fg:x="25567" fg:w="4"/><text x="96.2691%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (4 samples, 0.02%)</title><rect x="96.0191%" y="1045" width="0.0150%" height="15" fill="rgb(207,81,18)" fg:x="25567" fg:w="4"/><text x="96.2691%" y="1055.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.01%)</title><rect x="96.0341%" y="1109" width="0.0113%" height="15" fill="rgb(222,107,28)" fg:x="25571" fg:w="3"/><text x="96.2841%" y="1119.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.01%)</title><rect x="96.0341%" y="1093" width="0.0113%" height="15" fill="rgb(237,83,52)" fg:x="25571" fg:w="3"/><text x="96.2841%" y="1103.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.01%)</title><rect x="96.0341%" y="1077" width="0.0113%" height="15" fill="rgb(208,67,11)" fg:x="25571" fg:w="3"/><text x="96.2841%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="96.0341%" y="1061" width="0.0113%" height="15" fill="rgb(249,157,49)" fg:x="25571" fg:w="3"/><text x="96.2841%" y="1071.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (59 samples, 0.22%)</title><rect x="95.8501%" y="1125" width="0.2216%" height="15" fill="rgb(243,200,1)" fg:x="25522" fg:w="59"/><text x="96.1001%" y="1135.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (5 samples, 0.02%)</title><rect x="96.0529%" y="1109" width="0.0188%" height="15" fill="rgb(225,162,37)" fg:x="25576" fg:w="5"/><text x="96.3029%" y="1119.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (5 samples, 0.02%)</title><rect x="96.0529%" y="1093" width="0.0188%" height="15" fill="rgb(242,92,13)" fg:x="25576" fg:w="5"/><text x="96.3029%" y="1103.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (5 samples, 0.02%)</title><rect x="96.0529%" y="1077" width="0.0188%" height="15" fill="rgb(220,43,36)" fg:x="25576" fg:w="5"/><text x="96.3029%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (5 samples, 0.02%)</title><rect x="96.0529%" y="1061" width="0.0188%" height="15" fill="rgb(213,165,48)" fg:x="25576" fg:w="5"/><text x="96.3029%" y="1071.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (61 samples, 0.23%)</title><rect x="95.8501%" y="2053" width="0.2291%" height="15" fill="rgb(227,200,9)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="2063.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (61 samples, 0.23%)</title><rect x="95.8501%" y="2037" width="0.2291%" height="15" fill="rgb(221,222,28)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="2047.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (61 samples, 0.23%)</title><rect x="95.8501%" y="2021" width="0.2291%" height="15" fill="rgb(223,142,26)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="2031.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (61 samples, 0.23%)</title><rect x="95.8501%" y="2005" width="0.2291%" height="15" fill="rgb(243,46,9)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="2015.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (61 samples, 0.23%)</title><rect x="95.8501%" y="1989" width="0.2291%" height="15" fill="rgb(250,56,11)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1999.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (61 samples, 0.23%)</title><rect x="95.8501%" y="1973" width="0.2291%" height="15" fill="rgb(229,113,5)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1983.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (61 samples, 0.23%)</title><rect x="95.8501%" y="1957" width="0.2291%" height="15" fill="rgb(244,108,28)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1967.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (61 samples, 0.23%)</title><rect x="95.8501%" y="1941" width="0.2291%" height="15" fill="rgb(242,119,50)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1951.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61 samples, 0.23%)</title><rect x="95.8501%" y="1925" width="0.2291%" height="15" fill="rgb(224,164,23)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1935.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61 samples, 0.23%)</title><rect x="95.8501%" y="1909" width="0.2291%" height="15" fill="rgb(214,227,44)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1919.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (61 samples, 0.23%)</title><rect x="95.8501%" y="1893" width="0.2291%" height="15" fill="rgb(238,202,4)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1903.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure}} (61 samples, 0.23%)</title><rect x="95.8501%" y="1877" width="0.2291%" height="15" fill="rgb(213,190,30)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1887.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (61 samples, 0.23%)</title><rect x="95.8501%" y="1861" width="0.2291%" height="15" fill="rgb(239,15,2)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1871.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}} (61 samples, 0.23%)</title><rect x="95.8501%" y="1845" width="0.2291%" height="15" fill="rgb(249,229,4)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1855.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (61 samples, 0.23%)</title><rect x="95.8501%" y="1829" width="0.2291%" height="15" fill="rgb(239,75,44)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1839.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (61 samples, 0.23%)</title><rect x="95.8501%" y="1813" width="0.2291%" height="15" fill="rgb(251,206,23)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1823.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (61 samples, 0.23%)</title><rect x="95.8501%" y="1797" width="0.2291%" height="15" fill="rgb(215,208,0)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1807.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (61 samples, 0.23%)</title><rect x="95.8501%" y="1781" width="0.2291%" height="15" fill="rgb(230,75,50)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1791.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (61 samples, 0.23%)</title><rect x="95.8501%" y="1765" width="0.2291%" height="15" fill="rgb(246,180,39)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1775.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61 samples, 0.23%)</title><rect x="95.8501%" y="1749" width="0.2291%" height="15" fill="rgb(249,175,24)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1759.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61 samples, 0.23%)</title><rect x="95.8501%" y="1733" width="0.2291%" height="15" fill="rgb(247,176,22)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1743.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (61 samples, 0.23%)</title><rect x="95.8501%" y="1717" width="0.2291%" height="15" fill="rgb(241,100,24)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1727.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (61 samples, 0.23%)</title><rect x="95.8501%" y="1701" width="0.2291%" height="15" fill="rgb(233,4,35)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1711.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (61 samples, 0.23%)</title><rect x="95.8501%" y="1685" width="0.2291%" height="15" fill="rgb(211,164,46)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1695.50"></text></g><g><title>compile_demo_art::compile (61 samples, 0.23%)</title><rect x="95.8501%" y="1669" width="0.2291%" height="15" fill="rgb(242,99,53)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1679.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (61 samples, 0.23%)</title><rect x="95.8501%" y="1653" width="0.2291%" height="15" fill="rgb(243,45,33)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1663.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (61 samples, 0.23%)</title><rect x="95.8501%" y="1637" width="0.2291%" height="15" fill="rgb(217,55,21)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1647.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (61 samples, 0.23%)</title><rect x="95.8501%" y="1621" width="0.2291%" height="15" fill="rgb(245,145,46)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1631.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (61 samples, 0.23%)</title><rect x="95.8501%" y="1605" width="0.2291%" height="15" fill="rgb(215,112,45)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1615.50"></text></g><g><title>core::iter::adapters::try_process (61 samples, 0.23%)</title><rect x="95.8501%" y="1589" width="0.2291%" height="15" fill="rgb(228,104,16)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1599.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (61 samples, 0.23%)</title><rect x="95.8501%" y="1573" width="0.2291%" height="15" fill="rgb(239,186,38)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1583.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (61 samples, 0.23%)</title><rect x="95.8501%" y="1557" width="0.2291%" height="15" fill="rgb(228,38,35)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (61 samples, 0.23%)</title><rect x="95.8501%" y="1541" width="0.2291%" height="15" fill="rgb(251,42,40)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1551.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (61 samples, 0.23%)</title><rect x="95.8501%" y="1525" width="0.2291%" height="15" fill="rgb(210,51,19)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1535.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (61 samples, 0.23%)</title><rect x="95.8501%" y="1509" width="0.2291%" height="15" fill="rgb(236,94,42)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1519.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.23%)</title><rect x="95.8501%" y="1493" width="0.2291%" height="15" fill="rgb(239,167,16)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1503.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (61 samples, 0.23%)</title><rect x="95.8501%" y="1477" width="0.2291%" height="15" fill="rgb(252,175,31)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (61 samples, 0.23%)</title><rect x="95.8501%" y="1461" width="0.2291%" height="15" fill="rgb(206,166,30)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1471.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (61 samples, 0.23%)</title><rect x="95.8501%" y="1445" width="0.2291%" height="15" fill="rgb(206,209,37)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1455.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (61 samples, 0.23%)</title><rect x="95.8501%" y="1429" width="0.2291%" height="15" fill="rgb(226,91,4)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1439.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (61 samples, 0.23%)</title><rect x="95.8501%" y="1413" width="0.2291%" height="15" fill="rgb(222,167,0)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1423.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (61 samples, 0.23%)</title><rect x="95.8501%" y="1397" width="0.2291%" height="15" fill="rgb(211,70,14)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1407.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (61 samples, 0.23%)</title><rect x="95.8501%" y="1381" width="0.2291%" height="15" fill="rgb(214,84,42)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1391.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (61 samples, 0.23%)</title><rect x="95.8501%" y="1365" width="0.2291%" height="15" fill="rgb(235,157,37)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1375.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (61 samples, 0.23%)</title><rect x="95.8501%" y="1349" width="0.2291%" height="15" fill="rgb(225,13,6)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1359.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (61 samples, 0.23%)</title><rect x="95.8501%" y="1333" width="0.2291%" height="15" fill="rgb(205,202,1)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1343.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (61 samples, 0.23%)</title><rect x="95.8501%" y="1317" width="0.2291%" height="15" fill="rgb(232,195,26)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1327.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (61 samples, 0.23%)</title><rect x="95.8501%" y="1301" width="0.2291%" height="15" fill="rgb(208,102,26)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1311.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (61 samples, 0.23%)</title><rect x="95.8501%" y="1285" width="0.2291%" height="15" fill="rgb(215,41,39)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1295.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (61 samples, 0.23%)</title><rect x="95.8501%" y="1269" width="0.2291%" height="15" fill="rgb(247,139,11)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1279.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (61 samples, 0.23%)</title><rect x="95.8501%" y="1253" width="0.2291%" height="15" fill="rgb(243,99,6)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1263.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (61 samples, 0.23%)</title><rect x="95.8501%" y="1237" width="0.2291%" height="15" fill="rgb(230,168,48)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1247.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (61 samples, 0.23%)</title><rect x="95.8501%" y="1221" width="0.2291%" height="15" fill="rgb(238,227,13)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1231.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (61 samples, 0.23%)</title><rect x="95.8501%" y="1205" width="0.2291%" height="15" fill="rgb(209,109,13)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1215.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (61 samples, 0.23%)</title><rect x="95.8501%" y="1189" width="0.2291%" height="15" fill="rgb(228,195,1)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1199.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (61 samples, 0.23%)</title><rect x="95.8501%" y="1173" width="0.2291%" height="15" fill="rgb(230,218,0)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1183.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (61 samples, 0.23%)</title><rect x="95.8501%" y="1157" width="0.2291%" height="15" fill="rgb(206,1,45)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1167.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (61 samples, 0.23%)</title><rect x="95.8501%" y="1141" width="0.2291%" height="15" fill="rgb(209,124,26)" fg:x="25522" fg:w="61"/><text x="96.1001%" y="1151.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (5 samples, 0.02%)</title><rect x="96.0792%" y="1285" width="0.0188%" height="15" fill="rgb(220,59,8)" fg:x="25583" fg:w="5"/><text x="96.3292%" y="1295.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (5 samples, 0.02%)</title><rect x="96.0792%" y="1269" width="0.0188%" height="15" fill="rgb(251,41,37)" fg:x="25583" fg:w="5"/><text x="96.3292%" y="1279.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (5 samples, 0.02%)</title><rect x="96.0792%" y="1253" width="0.0188%" height="15" fill="rgb(239,152,21)" fg:x="25583" fg:w="5"/><text x="96.3292%" y="1263.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (7 samples, 0.03%)</title><rect x="96.1017%" y="1269" width="0.0263%" height="15" fill="rgb(226,32,1)" fg:x="25589" fg:w="7"/><text x="96.3517%" y="1279.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (7 samples, 0.03%)</title><rect x="96.1017%" y="1253" width="0.0263%" height="15" fill="rgb(230,154,36)" fg:x="25589" fg:w="7"/><text x="96.3517%" y="1263.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (7 samples, 0.03%)</title><rect x="96.1017%" y="1237" width="0.0263%" height="15" fill="rgb(208,228,43)" fg:x="25589" fg:w="7"/><text x="96.3517%" y="1247.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (10 samples, 0.04%)</title><rect x="96.0979%" y="1285" width="0.0376%" height="15" fill="rgb(214,203,3)" fg:x="25588" fg:w="10"/><text x="96.3479%" y="1295.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.01%)</title><rect x="96.1355%" y="1285" width="0.0113%" height="15" fill="rgb(207,149,29)" fg:x="25598" fg:w="3"/><text x="96.3855%" y="1295.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.01%)</title><rect x="96.1355%" y="1269" width="0.0113%" height="15" fill="rgb(250,105,7)" fg:x="25598" fg:w="3"/><text x="96.3855%" y="1279.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="96.1355%" y="1253" width="0.0113%" height="15" fill="rgb(232,222,16)" fg:x="25598" fg:w="3"/><text x="96.3855%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.01%)</title><rect x="96.1355%" y="1237" width="0.0113%" height="15" fill="rgb(209,32,24)" fg:x="25598" fg:w="3"/><text x="96.3855%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.01%)</title><rect x="96.1355%" y="1221" width="0.0113%" height="15" fill="rgb(225,13,6)" fg:x="25598" fg:w="3"/><text x="96.3855%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.01%)</title><rect x="96.1355%" y="1205" width="0.0113%" height="15" fill="rgb(245,226,26)" fg:x="25598" fg:w="3"/><text x="96.3855%" y="1215.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.0792%" y="1301" width="0.0789%" height="15" fill="rgb(229,178,27)" fg:x="25583" fg:w="21"/><text x="96.3292%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (22 samples, 0.08%)</title><rect x="96.0792%" y="1989" width="0.0826%" height="15" fill="rgb(205,227,28)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1999.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (22 samples, 0.08%)</title><rect x="96.0792%" y="1973" width="0.0826%" height="15" fill="rgb(210,191,45)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1983.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (22 samples, 0.08%)</title><rect x="96.0792%" y="1957" width="0.0826%" height="15" fill="rgb(206,124,16)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1967.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (22 samples, 0.08%)</title><rect x="96.0792%" y="1941" width="0.0826%" height="15" fill="rgb(210,162,0)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1951.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 0.08%)</title><rect x="96.0792%" y="1925" width="0.0826%" height="15" fill="rgb(211,54,38)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1935.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 0.08%)</title><rect x="96.0792%" y="1909" width="0.0826%" height="15" fill="rgb(248,192,3)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1919.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (22 samples, 0.08%)</title><rect x="96.0792%" y="1893" width="0.0826%" height="15" fill="rgb(233,187,18)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1903.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (22 samples, 0.08%)</title><rect x="96.0792%" y="1877" width="0.0826%" height="15" fill="rgb(237,208,14)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1887.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (22 samples, 0.08%)</title><rect x="96.0792%" y="1861" width="0.0826%" height="15" fill="rgb(212,77,1)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1871.50"></text></g><g><title>compile_demo_art::compile (22 samples, 0.08%)</title><rect x="96.0792%" y="1845" width="0.0826%" height="15" fill="rgb(210,163,22)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1855.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (22 samples, 0.08%)</title><rect x="96.0792%" y="1829" width="0.0826%" height="15" fill="rgb(250,58,28)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1839.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (22 samples, 0.08%)</title><rect x="96.0792%" y="1813" width="0.0826%" height="15" fill="rgb(254,28,41)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1823.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (22 samples, 0.08%)</title><rect x="96.0792%" y="1797" width="0.0826%" height="15" fill="rgb(237,162,36)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1807.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (22 samples, 0.08%)</title><rect x="96.0792%" y="1781" width="0.0826%" height="15" fill="rgb(232,56,6)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1791.50"></text></g><g><title>core::iter::adapters::try_process (22 samples, 0.08%)</title><rect x="96.0792%" y="1765" width="0.0826%" height="15" fill="rgb(216,127,42)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1775.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (22 samples, 0.08%)</title><rect x="96.0792%" y="1749" width="0.0826%" height="15" fill="rgb(241,69,15)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1759.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (22 samples, 0.08%)</title><rect x="96.0792%" y="1733" width="0.0826%" height="15" fill="rgb(227,180,19)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1743.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (22 samples, 0.08%)</title><rect x="96.0792%" y="1717" width="0.0826%" height="15" fill="rgb(231,188,29)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1727.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (22 samples, 0.08%)</title><rect x="96.0792%" y="1701" width="0.0826%" height="15" fill="rgb(224,176,27)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1711.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (22 samples, 0.08%)</title><rect x="96.0792%" y="1685" width="0.0826%" height="15" fill="rgb(249,214,19)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1695.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.08%)</title><rect x="96.0792%" y="1669" width="0.0826%" height="15" fill="rgb(240,0,4)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1679.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (22 samples, 0.08%)</title><rect x="96.0792%" y="1653" width="0.0826%" height="15" fill="rgb(233,28,41)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1663.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22 samples, 0.08%)</title><rect x="96.0792%" y="1637" width="0.0826%" height="15" fill="rgb(220,90,51)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1647.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22 samples, 0.08%)</title><rect x="96.0792%" y="1621" width="0.0826%" height="15" fill="rgb(250,52,22)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22 samples, 0.08%)</title><rect x="96.0792%" y="1605" width="0.0826%" height="15" fill="rgb(231,152,36)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1615.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22 samples, 0.08%)</title><rect x="96.0792%" y="1589" width="0.0826%" height="15" fill="rgb(250,218,4)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1599.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (22 samples, 0.08%)</title><rect x="96.0792%" y="1573" width="0.0826%" height="15" fill="rgb(210,38,21)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1583.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (22 samples, 0.08%)</title><rect x="96.0792%" y="1557" width="0.0826%" height="15" fill="rgb(230,75,13)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1567.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (22 samples, 0.08%)</title><rect x="96.0792%" y="1541" width="0.0826%" height="15" fill="rgb(250,68,53)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (22 samples, 0.08%)</title><rect x="96.0792%" y="1525" width="0.0826%" height="15" fill="rgb(250,210,16)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1535.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (22 samples, 0.08%)</title><rect x="96.0792%" y="1509" width="0.0826%" height="15" fill="rgb(240,132,5)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1519.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (22 samples, 0.08%)</title><rect x="96.0792%" y="1493" width="0.0826%" height="15" fill="rgb(222,148,48)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1503.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (22 samples, 0.08%)</title><rect x="96.0792%" y="1477" width="0.0826%" height="15" fill="rgb(247,181,24)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1487.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (22 samples, 0.08%)</title><rect x="96.0792%" y="1461" width="0.0826%" height="15" fill="rgb(239,5,31)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1471.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (22 samples, 0.08%)</title><rect x="96.0792%" y="1445" width="0.0826%" height="15" fill="rgb(241,152,38)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1455.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (22 samples, 0.08%)</title><rect x="96.0792%" y="1429" width="0.0826%" height="15" fill="rgb(246,200,37)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1439.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (22 samples, 0.08%)</title><rect x="96.0792%" y="1413" width="0.0826%" height="15" fill="rgb(243,210,26)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1423.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (22 samples, 0.08%)</title><rect x="96.0792%" y="1397" width="0.0826%" height="15" fill="rgb(222,22,22)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1407.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (22 samples, 0.08%)</title><rect x="96.0792%" y="1381" width="0.0826%" height="15" fill="rgb(208,129,28)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1391.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (22 samples, 0.08%)</title><rect x="96.0792%" y="1365" width="0.0826%" height="15" fill="rgb(254,169,28)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1375.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (22 samples, 0.08%)</title><rect x="96.0792%" y="1349" width="0.0826%" height="15" fill="rgb(225,45,17)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1359.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (22 samples, 0.08%)</title><rect x="96.0792%" y="1333" width="0.0826%" height="15" fill="rgb(232,199,2)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1343.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (22 samples, 0.08%)</title><rect x="96.0792%" y="1317" width="0.0826%" height="15" fill="rgb(235,33,40)" fg:x="25583" fg:w="22"/><text x="96.3292%" y="1327.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (86 samples, 0.32%)</title><rect x="95.8501%" y="2101" width="0.3230%" height="15" fill="rgb(237,89,50)" fg:x="25522" fg:w="86"/><text x="96.1001%" y="2111.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (86 samples, 0.32%)</title><rect x="95.8501%" y="2085" width="0.3230%" height="15" fill="rgb(238,126,5)" fg:x="25522" fg:w="86"/><text x="96.1001%" y="2095.50"></text></g><g><title>criterion::routine::Routine::profile (86 samples, 0.32%)</title><rect x="95.8501%" y="2069" width="0.3230%" height="15" fill="rgb(247,214,42)" fg:x="25522" fg:w="86"/><text x="96.1001%" y="2079.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (25 samples, 0.09%)</title><rect x="96.0792%" y="2053" width="0.0939%" height="15" fill="rgb(238,60,45)" fg:x="25583" fg:w="25"/><text x="96.3292%" y="2063.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (25 samples, 0.09%)</title><rect x="96.0792%" y="2037" width="0.0939%" height="15" fill="rgb(225,69,44)" fg:x="25583" fg:w="25"/><text x="96.3292%" y="2047.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}} (25 samples, 0.09%)</title><rect x="96.0792%" y="2021" width="0.0939%" height="15" fill="rgb(241,13,44)" fg:x="25583" fg:w="25"/><text x="96.3292%" y="2031.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (25 samples, 0.09%)</title><rect x="96.0792%" y="2005" width="0.0939%" height="15" fill="rgb(227,121,22)" fg:x="25583" fg:w="25"/><text x="96.3292%" y="2015.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (3 samples, 0.01%)</title><rect x="96.1618%" y="1989" width="0.0113%" height="15" fill="rgb(231,160,23)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1999.50"></text></g><g><title>compile_demo_art::compile (3 samples, 0.01%)</title><rect x="96.1618%" y="1973" width="0.0113%" height="15" fill="rgb(250,179,43)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1983.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (3 samples, 0.01%)</title><rect x="96.1618%" y="1957" width="0.0113%" height="15" fill="rgb(233,54,46)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1967.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (3 samples, 0.01%)</title><rect x="96.1618%" y="1941" width="0.0113%" height="15" fill="rgb(247,120,42)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1951.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.01%)</title><rect x="96.1618%" y="1925" width="0.0113%" height="15" fill="rgb(221,219,12)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1935.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="96.1618%" y="1909" width="0.0113%" height="15" fill="rgb(211,126,8)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1919.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.01%)</title><rect x="96.1618%" y="1893" width="0.0113%" height="15" fill="rgb(218,154,33)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1903.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (3 samples, 0.01%)</title><rect x="96.1618%" y="1877" width="0.0113%" height="15" fill="rgb(212,199,16)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1887.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.01%)</title><rect x="96.1618%" y="1861" width="0.0113%" height="15" fill="rgb(236,215,46)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1871.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="96.1618%" y="1845" width="0.0113%" height="15" fill="rgb(232,32,22)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1855.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="96.1618%" y="1829" width="0.0113%" height="15" fill="rgb(234,79,15)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1839.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="96.1618%" y="1813" width="0.0113%" height="15" fill="rgb(235,187,47)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1823.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="96.1618%" y="1797" width="0.0113%" height="15" fill="rgb(244,69,37)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1807.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (3 samples, 0.01%)</title><rect x="96.1618%" y="1781" width="0.0113%" height="15" fill="rgb(249,140,25)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1791.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.01%)</title><rect x="96.1618%" y="1765" width="0.0113%" height="15" fill="rgb(213,69,8)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1775.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.01%)</title><rect x="96.1618%" y="1749" width="0.0113%" height="15" fill="rgb(220,136,2)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1759.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.01%)</title><rect x="96.1618%" y="1733" width="0.0113%" height="15" fill="rgb(237,50,36)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1743.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.01%)</title><rect x="96.1618%" y="1717" width="0.0113%" height="15" fill="rgb(226,18,11)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1727.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (3 samples, 0.01%)</title><rect x="96.1618%" y="1701" width="0.0113%" height="15" fill="rgb(243,156,2)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1711.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (3 samples, 0.01%)</title><rect x="96.1618%" y="1685" width="0.0113%" height="15" fill="rgb(218,8,34)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1695.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (3 samples, 0.01%)</title><rect x="96.1618%" y="1669" width="0.0113%" height="15" fill="rgb(250,94,35)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1679.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (3 samples, 0.01%)</title><rect x="96.1618%" y="1653" width="0.0113%" height="15" fill="rgb(229,127,21)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1663.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (3 samples, 0.01%)</title><rect x="96.1618%" y="1637" width="0.0113%" height="15" fill="rgb(234,49,5)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1647.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (3 samples, 0.01%)</title><rect x="96.1618%" y="1621" width="0.0113%" height="15" fill="rgb(248,12,16)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1631.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="96.1618%" y="1605" width="0.0113%" height="15" fill="rgb(208,220,31)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1615.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="96.1618%" y="1589" width="0.0113%" height="15" fill="rgb(243,184,0)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1599.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="96.1618%" y="1573" width="0.0113%" height="15" fill="rgb(217,38,21)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1583.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="96.1618%" y="1557" width="0.0113%" height="15" fill="rgb(239,120,45)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1567.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="96.1618%" y="1541" width="0.0113%" height="15" fill="rgb(235,33,2)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="96.1618%" y="1525" width="0.0113%" height="15" fill="rgb(249,161,5)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1535.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="96.1618%" y="1509" width="0.0113%" height="15" fill="rgb(250,165,48)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1519.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="96.1618%" y="1493" width="0.0113%" height="15" fill="rgb(221,23,45)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1503.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="96.1618%" y="1477" width="0.0113%" height="15" fill="rgb(217,108,46)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1487.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="96.1618%" y="1461" width="0.0113%" height="15" fill="rgb(254,26,35)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1471.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="96.1618%" y="1445" width="0.0113%" height="15" fill="rgb(218,223,28)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1455.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="96.1618%" y="1429" width="0.0113%" height="15" fill="rgb(242,27,47)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1439.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="96.1618%" y="1413" width="0.0113%" height="15" fill="rgb(218,39,35)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1423.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (3 samples, 0.01%)</title><rect x="96.1618%" y="1397" width="0.0113%" height="15" fill="rgb(232,127,16)" fg:x="25605" fg:w="3"/><text x="96.4118%" y="1407.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (20 samples, 0.08%)</title><rect x="96.1843%" y="1109" width="0.0751%" height="15" fill="rgb(231,219,51)" fg:x="25611" fg:w="20"/><text x="96.4343%" y="1119.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (20 samples, 0.08%)</title><rect x="96.1843%" y="1093" width="0.0751%" height="15" fill="rgb(217,220,46)" fg:x="25611" fg:w="20"/><text x="96.4343%" y="1103.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (20 samples, 0.08%)</title><rect x="96.1843%" y="1077" width="0.0751%" height="15" fill="rgb(230,75,1)" fg:x="25611" fg:w="20"/><text x="96.4343%" y="1087.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (6 samples, 0.02%)</title><rect x="96.2369%" y="1061" width="0.0225%" height="15" fill="rgb(218,2,8)" fg:x="25625" fg:w="6"/><text x="96.4869%" y="1071.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (6 samples, 0.02%)</title><rect x="96.2369%" y="1045" width="0.0225%" height="15" fill="rgb(206,111,30)" fg:x="25625" fg:w="6"/><text x="96.4869%" y="1055.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.01%)</title><rect x="96.2594%" y="1109" width="0.0113%" height="15" fill="rgb(209,135,6)" fg:x="25631" fg:w="3"/><text x="96.5094%" y="1119.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.01%)</title><rect x="96.2594%" y="1093" width="0.0113%" height="15" fill="rgb(205,169,10)" fg:x="25631" fg:w="3"/><text x="96.5094%" y="1103.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="96.2594%" y="1077" width="0.0113%" height="15" fill="rgb(212,204,38)" fg:x="25631" fg:w="3"/><text x="96.5094%" y="1087.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.02%)</title><rect x="96.2782%" y="1045" width="0.0150%" height="15" fill="rgb(205,199,14)" fg:x="25636" fg:w="4"/><text x="96.5282%" y="1055.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.02%)</title><rect x="96.2782%" y="1029" width="0.0150%" height="15" fill="rgb(212,4,6)" fg:x="25636" fg:w="4"/><text x="96.5282%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.01%)</title><rect x="96.2820%" y="1013" width="0.0113%" height="15" fill="rgb(250,15,10)" fg:x="25637" fg:w="3"/><text x="96.5320%" y="1023.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="96.2820%" y="997" width="0.0113%" height="15" fill="rgb(212,49,51)" fg:x="25637" fg:w="3"/><text x="96.5320%" y="1007.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.01%)</title><rect x="96.2820%" y="981" width="0.0113%" height="15" fill="rgb(235,21,9)" fg:x="25637" fg:w="3"/><text x="96.5320%" y="991.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.01%)</title><rect x="96.2820%" y="965" width="0.0113%" height="15" fill="rgb(251,31,32)" fg:x="25637" fg:w="3"/><text x="96.5320%" y="975.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="96.2820%" y="949" width="0.0113%" height="15" fill="rgb(246,23,9)" fg:x="25637" fg:w="3"/><text x="96.5320%" y="959.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="96.2820%" y="933" width="0.0113%" height="15" fill="rgb(225,216,14)" fg:x="25637" fg:w="3"/><text x="96.5320%" y="943.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="96.2820%" y="917" width="0.0113%" height="15" fill="rgb(215,200,26)" fg:x="25637" fg:w="3"/><text x="96.5320%" y="927.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (7 samples, 0.03%)</title><rect x="96.2707%" y="1109" width="0.0263%" height="15" fill="rgb(237,130,47)" fg:x="25634" fg:w="7"/><text x="96.5207%" y="1119.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (7 samples, 0.03%)</title><rect x="96.2707%" y="1093" width="0.0263%" height="15" fill="rgb(247,74,14)" fg:x="25634" fg:w="7"/><text x="96.5207%" y="1103.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (7 samples, 0.03%)</title><rect x="96.2707%" y="1077" width="0.0263%" height="15" fill="rgb(254,97,46)" fg:x="25634" fg:w="7"/><text x="96.5207%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 0.03%)</title><rect x="96.2707%" y="1061" width="0.0263%" height="15" fill="rgb(234,191,1)" fg:x="25634" fg:w="7"/><text x="96.5207%" y="1071.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (3 samples, 0.01%)</title><rect x="96.2970%" y="1109" width="0.0113%" height="15" fill="rgb(215,165,14)" fg:x="25641" fg:w="3"/><text x="96.5470%" y="1119.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="96.2970%" y="1093" width="0.0113%" height="15" fill="rgb(230,182,6)" fg:x="25641" fg:w="3"/><text x="96.5470%" y="1103.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="96.2970%" y="1077" width="0.0113%" height="15" fill="rgb(210,127,39)" fg:x="25641" fg:w="3"/><text x="96.5470%" y="1087.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (40 samples, 0.15%)</title><rect x="96.1731%" y="2085" width="0.1502%" height="15" fill="rgb(223,212,51)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="2095.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (40 samples, 0.15%)</title><rect x="96.1731%" y="2069" width="0.1502%" height="15" fill="rgb(226,176,43)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="2079.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (40 samples, 0.15%)</title><rect x="96.1731%" y="2053" width="0.1502%" height="15" fill="rgb(222,155,4)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="2063.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 0.15%)</title><rect x="96.1731%" y="2037" width="0.1502%" height="15" fill="rgb(215,149,7)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="2047.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (40 samples, 0.15%)</title><rect x="96.1731%" y="2021" width="0.1502%" height="15" fill="rgb(252,199,23)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="2031.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (40 samples, 0.15%)</title><rect x="96.1731%" y="2005" width="0.1502%" height="15" fill="rgb(245,52,29)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="2015.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (40 samples, 0.15%)</title><rect x="96.1731%" y="1989" width="0.1502%" height="15" fill="rgb(221,228,19)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1999.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (40 samples, 0.15%)</title><rect x="96.1731%" y="1973" width="0.1502%" height="15" fill="rgb(253,101,6)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1983.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (40 samples, 0.15%)</title><rect x="96.1731%" y="1957" width="0.1502%" height="15" fill="rgb(211,130,8)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1967.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (40 samples, 0.15%)</title><rect x="96.1731%" y="1941" width="0.1502%" height="15" fill="rgb(238,37,53)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1951.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (40 samples, 0.15%)</title><rect x="96.1731%" y="1925" width="0.1502%" height="15" fill="rgb(235,145,5)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1935.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure}} (40 samples, 0.15%)</title><rect x="96.1731%" y="1909" width="0.1502%" height="15" fill="rgb(244,12,43)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1919.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (40 samples, 0.15%)</title><rect x="96.1731%" y="1893" width="0.1502%" height="15" fill="rgb(246,195,24)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1903.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}} (40 samples, 0.15%)</title><rect x="96.1731%" y="1877" width="0.1502%" height="15" fill="rgb(235,163,6)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1887.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (40 samples, 0.15%)</title><rect x="96.1731%" y="1861" width="0.1502%" height="15" fill="rgb(236,218,17)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1871.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (40 samples, 0.15%)</title><rect x="96.1731%" y="1845" width="0.1502%" height="15" fill="rgb(235,12,38)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1855.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (40 samples, 0.15%)</title><rect x="96.1731%" y="1829" width="0.1502%" height="15" fill="rgb(225,195,33)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1839.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (40 samples, 0.15%)</title><rect x="96.1731%" y="1813" width="0.1502%" height="15" fill="rgb(238,54,35)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1823.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (40 samples, 0.15%)</title><rect x="96.1731%" y="1797" width="0.1502%" height="15" fill="rgb(238,33,7)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1807.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (40 samples, 0.15%)</title><rect x="96.1731%" y="1781" width="0.1502%" height="15" fill="rgb(245,5,14)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1791.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (40 samples, 0.15%)</title><rect x="96.1731%" y="1765" width="0.1502%" height="15" fill="rgb(251,95,31)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1775.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (40 samples, 0.15%)</title><rect x="96.1731%" y="1749" width="0.1502%" height="15" fill="rgb(222,15,46)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1759.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (40 samples, 0.15%)</title><rect x="96.1731%" y="1733" width="0.1502%" height="15" fill="rgb(226,182,24)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1743.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (40 samples, 0.15%)</title><rect x="96.1731%" y="1717" width="0.1502%" height="15" fill="rgb(229,105,41)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1727.50"></text></g><g><title>compile_demo_art::compile (40 samples, 0.15%)</title><rect x="96.1731%" y="1701" width="0.1502%" height="15" fill="rgb(216,99,53)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1711.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (40 samples, 0.15%)</title><rect x="96.1731%" y="1685" width="0.1502%" height="15" fill="rgb(253,26,20)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1695.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (40 samples, 0.15%)</title><rect x="96.1731%" y="1669" width="0.1502%" height="15" fill="rgb(249,155,28)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1679.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (40 samples, 0.15%)</title><rect x="96.1731%" y="1653" width="0.1502%" height="15" fill="rgb(241,221,2)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1663.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (40 samples, 0.15%)</title><rect x="96.1731%" y="1637" width="0.1502%" height="15" fill="rgb(219,124,6)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1647.50"></text></g><g><title>core::iter::adapters::try_process (40 samples, 0.15%)</title><rect x="96.1731%" y="1621" width="0.1502%" height="15" fill="rgb(233,37,6)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1631.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (40 samples, 0.15%)</title><rect x="96.1731%" y="1605" width="0.1502%" height="15" fill="rgb(238,20,14)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1615.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (40 samples, 0.15%)</title><rect x="96.1731%" y="1589" width="0.1502%" height="15" fill="rgb(232,106,27)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1599.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (40 samples, 0.15%)</title><rect x="96.1731%" y="1573" width="0.1502%" height="15" fill="rgb(246,157,24)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1583.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (40 samples, 0.15%)</title><rect x="96.1731%" y="1557" width="0.1502%" height="15" fill="rgb(214,153,10)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (40 samples, 0.15%)</title><rect x="96.1731%" y="1541" width="0.1502%" height="15" fill="rgb(212,94,6)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1551.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.15%)</title><rect x="96.1731%" y="1525" width="0.1502%" height="15" fill="rgb(254,25,27)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1535.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (40 samples, 0.15%)</title><rect x="96.1731%" y="1509" width="0.1502%" height="15" fill="rgb(250,43,52)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1519.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (40 samples, 0.15%)</title><rect x="96.1731%" y="1493" width="0.1502%" height="15" fill="rgb(221,226,40)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1503.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (40 samples, 0.15%)</title><rect x="96.1731%" y="1477" width="0.1502%" height="15" fill="rgb(235,162,34)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (40 samples, 0.15%)</title><rect x="96.1731%" y="1461" width="0.1502%" height="15" fill="rgb(239,24,26)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1471.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (40 samples, 0.15%)</title><rect x="96.1731%" y="1445" width="0.1502%" height="15" fill="rgb(244,226,11)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1455.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (40 samples, 0.15%)</title><rect x="96.1731%" y="1429" width="0.1502%" height="15" fill="rgb(225,23,10)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1439.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (40 samples, 0.15%)</title><rect x="96.1731%" y="1413" width="0.1502%" height="15" fill="rgb(249,125,6)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1423.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (40 samples, 0.15%)</title><rect x="96.1731%" y="1397" width="0.1502%" height="15" fill="rgb(246,212,12)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1407.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (40 samples, 0.15%)</title><rect x="96.1731%" y="1381" width="0.1502%" height="15" fill="rgb(230,43,32)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1391.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (40 samples, 0.15%)</title><rect x="96.1731%" y="1365" width="0.1502%" height="15" fill="rgb(210,95,23)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1375.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (40 samples, 0.15%)</title><rect x="96.1731%" y="1349" width="0.1502%" height="15" fill="rgb(229,103,33)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1359.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (40 samples, 0.15%)</title><rect x="96.1731%" y="1333" width="0.1502%" height="15" fill="rgb(222,104,27)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1343.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (40 samples, 0.15%)</title><rect x="96.1731%" y="1317" width="0.1502%" height="15" fill="rgb(239,221,23)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1327.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (40 samples, 0.15%)</title><rect x="96.1731%" y="1301" width="0.1502%" height="15" fill="rgb(222,98,21)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1311.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (40 samples, 0.15%)</title><rect x="96.1731%" y="1285" width="0.1502%" height="15" fill="rgb(231,101,20)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1295.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (40 samples, 0.15%)</title><rect x="96.1731%" y="1269" width="0.1502%" height="15" fill="rgb(215,150,22)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1279.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (40 samples, 0.15%)</title><rect x="96.1731%" y="1253" width="0.1502%" height="15" fill="rgb(248,3,34)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1263.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (40 samples, 0.15%)</title><rect x="96.1731%" y="1237" width="0.1502%" height="15" fill="rgb(220,141,21)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1247.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (40 samples, 0.15%)</title><rect x="96.1731%" y="1221" width="0.1502%" height="15" fill="rgb(223,41,48)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1231.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (40 samples, 0.15%)</title><rect x="96.1731%" y="1205" width="0.1502%" height="15" fill="rgb(247,12,5)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1215.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (40 samples, 0.15%)</title><rect x="96.1731%" y="1189" width="0.1502%" height="15" fill="rgb(206,173,10)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1199.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (40 samples, 0.15%)</title><rect x="96.1731%" y="1173" width="0.1502%" height="15" fill="rgb(233,214,37)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1183.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (40 samples, 0.15%)</title><rect x="96.1731%" y="1157" width="0.1502%" height="15" fill="rgb(238,86,43)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1167.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (40 samples, 0.15%)</title><rect x="96.1731%" y="1141" width="0.1502%" height="15" fill="rgb(212,182,8)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1151.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (40 samples, 0.15%)</title><rect x="96.1731%" y="1125" width="0.1502%" height="15" fill="rgb(240,91,47)" fg:x="25608" fg:w="40"/><text x="96.4231%" y="1135.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (4 samples, 0.02%)</title><rect x="96.3083%" y="1109" width="0.0150%" height="15" fill="rgb(209,138,26)" fg:x="25644" fg:w="4"/><text x="96.5583%" y="1119.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (4 samples, 0.02%)</title><rect x="96.3083%" y="1093" width="0.0150%" height="15" fill="rgb(231,163,20)" fg:x="25644" fg:w="4"/><text x="96.5583%" y="1103.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (4 samples, 0.02%)</title><rect x="96.3083%" y="1077" width="0.0150%" height="15" fill="rgb(214,91,54)" fg:x="25644" fg:w="4"/><text x="96.5583%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (4 samples, 0.02%)</title><rect x="96.3083%" y="1061" width="0.0150%" height="15" fill="rgb(230,32,17)" fg:x="25644" fg:w="4"/><text x="96.5583%" y="1071.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (13 samples, 0.05%)</title><rect x="96.3270%" y="1285" width="0.0488%" height="15" fill="rgb(231,34,34)" fg:x="25649" fg:w="13"/><text x="96.5770%" y="1295.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (13 samples, 0.05%)</title><rect x="96.3270%" y="1269" width="0.0488%" height="15" fill="rgb(224,228,27)" fg:x="25649" fg:w="13"/><text x="96.5770%" y="1279.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (13 samples, 0.05%)</title><rect x="96.3270%" y="1253" width="0.0488%" height="15" fill="rgb(219,35,40)" fg:x="25649" fg:w="13"/><text x="96.5770%" y="1263.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (3 samples, 0.01%)</title><rect x="96.3646%" y="1237" width="0.0113%" height="15" fill="rgb(234,42,8)" fg:x="25659" fg:w="3"/><text x="96.6146%" y="1247.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="96.3646%" y="1221" width="0.0113%" height="15" fill="rgb(226,75,22)" fg:x="25659" fg:w="3"/><text x="96.6146%" y="1231.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.01%)</title><rect x="96.3796%" y="1285" width="0.0113%" height="15" fill="rgb(242,203,28)" fg:x="25663" fg:w="3"/><text x="96.6296%" y="1295.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.01%)</title><rect x="96.3796%" y="1269" width="0.0113%" height="15" fill="rgb(221,3,9)" fg:x="25663" fg:w="3"/><text x="96.6296%" y="1279.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.01%)</title><rect x="96.3796%" y="1253" width="0.0113%" height="15" fill="rgb(214,34,31)" fg:x="25663" fg:w="3"/><text x="96.6296%" y="1263.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="96.3796%" y="1237" width="0.0113%" height="15" fill="rgb(252,119,15)" fg:x="25663" fg:w="3"/><text x="96.6296%" y="1247.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (21 samples, 0.08%)</title><rect x="96.3233%" y="2021" width="0.0789%" height="15" fill="rgb(244,224,31)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="2031.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (21 samples, 0.08%)</title><rect x="96.3233%" y="2005" width="0.0789%" height="15" fill="rgb(215,8,51)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="2015.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (21 samples, 0.08%)</title><rect x="96.3233%" y="1989" width="0.0789%" height="15" fill="rgb(207,24,1)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1999.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (21 samples, 0.08%)</title><rect x="96.3233%" y="1973" width="0.0789%" height="15" fill="rgb(245,90,0)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1983.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.08%)</title><rect x="96.3233%" y="1957" width="0.0789%" height="15" fill="rgb(246,43,48)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1967.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.08%)</title><rect x="96.3233%" y="1941" width="0.0789%" height="15" fill="rgb(252,218,10)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1951.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (21 samples, 0.08%)</title><rect x="96.3233%" y="1925" width="0.0789%" height="15" fill="rgb(231,24,35)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1935.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (21 samples, 0.08%)</title><rect x="96.3233%" y="1909" width="0.0789%" height="15" fill="rgb(225,66,19)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1919.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}}::_{{closure}} (21 samples, 0.08%)</title><rect x="96.3233%" y="1893" width="0.0789%" height="15" fill="rgb(214,96,51)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1903.50"></text></g><g><title>compile_demo_art::compile (21 samples, 0.08%)</title><rect x="96.3233%" y="1877" width="0.0789%" height="15" fill="rgb(251,151,47)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1887.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (21 samples, 0.08%)</title><rect x="96.3233%" y="1861" width="0.0789%" height="15" fill="rgb(236,79,14)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1871.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (21 samples, 0.08%)</title><rect x="96.3233%" y="1845" width="0.0789%" height="15" fill="rgb(210,205,11)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1855.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (21 samples, 0.08%)</title><rect x="96.3233%" y="1829" width="0.0789%" height="15" fill="rgb(233,142,53)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1839.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (21 samples, 0.08%)</title><rect x="96.3233%" y="1813" width="0.0789%" height="15" fill="rgb(212,116,48)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1823.50"></text></g><g><title>core::iter::adapters::try_process (21 samples, 0.08%)</title><rect x="96.3233%" y="1797" width="0.0789%" height="15" fill="rgb(234,55,33)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1807.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (21 samples, 0.08%)</title><rect x="96.3233%" y="1781" width="0.0789%" height="15" fill="rgb(253,92,27)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1791.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (21 samples, 0.08%)</title><rect x="96.3233%" y="1765" width="0.0789%" height="15" fill="rgb(220,7,35)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1775.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (21 samples, 0.08%)</title><rect x="96.3233%" y="1749" width="0.0789%" height="15" fill="rgb(246,124,6)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1759.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (21 samples, 0.08%)</title><rect x="96.3233%" y="1733" width="0.0789%" height="15" fill="rgb(212,111,51)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1743.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (21 samples, 0.08%)</title><rect x="96.3233%" y="1717" width="0.0789%" height="15" fill="rgb(253,116,7)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1727.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.08%)</title><rect x="96.3233%" y="1701" width="0.0789%" height="15" fill="rgb(213,145,18)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1711.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (21 samples, 0.08%)</title><rect x="96.3233%" y="1685" width="0.0789%" height="15" fill="rgb(219,149,7)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1695.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 0.08%)</title><rect x="96.3233%" y="1669" width="0.0789%" height="15" fill="rgb(225,156,20)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1679.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 0.08%)</title><rect x="96.3233%" y="1653" width="0.0789%" height="15" fill="rgb(211,98,19)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1663.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 0.08%)</title><rect x="96.3233%" y="1637" width="0.0789%" height="15" fill="rgb(231,192,31)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1647.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 0.08%)</title><rect x="96.3233%" y="1621" width="0.0789%" height="15" fill="rgb(249,95,19)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1631.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (21 samples, 0.08%)</title><rect x="96.3233%" y="1605" width="0.0789%" height="15" fill="rgb(247,101,36)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1615.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (21 samples, 0.08%)</title><rect x="96.3233%" y="1589" width="0.0789%" height="15" fill="rgb(221,45,43)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1599.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (21 samples, 0.08%)</title><rect x="96.3233%" y="1573" width="0.0789%" height="15" fill="rgb(220,42,1)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1583.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (21 samples, 0.08%)</title><rect x="96.3233%" y="1557" width="0.0789%" height="15" fill="rgb(236,19,24)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1567.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (21 samples, 0.08%)</title><rect x="96.3233%" y="1541" width="0.0789%" height="15" fill="rgb(225,192,6)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (21 samples, 0.08%)</title><rect x="96.3233%" y="1525" width="0.0789%" height="15" fill="rgb(242,30,19)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1535.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.3233%" y="1509" width="0.0789%" height="15" fill="rgb(240,36,6)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1519.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.3233%" y="1493" width="0.0789%" height="15" fill="rgb(246,40,28)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1503.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.3233%" y="1477" width="0.0789%" height="15" fill="rgb(225,155,33)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1487.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.3233%" y="1461" width="0.0789%" height="15" fill="rgb(240,65,18)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1471.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.3233%" y="1445" width="0.0789%" height="15" fill="rgb(217,0,48)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1455.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.3233%" y="1429" width="0.0789%" height="15" fill="rgb(217,80,15)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1439.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.3233%" y="1413" width="0.0789%" height="15" fill="rgb(253,43,51)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1423.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.3233%" y="1397" width="0.0789%" height="15" fill="rgb(246,60,4)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1407.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.3233%" y="1381" width="0.0789%" height="15" fill="rgb(230,40,54)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1391.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.3233%" y="1365" width="0.0789%" height="15" fill="rgb(208,20,44)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1375.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.3233%" y="1349" width="0.0789%" height="15" fill="rgb(230,22,22)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1359.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.3233%" y="1333" width="0.0789%" height="15" fill="rgb(207,57,4)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1343.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.3233%" y="1317" width="0.0789%" height="15" fill="rgb(242,130,33)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1327.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (21 samples, 0.08%)</title><rect x="96.3233%" y="1301" width="0.0789%" height="15" fill="rgb(218,66,43)" fg:x="25648" fg:w="21"/><text x="96.5733%" y="1311.50"></text></g><g><title>criterion::routine::Routine::profile (62 samples, 0.23%)</title><rect x="96.1731%" y="2101" width="0.2328%" height="15" fill="rgb(236,105,16)" fg:x="25608" fg:w="62"/><text x="96.4231%" y="2111.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (22 samples, 0.08%)</title><rect x="96.3233%" y="2085" width="0.0826%" height="15" fill="rgb(230,46,15)" fg:x="25648" fg:w="22"/><text x="96.5733%" y="2095.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (22 samples, 0.08%)</title><rect x="96.3233%" y="2069" width="0.0826%" height="15" fill="rgb(251,172,40)" fg:x="25648" fg:w="22"/><text x="96.5733%" y="2079.50"></text></g><g><title>compile_demo_art::compile_to_proto::_{{closure}} (22 samples, 0.08%)</title><rect x="96.3233%" y="2053" width="0.0826%" height="15" fill="rgb(225,217,32)" fg:x="25648" fg:w="22"/><text x="96.5733%" y="2063.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (22 samples, 0.08%)</title><rect x="96.3233%" y="2037" width="0.0826%" height="15" fill="rgb(243,10,29)" fg:x="25648" fg:w="22"/><text x="96.5733%" y="2047.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (27 samples, 0.10%)</title><rect x="96.4097%" y="1429" width="0.1014%" height="15" fill="rgb(207,102,10)" fg:x="25671" fg:w="27"/><text x="96.6597%" y="1439.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (27 samples, 0.10%)</title><rect x="96.4097%" y="1413" width="0.1014%" height="15" fill="rgb(241,125,5)" fg:x="25671" fg:w="27"/><text x="96.6597%" y="1423.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (27 samples, 0.10%)</title><rect x="96.4097%" y="1397" width="0.1014%" height="15" fill="rgb(230,125,29)" fg:x="25671" fg:w="27"/><text x="96.6597%" y="1407.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (5 samples, 0.02%)</title><rect x="96.4923%" y="1381" width="0.0188%" height="15" fill="rgb(223,65,44)" fg:x="25693" fg:w="5"/><text x="96.7423%" y="1391.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (5 samples, 0.02%)</title><rect x="96.4923%" y="1365" width="0.0188%" height="15" fill="rgb(224,188,28)" fg:x="25693" fg:w="5"/><text x="96.7423%" y="1375.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 0.02%)</title><rect x="96.5148%" y="1429" width="0.0188%" height="15" fill="rgb(254,197,27)" fg:x="25699" fg:w="5"/><text x="96.7648%" y="1439.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 0.02%)</title><rect x="96.5148%" y="1413" width="0.0188%" height="15" fill="rgb(220,200,25)" fg:x="25699" fg:w="5"/><text x="96.7648%" y="1423.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.02%)</title><rect x="96.5148%" y="1397" width="0.0188%" height="15" fill="rgb(239,225,54)" fg:x="25699" fg:w="5"/><text x="96.7648%" y="1407.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.01%)</title><rect x="96.5223%" y="1381" width="0.0113%" height="15" fill="rgb(211,59,40)" fg:x="25701" fg:w="3"/><text x="96.7723%" y="1391.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.01%)</title><rect x="96.5223%" y="1365" width="0.0113%" height="15" fill="rgb(213,176,46)" fg:x="25701" fg:w="3"/><text x="96.7723%" y="1375.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.01%)</title><rect x="96.5223%" y="1349" width="0.0113%" height="15" fill="rgb(226,99,4)" fg:x="25701" fg:w="3"/><text x="96.7723%" y="1359.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (5 samples, 0.02%)</title><rect x="96.5336%" y="1429" width="0.0188%" height="15" fill="rgb(239,203,43)" fg:x="25704" fg:w="5"/><text x="96.7836%" y="1439.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (5 samples, 0.02%)</title><rect x="96.5336%" y="1413" width="0.0188%" height="15" fill="rgb(246,1,45)" fg:x="25704" fg:w="5"/><text x="96.7836%" y="1423.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (5 samples, 0.02%)</title><rect x="96.5336%" y="1397" width="0.0188%" height="15" fill="rgb(231,42,52)" fg:x="25704" fg:w="5"/><text x="96.7836%" y="1407.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.02%)</title><rect x="96.5336%" y="1381" width="0.0188%" height="15" fill="rgb(240,13,50)" fg:x="25704" fg:w="5"/><text x="96.7836%" y="1391.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (44 samples, 0.17%)</title><rect x="96.4097%" y="1445" width="0.1652%" height="15" fill="rgb(225,81,14)" fg:x="25671" fg:w="44"/><text x="96.6597%" y="1455.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (5 samples, 0.02%)</title><rect x="96.5561%" y="1429" width="0.0188%" height="15" fill="rgb(216,182,23)" fg:x="25710" fg:w="5"/><text x="96.8061%" y="1439.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (5 samples, 0.02%)</title><rect x="96.5561%" y="1413" width="0.0188%" height="15" fill="rgb(233,137,19)" fg:x="25710" fg:w="5"/><text x="96.8061%" y="1423.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (5 samples, 0.02%)</title><rect x="96.5561%" y="1397" width="0.0188%" height="15" fill="rgb(242,61,46)" fg:x="25710" fg:w="5"/><text x="96.8061%" y="1407.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (5 samples, 0.02%)</title><rect x="96.5561%" y="1381" width="0.0188%" height="15" fill="rgb(221,168,51)" fg:x="25710" fg:w="5"/><text x="96.8061%" y="1391.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (4 samples, 0.02%)</title><rect x="96.5599%" y="1365" width="0.0150%" height="15" fill="rgb(238,48,15)" fg:x="25711" fg:w="4"/><text x="96.8099%" y="1375.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (47 samples, 0.18%)</title><rect x="96.4059%" y="2101" width="0.1765%" height="15" fill="rgb(216,13,16)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="2111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (47 samples, 0.18%)</title><rect x="96.4059%" y="2085" width="0.1765%" height="15" fill="rgb(223,185,34)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="2095.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (47 samples, 0.18%)</title><rect x="96.4059%" y="2069" width="0.1765%" height="15" fill="rgb(228,94,42)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="2079.50"></text></g><g><title>core::iter::adapters::try_process (47 samples, 0.18%)</title><rect x="96.4059%" y="2053" width="0.1765%" height="15" fill="rgb(218,166,43)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="2063.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (47 samples, 0.18%)</title><rect x="96.4059%" y="2037" width="0.1765%" height="15" fill="rgb(232,30,50)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="2047.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (47 samples, 0.18%)</title><rect x="96.4059%" y="2021" width="0.1765%" height="15" fill="rgb(245,206,45)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="2031.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (47 samples, 0.18%)</title><rect x="96.4059%" y="2005" width="0.1765%" height="15" fill="rgb(220,56,22)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="2015.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (47 samples, 0.18%)</title><rect x="96.4059%" y="1989" width="0.1765%" height="15" fill="rgb(239,129,38)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1999.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (47 samples, 0.18%)</title><rect x="96.4059%" y="1973" width="0.1765%" height="15" fill="rgb(207,68,41)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1983.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.18%)</title><rect x="96.4059%" y="1957" width="0.1765%" height="15" fill="rgb(221,21,7)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1967.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (47 samples, 0.18%)</title><rect x="96.4059%" y="1941" width="0.1765%" height="15" fill="rgb(240,33,25)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1951.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (47 samples, 0.18%)</title><rect x="96.4059%" y="1925" width="0.1765%" height="15" fill="rgb(242,119,10)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1935.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (47 samples, 0.18%)</title><rect x="96.4059%" y="1909" width="0.1765%" height="15" fill="rgb(214,149,40)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1919.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (47 samples, 0.18%)</title><rect x="96.4059%" y="1893" width="0.1765%" height="15" fill="rgb(228,25,36)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1903.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (47 samples, 0.18%)</title><rect x="96.4059%" y="1877" width="0.1765%" height="15" fill="rgb(222,59,15)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1887.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (47 samples, 0.18%)</title><rect x="96.4059%" y="1861" width="0.1765%" height="15" fill="rgb(218,170,0)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1871.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (47 samples, 0.18%)</title><rect x="96.4059%" y="1845" width="0.1765%" height="15" fill="rgb(232,173,23)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1855.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (47 samples, 0.18%)</title><rect x="96.4059%" y="1829" width="0.1765%" height="15" fill="rgb(218,116,1)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1839.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (47 samples, 0.18%)</title><rect x="96.4059%" y="1813" width="0.1765%" height="15" fill="rgb(207,34,4)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1823.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (47 samples, 0.18%)</title><rect x="96.4059%" y="1797" width="0.1765%" height="15" fill="rgb(229,54,52)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1807.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (47 samples, 0.18%)</title><rect x="96.4059%" y="1781" width="0.1765%" height="15" fill="rgb(211,86,23)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1791.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1765" width="0.1765%" height="15" fill="rgb(254,153,34)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1775.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1749" width="0.1765%" height="15" fill="rgb(219,220,14)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1759.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1733" width="0.1765%" height="15" fill="rgb(247,8,26)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1743.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1717" width="0.1765%" height="15" fill="rgb(213,129,42)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1727.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1701" width="0.1765%" height="15" fill="rgb(225,95,41)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1711.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1685" width="0.1765%" height="15" fill="rgb(215,134,24)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1695.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1669" width="0.1765%" height="15" fill="rgb(235,23,54)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1679.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1653" width="0.1765%" height="15" fill="rgb(229,96,31)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1663.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1637" width="0.1765%" height="15" fill="rgb(206,111,12)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1647.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1621" width="0.1765%" height="15" fill="rgb(222,177,8)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1631.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1605" width="0.1765%" height="15" fill="rgb(251,36,52)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1615.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1589" width="0.1765%" height="15" fill="rgb(216,182,29)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1599.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1573" width="0.1765%" height="15" fill="rgb(241,145,50)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1583.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1557" width="0.1765%" height="15" fill="rgb(231,71,35)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1567.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1541" width="0.1765%" height="15" fill="rgb(218,22,17)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1525" width="0.1765%" height="15" fill="rgb(225,227,6)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1535.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1509" width="0.1765%" height="15" fill="rgb(224,204,17)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1519.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1493" width="0.1765%" height="15" fill="rgb(227,61,28)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1503.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1477" width="0.1765%" height="15" fill="rgb(242,148,23)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1487.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (47 samples, 0.18%)</title><rect x="96.4059%" y="1461" width="0.1765%" height="15" fill="rgb(237,105,33)" fg:x="25670" fg:w="47"/><text x="96.6559%" y="1471.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (34 samples, 0.13%)</title><rect x="96.5862%" y="1429" width="0.1277%" height="15" fill="rgb(238,218,40)" fg:x="25718" fg:w="34"/><text x="96.8362%" y="1439.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (34 samples, 0.13%)</title><rect x="96.5862%" y="1413" width="0.1277%" height="15" fill="rgb(209,126,11)" fg:x="25718" fg:w="34"/><text x="96.8362%" y="1423.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (34 samples, 0.13%)</title><rect x="96.5862%" y="1397" width="0.1277%" height="15" fill="rgb(245,90,11)" fg:x="25718" fg:w="34"/><text x="96.8362%" y="1407.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (9 samples, 0.03%)</title><rect x="96.6801%" y="1381" width="0.0338%" height="15" fill="rgb(211,195,10)" fg:x="25743" fg:w="9"/><text x="96.9301%" y="1391.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (9 samples, 0.03%)</title><rect x="96.6801%" y="1365" width="0.0338%" height="15" fill="rgb(231,45,45)" fg:x="25743" fg:w="9"/><text x="96.9301%" y="1375.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.01%)</title><rect x="96.7139%" y="1429" width="0.0113%" height="15" fill="rgb(246,100,43)" fg:x="25752" fg:w="3"/><text x="96.9639%" y="1439.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.01%)</title><rect x="96.7139%" y="1413" width="0.0113%" height="15" fill="rgb(241,193,8)" fg:x="25752" fg:w="3"/><text x="96.9639%" y="1423.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="96.7139%" y="1397" width="0.0113%" height="15" fill="rgb(208,76,19)" fg:x="25752" fg:w="3"/><text x="96.9639%" y="1407.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (7 samples, 0.03%)</title><rect x="96.7251%" y="1429" width="0.0263%" height="15" fill="rgb(223,69,40)" fg:x="25755" fg:w="7"/><text x="96.9751%" y="1439.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (7 samples, 0.03%)</title><rect x="96.7251%" y="1413" width="0.0263%" height="15" fill="rgb(207,120,39)" fg:x="25755" fg:w="7"/><text x="96.9751%" y="1423.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (7 samples, 0.03%)</title><rect x="96.7251%" y="1397" width="0.0263%" height="15" fill="rgb(212,209,28)" fg:x="25755" fg:w="7"/><text x="96.9751%" y="1407.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 0.03%)</title><rect x="96.7251%" y="1381" width="0.0263%" height="15" fill="rgb(246,82,29)" fg:x="25755" fg:w="7"/><text x="96.9751%" y="1391.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="96.7402%" y="1365" width="0.0113%" height="15" fill="rgb(239,6,40)" fg:x="25759" fg:w="3"/><text x="96.9902%" y="1375.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="96.7402%" y="1349" width="0.0113%" height="15" fill="rgb(228,181,35)" fg:x="25759" fg:w="3"/><text x="96.9902%" y="1359.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (50 samples, 0.19%)</title><rect x="96.5824%" y="1445" width="0.1878%" height="15" fill="rgb(238,151,2)" fg:x="25717" fg:w="50"/><text x="96.8324%" y="1455.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (5 samples, 0.02%)</title><rect x="96.7514%" y="1429" width="0.0188%" height="15" fill="rgb(236,94,18)" fg:x="25762" fg:w="5"/><text x="97.0014%" y="1439.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (5 samples, 0.02%)</title><rect x="96.7514%" y="1413" width="0.0188%" height="15" fill="rgb(208,38,14)" fg:x="25762" fg:w="5"/><text x="97.0014%" y="1423.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (5 samples, 0.02%)</title><rect x="96.7514%" y="1397" width="0.0188%" height="15" fill="rgb(234,215,27)" fg:x="25762" fg:w="5"/><text x="97.0014%" y="1407.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (5 samples, 0.02%)</title><rect x="96.7514%" y="1381" width="0.0188%" height="15" fill="rgb(254,211,53)" fg:x="25762" fg:w="5"/><text x="97.0014%" y="1391.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (3 samples, 0.01%)</title><rect x="96.7589%" y="1365" width="0.0113%" height="15" fill="rgb(216,175,11)" fg:x="25764" fg:w="3"/><text x="97.0089%" y="1375.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile_single (52 samples, 0.20%)</title><rect x="96.5824%" y="2101" width="0.1953%" height="15" fill="rgb(246,179,26)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="2111.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile (52 samples, 0.20%)</title><rect x="96.5824%" y="2085" width="0.1953%" height="15" fill="rgb(249,19,52)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="2095.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (52 samples, 0.20%)</title><rect x="96.5824%" y="2069" width="0.1953%" height="15" fill="rgb(230,42,52)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="2079.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (52 samples, 0.20%)</title><rect x="96.5824%" y="2053" width="0.1953%" height="15" fill="rgb(221,171,0)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="2063.50"></text></g><g><title>core::iter::adapters::try_process (52 samples, 0.20%)</title><rect x="96.5824%" y="2037" width="0.1953%" height="15" fill="rgb(222,177,40)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="2047.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (52 samples, 0.20%)</title><rect x="96.5824%" y="2021" width="0.1953%" height="15" fill="rgb(247,34,16)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="2031.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (52 samples, 0.20%)</title><rect x="96.5824%" y="2005" width="0.1953%" height="15" fill="rgb(213,217,37)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="2015.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (52 samples, 0.20%)</title><rect x="96.5824%" y="1989" width="0.1953%" height="15" fill="rgb(231,189,24)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1999.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (52 samples, 0.20%)</title><rect x="96.5824%" y="1973" width="0.1953%" height="15" fill="rgb(214,22,9)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1983.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (52 samples, 0.20%)</title><rect x="96.5824%" y="1957" width="0.1953%" height="15" fill="rgb(212,70,22)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1967.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.20%)</title><rect x="96.5824%" y="1941" width="0.1953%" height="15" fill="rgb(249,64,51)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1951.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (52 samples, 0.20%)</title><rect x="96.5824%" y="1925" width="0.1953%" height="15" fill="rgb(249,148,20)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1935.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (52 samples, 0.20%)</title><rect x="96.5824%" y="1909" width="0.1953%" height="15" fill="rgb(246,46,48)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1919.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (52 samples, 0.20%)</title><rect x="96.5824%" y="1893" width="0.1953%" height="15" fill="rgb(217,34,48)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1903.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (52 samples, 0.20%)</title><rect x="96.5824%" y="1877" width="0.1953%" height="15" fill="rgb(222,45,26)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1887.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (52 samples, 0.20%)</title><rect x="96.5824%" y="1861" width="0.1953%" height="15" fill="rgb(230,201,36)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1871.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (52 samples, 0.20%)</title><rect x="96.5824%" y="1845" width="0.1953%" height="15" fill="rgb(217,30,43)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1855.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (52 samples, 0.20%)</title><rect x="96.5824%" y="1829" width="0.1953%" height="15" fill="rgb(230,197,40)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1839.50"></text></g><g><title>graph_craft::graphene_compiler::Compiler::compile::_{{closure}} (52 samples, 0.20%)</title><rect x="96.5824%" y="1813" width="0.1953%" height="15" fill="rgb(239,181,18)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1823.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (52 samples, 0.20%)</title><rect x="96.5824%" y="1797" width="0.1953%" height="15" fill="rgb(222,60,39)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1807.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (52 samples, 0.20%)</title><rect x="96.5824%" y="1781" width="0.1953%" height="15" fill="rgb(210,60,22)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1791.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (52 samples, 0.20%)</title><rect x="96.5824%" y="1765" width="0.1953%" height="15" fill="rgb(239,213,48)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1775.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1749" width="0.1953%" height="15" fill="rgb(253,214,23)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1759.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1733" width="0.1953%" height="15" fill="rgb(211,98,45)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1743.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1717" width="0.1953%" height="15" fill="rgb(239,130,44)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1727.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1701" width="0.1953%" height="15" fill="rgb(222,181,35)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1711.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1685" width="0.1953%" height="15" fill="rgb(219,219,49)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1695.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1669" width="0.1953%" height="15" fill="rgb(227,161,51)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1679.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1653" width="0.1953%" height="15" fill="rgb(239,112,27)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1663.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1637" width="0.1953%" height="15" fill="rgb(248,122,18)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1647.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1621" width="0.1953%" height="15" fill="rgb(245,130,23)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1631.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1605" width="0.1953%" height="15" fill="rgb(211,225,28)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1615.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1589" width="0.1953%" height="15" fill="rgb(242,105,44)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1599.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1573" width="0.1953%" height="15" fill="rgb(216,183,46)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1583.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1557" width="0.1953%" height="15" fill="rgb(227,112,9)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1567.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1541" width="0.1953%" height="15" fill="rgb(244,21,0)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1525" width="0.1953%" height="15" fill="rgb(236,185,14)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1535.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1509" width="0.1953%" height="15" fill="rgb(236,170,30)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1519.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1493" width="0.1953%" height="15" fill="rgb(209,198,51)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1503.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1477" width="0.1953%" height="15" fill="rgb(205,171,26)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1487.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (52 samples, 0.20%)</title><rect x="96.5824%" y="1461" width="0.1953%" height="15" fill="rgb(246,41,49)" fg:x="25717" fg:w="52"/><text x="96.8324%" y="1471.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (17 samples, 0.06%)</title><rect x="96.7777%" y="1461" width="0.0638%" height="15" fill="rgb(240,229,12)" fg:x="25769" fg:w="17"/><text x="97.0277%" y="1471.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (17 samples, 0.06%)</title><rect x="96.7777%" y="1445" width="0.0638%" height="15" fill="rgb(212,8,54)" fg:x="25769" fg:w="17"/><text x="97.0277%" y="1455.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (17 samples, 0.06%)</title><rect x="96.7777%" y="1429" width="0.0638%" height="15" fill="rgb(230,114,13)" fg:x="25769" fg:w="17"/><text x="97.0277%" y="1439.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (5 samples, 0.02%)</title><rect x="96.8228%" y="1413" width="0.0188%" height="15" fill="rgb(229,130,28)" fg:x="25781" fg:w="5"/><text x="97.0728%" y="1423.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (5 samples, 0.02%)</title><rect x="96.8228%" y="1397" width="0.0188%" height="15" fill="rgb(206,139,15)" fg:x="25781" fg:w="5"/><text x="97.0728%" y="1407.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (13 samples, 0.05%)</title><rect x="96.8416%" y="1445" width="0.0488%" height="15" fill="rgb(241,188,35)" fg:x="25786" fg:w="13"/><text x="97.0916%" y="1455.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (13 samples, 0.05%)</title><rect x="96.8416%" y="1429" width="0.0488%" height="15" fill="rgb(208,224,26)" fg:x="25786" fg:w="13"/><text x="97.0916%" y="1439.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (13 samples, 0.05%)</title><rect x="96.8416%" y="1413" width="0.0488%" height="15" fill="rgb(251,131,28)" fg:x="25786" fg:w="13"/><text x="97.0916%" y="1423.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (5 samples, 0.02%)</title><rect x="96.9505%" y="1381" width="0.0188%" height="15" fill="rgb(208,153,1)" fg:x="25815" fg:w="5"/><text x="97.2005%" y="1391.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (5 samples, 0.02%)</title><rect x="96.9505%" y="1365" width="0.0188%" height="15" fill="rgb(234,33,36)" fg:x="25815" fg:w="5"/><text x="97.2005%" y="1375.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (22 samples, 0.08%)</title><rect x="96.8904%" y="1429" width="0.0826%" height="15" fill="rgb(246,42,29)" fg:x="25799" fg:w="22"/><text x="97.1404%" y="1439.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (22 samples, 0.08%)</title><rect x="96.8904%" y="1413" width="0.0826%" height="15" fill="rgb(251,114,16)" fg:x="25799" fg:w="22"/><text x="97.1404%" y="1423.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (22 samples, 0.08%)</title><rect x="96.8904%" y="1397" width="0.0826%" height="15" fill="rgb(233,13,38)" fg:x="25799" fg:w="22"/><text x="97.1404%" y="1407.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (12 samples, 0.05%)</title><rect x="96.9730%" y="1413" width="0.0451%" height="15" fill="rgb(247,120,19)" fg:x="25821" fg:w="12"/><text x="97.2230%" y="1423.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (12 samples, 0.05%)</title><rect x="96.9730%" y="1397" width="0.0451%" height="15" fill="rgb(205,11,16)" fg:x="25821" fg:w="12"/><text x="97.2230%" y="1407.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (12 samples, 0.05%)</title><rect x="96.9730%" y="1381" width="0.0451%" height="15" fill="rgb(228,185,19)" fg:x="25821" fg:w="12"/><text x="97.2230%" y="1391.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (7 samples, 0.03%)</title><rect x="97.0181%" y="1397" width="0.0263%" height="15" fill="rgb(239,88,52)" fg:x="25833" fg:w="7"/><text x="97.2681%" y="1407.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (7 samples, 0.03%)</title><rect x="97.0181%" y="1381" width="0.0263%" height="15" fill="rgb(219,23,1)" fg:x="25833" fg:w="7"/><text x="97.2681%" y="1391.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (7 samples, 0.03%)</title><rect x="97.0181%" y="1365" width="0.0263%" height="15" fill="rgb(253,177,16)" fg:x="25833" fg:w="7"/><text x="97.2681%" y="1375.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (11 samples, 0.04%)</title><rect x="97.0481%" y="1381" width="0.0413%" height="15" fill="rgb(225,150,40)" fg:x="25841" fg:w="11"/><text x="97.2981%" y="1391.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (11 samples, 0.04%)</title><rect x="97.0481%" y="1365" width="0.0413%" height="15" fill="rgb(208,108,30)" fg:x="25841" fg:w="11"/><text x="97.2981%" y="1375.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (11 samples, 0.04%)</title><rect x="97.0481%" y="1349" width="0.0413%" height="15" fill="rgb(214,122,4)" fg:x="25841" fg:w="11"/><text x="97.2981%" y="1359.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (3 samples, 0.01%)</title><rect x="97.0782%" y="1333" width="0.0113%" height="15" fill="rgb(229,74,37)" fg:x="25849" fg:w="3"/><text x="97.3282%" y="1343.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="97.0782%" y="1317" width="0.0113%" height="15" fill="rgb(233,61,41)" fg:x="25849" fg:w="3"/><text x="97.3282%" y="1327.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (13 samples, 0.05%)</title><rect x="97.0932%" y="1365" width="0.0488%" height="15" fill="rgb(238,191,5)" fg:x="25853" fg:w="13"/><text x="97.3432%" y="1375.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (13 samples, 0.05%)</title><rect x="97.0932%" y="1349" width="0.0488%" height="15" fill="rgb(233,78,24)" fg:x="25853" fg:w="13"/><text x="97.3432%" y="1359.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (13 samples, 0.05%)</title><rect x="97.0932%" y="1333" width="0.0488%" height="15" fill="rgb(211,142,8)" fg:x="25853" fg:w="13"/><text x="97.3432%" y="1343.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (3 samples, 0.01%)</title><rect x="97.1307%" y="1317" width="0.0113%" height="15" fill="rgb(253,38,53)" fg:x="25863" fg:w="3"/><text x="97.3807%" y="1327.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="97.1307%" y="1301" width="0.0113%" height="15" fill="rgb(234,63,51)" fg:x="25863" fg:w="3"/><text x="97.3807%" y="1311.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (9 samples, 0.03%)</title><rect x="97.1420%" y="1349" width="0.0338%" height="15" fill="rgb(205,23,31)" fg:x="25866" fg:w="9"/><text x="97.3920%" y="1359.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (9 samples, 0.03%)</title><rect x="97.1420%" y="1333" width="0.0338%" height="15" fill="rgb(210,184,50)" fg:x="25866" fg:w="9"/><text x="97.3920%" y="1343.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (9 samples, 0.03%)</title><rect x="97.1420%" y="1317" width="0.0338%" height="15" fill="rgb(222,112,26)" fg:x="25866" fg:w="9"/><text x="97.3920%" y="1327.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (7 samples, 0.03%)</title><rect x="97.1796%" y="1333" width="0.0263%" height="15" fill="rgb(250,98,18)" fg:x="25876" fg:w="7"/><text x="97.4296%" y="1343.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (7 samples, 0.03%)</title><rect x="97.1796%" y="1317" width="0.0263%" height="15" fill="rgb(250,34,12)" fg:x="25876" fg:w="7"/><text x="97.4296%" y="1327.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (7 samples, 0.03%)</title><rect x="97.1796%" y="1301" width="0.0263%" height="15" fill="rgb(236,141,30)" fg:x="25876" fg:w="7"/><text x="97.4296%" y="1311.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (8 samples, 0.03%)</title><rect x="97.2058%" y="1317" width="0.0300%" height="15" fill="rgb(246,134,38)" fg:x="25883" fg:w="8"/><text x="97.4558%" y="1327.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (8 samples, 0.03%)</title><rect x="97.2058%" y="1301" width="0.0300%" height="15" fill="rgb(240,114,4)" fg:x="25883" fg:w="8"/><text x="97.4558%" y="1311.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (8 samples, 0.03%)</title><rect x="97.2058%" y="1285" width="0.0300%" height="15" fill="rgb(243,113,39)" fg:x="25883" fg:w="8"/><text x="97.4558%" y="1295.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (17 samples, 0.06%)</title><rect x="97.2359%" y="1301" width="0.0638%" height="15" fill="rgb(239,215,4)" fg:x="25891" fg:w="17"/><text x="97.4859%" y="1311.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (17 samples, 0.06%)</title><rect x="97.2359%" y="1285" width="0.0638%" height="15" fill="rgb(236,229,45)" fg:x="25891" fg:w="17"/><text x="97.4859%" y="1295.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (17 samples, 0.06%)</title><rect x="97.2359%" y="1269" width="0.0638%" height="15" fill="rgb(242,2,6)" fg:x="25891" fg:w="17"/><text x="97.4859%" y="1279.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (4 samples, 0.02%)</title><rect x="97.2847%" y="1253" width="0.0150%" height="15" fill="rgb(239,108,21)" fg:x="25904" fg:w="4"/><text x="97.5347%" y="1263.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (4 samples, 0.02%)</title><rect x="97.2847%" y="1237" width="0.0150%" height="15" fill="rgb(215,168,34)" fg:x="25904" fg:w="4"/><text x="97.5347%" y="1247.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (5 samples, 0.02%)</title><rect x="97.2997%" y="1285" width="0.0188%" height="15" fill="rgb(238,31,17)" fg:x="25908" fg:w="5"/><text x="97.5497%" y="1295.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (5 samples, 0.02%)</title><rect x="97.2997%" y="1269" width="0.0188%" height="15" fill="rgb(220,133,11)" fg:x="25908" fg:w="5"/><text x="97.5497%" y="1279.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (5 samples, 0.02%)</title><rect x="97.2997%" y="1253" width="0.0188%" height="15" fill="rgb(212,158,23)" fg:x="25908" fg:w="5"/><text x="97.5497%" y="1263.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (13 samples, 0.05%)</title><rect x="97.3185%" y="1269" width="0.0488%" height="15" fill="rgb(223,172,7)" fg:x="25913" fg:w="13"/><text x="97.5685%" y="1279.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (13 samples, 0.05%)</title><rect x="97.3185%" y="1253" width="0.0488%" height="15" fill="rgb(244,3,52)" fg:x="25913" fg:w="13"/><text x="97.5685%" y="1263.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (13 samples, 0.05%)</title><rect x="97.3185%" y="1237" width="0.0488%" height="15" fill="rgb(207,69,27)" fg:x="25913" fg:w="13"/><text x="97.5685%" y="1247.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (9 samples, 0.03%)</title><rect x="97.3673%" y="1253" width="0.0338%" height="15" fill="rgb(213,136,45)" fg:x="25926" fg:w="9"/><text x="97.6173%" y="1263.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (9 samples, 0.03%)</title><rect x="97.3673%" y="1237" width="0.0338%" height="15" fill="rgb(218,79,17)" fg:x="25926" fg:w="9"/><text x="97.6173%" y="1247.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (9 samples, 0.03%)</title><rect x="97.3673%" y="1221" width="0.0338%" height="15" fill="rgb(216,106,36)" fg:x="25926" fg:w="9"/><text x="97.6173%" y="1231.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (6 samples, 0.02%)</title><rect x="97.4011%" y="1237" width="0.0225%" height="15" fill="rgb(251,27,45)" fg:x="25935" fg:w="6"/><text x="97.6511%" y="1247.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (6 samples, 0.02%)</title><rect x="97.4011%" y="1221" width="0.0225%" height="15" fill="rgb(232,21,34)" fg:x="25935" fg:w="6"/><text x="97.6511%" y="1231.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (6 samples, 0.02%)</title><rect x="97.4011%" y="1205" width="0.0225%" height="15" fill="rgb(249,191,16)" fg:x="25935" fg:w="6"/><text x="97.6511%" y="1215.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (15 samples, 0.06%)</title><rect x="97.4237%" y="1221" width="0.0563%" height="15" fill="rgb(224,88,20)" fg:x="25941" fg:w="15"/><text x="97.6737%" y="1231.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (15 samples, 0.06%)</title><rect x="97.4237%" y="1205" width="0.0563%" height="15" fill="rgb(237,93,27)" fg:x="25941" fg:w="15"/><text x="97.6737%" y="1215.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (15 samples, 0.06%)</title><rect x="97.4237%" y="1189" width="0.0563%" height="15" fill="rgb(226,198,48)" fg:x="25941" fg:w="15"/><text x="97.6737%" y="1199.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (16 samples, 0.06%)</title><rect x="97.4237%" y="1237" width="0.0601%" height="15" fill="rgb(207,162,53)" fg:x="25941" fg:w="16"/><text x="97.6737%" y="1247.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (28 samples, 0.11%)</title><rect x="97.4011%" y="1253" width="0.1052%" height="15" fill="rgb(207,169,9)" fg:x="25935" fg:w="28"/><text x="97.6511%" y="1263.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (3 samples, 0.01%)</title><rect x="97.4950%" y="1237" width="0.0113%" height="15" fill="rgb(224,166,46)" fg:x="25960" fg:w="3"/><text x="97.7450%" y="1247.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (3 samples, 0.01%)</title><rect x="97.4950%" y="1221" width="0.0113%" height="15" fill="rgb(233,26,6)" fg:x="25960" fg:w="3"/><text x="97.7450%" y="1231.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (3 samples, 0.01%)</title><rect x="97.4950%" y="1205" width="0.0113%" height="15" fill="rgb(218,106,45)" fg:x="25960" fg:w="3"/><text x="97.7450%" y="1215.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (3 samples, 0.01%)</title><rect x="97.4950%" y="1189" width="0.0113%" height="15" fill="rgb(240,217,4)" fg:x="25960" fg:w="3"/><text x="97.7450%" y="1199.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="97.4950%" y="1173" width="0.0113%" height="15" fill="rgb(246,171,10)" fg:x="25960" fg:w="3"/><text x="97.7450%" y="1183.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (39 samples, 0.15%)</title><rect x="97.3673%" y="1269" width="0.1465%" height="15" fill="rgb(223,197,30)" fg:x="25926" fg:w="39"/><text x="97.6173%" y="1279.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (54 samples, 0.20%)</title><rect x="97.3185%" y="1285" width="0.2028%" height="15" fill="rgb(207,92,16)" fg:x="25913" fg:w="54"/><text x="97.5685%" y="1295.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (64 samples, 0.24%)</title><rect x="97.2997%" y="1301" width="0.2404%" height="15" fill="rgb(211,6,44)" fg:x="25908" fg:w="64"/><text x="97.5497%" y="1311.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (86 samples, 0.32%)</title><rect x="97.2359%" y="1317" width="0.3230%" height="15" fill="rgb(219,139,2)" fg:x="25891" fg:w="86"/><text x="97.4859%" y="1327.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (96 samples, 0.36%)</title><rect x="97.2058%" y="1333" width="0.3605%" height="15" fill="rgb(224,103,21)" fg:x="25883" fg:w="96"/><text x="97.4558%" y="1343.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (106 samples, 0.40%)</title><rect x="97.1758%" y="1349" width="0.3981%" height="15" fill="rgb(254,110,48)" fg:x="25875" fg:w="106"/><text x="97.4258%" y="1359.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (117 samples, 0.44%)</title><rect x="97.1420%" y="1365" width="0.4394%" height="15" fill="rgb(212,88,19)" fg:x="25866" fg:w="117"/><text x="97.3920%" y="1375.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (145 samples, 0.54%)</title><rect x="97.0444%" y="1397" width="0.5446%" height="15" fill="rgb(248,103,6)" fg:x="25840" fg:w="145"/><text x="97.2944%" y="1407.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (133 samples, 0.50%)</title><rect x="97.0894%" y="1381" width="0.4995%" height="15" fill="rgb(214,53,46)" fg:x="25852" fg:w="133"/><text x="97.3394%" y="1391.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (156 samples, 0.59%)</title><rect x="97.0181%" y="1413" width="0.5859%" height="15" fill="rgb(236,190,24)" fg:x="25833" fg:w="156"/><text x="97.2681%" y="1423.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (4 samples, 0.02%)</title><rect x="97.5889%" y="1397" width="0.0150%" height="15" fill="rgb(254,58,28)" fg:x="25985" fg:w="4"/><text x="97.8389%" y="1407.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (4 samples, 0.02%)</title><rect x="97.5889%" y="1381" width="0.0150%" height="15" fill="rgb(243,63,27)" fg:x="25985" fg:w="4"/><text x="97.8389%" y="1391.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (4 samples, 0.02%)</title><rect x="97.5889%" y="1365" width="0.0150%" height="15" fill="rgb(206,81,20)" fg:x="25985" fg:w="4"/><text x="97.8389%" y="1375.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (4 samples, 0.02%)</title><rect x="97.5889%" y="1349" width="0.0150%" height="15" fill="rgb(252,69,51)" fg:x="25985" fg:w="4"/><text x="97.8389%" y="1359.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.01%)</title><rect x="97.6077%" y="1413" width="0.0113%" height="15" fill="rgb(222,213,4)" fg:x="25990" fg:w="3"/><text x="97.8577%" y="1423.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.01%)</title><rect x="97.6077%" y="1397" width="0.0113%" height="15" fill="rgb(226,198,12)" fg:x="25990" fg:w="3"/><text x="97.8577%" y="1407.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.01%)</title><rect x="97.6077%" y="1381" width="0.0113%" height="15" fill="rgb(248,115,11)" fg:x="25990" fg:w="3"/><text x="97.8577%" y="1391.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="97.6077%" y="1365" width="0.0113%" height="15" fill="rgb(221,148,54)" fg:x="25990" fg:w="3"/><text x="97.8577%" y="1375.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (174 samples, 0.65%)</title><rect x="96.9730%" y="1429" width="0.6535%" height="15" fill="rgb(214,209,51)" fg:x="25821" fg:w="174"/><text x="97.2230%" y="1439.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (200 samples, 0.75%)</title><rect x="96.8904%" y="1445" width="0.7511%" height="15" fill="rgb(249,116,53)" fg:x="25799" fg:w="200"/><text x="97.1404%" y="1455.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (217 samples, 0.81%)</title><rect x="96.8416%" y="1461" width="0.8150%" height="15" fill="rgb(248,170,1)" fg:x="25786" fg:w="217"/><text x="97.0916%" y="1471.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.01%)</title><rect x="97.6603%" y="1461" width="0.0113%" height="15" fill="rgb(244,105,10)" fg:x="26004" fg:w="3"/><text x="97.9103%" y="1471.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.01%)</title><rect x="97.6603%" y="1445" width="0.0113%" height="15" fill="rgb(229,100,5)" fg:x="26004" fg:w="3"/><text x="97.9103%" y="1455.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.01%)</title><rect x="97.6603%" y="1429" width="0.0113%" height="15" fill="rgb(233,221,39)" fg:x="26004" fg:w="3"/><text x="97.9103%" y="1439.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="97.6603%" y="1413" width="0.0113%" height="15" fill="rgb(233,88,21)" fg:x="26004" fg:w="3"/><text x="97.9103%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.01%)</title><rect x="97.6603%" y="1397" width="0.0113%" height="15" fill="rgb(206,13,0)" fg:x="26004" fg:w="3"/><text x="97.9103%" y="1407.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.01%)</title><rect x="97.6603%" y="1381" width="0.0113%" height="15" fill="rgb(242,15,35)" fg:x="26004" fg:w="3"/><text x="97.9103%" y="1391.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.01%)</title><rect x="97.6603%" y="1365" width="0.0113%" height="15" fill="rgb(247,142,41)" fg:x="26004" fg:w="3"/><text x="97.9103%" y="1375.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (240 samples, 0.90%)</title><rect x="96.7777%" y="1477" width="0.9013%" height="15" fill="rgb(245,51,29)" fg:x="25769" fg:w="240"/><text x="97.0277%" y="1487.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (241 samples, 0.91%)</title><rect x="96.7777%" y="2101" width="0.9051%" height="15" fill="rgb(228,209,43)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="2111.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (241 samples, 0.91%)</title><rect x="96.7777%" y="2085" width="0.9051%" height="15" fill="rgb(233,185,9)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="2095.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="2069" width="0.9051%" height="15" fill="rgb(226,93,0)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="2079.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="2053" width="0.9051%" height="15" fill="rgb(245,194,43)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="2063.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="2037" width="0.9051%" height="15" fill="rgb(211,145,34)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="2047.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="2021" width="0.9051%" height="15" fill="rgb(231,228,28)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="2031.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="2005" width="0.9051%" height="15" fill="rgb(236,149,4)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="2015.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1989" width="0.9051%" height="15" fill="rgb(234,114,38)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1999.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1973" width="0.9051%" height="15" fill="rgb(246,132,51)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1983.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1957" width="0.9051%" height="15" fill="rgb(251,137,22)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1967.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1941" width="0.9051%" height="15" fill="rgb(243,59,52)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1951.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1925" width="0.9051%" height="15" fill="rgb(239,56,28)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1935.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1909" width="0.9051%" height="15" fill="rgb(218,168,27)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1919.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1893" width="0.9051%" height="15" fill="rgb(232,165,11)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1903.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1877" width="0.9051%" height="15" fill="rgb(253,55,41)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1887.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1861" width="0.9051%" height="15" fill="rgb(233,206,24)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1871.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1845" width="0.9051%" height="15" fill="rgb(220,199,8)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1855.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1829" width="0.9051%" height="15" fill="rgb(254,65,26)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1839.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1813" width="0.9051%" height="15" fill="rgb(253,102,23)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1823.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1797" width="0.9051%" height="15" fill="rgb(231,103,35)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1807.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1781" width="0.9051%" height="15" fill="rgb(238,26,10)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1791.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1765" width="0.9051%" height="15" fill="rgb(234,191,34)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1775.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1749" width="0.9051%" height="15" fill="rgb(206,210,9)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1759.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1733" width="0.9051%" height="15" fill="rgb(219,155,3)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1743.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1717" width="0.9051%" height="15" fill="rgb(221,62,52)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1727.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1701" width="0.9051%" height="15" fill="rgb(215,197,36)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1711.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1685" width="0.9051%" height="15" fill="rgb(226,222,6)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1695.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1669" width="0.9051%" height="15" fill="rgb(215,58,28)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1679.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1653" width="0.9051%" height="15" fill="rgb(212,148,2)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1663.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1637" width="0.9051%" height="15" fill="rgb(208,21,42)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1647.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1621" width="0.9051%" height="15" fill="rgb(209,107,26)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1631.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1605" width="0.9051%" height="15" fill="rgb(254,60,47)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1615.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1589" width="0.9051%" height="15" fill="rgb(207,226,45)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1599.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1573" width="0.9051%" height="15" fill="rgb(223,124,22)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1583.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1557" width="0.9051%" height="15" fill="rgb(240,162,13)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1567.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1541" width="0.9051%" height="15" fill="rgb(244,199,31)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1525" width="0.9051%" height="15" fill="rgb(207,92,16)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1535.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1509" width="0.9051%" height="15" fill="rgb(215,31,19)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1519.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (241 samples, 0.91%)</title><rect x="96.7777%" y="1493" width="0.9051%" height="15" fill="rgb(245,118,14)" fg:x="25769" fg:w="241"/><text x="97.0277%" y="1503.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (20 samples, 0.08%)</title><rect x="97.6903%" y="1589" width="0.0751%" height="15" fill="rgb(248,12,46)" fg:x="26012" fg:w="20"/><text x="97.9403%" y="1599.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (20 samples, 0.08%)</title><rect x="97.6903%" y="1573" width="0.0751%" height="15" fill="rgb(209,119,0)" fg:x="26012" fg:w="20"/><text x="97.9403%" y="1583.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (20 samples, 0.08%)</title><rect x="97.6903%" y="1557" width="0.0751%" height="15" fill="rgb(254,51,44)" fg:x="26012" fg:w="20"/><text x="97.9403%" y="1567.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (3 samples, 0.01%)</title><rect x="97.7542%" y="1541" width="0.0113%" height="15" fill="rgb(253,182,35)" fg:x="26029" fg:w="3"/><text x="98.0042%" y="1551.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="97.7542%" y="1525" width="0.0113%" height="15" fill="rgb(205,198,39)" fg:x="26029" fg:w="3"/><text x="98.0042%" y="1535.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (25 samples, 0.09%)</title><rect x="97.7729%" y="1573" width="0.0939%" height="15" fill="rgb(251,175,48)" fg:x="26034" fg:w="25"/><text x="98.0229%" y="1583.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (25 samples, 0.09%)</title><rect x="97.7729%" y="1557" width="0.0939%" height="15" fill="rgb(239,38,17)" fg:x="26034" fg:w="25"/><text x="98.0229%" y="1567.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (25 samples, 0.09%)</title><rect x="97.7729%" y="1541" width="0.0939%" height="15" fill="rgb(212,101,8)" fg:x="26034" fg:w="25"/><text x="98.0229%" y="1551.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (5 samples, 0.02%)</title><rect x="97.8480%" y="1525" width="0.0188%" height="15" fill="rgb(228,35,17)" fg:x="26054" fg:w="5"/><text x="98.0980%" y="1535.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (5 samples, 0.02%)</title><rect x="97.8480%" y="1509" width="0.0188%" height="15" fill="rgb(214,95,8)" fg:x="26054" fg:w="5"/><text x="98.0980%" y="1519.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (24 samples, 0.09%)</title><rect x="97.8668%" y="1557" width="0.0901%" height="15" fill="rgb(210,176,35)" fg:x="26059" fg:w="24"/><text x="98.1168%" y="1567.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (24 samples, 0.09%)</title><rect x="97.8668%" y="1541" width="0.0901%" height="15" fill="rgb(226,4,3)" fg:x="26059" fg:w="24"/><text x="98.1168%" y="1551.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (24 samples, 0.09%)</title><rect x="97.8668%" y="1525" width="0.0901%" height="15" fill="rgb(232,133,14)" fg:x="26059" fg:w="24"/><text x="98.1168%" y="1535.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (7 samples, 0.03%)</title><rect x="97.9307%" y="1509" width="0.0263%" height="15" fill="rgb(250,191,8)" fg:x="26076" fg:w="7"/><text x="98.1807%" y="1519.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (7 samples, 0.03%)</title><rect x="97.9307%" y="1493" width="0.0263%" height="15" fill="rgb(213,12,45)" fg:x="26076" fg:w="7"/><text x="98.1807%" y="1503.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (7 samples, 0.03%)</title><rect x="98.0546%" y="1493" width="0.0263%" height="15" fill="rgb(233,78,26)" fg:x="26109" fg:w="7"/><text x="98.3046%" y="1503.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (7 samples, 0.03%)</title><rect x="98.0546%" y="1477" width="0.0263%" height="15" fill="rgb(245,222,11)" fg:x="26109" fg:w="7"/><text x="98.3046%" y="1487.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (33 samples, 0.12%)</title><rect x="97.9607%" y="1541" width="0.1239%" height="15" fill="rgb(216,174,12)" fg:x="26084" fg:w="33"/><text x="98.2107%" y="1551.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (33 samples, 0.12%)</title><rect x="97.9607%" y="1525" width="0.1239%" height="15" fill="rgb(213,15,9)" fg:x="26084" fg:w="33"/><text x="98.2107%" y="1535.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (33 samples, 0.12%)</title><rect x="97.9607%" y="1509" width="0.1239%" height="15" fill="rgb(238,103,32)" fg:x="26084" fg:w="33"/><text x="98.2107%" y="1519.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (29 samples, 0.11%)</title><rect x="98.0922%" y="1525" width="0.1089%" height="15" fill="rgb(245,85,15)" fg:x="26119" fg:w="29"/><text x="98.3422%" y="1535.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (29 samples, 0.11%)</title><rect x="98.0922%" y="1509" width="0.1089%" height="15" fill="rgb(254,204,5)" fg:x="26119" fg:w="29"/><text x="98.3422%" y="1519.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (29 samples, 0.11%)</title><rect x="98.0922%" y="1493" width="0.1089%" height="15" fill="rgb(231,178,15)" fg:x="26119" fg:w="29"/><text x="98.3422%" y="1503.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (6 samples, 0.02%)</title><rect x="98.1785%" y="1477" width="0.0225%" height="15" fill="rgb(248,151,3)" fg:x="26142" fg:w="6"/><text x="98.4285%" y="1487.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (6 samples, 0.02%)</title><rect x="98.1785%" y="1461" width="0.0225%" height="15" fill="rgb(250,139,13)" fg:x="26142" fg:w="6"/><text x="98.4285%" y="1471.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (20 samples, 0.08%)</title><rect x="98.2048%" y="1509" width="0.0751%" height="15" fill="rgb(243,107,53)" fg:x="26149" fg:w="20"/><text x="98.4548%" y="1519.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (20 samples, 0.08%)</title><rect x="98.2048%" y="1493" width="0.0751%" height="15" fill="rgb(232,81,15)" fg:x="26149" fg:w="20"/><text x="98.4548%" y="1503.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (20 samples, 0.08%)</title><rect x="98.2048%" y="1477" width="0.0751%" height="15" fill="rgb(225,187,48)" fg:x="26149" fg:w="20"/><text x="98.4548%" y="1487.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (6 samples, 0.02%)</title><rect x="98.2574%" y="1461" width="0.0225%" height="15" fill="rgb(205,116,12)" fg:x="26163" fg:w="6"/><text x="98.5074%" y="1471.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (6 samples, 0.02%)</title><rect x="98.2574%" y="1445" width="0.0225%" height="15" fill="rgb(220,222,31)" fg:x="26163" fg:w="6"/><text x="98.5074%" y="1455.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (14 samples, 0.05%)</title><rect x="98.2799%" y="1493" width="0.0526%" height="15" fill="rgb(233,187,49)" fg:x="26169" fg:w="14"/><text x="98.5299%" y="1503.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (14 samples, 0.05%)</title><rect x="98.2799%" y="1477" width="0.0526%" height="15" fill="rgb(211,168,53)" fg:x="26169" fg:w="14"/><text x="98.5299%" y="1487.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (14 samples, 0.05%)</title><rect x="98.2799%" y="1461" width="0.0526%" height="15" fill="rgb(206,160,16)" fg:x="26169" fg:w="14"/><text x="98.5299%" y="1471.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (3 samples, 0.01%)</title><rect x="98.3213%" y="1445" width="0.0113%" height="15" fill="rgb(254,164,13)" fg:x="26180" fg:w="3"/><text x="98.5713%" y="1455.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="98.3213%" y="1429" width="0.0113%" height="15" fill="rgb(229,45,30)" fg:x="26180" fg:w="3"/><text x="98.5713%" y="1439.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (21 samples, 0.08%)</title><rect x="98.3325%" y="1477" width="0.0789%" height="15" fill="rgb(237,32,10)" fg:x="26183" fg:w="21"/><text x="98.5825%" y="1487.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (21 samples, 0.08%)</title><rect x="98.3325%" y="1461" width="0.0789%" height="15" fill="rgb(251,20,47)" fg:x="26183" fg:w="21"/><text x="98.5825%" y="1471.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (21 samples, 0.08%)</title><rect x="98.3325%" y="1445" width="0.0789%" height="15" fill="rgb(251,116,12)" fg:x="26183" fg:w="21"/><text x="98.5825%" y="1455.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (14 samples, 0.05%)</title><rect x="98.4151%" y="1461" width="0.0526%" height="15" fill="rgb(214,227,27)" fg:x="26205" fg:w="14"/><text x="98.6651%" y="1471.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (14 samples, 0.05%)</title><rect x="98.4151%" y="1445" width="0.0526%" height="15" fill="rgb(248,10,53)" fg:x="26205" fg:w="14"/><text x="98.6651%" y="1455.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (14 samples, 0.05%)</title><rect x="98.4151%" y="1429" width="0.0526%" height="15" fill="rgb(221,176,25)" fg:x="26205" fg:w="14"/><text x="98.6651%" y="1439.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.01%)</title><rect x="98.4752%" y="1461" width="0.0113%" height="15" fill="rgb(205,70,46)" fg:x="26221" fg:w="3"/><text x="98.7252%" y="1471.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.01%)</title><rect x="98.4752%" y="1445" width="0.0113%" height="15" fill="rgb(217,45,38)" fg:x="26221" fg:w="3"/><text x="98.7252%" y="1455.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.01%)</title><rect x="98.4752%" y="1429" width="0.0113%" height="15" fill="rgb(243,6,54)" fg:x="26221" fg:w="3"/><text x="98.7252%" y="1439.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="98.4752%" y="1413" width="0.0113%" height="15" fill="rgb(242,76,23)" fg:x="26221" fg:w="3"/><text x="98.7252%" y="1423.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (24 samples, 0.09%)</title><rect x="98.4114%" y="1477" width="0.0901%" height="15" fill="rgb(239,166,0)" fg:x="26204" fg:w="24"/><text x="98.6614%" y="1487.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (3 samples, 0.01%)</title><rect x="98.4903%" y="1461" width="0.0113%" height="15" fill="rgb(238,174,32)" fg:x="26225" fg:w="3"/><text x="98.7403%" y="1471.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (3 samples, 0.01%)</title><rect x="98.4903%" y="1445" width="0.0113%" height="15" fill="rgb(238,124,44)" fg:x="26225" fg:w="3"/><text x="98.7403%" y="1455.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (3 samples, 0.01%)</title><rect x="98.4903%" y="1429" width="0.0113%" height="15" fill="rgb(206,185,9)" fg:x="26225" fg:w="3"/><text x="98.7403%" y="1439.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (3 samples, 0.01%)</title><rect x="98.4903%" y="1413" width="0.0113%" height="15" fill="rgb(215,157,17)" fg:x="26225" fg:w="3"/><text x="98.7403%" y="1423.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.01%)</title><rect x="98.5090%" y="1477" width="0.0113%" height="15" fill="rgb(251,17,29)" fg:x="26230" fg:w="3"/><text x="98.7590%" y="1487.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.01%)</title><rect x="98.5090%" y="1461" width="0.0113%" height="15" fill="rgb(227,113,27)" fg:x="26230" fg:w="3"/><text x="98.7590%" y="1471.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.01%)</title><rect x="98.5090%" y="1445" width="0.0113%" height="15" fill="rgb(217,226,24)" fg:x="26230" fg:w="3"/><text x="98.7590%" y="1455.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="98.5090%" y="1429" width="0.0113%" height="15" fill="rgb(251,99,38)" fg:x="26230" fg:w="3"/><text x="98.7590%" y="1439.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (51 samples, 0.19%)</title><rect x="98.3325%" y="1493" width="0.1915%" height="15" fill="rgb(231,147,19)" fg:x="26183" fg:w="51"/><text x="98.5825%" y="1503.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (66 samples, 0.25%)</title><rect x="98.2799%" y="1509" width="0.2479%" height="15" fill="rgb(230,86,8)" fg:x="26169" fg:w="66"/><text x="98.5299%" y="1519.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="98.5353%" y="1413" width="0.0113%" height="15" fill="rgb(237,159,39)" fg:x="26237" fg:w="3"/><text x="98.7853%" y="1423.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="98.5353%" y="1397" width="0.0113%" height="15" fill="rgb(247,179,47)" fg:x="26237" fg:w="3"/><text x="98.7853%" y="1407.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="98.5353%" y="1381" width="0.0113%" height="15" fill="rgb(253,152,26)" fg:x="26237" fg:w="3"/><text x="98.7853%" y="1391.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (4 samples, 0.02%)</title><rect x="98.5353%" y="1509" width="0.0150%" height="15" fill="rgb(222,211,15)" fg:x="26237" fg:w="4"/><text x="98.7853%" y="1519.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (4 samples, 0.02%)</title><rect x="98.5353%" y="1493" width="0.0150%" height="15" fill="rgb(236,193,6)" fg:x="26237" fg:w="4"/><text x="98.7853%" y="1503.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (4 samples, 0.02%)</title><rect x="98.5353%" y="1477" width="0.0150%" height="15" fill="rgb(226,206,10)" fg:x="26237" fg:w="4"/><text x="98.7853%" y="1487.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.02%)</title><rect x="98.5353%" y="1461" width="0.0150%" height="15" fill="rgb(213,125,22)" fg:x="26237" fg:w="4"/><text x="98.7853%" y="1471.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.02%)</title><rect x="98.5353%" y="1445" width="0.0150%" height="15" fill="rgb(221,66,28)" fg:x="26237" fg:w="4"/><text x="98.7853%" y="1455.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.02%)</title><rect x="98.5353%" y="1429" width="0.0150%" height="15" fill="rgb(222,84,53)" fg:x="26237" fg:w="4"/><text x="98.7853%" y="1439.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (96 samples, 0.36%)</title><rect x="98.2011%" y="1525" width="0.3605%" height="15" fill="rgb(243,50,15)" fg:x="26148" fg:w="96"/><text x="98.4511%" y="1535.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.01%)</title><rect x="98.5616%" y="1525" width="0.0113%" height="15" fill="rgb(208,184,23)" fg:x="26244" fg:w="3"/><text x="98.8116%" y="1535.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.01%)</title><rect x="98.5616%" y="1509" width="0.0113%" height="15" fill="rgb(221,83,2)" fg:x="26244" fg:w="3"/><text x="98.8116%" y="1519.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="98.5616%" y="1493" width="0.0113%" height="15" fill="rgb(236,53,24)" fg:x="26244" fg:w="3"/><text x="98.8116%" y="1503.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.01%)</title><rect x="98.5729%" y="1525" width="0.0113%" height="15" fill="rgb(244,171,29)" fg:x="26247" fg:w="3"/><text x="98.8229%" y="1535.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.01%)</title><rect x="98.5729%" y="1509" width="0.0113%" height="15" fill="rgb(205,19,11)" fg:x="26247" fg:w="3"/><text x="98.8229%" y="1519.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.01%)</title><rect x="98.5729%" y="1493" width="0.0113%" height="15" fill="rgb(207,108,29)" fg:x="26247" fg:w="3"/><text x="98.8229%" y="1503.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="98.5729%" y="1477" width="0.0113%" height="15" fill="rgb(236,215,43)" fg:x="26247" fg:w="3"/><text x="98.8229%" y="1487.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="98.5729%" y="1461" width="0.0113%" height="15" fill="rgb(213,58,35)" fg:x="26247" fg:w="3"/><text x="98.8229%" y="1471.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="98.5729%" y="1445" width="0.0113%" height="15" fill="rgb(220,211,46)" fg:x="26247" fg:w="3"/><text x="98.8229%" y="1455.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (135 samples, 0.51%)</title><rect x="98.0847%" y="1541" width="0.5070%" height="15" fill="rgb(212,134,16)" fg:x="26117" fg:w="135"/><text x="98.3347%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (174 samples, 0.65%)</title><rect x="97.9570%" y="1557" width="0.6535%" height="15" fill="rgb(232,90,44)" fg:x="26083" fg:w="174"/><text x="98.2070%" y="1567.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (201 samples, 0.75%)</title><rect x="97.8668%" y="1573" width="0.7549%" height="15" fill="rgb(212,18,36)" fg:x="26059" fg:w="201"/><text x="98.1168%" y="1583.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (231 samples, 0.87%)</title><rect x="97.7654%" y="1589" width="0.8675%" height="15" fill="rgb(206,112,24)" fg:x="26032" fg:w="231"/><text x="98.0154%" y="1599.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.01%)</title><rect x="98.6330%" y="1589" width="0.0113%" height="15" fill="rgb(238,223,40)" fg:x="26263" fg:w="3"/><text x="98.8830%" y="1599.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.01%)</title><rect x="98.6330%" y="1573" width="0.0113%" height="15" fill="rgb(226,169,20)" fg:x="26263" fg:w="3"/><text x="98.8830%" y="1583.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.01%)</title><rect x="98.6330%" y="1557" width="0.0113%" height="15" fill="rgb(241,64,52)" fg:x="26263" fg:w="3"/><text x="98.8830%" y="1567.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="98.6330%" y="1541" width="0.0113%" height="15" fill="rgb(228,120,25)" fg:x="26263" fg:w="3"/><text x="98.8830%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::resolve_inputs (261 samples, 0.98%)</title><rect x="97.6828%" y="2101" width="0.9802%" height="15" fill="rgb(234,108,19)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="2111.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::reorder_ids (261 samples, 0.98%)</title><rect x="97.6828%" y="2085" width="0.9802%" height="15" fill="rgb(236,133,29)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="2095.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (261 samples, 0.98%)</title><rect x="97.6828%" y="2069" width="0.9802%" height="15" fill="rgb(246,174,53)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="2079.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="2053" width="0.9802%" height="15" fill="rgb(210,105,35)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="2063.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="2037" width="0.9802%" height="15" fill="rgb(225,27,26)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="2047.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="2021" width="0.9802%" height="15" fill="rgb(233,2,39)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="2031.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="2005" width="0.9802%" height="15" fill="rgb(219,164,26)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="2015.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1989" width="0.9802%" height="15" fill="rgb(236,211,5)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1999.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1973" width="0.9802%" height="15" fill="rgb(244,227,23)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1983.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1957" width="0.9802%" height="15" fill="rgb(230,184,8)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1967.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1941" width="0.9802%" height="15" fill="rgb(217,125,48)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1951.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1925" width="0.9802%" height="15" fill="rgb(223,192,47)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1935.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1909" width="0.9802%" height="15" fill="rgb(226,119,10)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1919.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1893" width="0.9802%" height="15" fill="rgb(221,49,29)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1903.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1877" width="0.9802%" height="15" fill="rgb(217,205,19)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1887.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1861" width="0.9802%" height="15" fill="rgb(242,104,7)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1871.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1845" width="0.9802%" height="15" fill="rgb(209,154,48)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1855.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1829" width="0.9802%" height="15" fill="rgb(219,213,46)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1839.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1813" width="0.9802%" height="15" fill="rgb(229,105,38)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1823.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1797" width="0.9802%" height="15" fill="rgb(205,151,5)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1807.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1781" width="0.9802%" height="15" fill="rgb(248,115,40)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1791.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1765" width="0.9802%" height="15" fill="rgb(206,179,2)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1775.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1749" width="0.9802%" height="15" fill="rgb(230,103,24)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1759.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1733" width="0.9802%" height="15" fill="rgb(218,152,4)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1743.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1717" width="0.9802%" height="15" fill="rgb(236,161,54)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1727.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1701" width="0.9802%" height="15" fill="rgb(226,65,17)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1711.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1685" width="0.9802%" height="15" fill="rgb(221,134,44)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1695.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1669" width="0.9802%" height="15" fill="rgb(251,129,4)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1679.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1653" width="0.9802%" height="15" fill="rgb(244,32,34)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1663.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1637" width="0.9802%" height="15" fill="rgb(251,224,37)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1647.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1621" width="0.9802%" height="15" fill="rgb(248,117,31)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1631.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (261 samples, 0.98%)</title><rect x="97.6828%" y="1605" width="0.9802%" height="15" fill="rgb(222,208,37)" fg:x="26010" fg:w="261"/><text x="97.9328%" y="1615.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (5 samples, 0.02%)</title><rect x="98.6442%" y="1589" width="0.0188%" height="15" fill="rgb(234,211,25)" fg:x="26266" fg:w="5"/><text x="98.8942%" y="1599.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (5 samples, 0.02%)</title><rect x="98.6442%" y="1573" width="0.0188%" height="15" fill="rgb(211,72,6)" fg:x="26266" fg:w="5"/><text x="98.8942%" y="1583.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.02%)</title><rect x="98.6442%" y="1557" width="0.0188%" height="15" fill="rgb(249,198,38)" fg:x="26266" fg:w="5"/><text x="98.8942%" y="1567.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (4 samples, 0.02%)</title><rect x="98.6480%" y="1541" width="0.0150%" height="15" fill="rgb(221,86,51)" fg:x="26267" fg:w="4"/><text x="98.8980%" y="1551.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4 samples, 0.02%)</title><rect x="98.6480%" y="1525" width="0.0150%" height="15" fill="rgb(226,178,43)" fg:x="26267" fg:w="4"/><text x="98.8980%" y="1535.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.02%)</title><rect x="98.6480%" y="1509" width="0.0150%" height="15" fill="rgb(215,145,7)" fg:x="26267" fg:w="4"/><text x="98.8980%" y="1519.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (4 samples, 0.02%)</title><rect x="98.6480%" y="1493" width="0.0150%" height="15" fill="rgb(250,202,36)" fg:x="26267" fg:w="4"/><text x="98.8980%" y="1503.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (4 samples, 0.02%)</title><rect x="98.6480%" y="1477" width="0.0150%" height="15" fill="rgb(215,86,13)" fg:x="26267" fg:w="4"/><text x="98.8980%" y="1487.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.02%)</title><rect x="98.6630%" y="1253" width="0.0150%" height="15" fill="rgb(221,134,12)" fg:x="26271" fg:w="4"/><text x="98.9130%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.02%)</title><rect x="98.6630%" y="1237" width="0.0150%" height="15" fill="rgb(213,82,10)" fg:x="26271" fg:w="4"/><text x="98.9130%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.02%)</title><rect x="98.6630%" y="1221" width="0.0150%" height="15" fill="rgb(214,142,0)" fg:x="26271" fg:w="4"/><text x="98.9130%" y="1231.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.02%)</title><rect x="98.6630%" y="1205" width="0.0150%" height="15" fill="rgb(205,145,9)" fg:x="26271" fg:w="4"/><text x="98.9130%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.02%)</title><rect x="98.6630%" y="1189" width="0.0150%" height="15" fill="rgb(244,214,8)" fg:x="26271" fg:w="4"/><text x="98.9130%" y="1199.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.02%)</title><rect x="98.6630%" y="1173" width="0.0150%" height="15" fill="rgb(224,72,51)" fg:x="26271" fg:w="4"/><text x="98.9130%" y="1183.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.02%)</title><rect x="98.6630%" y="1157" width="0.0150%" height="15" fill="rgb(233,137,37)" fg:x="26271" fg:w="4"/><text x="98.9130%" y="1167.50"></text></g><g><title>__rdl_realloc (4 samples, 0.02%)</title><rect x="98.6630%" y="1141" width="0.0150%" height="15" fill="rgb(208,71,28)" fg:x="26271" fg:w="4"/><text x="98.9130%" y="1151.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (4 samples, 0.02%)</title><rect x="98.6630%" y="1125" width="0.0150%" height="15" fill="rgb(226,31,7)" fg:x="26271" fg:w="4"/><text x="98.9130%" y="1135.50"></text></g><g><title>realloc (4 samples, 0.02%)</title><rect x="98.6630%" y="1109" width="0.0150%" height="15" fill="rgb(229,62,18)" fg:x="26271" fg:w="4"/><text x="98.9130%" y="1119.50"></text></g><g><title>_int_realloc (4 samples, 0.02%)</title><rect x="98.6630%" y="1093" width="0.0150%" height="15" fill="rgb(226,74,28)" fg:x="26271" fg:w="4"/><text x="98.9130%" y="1103.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (40 samples, 0.15%)</title><rect x="99.0611%" y="1189" width="0.1502%" height="15" fill="rgb(214,170,18)" fg:x="26377" fg:w="40"/><text x="99.3111%" y="1199.50"></text></g><g><title>&lt;graph_craft::document::NodeId as core::cmp::PartialEq&gt;::eq (40 samples, 0.15%)</title><rect x="99.0611%" y="1173" width="0.1502%" height="15" fill="rgb(227,229,35)" fg:x="26377" fg:w="40"/><text x="99.3111%" y="1183.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (142 samples, 0.53%)</title><rect x="98.6818%" y="1237" width="0.5333%" height="15" fill="rgb(225,181,39)" fg:x="26276" fg:w="142"/><text x="98.9318%" y="1247.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (142 samples, 0.53%)</title><rect x="98.6818%" y="1221" width="0.5333%" height="15" fill="rgb(253,124,44)" fg:x="26276" fg:w="142"/><text x="98.9318%" y="1231.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (142 samples, 0.53%)</title><rect x="98.6818%" y="1205" width="0.5333%" height="15" fill="rgb(220,75,18)" fg:x="26276" fg:w="142"/><text x="98.9318%" y="1215.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="99.2226%" y="1157" width="0.0263%" height="15" fill="rgb(239,175,43)" fg:x="26420" fg:w="7"/><text x="99.4726%" y="1167.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="99.2226%" y="1141" width="0.0263%" height="15" fill="rgb(228,112,50)" fg:x="26420" fg:w="7"/><text x="99.4726%" y="1151.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="99.2226%" y="1125" width="0.0263%" height="15" fill="rgb(232,105,36)" fg:x="26420" fg:w="7"/><text x="99.4726%" y="1135.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.03%)</title><rect x="99.2226%" y="1109" width="0.0263%" height="15" fill="rgb(227,137,47)" fg:x="26420" fg:w="7"/><text x="99.4726%" y="1119.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="99.2489%" y="1093" width="0.0113%" height="15" fill="rgb(217,51,9)" fg:x="26427" fg:w="3"/><text x="99.4989%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="99.2489%" y="1077" width="0.0113%" height="15" fill="rgb(245,117,0)" fg:x="26427" fg:w="3"/><text x="99.4989%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="99.2489%" y="1061" width="0.0113%" height="15" fill="rgb(252,52,30)" fg:x="26427" fg:w="3"/><text x="99.4989%" y="1071.50"></text></g><g><title>hashbrown::map::make_hash (12 samples, 0.05%)</title><rect x="99.2188%" y="1189" width="0.0451%" height="15" fill="rgb(227,85,33)" fg:x="26419" fg:w="12"/><text x="99.4688%" y="1199.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.04%)</title><rect x="99.2226%" y="1173" width="0.0413%" height="15" fill="rgb(220,157,20)" fg:x="26420" fg:w="11"/><text x="99.4726%" y="1183.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.02%)</title><rect x="99.2489%" y="1157" width="0.0150%" height="15" fill="rgb(254,14,34)" fg:x="26427" fg:w="4"/><text x="99.4989%" y="1167.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (4 samples, 0.02%)</title><rect x="99.2489%" y="1141" width="0.0150%" height="15" fill="rgb(216,103,41)" fg:x="26427" fg:w="4"/><text x="99.4989%" y="1151.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (4 samples, 0.02%)</title><rect x="99.2489%" y="1125" width="0.0150%" height="15" fill="rgb(245,221,9)" fg:x="26427" fg:w="4"/><text x="99.4989%" y="1135.50"></text></g><g><title>core::hash::Hasher::write_u64 (4 samples, 0.02%)</title><rect x="99.2489%" y="1109" width="0.0150%" height="15" fill="rgb(254,136,47)" fg:x="26427" fg:w="4"/><text x="99.4989%" y="1119.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.01%)</title><rect x="99.2939%" y="1141" width="0.0113%" height="15" fill="rgb(235,71,46)" fg:x="26439" fg:w="3"/><text x="99.5439%" y="1151.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (25 samples, 0.09%)</title><rect x="99.2151%" y="1237" width="0.0939%" height="15" fill="rgb(242,154,29)" fg:x="26418" fg:w="25"/><text x="99.4651%" y="1247.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (25 samples, 0.09%)</title><rect x="99.2151%" y="1221" width="0.0939%" height="15" fill="rgb(210,65,31)" fg:x="26418" fg:w="25"/><text x="99.4651%" y="1231.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (25 samples, 0.09%)</title><rect x="99.2151%" y="1205" width="0.0939%" height="15" fill="rgb(244,9,50)" fg:x="26418" fg:w="25"/><text x="99.4651%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (12 samples, 0.05%)</title><rect x="99.2639%" y="1189" width="0.0451%" height="15" fill="rgb(215,141,38)" fg:x="26431" fg:w="12"/><text x="99.5139%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.05%)</title><rect x="99.2639%" y="1173" width="0.0451%" height="15" fill="rgb(241,129,6)" fg:x="26431" fg:w="12"/><text x="99.5139%" y="1183.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (12 samples, 0.05%)</title><rect x="99.2639%" y="1157" width="0.0451%" height="15" fill="rgb(253,169,4)" fg:x="26431" fg:w="12"/><text x="99.5139%" y="1167.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.05%)</title><rect x="99.3240%" y="1173" width="0.0488%" height="15" fill="rgb(237,82,36)" fg:x="26447" fg:w="13"/><text x="99.5740%" y="1183.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.04%)</title><rect x="99.3353%" y="1157" width="0.0376%" height="15" fill="rgb(209,171,11)" fg:x="26450" fg:w="10"/><text x="99.5853%" y="1167.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.03%)</title><rect x="99.3465%" y="1141" width="0.0263%" height="15" fill="rgb(242,19,22)" fg:x="26453" fg:w="7"/><text x="99.5965%" y="1151.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (7 samples, 0.03%)</title><rect x="99.3465%" y="1125" width="0.0263%" height="15" fill="rgb(251,122,24)" fg:x="26453" fg:w="7"/><text x="99.5965%" y="1135.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (7 samples, 0.03%)</title><rect x="99.3465%" y="1109" width="0.0263%" height="15" fill="rgb(226,166,42)" fg:x="26453" fg:w="7"/><text x="99.5965%" y="1119.50"></text></g><g><title>core::hash::Hasher::write_u64 (7 samples, 0.03%)</title><rect x="99.3465%" y="1093" width="0.0263%" height="15" fill="rgb(244,101,48)" fg:x="26453" fg:w="7"/><text x="99.5965%" y="1103.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.03%)</title><rect x="99.3465%" y="1077" width="0.0263%" height="15" fill="rgb(227,125,1)" fg:x="26453" fg:w="7"/><text x="99.5965%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.03%)</title><rect x="99.3465%" y="1061" width="0.0263%" height="15" fill="rgb(206,79,43)" fg:x="26453" fg:w="7"/><text x="99.5965%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.03%)</title><rect x="99.3465%" y="1045" width="0.0263%" height="15" fill="rgb(241,109,41)" fg:x="26453" fg:w="7"/><text x="99.5965%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="99.3616%" y="1029" width="0.0113%" height="15" fill="rgb(219,73,4)" fg:x="26457" fg:w="3"/><text x="99.6116%" y="1039.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="99.3728%" y="1125" width="0.0113%" height="15" fill="rgb(239,25,41)" fg:x="26460" fg:w="3"/><text x="99.6228%" y="1135.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.01%)</title><rect x="99.3728%" y="1109" width="0.0113%" height="15" fill="rgb(208,88,46)" fg:x="26460" fg:w="3"/><text x="99.6228%" y="1119.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.01%)</title><rect x="99.3841%" y="1125" width="0.0113%" height="15" fill="rgb(239,184,9)" fg:x="26463" fg:w="3"/><text x="99.6341%" y="1135.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (24 samples, 0.09%)</title><rect x="99.3090%" y="1237" width="0.0901%" height="15" fill="rgb(223,114,13)" fg:x="26443" fg:w="24"/><text x="99.5590%" y="1247.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (24 samples, 0.09%)</title><rect x="99.3090%" y="1221" width="0.0901%" height="15" fill="rgb(214,28,42)" fg:x="26443" fg:w="24"/><text x="99.5590%" y="1231.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (24 samples, 0.09%)</title><rect x="99.3090%" y="1205" width="0.0901%" height="15" fill="rgb(252,32,44)" fg:x="26443" fg:w="24"/><text x="99.5590%" y="1215.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (24 samples, 0.09%)</title><rect x="99.3090%" y="1189" width="0.0901%" height="15" fill="rgb(231,159,4)" fg:x="26443" fg:w="24"/><text x="99.5590%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (7 samples, 0.03%)</title><rect x="99.3728%" y="1173" width="0.0263%" height="15" fill="rgb(210,35,26)" fg:x="26460" fg:w="7"/><text x="99.6228%" y="1183.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 0.03%)</title><rect x="99.3728%" y="1157" width="0.0263%" height="15" fill="rgb(208,190,37)" fg:x="26460" fg:w="7"/><text x="99.6228%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (7 samples, 0.03%)</title><rect x="99.3728%" y="1141" width="0.0263%" height="15" fill="rgb(226,148,22)" fg:x="26460" fg:w="7"/><text x="99.6228%" y="1151.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.02%)</title><rect x="99.3991%" y="1189" width="0.0188%" height="15" fill="rgb(242,153,24)" fg:x="26467" fg:w="5"/><text x="99.6491%" y="1199.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.02%)</title><rect x="99.3991%" y="1173" width="0.0188%" height="15" fill="rgb(213,133,7)" fg:x="26467" fg:w="5"/><text x="99.6491%" y="1183.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.01%)</title><rect x="99.4066%" y="1157" width="0.0113%" height="15" fill="rgb(248,206,18)" fg:x="26469" fg:w="3"/><text x="99.6566%" y="1167.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="99.4066%" y="1141" width="0.0113%" height="15" fill="rgb(233,157,4)" fg:x="26469" fg:w="3"/><text x="99.6566%" y="1151.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.01%)</title><rect x="99.4066%" y="1125" width="0.0113%" height="15" fill="rgb(249,179,32)" fg:x="26469" fg:w="3"/><text x="99.6566%" y="1135.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.01%)</title><rect x="99.4066%" y="1109" width="0.0113%" height="15" fill="rgb(248,69,35)" fg:x="26469" fg:w="3"/><text x="99.6566%" y="1119.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (10 samples, 0.04%)</title><rect x="99.3991%" y="1237" width="0.0376%" height="15" fill="rgb(249,158,38)" fg:x="26467" fg:w="10"/><text x="99.6491%" y="1247.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (10 samples, 0.04%)</title><rect x="99.3991%" y="1221" width="0.0376%" height="15" fill="rgb(223,18,43)" fg:x="26467" fg:w="10"/><text x="99.6491%" y="1231.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10 samples, 0.04%)</title><rect x="99.3991%" y="1205" width="0.0376%" height="15" fill="rgb(238,42,45)" fg:x="26467" fg:w="10"/><text x="99.6491%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (5 samples, 0.02%)</title><rect x="99.4179%" y="1189" width="0.0188%" height="15" fill="rgb(219,65,47)" fg:x="26472" fg:w="5"/><text x="99.6679%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (5 samples, 0.02%)</title><rect x="99.4179%" y="1173" width="0.0188%" height="15" fill="rgb(248,153,12)" fg:x="26472" fg:w="5"/><text x="99.6679%" y="1183.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.01%)</title><rect x="99.4479%" y="1093" width="0.0113%" height="15" fill="rgb(240,118,4)" fg:x="26480" fg:w="3"/><text x="99.6979%" y="1103.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="99.4404%" y="1141" width="0.0263%" height="15" fill="rgb(250,96,34)" fg:x="26478" fg:w="7"/><text x="99.6904%" y="1151.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="99.4404%" y="1125" width="0.0263%" height="15" fill="rgb(221,15,4)" fg:x="26478" fg:w="7"/><text x="99.6904%" y="1135.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.03%)</title><rect x="99.4404%" y="1109" width="0.0263%" height="15" fill="rgb(217,149,33)" fg:x="26478" fg:w="7"/><text x="99.6904%" y="1119.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.04%)</title><rect x="99.4404%" y="1173" width="0.0376%" height="15" fill="rgb(213,58,29)" fg:x="26478" fg:w="10"/><text x="99.6904%" y="1183.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.04%)</title><rect x="99.4404%" y="1157" width="0.0376%" height="15" fill="rgb(236,218,9)" fg:x="26478" fg:w="10"/><text x="99.6904%" y="1167.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.01%)</title><rect x="99.4667%" y="1141" width="0.0113%" height="15" fill="rgb(248,40,19)" fg:x="26485" fg:w="3"/><text x="99.7167%" y="1151.50"></text></g><g><title>&lt;graphene_core::vector::vector_data::attributes::PointId as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="99.4667%" y="1125" width="0.0113%" height="15" fill="rgb(212,17,6)" fg:x="26485" fg:w="3"/><text x="99.7167%" y="1135.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.01%)</title><rect x="99.4667%" y="1109" width="0.0113%" height="15" fill="rgb(206,212,20)" fg:x="26485" fg:w="3"/><text x="99.7167%" y="1119.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.01%)</title><rect x="99.4667%" y="1093" width="0.0113%" height="15" fill="rgb(229,80,37)" fg:x="26485" fg:w="3"/><text x="99.7167%" y="1103.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="99.4667%" y="1077" width="0.0113%" height="15" fill="rgb(253,8,37)" fg:x="26485" fg:w="3"/><text x="99.7167%" y="1087.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="99.4667%" y="1061" width="0.0113%" height="15" fill="rgb(215,16,43)" fg:x="26485" fg:w="3"/><text x="99.7167%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="99.4667%" y="1045" width="0.0113%" height="15" fill="rgb(236,219,16)" fg:x="26485" fg:w="3"/><text x="99.7167%" y="1055.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (217 samples, 0.81%)</title><rect x="98.6780%" y="1253" width="0.8150%" height="15" fill="rgb(251,0,3)" fg:x="26275" fg:w="217"/><text x="98.9280%" y="1263.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (15 samples, 0.06%)</title><rect x="99.4367%" y="1237" width="0.0563%" height="15" fill="rgb(207,133,37)" fg:x="26477" fg:w="15"/><text x="99.6867%" y="1247.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (15 samples, 0.06%)</title><rect x="99.4367%" y="1221" width="0.0563%" height="15" fill="rgb(250,143,20)" fg:x="26477" fg:w="15"/><text x="99.6867%" y="1231.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (15 samples, 0.06%)</title><rect x="99.4367%" y="1205" width="0.0563%" height="15" fill="rgb(242,19,50)" fg:x="26477" fg:w="15"/><text x="99.6867%" y="1215.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (15 samples, 0.06%)</title><rect x="99.4367%" y="1189" width="0.0563%" height="15" fill="rgb(206,124,43)" fg:x="26477" fg:w="15"/><text x="99.6867%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (4 samples, 0.02%)</title><rect x="99.4780%" y="1173" width="0.0150%" height="15" fill="rgb(229,4,38)" fg:x="26488" fg:w="4"/><text x="99.7280%" y="1183.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (4 samples, 0.02%)</title><rect x="99.4930%" y="1125" width="0.0150%" height="15" fill="rgb(247,220,45)" fg:x="26492" fg:w="4"/><text x="99.7430%" y="1135.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (4 samples, 0.02%)</title><rect x="99.4930%" y="1109" width="0.0150%" height="15" fill="rgb(247,195,0)" fg:x="26492" fg:w="4"/><text x="99.7430%" y="1119.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.02%)</title><rect x="99.4930%" y="1093" width="0.0150%" height="15" fill="rgb(252,12,19)" fg:x="26492" fg:w="4"/><text x="99.7430%" y="1103.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.02%)</title><rect x="99.4930%" y="1077" width="0.0150%" height="15" fill="rgb(222,49,50)" fg:x="26492" fg:w="4"/><text x="99.7430%" y="1087.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="99.4930%" y="1061" width="0.0150%" height="15" fill="rgb(209,157,28)" fg:x="26492" fg:w="4"/><text x="99.7430%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="99.4930%" y="1045" width="0.0150%" height="15" fill="rgb(238,174,24)" fg:x="26492" fg:w="4"/><text x="99.7430%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.02%)</title><rect x="99.4930%" y="1029" width="0.0150%" height="15" fill="rgb(224,17,28)" fg:x="26492" fg:w="4"/><text x="99.7430%" y="1039.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.02%)</title><rect x="99.4930%" y="1013" width="0.0150%" height="15" fill="rgb(249,7,29)" fg:x="26492" fg:w="4"/><text x="99.7430%" y="1023.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="2101" width="0.8525%" height="15" fill="rgb(243,178,4)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="2111.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="2085" width="0.8525%" height="15" fill="rgb(246,138,35)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="2095.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="2069" width="0.8525%" height="15" fill="rgb(251,85,18)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="2079.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="2053" width="0.8525%" height="15" fill="rgb(254,55,9)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="2063.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="2037" width="0.8525%" height="15" fill="rgb(248,4,50)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="2047.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="2021" width="0.8525%" height="15" fill="rgb(215,208,14)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="2031.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="2005" width="0.8525%" height="15" fill="rgb(218,37,18)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="2015.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1989" width="0.8525%" height="15" fill="rgb(206,104,13)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1999.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1973" width="0.8525%" height="15" fill="rgb(248,94,22)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1983.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1957" width="0.8525%" height="15" fill="rgb(235,42,46)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1967.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1941" width="0.8525%" height="15" fill="rgb(220,228,48)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1951.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1925" width="0.8525%" height="15" fill="rgb(216,58,12)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1935.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1909" width="0.8525%" height="15" fill="rgb(223,97,52)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1919.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1893" width="0.8525%" height="15" fill="rgb(208,159,17)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1903.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1877" width="0.8525%" height="15" fill="rgb(215,172,9)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1887.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1861" width="0.8525%" height="15" fill="rgb(252,175,30)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1871.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1845" width="0.8525%" height="15" fill="rgb(209,159,10)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1855.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1829" width="0.8525%" height="15" fill="rgb(229,73,51)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1839.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1813" width="0.8525%" height="15" fill="rgb(208,212,43)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1823.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1797" width="0.8525%" height="15" fill="rgb(254,123,53)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1807.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1781" width="0.8525%" height="15" fill="rgb(254,128,49)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1791.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1765" width="0.8525%" height="15" fill="rgb(246,16,16)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1775.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1749" width="0.8525%" height="15" fill="rgb(209,200,1)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1759.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1733" width="0.8525%" height="15" fill="rgb(235,9,3)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1743.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1717" width="0.8525%" height="15" fill="rgb(233,121,54)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1727.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1701" width="0.8525%" height="15" fill="rgb(236,80,25)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1711.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1685" width="0.8525%" height="15" fill="rgb(220,44,24)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1695.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1669" width="0.8525%" height="15" fill="rgb(236,225,16)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1679.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1653" width="0.8525%" height="15" fill="rgb(237,140,0)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1663.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1637" width="0.8525%" height="15" fill="rgb(243,225,53)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1647.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1621" width="0.8525%" height="15" fill="rgb(240,140,30)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1631.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1605" width="0.8525%" height="15" fill="rgb(217,51,16)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1615.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1589" width="0.8525%" height="15" fill="rgb(245,75,50)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1599.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1573" width="0.8525%" height="15" fill="rgb(208,174,22)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1583.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1557" width="0.8525%" height="15" fill="rgb(219,98,50)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1567.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1541" width="0.8525%" height="15" fill="rgb(243,138,3)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1525" width="0.8525%" height="15" fill="rgb(243,132,26)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1535.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1509" width="0.8525%" height="15" fill="rgb(250,201,8)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1519.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1493" width="0.8525%" height="15" fill="rgb(213,91,26)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1503.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1477" width="0.8525%" height="15" fill="rgb(229,117,1)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1487.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1461" width="0.8525%" height="15" fill="rgb(229,24,6)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1471.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1445" width="0.8525%" height="15" fill="rgb(206,69,11)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1455.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1429" width="0.8525%" height="15" fill="rgb(234,111,34)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1439.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1413" width="0.8525%" height="15" fill="rgb(213,187,51)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1423.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1397" width="0.8525%" height="15" fill="rgb(207,45,11)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1407.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1381" width="0.8525%" height="15" fill="rgb(225,151,47)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1391.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1365" width="0.8525%" height="15" fill="rgb(211,226,5)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1375.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1349" width="0.8525%" height="15" fill="rgb(214,83,52)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1359.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1333" width="0.8525%" height="15" fill="rgb(229,49,53)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1343.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1317" width="0.8525%" height="15" fill="rgb(246,8,28)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1327.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1301" width="0.8525%" height="15" fill="rgb(207,28,41)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1311.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1285" width="0.8525%" height="15" fill="rgb(254,22,25)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1295.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (227 samples, 0.85%)</title><rect x="98.6630%" y="1269" width="0.8525%" height="15" fill="rgb(209,120,42)" fg:x="26271" fg:w="227"/><text x="98.9130%" y="1279.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (6 samples, 0.02%)</title><rect x="99.4930%" y="1253" width="0.0225%" height="15" fill="rgb(216,194,18)" fg:x="26492" fg:w="6"/><text x="99.7430%" y="1263.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (6 samples, 0.02%)</title><rect x="99.4930%" y="1237" width="0.0225%" height="15" fill="rgb(213,70,17)" fg:x="26492" fg:w="6"/><text x="99.7430%" y="1247.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.02%)</title><rect x="99.4930%" y="1221" width="0.0225%" height="15" fill="rgb(228,66,19)" fg:x="26492" fg:w="6"/><text x="99.7430%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (6 samples, 0.02%)</title><rect x="99.4930%" y="1205" width="0.0225%" height="15" fill="rgb(236,221,54)" fg:x="26492" fg:w="6"/><text x="99.7430%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (6 samples, 0.02%)</title><rect x="99.4930%" y="1189" width="0.0225%" height="15" fill="rgb(207,175,15)" fg:x="26492" fg:w="6"/><text x="99.7430%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.02%)</title><rect x="99.4930%" y="1173" width="0.0225%" height="15" fill="rgb(234,76,8)" fg:x="26492" fg:w="6"/><text x="99.7430%" y="1183.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (6 samples, 0.02%)</title><rect x="99.4930%" y="1157" width="0.0225%" height="15" fill="rgb(243,106,0)" fg:x="26492" fg:w="6"/><text x="99.7430%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (6 samples, 0.02%)</title><rect x="99.4930%" y="1141" width="0.0225%" height="15" fill="rgb(208,48,19)" fg:x="26492" fg:w="6"/><text x="99.7430%" y="1151.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort (4 samples, 0.02%)</title><rect x="99.5155%" y="2101" width="0.0150%" height="15" fill="rgb(251,50,29)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="2111.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="2085" width="0.0150%" height="15" fill="rgb(222,31,49)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="2095.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="2069" width="0.0150%" height="15" fill="rgb(232,33,18)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="2079.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="2053" width="0.0150%" height="15" fill="rgb(209,1,44)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="2063.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="2037" width="0.0150%" height="15" fill="rgb(211,7,1)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="2047.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="2021" width="0.0150%" height="15" fill="rgb(224,111,27)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="2031.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="2005" width="0.0150%" height="15" fill="rgb(252,195,39)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="2015.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1989" width="0.0150%" height="15" fill="rgb(237,198,5)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1999.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1973" width="0.0150%" height="15" fill="rgb(232,148,1)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1983.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1957" width="0.0150%" height="15" fill="rgb(249,41,3)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1967.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1941" width="0.0150%" height="15" fill="rgb(215,14,33)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1951.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1925" width="0.0150%" height="15" fill="rgb(209,146,24)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1935.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1909" width="0.0150%" height="15" fill="rgb(219,51,47)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1919.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1893" width="0.0150%" height="15" fill="rgb(234,217,40)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1903.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1877" width="0.0150%" height="15" fill="rgb(228,34,26)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1887.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1861" width="0.0150%" height="15" fill="rgb(224,50,29)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1871.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1845" width="0.0150%" height="15" fill="rgb(205,79,51)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1855.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1829" width="0.0150%" height="15" fill="rgb(218,136,28)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1839.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1813" width="0.0150%" height="15" fill="rgb(220,150,10)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1823.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1797" width="0.0150%" height="15" fill="rgb(242,158,47)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1807.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1781" width="0.0150%" height="15" fill="rgb(209,68,0)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1791.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1765" width="0.0150%" height="15" fill="rgb(208,13,41)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1775.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1749" width="0.0150%" height="15" fill="rgb(226,201,7)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1759.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1733" width="0.0150%" height="15" fill="rgb(236,103,26)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1743.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1717" width="0.0150%" height="15" fill="rgb(243,162,8)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1727.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1701" width="0.0150%" height="15" fill="rgb(237,225,11)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1711.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1685" width="0.0150%" height="15" fill="rgb(247,186,32)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1695.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1669" width="0.0150%" height="15" fill="rgb(215,26,28)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1679.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1653" width="0.0150%" height="15" fill="rgb(208,121,6)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1663.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1637" width="0.0150%" height="15" fill="rgb(225,91,3)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1647.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1621" width="0.0150%" height="15" fill="rgb(246,119,36)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1631.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1605" width="0.0150%" height="15" fill="rgb(254,173,2)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1615.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1589" width="0.0150%" height="15" fill="rgb(209,87,54)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1599.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1573" width="0.0150%" height="15" fill="rgb(223,216,20)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1583.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1557" width="0.0150%" height="15" fill="rgb(220,31,8)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1567.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1541" width="0.0150%" height="15" fill="rgb(220,185,15)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1551.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1525" width="0.0150%" height="15" fill="rgb(247,190,50)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1535.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1509" width="0.0150%" height="15" fill="rgb(239,173,47)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1519.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1493" width="0.0150%" height="15" fill="rgb(218,190,42)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1503.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1477" width="0.0150%" height="15" fill="rgb(251,207,16)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1487.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1461" width="0.0150%" height="15" fill="rgb(222,199,47)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1471.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1445" width="0.0150%" height="15" fill="rgb(245,190,7)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1455.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1429" width="0.0150%" height="15" fill="rgb(239,85,38)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1439.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1413" width="0.0150%" height="15" fill="rgb(229,69,51)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1423.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1397" width="0.0150%" height="15" fill="rgb(231,104,51)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1407.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1381" width="0.0150%" height="15" fill="rgb(235,49,4)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1391.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1365" width="0.0150%" height="15" fill="rgb(246,166,20)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1375.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1349" width="0.0150%" height="15" fill="rgb(230,119,37)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1359.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1333" width="0.0150%" height="15" fill="rgb(234,77,34)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1343.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1317" width="0.0150%" height="15" fill="rgb(211,222,33)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1327.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1301" width="0.0150%" height="15" fill="rgb(226,45,42)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1311.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1285" width="0.0150%" height="15" fill="rgb(215,174,28)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1295.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1269" width="0.0150%" height="15" fill="rgb(254,173,49)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1279.50"></text></g><g><title>graph_craft::proto::ProtoNetwork::topological_sort::visit (4 samples, 0.02%)</title><rect x="99.5155%" y="1253" width="0.0150%" height="15" fill="rgb(229,191,6)" fg:x="26498" fg:w="4"/><text x="99.7655%" y="1263.50"></text></g><g><title>compile_demo_ar (26,120 samples, 98.10%)</title><rect x="1.4384%" y="2117" width="98.0959%" height="15" fill="rgb(212,145,22)" fg:x="383" fg:w="26120"/><text x="1.6884%" y="2127.50">compile_demo_ar</text></g><g><title>FcPatternFormat (9 samples, 0.03%)</title><rect x="99.5418%" y="2101" width="0.0338%" height="15" fill="rgb(226,6,51)" fg:x="26505" fg:w="9"/><text x="99.7918%" y="2111.50"></text></g><g><title>FcPatternFormatToBuf (9 samples, 0.03%)</title><rect x="99.5418%" y="2085" width="0.0338%" height="15" fill="rgb(227,128,8)" fg:x="26505" fg:w="9"/><text x="99.7918%" y="2095.50"></text></g><g><title>interpret_expr (9 samples, 0.03%)</title><rect x="99.5418%" y="2069" width="0.0338%" height="15" fill="rgb(205,24,10)" fg:x="26505" fg:w="9"/><text x="99.7918%" y="2079.50"></text></g><g><title>FcPatternFormatToBuf (9 samples, 0.03%)</title><rect x="99.5418%" y="2053" width="0.0338%" height="15" fill="rgb(217,147,27)" fg:x="26505" fg:w="9"/><text x="99.7918%" y="2063.50"></text></g><g><title>interpret_expr (9 samples, 0.03%)</title><rect x="99.5418%" y="2037" width="0.0338%" height="15" fill="rgb(250,82,42)" fg:x="26505" fg:w="9"/><text x="99.7918%" y="2047.50"></text></g><g><title>interpret_subexpr (9 samples, 0.03%)</title><rect x="99.5418%" y="2021" width="0.0338%" height="15" fill="rgb(248,93,17)" fg:x="26505" fg:w="9"/><text x="99.7918%" y="2031.50"></text></g><g><title>interpret_expr (9 samples, 0.03%)</title><rect x="99.5418%" y="2005" width="0.0338%" height="15" fill="rgb(254,212,40)" fg:x="26505" fg:w="9"/><text x="99.7918%" y="2015.50"></text></g><g><title>FcNameUnparseEscaped (9 samples, 0.03%)</title><rect x="99.5418%" y="1989" width="0.0338%" height="15" fill="rgb(229,209,2)" fg:x="26505" fg:w="9"/><text x="99.7918%" y="1999.50"></text></g><g><title>__strcmp_evex (6 samples, 0.02%)</title><rect x="99.5531%" y="1973" width="0.0225%" height="15" fill="rgb(211,50,43)" fg:x="26508" fg:w="6"/><text x="99.8031%" y="1983.50"></text></g><g><title>XML_ParseBuffer (3 samples, 0.01%)</title><rect x="99.5794%" y="2069" width="0.0113%" height="15" fill="rgb(245,196,29)" fg:x="26515" fg:w="3"/><text x="99.8294%" y="2079.50"></text></g><g><title>callProcessor.constprop.0 (3 samples, 0.01%)</title><rect x="99.5794%" y="2053" width="0.0113%" height="15" fill="rgb(216,132,13)" fg:x="26515" fg:w="3"/><text x="99.8294%" y="2063.50"></text></g><g><title>FcConfigParseAndLoadFromMemoryInternal (5 samples, 0.02%)</title><rect x="99.5756%" y="2085" width="0.0188%" height="15" fill="rgb(251,108,21)" fg:x="26514" fg:w="5"/><text x="99.8256%" y="2095.50"></text></g><g><title>_FcConfigParse (7 samples, 0.03%)</title><rect x="99.5756%" y="2101" width="0.0263%" height="15" fill="rgb(229,174,54)" fg:x="26514" fg:w="7"/><text x="99.8256%" y="2111.50"></text></g><g><title>__printf_buffer (5 samples, 0.02%)</title><rect x="99.6094%" y="2005" width="0.0188%" height="15" fill="rgb(211,175,47)" fg:x="26523" fg:w="5"/><text x="99.8594%" y="2015.50"></text></g><g><title>__printf_buffer_write (5 samples, 0.02%)</title><rect x="99.6094%" y="1989" width="0.0188%" height="15" fill="rgb(234,5,37)" fg:x="26523" fg:w="5"/><text x="99.8594%" y="1999.50"></text></g><g><title>__printf_buffer_flush (5 samples, 0.02%)</title><rect x="99.6094%" y="1973" width="0.0188%" height="15" fill="rgb(244,150,43)" fg:x="26523" fg:w="5"/><text x="99.8594%" y="1983.50"></text></g><g><title>__printf_buffer_flush_to_file (5 samples, 0.02%)</title><rect x="99.6094%" y="1957" width="0.0188%" height="15" fill="rgb(242,172,38)" fg:x="26523" fg:w="5"/><text x="99.8594%" y="1967.50"></text></g><g><title>_IO_file_overflow@@GLIBC_2.2.5 (5 samples, 0.02%)</title><rect x="99.6094%" y="1941" width="0.0188%" height="15" fill="rgb(205,27,8)" fg:x="26523" fg:w="5"/><text x="99.8594%" y="1951.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (5 samples, 0.02%)</title><rect x="99.6094%" y="1925" width="0.0188%" height="15" fill="rgb(217,57,3)" fg:x="26523" fg:w="5"/><text x="99.8594%" y="1935.50"></text></g><g><title>new_do_write (5 samples, 0.02%)</title><rect x="99.6094%" y="1909" width="0.0188%" height="15" fill="rgb(242,21,38)" fg:x="26523" fg:w="5"/><text x="99.8594%" y="1919.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (5 samples, 0.02%)</title><rect x="99.6094%" y="1893" width="0.0188%" height="15" fill="rgb(209,64,43)" fg:x="26523" fg:w="5"/><text x="99.8594%" y="1903.50"></text></g><g><title>__printf_chk (6 samples, 0.02%)</title><rect x="99.6094%" y="2037" width="0.0225%" height="15" fill="rgb(222,2,46)" fg:x="26523" fg:w="6"/><text x="99.8594%" y="2047.50"></text></g><g><title>__vfprintf_internal (6 samples, 0.02%)</title><rect x="99.6094%" y="2021" width="0.0225%" height="15" fill="rgb(218,19,44)" fg:x="26523" fg:w="6"/><text x="99.8594%" y="2031.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (10 samples, 0.04%)</title><rect x="99.6019%" y="2085" width="0.0376%" height="15" fill="rgb(240,203,42)" fg:x="26521" fg:w="10"/><text x="99.8519%" y="2095.50"></text></g><g><title>__libc_start_call_main (10 samples, 0.04%)</title><rect x="99.6019%" y="2069" width="0.0376%" height="15" fill="rgb(229,23,45)" fg:x="26521" fg:w="10"/><text x="99.8519%" y="2079.50"></text></g><g><title>main (10 samples, 0.04%)</title><rect x="99.6019%" y="2053" width="0.0376%" height="15" fill="rgb(205,228,51)" fg:x="26521" fg:w="10"/><text x="99.8519%" y="2063.50"></text></g><g><title>fc-list (30 samples, 0.11%)</title><rect x="99.5343%" y="2117" width="0.1127%" height="15" fill="rgb(239,36,20)" fg:x="26503" fg:w="30"/><text x="99.7843%" y="2127.50"></text></g><g><title>_start (12 samples, 0.05%)</title><rect x="99.6019%" y="2101" width="0.0451%" height="15" fill="rgb(248,172,27)" fg:x="26521" fg:w="12"/><text x="99.8519%" y="2111.50"></text></g><g><title>make_child (6 samples, 0.02%)</title><rect x="99.6507%" y="1749" width="0.0225%" height="15" fill="rgb(244,55,32)" fg:x="26534" fg:w="6"/><text x="99.9007%" y="1759.50"></text></g><g><title>__libc_fork (6 samples, 0.02%)</title><rect x="99.6507%" y="1733" width="0.0225%" height="15" fill="rgb(215,97,16)" fg:x="26534" fg:w="6"/><text x="99.9007%" y="1743.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="99.7258%" y="1637" width="0.0263%" height="15" fill="rgb(224,80,29)" fg:x="26554" fg:w="7"/><text x="99.9758%" y="1647.50"></text></g><g><title>__libc_fork (23 samples, 0.09%)</title><rect x="99.6958%" y="1653" width="0.0864%" height="15" fill="rgb(216,93,47)" fg:x="26546" fg:w="23"/><text x="99.9458%" y="1663.50"></text></g><g><title>_Fork (8 samples, 0.03%)</title><rect x="99.7521%" y="1637" width="0.0300%" height="15" fill="rgb(238,159,10)" fg:x="26561" fg:w="8"/><text x="100.0021%" y="1647.50"></text></g><g><title>[unknown] (8 samples, 0.03%)</title><rect x="99.7521%" y="1621" width="0.0300%" height="15" fill="rgb(223,98,29)" fg:x="26561" fg:w="8"/><text x="100.0021%" y="1631.50"></text></g><g><title>make_child (28 samples, 0.11%)</title><rect x="99.6883%" y="1669" width="0.1052%" height="15" fill="rgb(210,176,23)" fg:x="26544" fg:w="28"/><text x="99.9383%" y="1679.50"></text></g><g><title>reader_loop (40 samples, 0.15%)</title><rect x="99.6470%" y="2037" width="0.1502%" height="15" fill="rgb(242,162,27)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="2047.50"></text></g><g><title>execute_command (40 samples, 0.15%)</title><rect x="99.6470%" y="2021" width="0.1502%" height="15" fill="rgb(245,109,32)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="2031.50"></text></g><g><title>execute_command_internal (40 samples, 0.15%)</title><rect x="99.6470%" y="2005" width="0.1502%" height="15" fill="rgb(248,87,8)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="2015.50"></text></g><g><title>execute_builtin (40 samples, 0.15%)</title><rect x="99.6470%" y="1989" width="0.1502%" height="15" fill="rgb(250,160,50)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1999.50"></text></g><g><title>source_builtin (40 samples, 0.15%)</title><rect x="99.6470%" y="1973" width="0.1502%" height="15" fill="rgb(246,165,25)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1983.50"></text></g><g><title>source_file (40 samples, 0.15%)</title><rect x="99.6470%" y="1957" width="0.1502%" height="15" fill="rgb(249,219,3)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1967.50"></text></g><g><title>_evalfile (40 samples, 0.15%)</title><rect x="99.6470%" y="1941" width="0.1502%" height="15" fill="rgb(226,66,5)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1951.50"></text></g><g><title>parse_and_execute (40 samples, 0.15%)</title><rect x="99.6470%" y="1925" width="0.1502%" height="15" fill="rgb(250,220,43)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1935.50"></text></g><g><title>execute_command_internal (40 samples, 0.15%)</title><rect x="99.6470%" y="1909" width="0.1502%" height="15" fill="rgb(225,111,31)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1919.50"></text></g><g><title>expand_word_list_internal (40 samples, 0.15%)</title><rect x="99.6470%" y="1893" width="0.1502%" height="15" fill="rgb(248,106,18)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1903.50"></text></g><g><title>do_assignment_statements.isra.0 (40 samples, 0.15%)</title><rect x="99.6470%" y="1877" width="0.1502%" height="15" fill="rgb(220,226,45)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1887.50"></text></g><g><title>do_assignment_internal (40 samples, 0.15%)</title><rect x="99.6470%" y="1861" width="0.1502%" height="15" fill="rgb(208,58,53)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1871.50"></text></g><g><title>assign_array_var_from_string (40 samples, 0.15%)</title><rect x="99.6470%" y="1845" width="0.1502%" height="15" fill="rgb(209,133,1)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1855.50"></text></g><g><title>expand_compound_array_assignment (40 samples, 0.15%)</title><rect x="99.6470%" y="1829" width="0.1502%" height="15" fill="rgb(228,216,27)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1839.50"></text></g><g><title>expand_word_list_internal (40 samples, 0.15%)</title><rect x="99.6470%" y="1813" width="0.1502%" height="15" fill="rgb(238,155,2)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1823.50"></text></g><g><title>expand_word_internal (40 samples, 0.15%)</title><rect x="99.6470%" y="1797" width="0.1502%" height="15" fill="rgb(244,99,37)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1807.50"></text></g><g><title>param_expand (40 samples, 0.15%)</title><rect x="99.6470%" y="1781" width="0.1502%" height="15" fill="rgb(254,32,3)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1791.50"></text></g><g><title>command_substitute (40 samples, 0.15%)</title><rect x="99.6470%" y="1765" width="0.1502%" height="15" fill="rgb(234,46,50)" fg:x="26533" fg:w="40"/><text x="99.8970%" y="1775.50"></text></g><g><title>parse_and_execute (33 samples, 0.12%)</title><rect x="99.6733%" y="1749" width="0.1239%" height="15" fill="rgb(232,118,51)" fg:x="26540" fg:w="33"/><text x="99.9233%" y="1759.50"></text></g><g><title>execute_command_internal (33 samples, 0.12%)</title><rect x="99.6733%" y="1733" width="0.1239%" height="15" fill="rgb(207,24,32)" fg:x="26540" fg:w="33"/><text x="99.9233%" y="1743.50"></text></g><g><title>execute_connection (32 samples, 0.12%)</title><rect x="99.6770%" y="1717" width="0.1202%" height="15" fill="rgb(208,107,43)" fg:x="26541" fg:w="32"/><text x="99.9270%" y="1727.50"></text></g><g><title>execute_pipeline (32 samples, 0.12%)</title><rect x="99.6770%" y="1701" width="0.1202%" height="15" fill="rgb(231,28,9)" fg:x="26541" fg:w="32"/><text x="99.9270%" y="1711.50"></text></g><g><title>execute_command_internal (32 samples, 0.12%)</title><rect x="99.6770%" y="1685" width="0.1202%" height="15" fill="rgb(241,204,15)" fg:x="26541" fg:w="32"/><text x="99.9270%" y="1695.50"></text></g><g><title>add_alias2.part.0 (6 samples, 0.02%)</title><rect x="99.8047%" y="1925" width="0.0225%" height="15" fill="rgb(214,54,15)" fg:x="26575" fg:w="6"/><text x="100.0547%" y="1935.50"></text></g><g><title>__tsearch (6 samples, 0.02%)</title><rect x="99.8047%" y="1909" width="0.0225%" height="15" fill="rgb(230,12,28)" fg:x="26575" fg:w="6"/><text x="100.0547%" y="1919.50"></text></g><g><title>mblen (9 samples, 0.03%)</title><rect x="99.7972%" y="2021" width="0.0338%" height="15" fill="rgb(221,171,5)" fg:x="26573" fg:w="9"/><text x="100.0472%" y="2031.50"></text></g><g><title>__wcsmbs_load_conv (9 samples, 0.03%)</title><rect x="99.7972%" y="2005" width="0.0338%" height="15" fill="rgb(207,72,25)" fg:x="26573" fg:w="9"/><text x="100.0472%" y="2015.50"></text></g><g><title>__gconv_find_transform (9 samples, 0.03%)</title><rect x="99.7972%" y="1989" width="0.0338%" height="15" fill="rgb(249,79,37)" fg:x="26573" fg:w="9"/><text x="100.0472%" y="1999.50"></text></g><g><title>__pthread_once_slow (9 samples, 0.03%)</title><rect x="99.7972%" y="1973" width="0.0338%" height="15" fill="rgb(209,98,49)" fg:x="26573" fg:w="9"/><text x="100.0472%" y="1983.50"></text></g><g><title>__gconv_read_conf (9 samples, 0.03%)</title><rect x="99.7972%" y="1957" width="0.0338%" height="15" fill="rgb(221,62,13)" fg:x="26573" fg:w="9"/><text x="100.0472%" y="1967.50"></text></g><g><title>read_conf_file.isra.0 (8 samples, 0.03%)</title><rect x="99.8010%" y="1941" width="0.0300%" height="15" fill="rgb(223,39,6)" fg:x="26574" fg:w="8"/><text x="100.0510%" y="1951.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (50 samples, 0.19%)</title><rect x="99.6470%" y="2085" width="0.1878%" height="15" fill="rgb(246,163,20)" fg:x="26533" fg:w="50"/><text x="99.8970%" y="2095.50"></text></g><g><title>__libc_start_call_main (50 samples, 0.19%)</title><rect x="99.6470%" y="2069" width="0.1878%" height="15" fill="rgb(211,111,29)" fg:x="26533" fg:w="50"/><text x="99.8970%" y="2079.50"></text></g><g><title>main (50 samples, 0.19%)</title><rect x="99.6470%" y="2053" width="0.1878%" height="15" fill="rgb(243,118,5)" fg:x="26533" fg:w="50"/><text x="99.8970%" y="2063.50"></text></g><g><title>set_default_locale (10 samples, 0.04%)</title><rect x="99.7972%" y="2037" width="0.0376%" height="15" fill="rgb(240,144,52)" fg:x="26573" fg:w="10"/><text x="100.0472%" y="2047.50"></text></g><g><title>gnuplot (51 samples, 0.19%)</title><rect x="99.6470%" y="2117" width="0.1915%" height="15" fill="rgb(244,158,36)" fg:x="26533" fg:w="51"/><text x="99.8970%" y="2127.50"></text></g><g><title>_start (51 samples, 0.19%)</title><rect x="99.6470%" y="2101" width="0.1915%" height="15" fill="rgb(241,109,37)" fg:x="26533" fg:w="51"/><text x="99.8970%" y="2111.50"></text></g><g><title>init_localeinfo (3 samples, 0.01%)</title><rect x="99.8385%" y="2037" width="0.0113%" height="15" fill="rgb(213,95,32)" fg:x="26584" fg:w="3"/><text x="100.0885%" y="2047.50"></text></g><g><title>rpl_mbrtowc (3 samples, 0.01%)</title><rect x="99.8385%" y="2021" width="0.0113%" height="15" fill="rgb(252,193,9)" fg:x="26584" fg:w="3"/><text x="100.0885%" y="2031.50"></text></g><g><title>__mbrtowc (3 samples, 0.01%)</title><rect x="99.8385%" y="2005" width="0.0113%" height="15" fill="rgb(225,213,21)" fg:x="26584" fg:w="3"/><text x="100.0885%" y="2015.50"></text></g><g><title>__wcsmbs_load_conv (3 samples, 0.01%)</title><rect x="99.8385%" y="1989" width="0.0113%" height="15" fill="rgb(220,172,46)" fg:x="26584" fg:w="3"/><text x="100.0885%" y="1999.50"></text></g><g><title>__gconv_find_transform (3 samples, 0.01%)</title><rect x="99.8385%" y="1973" width="0.0113%" height="15" fill="rgb(235,75,41)" fg:x="26584" fg:w="3"/><text x="100.0885%" y="1983.50"></text></g><g><title>__pthread_once_slow (3 samples, 0.01%)</title><rect x="99.8385%" y="1957" width="0.0113%" height="15" fill="rgb(213,86,9)" fg:x="26584" fg:w="3"/><text x="100.0885%" y="1967.50"></text></g><g><title>__gconv_read_conf (3 samples, 0.01%)</title><rect x="99.8385%" y="1941" width="0.0113%" height="15" fill="rgb(238,127,51)" fg:x="26584" fg:w="3"/><text x="100.0885%" y="1951.50"></text></g><g><title>read_conf_file.isra.0 (3 samples, 0.01%)</title><rect x="99.8385%" y="1925" width="0.0113%" height="15" fill="rgb(215,2,54)" fg:x="26584" fg:w="3"/><text x="100.0885%" y="1935.50"></text></g><g><title>extend_buffers (3 samples, 0.01%)</title><rect x="99.8610%" y="1941" width="0.0113%" height="15" fill="rgb(245,80,6)" fg:x="26590" fg:w="3"/><text x="100.1110%" y="1951.50"></text></g><g><title>__re_search (9 samples, 0.03%)</title><rect x="99.8498%" y="1989" width="0.0338%" height="15" fill="rgb(233,106,42)" fg:x="26587" fg:w="9"/><text x="100.0998%" y="1999.50"></text></g><g><title>re_search_stub (9 samples, 0.03%)</title><rect x="99.8498%" y="1973" width="0.0338%" height="15" fill="rgb(244,86,38)" fg:x="26587" fg:w="9"/><text x="100.0998%" y="1983.50"></text></g><g><title>re_search_internal (9 samples, 0.03%)</title><rect x="99.8498%" y="1957" width="0.0338%" height="15" fill="rgb(242,167,7)" fg:x="26587" fg:w="9"/><text x="100.0998%" y="1967.50"></text></g><g><title>re_string_reconstruct (3 samples, 0.01%)</title><rect x="99.8723%" y="1941" width="0.0113%" height="15" fill="rgb(218,216,3)" fg:x="26593" fg:w="3"/><text x="100.1223%" y="1951.50"></text></g><g><title>build_wcs_buffer (3 samples, 0.01%)</title><rect x="99.8723%" y="1925" width="0.0113%" height="15" fill="rgb(206,136,36)" fg:x="26593" fg:w="3"/><text x="100.1223%" y="1935.50"></text></g><g><title>__mbrtowc (3 samples, 0.01%)</title><rect x="99.8723%" y="1909" width="0.0113%" height="15" fill="rgb(206,206,15)" fg:x="26593" fg:w="3"/><text x="100.1223%" y="1919.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (15 samples, 0.06%)</title><rect x="99.8385%" y="2085" width="0.0563%" height="15" fill="rgb(207,163,34)" fg:x="26584" fg:w="15"/><text x="100.0885%" y="2095.50"></text></g><g><title>__libc_start_call_main (15 samples, 0.06%)</title><rect x="99.8385%" y="2069" width="0.0563%" height="15" fill="rgb(240,127,22)" fg:x="26584" fg:w="15"/><text x="100.0885%" y="2079.50"></text></g><g><title>main (15 samples, 0.06%)</title><rect x="99.8385%" y="2053" width="0.0563%" height="15" fill="rgb(227,49,5)" fg:x="26584" fg:w="15"/><text x="100.0885%" y="2063.50"></text></g><g><title>process_files (12 samples, 0.05%)</title><rect x="99.8498%" y="2037" width="0.0451%" height="15" fill="rgb(231,8,6)" fg:x="26587" fg:w="12"/><text x="100.0998%" y="2047.50"></text></g><g><title>execute_program (12 samples, 0.05%)</title><rect x="99.8498%" y="2021" width="0.0451%" height="15" fill="rgb(223,21,24)" fg:x="26587" fg:w="12"/><text x="100.0998%" y="2031.50"></text></g><g><title>match_regex (12 samples, 0.05%)</title><rect x="99.8498%" y="2005" width="0.0451%" height="15" fill="rgb(244,44,52)" fg:x="26587" fg:w="12"/><text x="100.0998%" y="2015.50"></text></g><g><title>dfaexec_main (3 samples, 0.01%)</title><rect x="99.8836%" y="1989" width="0.0113%" height="15" fill="rgb(207,73,28)" fg:x="26596" fg:w="3"/><text x="100.1336%" y="1999.50"></text></g><g><title>sed (17 samples, 0.06%)</title><rect x="99.8385%" y="2117" width="0.0638%" height="15" fill="rgb(234,215,10)" fg:x="26584" fg:w="17"/><text x="100.0885%" y="2127.50"></text></g><g><title>_start (17 samples, 0.06%)</title><rect x="99.8385%" y="2101" width="0.0638%" height="15" fill="rgb(236,85,3)" fg:x="26584" fg:w="17"/><text x="100.0885%" y="2111.50"></text></g><g><title>__GI___fread_unlocked (3 samples, 0.01%)</title><rect x="99.9061%" y="1989" width="0.0113%" height="15" fill="rgb(236,102,39)" fg:x="26602" fg:w="3"/><text x="100.1561%" y="1999.50"></text></g><g><title>_IO_file_xsgetn (3 samples, 0.01%)</title><rect x="99.9061%" y="1973" width="0.0113%" height="15" fill="rgb(243,50,8)" fg:x="26602" fg:w="3"/><text x="100.1561%" y="1983.50"></text></g><g><title>fillbuf (5 samples, 0.02%)</title><rect x="99.9024%" y="2005" width="0.0188%" height="15" fill="rgb(207,111,4)" fg:x="26601" fg:w="5"/><text x="100.1524%" y="2015.50"></text></g><g><title>compare (7 samples, 0.03%)</title><rect x="99.9249%" y="1893" width="0.0263%" height="15" fill="rgb(230,52,42)" fg:x="26607" fg:w="7"/><text x="100.1749%" y="1903.50"></text></g><g><title>xmemcoll0 (6 samples, 0.02%)</title><rect x="99.9286%" y="1877" width="0.0225%" height="15" fill="rgb(252,178,50)" fg:x="26608" fg:w="6"/><text x="100.1786%" y="1887.50"></text></g><g><title>strcoll_loop (6 samples, 0.02%)</title><rect x="99.9286%" y="1861" width="0.0225%" height="15" fill="rgb(234,46,35)" fg:x="26608" fg:w="6"/><text x="100.1786%" y="1871.50"></text></g><g><title>__strcoll_l (6 samples, 0.02%)</title><rect x="99.9286%" y="1845" width="0.0225%" height="15" fill="rgb(228,69,37)" fg:x="26608" fg:w="6"/><text x="100.1786%" y="1855.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (22 samples, 0.08%)</title><rect x="99.9024%" y="2085" width="0.0826%" height="15" fill="rgb(221,21,11)" fg:x="26601" fg:w="22"/><text x="100.1524%" y="2095.50"></text></g><g><title>__libc_start_call_main (22 samples, 0.08%)</title><rect x="99.9024%" y="2069" width="0.0826%" height="15" fill="rgb(223,56,9)" fg:x="26601" fg:w="22"/><text x="100.1524%" y="2079.50"></text></g><g><title>main (22 samples, 0.08%)</title><rect x="99.9024%" y="2053" width="0.0826%" height="15" fill="rgb(234,30,19)" fg:x="26601" fg:w="22"/><text x="100.1524%" y="2063.50"></text></g><g><title>launch_program (22 samples, 0.08%)</title><rect x="99.9024%" y="2037" width="0.0826%" height="15" fill="rgb(211,64,54)" fg:x="26601" fg:w="22"/><text x="100.1524%" y="2047.50"></text></g><g><title>single_binary_main_sort (22 samples, 0.08%)</title><rect x="99.9024%" y="2021" width="0.0826%" height="15" fill="rgb(250,189,5)" fg:x="26601" fg:w="22"/><text x="100.1524%" y="2031.50"></text></g><g><title>sortlines (17 samples, 0.06%)</title><rect x="99.9211%" y="2005" width="0.0638%" height="15" fill="rgb(214,180,13)" fg:x="26606" fg:w="17"/><text x="100.1711%" y="2015.50"></text></g><g><title>sequential_sort (17 samples, 0.06%)</title><rect x="99.9211%" y="1989" width="0.0638%" height="15" fill="rgb(238,40,40)" fg:x="26606" fg:w="17"/><text x="100.1711%" y="1999.50"></text></g><g><title>sequential_sort (17 samples, 0.06%)</title><rect x="99.9211%" y="1973" width="0.0638%" height="15" fill="rgb(214,101,38)" fg:x="26606" fg:w="17"/><text x="100.1711%" y="1983.50"></text></g><g><title>sequential_sort (17 samples, 0.06%)</title><rect x="99.9211%" y="1957" width="0.0638%" height="15" fill="rgb(242,65,53)" fg:x="26606" fg:w="17"/><text x="100.1711%" y="1967.50"></text></g><g><title>sequential_sort (17 samples, 0.06%)</title><rect x="99.9211%" y="1941" width="0.0638%" height="15" fill="rgb(230,22,45)" fg:x="26606" fg:w="17"/><text x="100.1711%" y="1951.50"></text></g><g><title>sequential_sort (17 samples, 0.06%)</title><rect x="99.9211%" y="1925" width="0.0638%" height="15" fill="rgb(223,77,1)" fg:x="26606" fg:w="17"/><text x="100.1711%" y="1935.50"></text></g><g><title>sequential_sort (16 samples, 0.06%)</title><rect x="99.9249%" y="1909" width="0.0601%" height="15" fill="rgb(227,33,37)" fg:x="26607" fg:w="16"/><text x="100.1749%" y="1919.50"></text></g><g><title>sequential_sort (9 samples, 0.03%)</title><rect x="99.9512%" y="1893" width="0.0338%" height="15" fill="rgb(224,148,39)" fg:x="26614" fg:w="9"/><text x="100.2012%" y="1903.50"></text></g><g><title>sequential_sort (8 samples, 0.03%)</title><rect x="99.9549%" y="1877" width="0.0300%" height="15" fill="rgb(232,212,39)" fg:x="26615" fg:w="8"/><text x="100.2049%" y="1887.50"></text></g><g><title>sequential_sort (6 samples, 0.02%)</title><rect x="99.9624%" y="1861" width="0.0225%" height="15" fill="rgb(251,172,7)" fg:x="26617" fg:w="6"/><text x="100.2124%" y="1871.50"></text></g><g><title>sequential_sort (5 samples, 0.02%)</title><rect x="99.9662%" y="1845" width="0.0188%" height="15" fill="rgb(219,39,9)" fg:x="26618" fg:w="5"/><text x="100.2162%" y="1855.50"></text></g><g><title>compare (5 samples, 0.02%)</title><rect x="99.9662%" y="1829" width="0.0188%" height="15" fill="rgb(228,118,14)" fg:x="26618" fg:w="5"/><text x="100.2162%" y="1839.50"></text></g><g><title>xmemcoll0 (5 samples, 0.02%)</title><rect x="99.9662%" y="1813" width="0.0188%" height="15" fill="rgb(207,140,10)" fg:x="26618" fg:w="5"/><text x="100.2162%" y="1823.50"></text></g><g><title>strcoll_loop (5 samples, 0.02%)</title><rect x="99.9662%" y="1797" width="0.0188%" height="15" fill="rgb(227,111,53)" fg:x="26618" fg:w="5"/><text x="100.2162%" y="1807.50"></text></g><g><title>__strcoll_l (5 samples, 0.02%)</title><rect x="99.9662%" y="1781" width="0.0188%" height="15" fill="rgb(216,165,16)" fg:x="26618" fg:w="5"/><text x="100.2162%" y="1791.50"></text></g><g><title>all (26,627 samples, 100%)</title><rect x="0.0000%" y="2133" width="100.0000%" height="15" fill="rgb(226,111,18)" fg:x="0" fg:w="26627"/><text x="0.2500%" y="2143.50"></text></g><g><title>sort (26 samples, 0.10%)</title><rect x="99.9024%" y="2117" width="0.0976%" height="15" fill="rgb(251,27,17)" fg:x="26601" fg:w="26"/><text x="100.1524%" y="2127.50"></text></g><g><title>_start (26 samples, 0.10%)</title><rect x="99.9024%" y="2101" width="0.0976%" height="15" fill="rgb(254,69,9)" fg:x="26601" fg:w="26"/><text x="100.1524%" y="2111.50"></text></g><g><title>_dl_start (4 samples, 0.02%)</title><rect x="99.9850%" y="2085" width="0.0150%" height="15" fill="rgb(234,140,37)" fg:x="26623" fg:w="4"/><text x="100.2350%" y="2095.50"></text></g><g><title>_dl_sysdep_start (4 samples, 0.02%)</title><rect x="99.9850%" y="2069" width="0.0150%" height="15" fill="rgb(220,93,8)" fg:x="26623" fg:w="4"/><text x="100.2350%" y="2079.50"></text></g><g><title>dl_main (4 samples, 0.02%)</title><rect x="99.9850%" y="2053" width="0.0150%" height="15" fill="rgb(236,113,3)" fg:x="26623" fg:w="4"/><text x="100.2350%" y="2063.50"></text></g><g><title>_dl_relocate_object (3 samples, 0.01%)</title><rect x="99.9887%" y="2037" width="0.0113%" height="15" fill="rgb(234,108,23)" fg:x="26624" fg:w="3"/><text x="100.2387%" y="2047.50"></text></g></svg></svg>