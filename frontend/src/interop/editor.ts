/* eslint-disable func-names */

import { JsMessageType } from "@/interop/messages";
import { createSubscriptionRouter, SubscriptionRouter } from "@/interop/subscription-router";

export type WasmRawInstance = typeof import("@/../wasm/pkg");
export type WasmEditorInstance = InstanceType<WasmRawInstance["JsEditorHandle"]>;

// Should be called after running `initWasm()` and its promising resolving
// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
export function createEditor() {
	// Functions from `api.rs` defined directly on the WASM module, not the editor instance (generated by wasm-bindgen)
	const raw: WasmRawInstance = getWasmInstance();

	// Functions from `api.rs` that art part of the editor instance (generated by wasm-bindgen)
	const instance: WasmEditorInstance = new raw.JsEditorHandle(invokeJsMessageSubscription);
	function invokeJsMessageSubscription(messageType: JsMessageType, data: Record<string, unknown>): void {
		subscriptions.handleJsMessage(messageType, data, raw, instance);
	}

	// Allows subscribing to messages in JS that are sent from the WASM backend
	const subscriptions: SubscriptionRouter = createSubscriptionRouter();

	return {
		raw,
		instance,
		subscriptions,
	};
}
export type Editor = Readonly<ReturnType<typeof createEditor>>;

// `wasmImport` starts uninitialized because its initialization needs to occur asynchronously, and thus needs to occur by manually calling and awaiting `initWasm()`
let wasmImport: WasmRawInstance | null = null;

// Should be called asynchronously before `createEditor()`
export async function initWasm(): Promise<void> {
	// Skip if the wasm module is already initialized
	if (wasmImport !== null) return;

	// Import the wasm module JS bindings and wrap them in the panic proxy
	wasmImport = await import("@/../wasm/pkg").then(panicProxy);

	// Provide a random starter seed which must occur after initializing the WASM module, since WASM can't generate its own random numbers
	const randomSeed = BigInt(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER));
	wasmImport?.set_random_seed(randomSeed);
}

export function getWasmInstance(): WasmRawInstance {
	if (wasmImport) return wasmImport;
	throw new Error("Editor WASM backend was not initialized at application startup");
}

// This works by proxying every function call and wrapping a try-catch block to filter out redundant and confusing
// `RuntimeError: unreachable` exceptions that would normally be printed in the browser's JS console upon a panic.
function panicProxy<T extends object>(module: T): T {
	const proxyHandler = {
		get(target: T, propKey: string | symbol, receiver: unknown): unknown {
			const targetValue = Reflect.get(target, propKey, receiver);

			// Keep the original value being accessed if it isn't a function
			const isFunction = typeof targetValue === "function";
			if (!isFunction) return targetValue;

			// Special handling to wrap the return of a constructor in the proxy
			const isClass = isFunction && /^\s*class\s+/.test(targetValue.toString());
			if (isClass) {
				return function (...args: unknown[]): unknown {
					// eslint-disable-next-line new-cap
					const result = new targetValue(...args);
					return panicProxy(result);
				};
			}

			// Replace the original function with a wrapper function that runs the original in a try-catch block
			return function (...args: unknown[]): unknown {
				let result;
				try {
					// @ts-expect-error TypeScript does not know what `this` is, since it should be able to be anything
					result = targetValue.apply(this, args);
				} catch (err) {
					// Suppress `unreachable` WebAssembly.RuntimeError exceptions
					if (!`${err}`.startsWith("RuntimeError: unreachable")) throw err;
				}
				return result;
			};
		},
	};

	return new Proxy<T>(module, proxyHandler);
}
