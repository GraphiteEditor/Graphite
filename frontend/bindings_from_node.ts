// This file has been generated by Specta. DO NOT EDIT.

export type ActionKeys = { Action: any } | { keys: LayoutKeysGroup }

export type BoxSelection = { startX: number; startY: number; endX: number; endY: number }

export type BreadcrumbTrailButtons = { labels: string[]; disabled: boolean; tooltip: string }

export type CheckboxInput = { checked: boolean; disabled: boolean; icon: string; tooltip: string }

/**
 * Structure that represents a color.
 * Internally alpha is stored as `f32` that ranges from `0.0` (transparent) to `1.0` (opaque).
 * The other components (RGB) are stored as `f32` that range from `0.0` up to `f32::MAX`,
 * the values encode the brightness of each channel proportional to the light intensity in cd/mÂ² (nits) in HDR, and `0.0` (black) to `1.0` (white) in SDR color.
 */
export type Color = { red: number; green: number; blue: number; alpha: number }

export type ColorInput = { value: FillChoice; disabled: boolean; allowNone: boolean; tooltip: string }

export type ContextMenuData = { ToggleLayer: { nodeId: NodeId; currentlyIsNode: boolean } } | "CreateNode"

export type ContextMenuInformation = { contextMenuCoordinates: [number, number]; contextMenuData: ContextMenuData }

export type Curve = { manipulatorGroups: CurveManipulatorGroup[]; firstHandle: [number, number]; lastHandle: [number, number] }

export type CurveInput = { value: Curve; disabled: boolean; tooltip: string }

export type CurveManipulatorGroup = { anchor: [number, number]; handles: [([number, number]), ([number, number])] }

/**
 * The new value of the UI, sent as part of a diff.
 * 
 * An update can represent a single widget or an entire SubLayout, or just a single layout group.
 */
export type DiffUpdate = { subLayout: LayoutGroup[] } | { layoutGroup: LayoutGroup } | { widget: WidgetHolder }

export type DocumentId = number

export type DropdownInput = { entries: MenuListEntry[][]; selectedIndex: number | null; drawIcon: boolean; interactive: boolean; disabled: boolean; tooltip: string }

/**
 * Describes the fill of a layer, but unlike [`Fill`], this doesn't store a [`Gradient`] directly but just its [`GradientStops`].
 * 
 * Can be None, a solid [Color], or a linear/radial [Gradient].
 * 
 * In the future we'll probably also add a pattern fill.
 */
export type FillChoice = "None" | { Solid: Color } | { Gradient: GradientStops }

/**
 * A font type (storing font family and font style and an optional preview URL)
 */
export type Font = { fontFamily: string; fontStyle: string }

export type FontInput = { fontFamily: string; fontStyle: string; isStyle: boolean; disabled: boolean; tooltip: string }

export type FrontendClickTargets = { nodeClickTargets: string[]; layerClickTargets: string[]; portClickTargets: string[]; iconClickTargets: string[]; allNodesBoundingBox: string; importExportsBoundingBox: string; modifyImportExport: string[] }

export type FrontendDocumentDetails = { isAutoSaved: boolean; isSaved: boolean; name: string; id: DocumentId }

export type FrontendGraphDataType = "General" | "Raster" | "VectorData" | "Number" | "Group" | "Artboard"

export type FrontendGraphInput = { dataType: FrontendGraphDataType; name: string; resolvedType: string | null; validTypes: string[]; connectedTo: OutputConnector | null }

export type FrontendGraphOutput = { dataType: FrontendGraphDataType; name: string; resolvedType: string | null; connectedTo: InputConnector[] }

export type FrontendMessage = { DisplayDialog: { title: string; icon: string } } | "DisplayDialogDismiss" | { DisplayDialogPanic: { panicInfo: string } } | { DisplayEditableTextbox: { text: string; lineHeightRatio: number; fontSize: number; color: Color; url: string; transform: [number, number, number, number, number, number]; maxWidth: number | null; maxHeight: number | null } } | { DisplayEditableTextboxTransform: { transform: [number, number, number, number, number, number] } } | "DisplayRemoveEditableTextbox" | { SendUIMetadata: { inputTypeDescriptions: ([string, string])[]; nodeDescriptions: ([string, string])[]; nodeTypes: FrontendNodeType[] } } | { TriggerAboutGraphiteLocalizedCommitDate: { commitDate: string } } | "TriggerDelayedZoomCanvasToFitAll" | { TriggerDownloadImage: { svg: string; name: string; mime: string; size: [number, number] } } | { TriggerDownloadTextFile: { document: string; name: string } } | { TriggerFetchAndOpenDocument: { name: string; filename: string } } | { TriggerFontLoad: { font: Font } } | "TriggerImport" | { TriggerIndexedDbRemoveDocument: { documentId: DocumentId } } | { TriggerIndexedDbWriteDocument: { document: string; details: FrontendDocumentDetails } } | "TriggerLoadFirstAutoSaveDocument" | "TriggerLoadRestAutoSaveDocuments" | "TriggerLoadPreferences" | "TriggerOpenDocument" | "TriggerPaste" | { TriggerSavePreferences: { preferences: PreferencesMessageHandler } } | { TriggerSaveActiveDocument: { documentId: DocumentId } } | "TriggerTextCommit" | { TriggerTextCopy: { copyText: string } } | { TriggerUpgradeDocumentToVectorManipulationFormat: { documentId: DocumentId; documentName: string; documentIsAutoSaved: boolean; documentIsSaved: boolean; documentSerializedContent: string } } | { TriggerVisitLink: { url: string } } | { UpdateActiveDocument: { documentId: DocumentId } } | { UpdateImportsExports: { imports: ([FrontendGraphOutput, number, number])[]; exports: ([FrontendGraphInput, number, number])[]; addImport: [number, number] | null; addExport: [number, number] | null } } | { UpdateInSelectedNetwork: { inSelectedNetwork: boolean } } | { UpdateBox: { box: BoxSelection | null } } | { UpdateContextMenuInformation: { contextMenuInformation: ContextMenuInformation | null } } | { UpdateClickTargets: { clickTargets: FrontendClickTargets | null } } | { UpdateGraphViewOverlay: { open: boolean } } | { UpdateImportReorderIndex: { importIndex: number | null } } | { UpdateExportReorderIndex: { exportIndex: number | null } } | { UpdateLayerWidths: { layerWidths: Partial<{ [key in NodeId]: number }>; chainWidths: Partial<{ [key in NodeId]: number }>; hasLeftInputWire: Partial<{ [key in NodeId]: boolean }> } } | { UpdateDialogButtons: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateDialogColumn1: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateDialogColumn2: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateDocumentArtwork: { svg: string } } | { UpdateDocumentBarLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateDocumentLayerDetails: { data: LayerPanelEntry } } | { UpdateDocumentLayerStructure: { dataBuffer: RawBuffer } } | { UpdateDocumentLayerStructureJs: { dataBuffer: JsRawBuffer } } | { UpdateDocumentModeLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateDocumentRulers: { origin: [number, number]; spacing: number; interval: number; visible: boolean } } | { UpdateDocumentScrollbars: { position: [number, number]; size: [number, number]; multiplier: [number, number] } } | { UpdateEyedropperSamplingState: { mousePosition: [number, number] | null; primaryColor: string; secondaryColor: string; setColorChoice: string | null } } | { UpdateGraphFadeArtwork: { percentage: number } } | { UpdateInputHints: { hintData: HintData } } | { UpdateLayersPanelControlBarLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateMenuBarLayout: { layoutTarget: LayoutTarget; layout: MenuBarEntry[] } } | { UpdateMouseCursor: { cursor: MouseCursorIcon } } | { UpdateNodeGraph: { nodes: FrontendNode[]; wires: FrontendNodeWire[]; wiresDirectNotGridAligned: boolean } } | { UpdateNodeGraphControlBarLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateNodeGraphSelection: { selected: NodeId[] } } | { UpdateNodeGraphTransform: { transform: Transform } } | { UpdateNodeThumbnail: { id: NodeId; value: string } } | { UpdateOpenDocumentsList: { openDocuments: FrontendDocumentDetails[] } } | { UpdatePropertyPanelSectionsLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateToolOptionsLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateToolShelfLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateWirePathInProgress: { wirePath: WirePath | null } } | { UpdateWorkingColorsLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } }

export type FrontendNode = { id: NodeId; isLayer: boolean; canBeLayer: boolean; reference: string | null; displayName: string; primaryInput: FrontendGraphInput | null; exposedInputs: FrontendGraphInput[]; primaryOutput: FrontendGraphOutput | null; exposedOutputs: FrontendGraphOutput[]; position: [number, number]; visible: boolean; locked: boolean; previewed: boolean; errors: string | null; uiOnly: boolean }

export type FrontendNodeType = { name: string; category: string }

export type FrontendNodeWire = { wireStart: OutputConnector; wireEnd: InputConnector; dashed: boolean }

/**
 * A list of colors associated with positions (in the range 0 to 1) along a gradient.
 */
export type GradientStops = ([number, Color])[]

export type GraphWireStyle = "Direct" | "GridAligned"

export type HintData = HintGroup[]

export type HintGroup = HintInfo[]

export type HintInfo = { 
/**
 * A `KeysGroup` specifies all the keys pressed simultaneously to perform an action (like "Ctrl C" to copy).
 * Usually at most one is given, but less commonly, multiple can be used to describe additional hotkeys not used simultaneously (like the four different arrow keys to nudge a layer).
 */
keyGroups: LayoutKeysGroup[]; 
/**
 * `None` means that the regular `key_groups` should be used for all platforms, `Some` is an override for a Mac-only input hint.
 */
keyGroupsMac: LayoutKeysGroup[] | null; 
/**
 * An optional `MouseMotion` that can indicate the mouse action, like which mouse button is used and whether a drag occurs.
 * No such icon is shown if `None` is given, and it can be combined with `key_groups` if desired.
 */
mouse: MouseMotion | null; 
/**
 * The text describing what occurs with this input combination.
 */
label: string; 
/**
 * Draws a prepended "+" symbol which indicates that this is a refinement upon a previous hint in the group.
 */
plus: boolean; 
/**
 * Draws a prepended "/" symbol which indicates that this is an alternative to a previous hint in the group.
 */
slash: boolean }

export type IconButton = { icon: string; hoverIcon: string | null; size: number; disabled: boolean; active: boolean; tooltip: string }

export type IconLabel = { icon: string; disabled: boolean; tooltip: string }

export type ImageButton = { image: string; width: string | null; height: string | null; tooltip: string }

/**
 * Represents an input connector with index based on the [`DocumentNode::inputs`] index, not the visible input index
 */
export type InputConnector = { node: { nodeId: NodeId; inputIndex: number } } | { export: number }

/**
 * This widget allows for the flexible use of the layout system.
 * In a custom layout, one can define a widget that is just used to trigger code on the backend.
 * This is used in MenuLayout to pipe the triggering of messages from the frontend to backend.
 */
export type InvisibleStandinInput = Record<string, never>

export type JsRawBuffer = number[]

export type LayerPanelEntry = { id: NodeId; alias: string; tooltip: string; inSelectedNetwork: boolean; childrenAllowed: boolean; childrenPresent: boolean; expanded: boolean; depth: number; visible: boolean; parentsVisible: boolean; unlocked: boolean; parentsUnlocked: boolean; parentId: NodeId | null; selected: boolean; ancestorOfSelected: boolean; descendantOfSelected: boolean }

export type LayoutGroup = { column: { columnWidgets: WidgetHolder[] } } | { row: { rowWidgets: WidgetHolder[] } } | { section: { name: string; visible: boolean; pinned: boolean; id: number; layout: LayoutGroup[] } }

export type LayoutKey = { key: string; label: string }

export type LayoutKeysGroup = LayoutKey[]

export type LayoutTarget = 
/**
 * Contains the action buttons at the bottom of the dialog. Must be shown with the `FrontendMessage::DisplayDialog` message.
 */
"DialogButtons" | 
/**
 * Contains the contents of the dialog's primary column. Must be shown with the `FrontendMessage::DisplayDialog` message.
 */
"DialogColumn1" | 
/**
 * Contains the contents of the dialog's secondary column (often blank). Must be shown with the `FrontendMessage::DisplayDialog` message.
 */
"DialogColumn2" | 
/**
 * Contains the widgets located directly above the canvas to the right, for example the zoom in and out buttons.
 */
"DocumentBar" | 
/**
 * Contains the dropdown for design / select / guide mode found on the top left of the canvas.
 */
"DocumentMode" | 
/**
 * Options for opacity seen at the top of the Layers panel.
 */
"LayersPanelControlBar" | 
/**
 * The dropdown menu at the very top of the application: File, Edit, etc.
 */
"MenuBar" | 
/**
 * Bar at the top of the node graph containing the location and the "Preview" and "Hide" buttons.
 */
"NodeGraphControlBar" | 
/**
 * The body of the Properties panel containing many collapsable sections.
 */
"PropertiesSections" | 
/**
 * The bar directly above the canvas, left-aligned and to the right of the document mode dropdown.
 */
"ToolOptions" | 
/**
 * The vertical buttons for all of the tools on the left of the canvas.
 */
"ToolShelf" | 
/**
 * The color swatch for the working colors and a flip and reset button found at the bottom of the tool shelf.
 */
"WorkingColors" | "LayoutTargetLength"

export type MenuBarEntry = { label: string; icon: string | null; shortcut: ActionKeys | null; action: WidgetHolder; children: MenuBarEntryChildren; disabled: boolean }

export type MenuBarEntryChildren = MenuBarEntry[][]

export type MenuListEntry = { value: string; label: string; icon: string; shortcut: string[]; shortcutRequiresLock: boolean; disabled: boolean; children: MenuListEntry[][] }

export type MouseCursorIcon = "Default" | "None" | "ZoomIn" | "ZoomOut" | "Grabbing" | "Crosshair" | "Text" | "Move" | "NSResize" | "EWResize" | "NESWResize" | "NWSEResize" | "Rotate"

export type MouseMotion = "None" | "Lmb" | "Rmb" | "Mmb" | "ScrollUp" | "ScrollDown" | "Drag" | "LmbDouble" | "LmbDrag" | "RmbDrag" | "RmbDouble" | "MmbDrag"

export type NodeCatalog = { disabled: boolean }

export type NodeId = number

export type NumberInput = { label: string; tooltip: string; disabled: boolean; value: number | null; min: number | null; max: number | null; isInteger: boolean; displayDecimalPlaces: number; unit: string; unitIsHiddenWhenEditing: boolean; mode: NumberInputMode; incrementBehavior: NumberInputIncrementBehavior; step: number; rangeMin: number | null; rangeMax: number | null; minWidth: number }

export type NumberInputIncrementBehavior = "Add" | "Multiply" | "Callback"

export type NumberInputMode = "Increment" | "Range"

/**
 * Represents an output connector
 */
export type OutputConnector = { node: { nodeId: NodeId; outputIndex: number } } | { import: number }

export type ParameterExposeButton = { exposed: boolean; dataType: FrontendGraphDataType; tooltip: string }

export type PivotInput = { position: PivotPosition; disabled: boolean }

export type PivotPosition = "None" | "TopLeft" | "TopCenter" | "TopRight" | "CenterLeft" | "Center" | "CenterRight" | "BottomLeft" | "BottomCenter" | "BottomRight"

export type PopoverButton = { style: string | null; icon: string | null; disabled: boolean; tooltip: string; popoverLayout: LayoutGroup[]; popoverMinWidth: number | null }

export type PreferencesMessageHandler = { imaginate_server_hostname: string; imaginate_refresh_frequency: number; selection_mode: SelectionMode; zoom_with_scroll: boolean; use_vello: boolean; vector_meshes: boolean; graph_wire_style: GraphWireStyle }

export type RadioEntryData = { value: string; label: string; icon: string; tooltip: string }

export type RadioInput = { entries: RadioEntryData[]; disabled: boolean; selectedIndex: number | null; minWidth: number }

export type RawBuffer = number[]

export type SelectionMode = "Touched" | "Enclosed" | "Directional"

export type Separator = { direction: SeparatorDirection; type: SeparatorType }

export type SeparatorDirection = "Horizontal" | "Vertical"

export type SeparatorType = "Related" | "Unrelated" | "Section"

export type TextAreaInput = { value: string; label: string | null; disabled: boolean; tooltip: string }

export type TextButton = { label: string; icon: string | null; hoverIcon: string | null; flush: boolean; emphasized: boolean; minWidth: number; disabled: boolean; tooltip: string; menuListChildren: MenuListEntry[][] }

export type TextInput = { value: string; label: string | null; disabled: boolean; tooltip: string; centered: boolean; minWidth: number }

export type TextLabel = { disabled: boolean; bold: boolean; italic: boolean; centerAlign: boolean; tableAlign: boolean; multiline: boolean; minWidth: number; tooltip: string; value: string }

export type Transform = { scale: number; x: number; y: number }

export type Widget = { BreadcrumbTrailButtons: BreadcrumbTrailButtons } | { CheckboxInput: CheckboxInput } | { ColorInput: ColorInput } | { CurveInput: CurveInput } | { DropdownInput: DropdownInput } | { FontInput: FontInput } | { IconButton: IconButton } | { IconLabel: IconLabel } | { ImageButton: ImageButton } | { InvisibleStandinInput: InvisibleStandinInput } | { NodeCatalog: NodeCatalog } | { NumberInput: NumberInput } | { ParameterExposeButton: ParameterExposeButton } | { PivotInput: PivotInput } | { PopoverButton: PopoverButton } | { RadioInput: RadioInput } | { Separator: Separator } | { TextAreaInput: TextAreaInput } | { TextButton: TextButton } | { TextInput: TextInput } | { TextLabel: TextLabel } | { WorkingColorsInput: WorkingColorsInput }

/**
 * A single change to part of the UI, containing the location of the change and the new value.
 */
export type WidgetDiff = { 
/**
 * A path to the change
 * e.g. [0, 1, 2] in the properties panel is the first section, second row and third widget.
 * An empty path [] shows that the entire panel has changed and is sent when the UI is first created.
 */
widgetPath: number[]; 
/**
 * What the specified part of the UI has changed to.
 */
newValue: DiffUpdate }

export type WidgetHolder = { widgetId: WidgetId; widget: Widget }

export type WidgetId = number

export type WirePath = { pathString: string; dataType: FrontendGraphDataType; thick: boolean; dashed: boolean }

export type WorkingColorsInput = { primary: Color; secondary: Color }

