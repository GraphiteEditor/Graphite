[package]
name = "graphite-editor"
publish = false
version = "0.0.0"
rust-version = "1.66.0"
authors = ["Graphite Authors <contact@graphite.rs>"]
edition = "2021"
readme = "../README.md"
homepage = "https://graphite.rs"
repository = "https://github.com/GraphiteEditor/Graphite"
license = "Apache-2.0"

[features]
default = ["wasm"]
gpu = [
	"interpreted-executor/gpu",
	"graphene-std/gpu",
	"graphene-core/gpu",
	"wgpu-executor",
	"gpu-executor",
]
quantization = [
	"graphene-std/quantization",
	"interpreted-executor/quantization",
]
wasm = ["wasm-bindgen", "graphene-std/wasm", "wasm-bindgen-futures"]

[dependencies]
js-sys = "0.3.67"
log = { workspace = true }
bitflags = { workspace = true }
thiserror = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
graphite-proc-macros = { path = "../proc-macros" }
bezier-rs = { workspace = true }
glam = { workspace = true, features = ["serde", "debug-glam-assert"] }
derivative = { workspace = true }
specta.workspace = true
image = { workspace = true, features = ["bmp", "png"] }
graph-craft = { path = "../node-graph/graph-craft" }
wgpu-executor = { path = "../node-graph/wgpu-executor", optional = true }
gpu-executor = { path = "../node-graph/gpu-executor", optional = true }
interpreted-executor = { path = "../node-graph/interpreted-executor" }
dyn-any = { workspace = true }
graphene-core = { path = "../node-graph/gcore" }
graphene-std = { path = "../node-graph/gstd", features = ["serde"] }
num_enum = "0.6.1"
usvg = { workspace = true }
wasm-bindgen = { workspace = true, optional = true }
wasm-bindgen-futures = { workspace = true, optional = true }
# Remove when `core::cell::LazyCell` is stabilized (<https://doc.rust-lang.org/core/cell/struct.LazyCell.html>)
once_cell = "1.13.0"
web-sys = { workspace = true, features = [
	"Document",
	"DomRect",
	"Element",
	"HtmlCanvasElement",
	"CanvasRenderingContext2d",
	"TextMetrics",
] }


[dev-dependencies]
env_logger = "0.10"
futures = { workspace = true }
tokio = { workspace = true, features = ["rt", "macros"] }

[lints.rust]
# TODO: figure out why we check these features when they do not exist
unexpected_cfgs = { level = "warn", check-cfg = [
	'cfg(feature, values("resvg", "vello"))',
] }
